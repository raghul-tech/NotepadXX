// Generated from SQL/MySQLParser.g4 by ANTLR 4.13.2
package com.notepadxx.antlr.sql;

import java.util.List;

import org.antlr.v4.runtime.FailedPredicateException;
import org.antlr.v4.runtime.NoViableAltException;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.RuleContext;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.TerminalNode;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class MySQLParser extends MySQLParserBase {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		NOT2_SYMBOL=1, CONCAT_PIPES_SYMBOL=2, INT_NUMBER=3, LONG_NUMBER=4, ULONGLONG_NUMBER=5,
		EQUAL_OPERATOR=6, ASSIGN_OPERATOR=7, NULL_SAFE_EQUAL_OPERATOR=8, GREATER_OR_EQUAL_OPERATOR=9,
		GREATER_THAN_OPERATOR=10, LESS_OR_EQUAL_OPERATOR=11, LESS_THAN_OPERATOR=12,
		NOT_EQUAL_OPERATOR=13, PLUS_OPERATOR=14, MINUS_OPERATOR=15, MULT_OPERATOR=16,
		DIV_OPERATOR=17, MOD_OPERATOR=18, LOGICAL_NOT_OPERATOR=19, BITWISE_NOT_OPERATOR=20,
		SHIFT_LEFT_OPERATOR=21, SHIFT_RIGHT_OPERATOR=22, LOGICAL_AND_OPERATOR=23,
		BITWISE_AND_OPERATOR=24, BITWISE_XOR_OPERATOR=25, LOGICAL_OR_OPERATOR=26,
		BITWISE_OR_OPERATOR=27, DOT_SYMBOL=28, COMMA_SYMBOL=29, SEMICOLON_SYMBOL=30,
		COLON_SYMBOL=31, OPEN_PAR_SYMBOL=32, CLOSE_PAR_SYMBOL=33, OPEN_CURLY_SYMBOL=34,
		CLOSE_CURLY_SYMBOL=35, UNDERLINE_SYMBOL=36, JSON_SEPARATOR_SYMBOL=37,
		JSON_UNQUOTED_SEPARATOR_SYMBOL=38, AT_SIGN_SYMBOL=39, AT_TEXT_SUFFIX=40,
		AT_AT_SIGN_SYMBOL=41, NULL2_SYMBOL=42, PARAM_MARKER=43, HEX_NUMBER=44,
		BIN_NUMBER=45, DECIMAL_NUMBER=46, FLOAT_NUMBER=47, ACCESSIBLE_SYMBOL=48,
		ACCOUNT_SYMBOL=49, ACTION_SYMBOL=50, ADD_SYMBOL=51, ADDDATE_SYMBOL=52,
		AFTER_SYMBOL=53, AGAINST_SYMBOL=54, AGGREGATE_SYMBOL=55, ALGORITHM_SYMBOL=56,
		ALL_SYMBOL=57, ALTER_SYMBOL=58, ALWAYS_SYMBOL=59, ANALYZE_SYMBOL=60, AND_SYMBOL=61,
		ANY_SYMBOL=62, AS_SYMBOL=63, ASC_SYMBOL=64, ASCII_SYMBOL=65, ASENSITIVE_SYMBOL=66,
		AT_SYMBOL=67, AUTOEXTEND_SIZE_SYMBOL=68, AUTO_INCREMENT_SYMBOL=69, AVG_ROW_LENGTH_SYMBOL=70,
		AVG_SYMBOL=71, BACKUP_SYMBOL=72, BEFORE_SYMBOL=73, BEGIN_SYMBOL=74, BETWEEN_SYMBOL=75,
		BIGINT_SYMBOL=76, BINARY_SYMBOL=77, BINLOG_SYMBOL=78, BIT_AND_SYMBOL=79,
		BIT_OR_SYMBOL=80, BIT_SYMBOL=81, BIT_XOR_SYMBOL=82, BLOB_SYMBOL=83, BLOCK_SYMBOL=84,
		BOOLEAN_SYMBOL=85, BOOL_SYMBOL=86, BOTH_SYMBOL=87, BTREE_SYMBOL=88, BY_SYMBOL=89,
		BYTE_SYMBOL=90, CACHE_SYMBOL=91, CALL_SYMBOL=92, CASCADE_SYMBOL=93, CASCADED_SYMBOL=94,
		CASE_SYMBOL=95, CAST_SYMBOL=96, CATALOG_NAME_SYMBOL=97, CHAIN_SYMBOL=98,
		CHANGE_SYMBOL=99, CHANGED_SYMBOL=100, CHANNEL_SYMBOL=101, CHARSET_SYMBOL=102,
		CHAR_SYMBOL=103, CHECKSUM_SYMBOL=104, CHECK_SYMBOL=105, CIPHER_SYMBOL=106,
		CLASS_ORIGIN_SYMBOL=107, CLIENT_SYMBOL=108, CLOSE_SYMBOL=109, COALESCE_SYMBOL=110,
		CODE_SYMBOL=111, COLLATE_SYMBOL=112, COLLATION_SYMBOL=113, COLUMNS_SYMBOL=114,
		COLUMN_SYMBOL=115, COLUMN_NAME_SYMBOL=116, COLUMN_FORMAT_SYMBOL=117, COMMENT_SYMBOL=118,
		COMMITTED_SYMBOL=119, COMMIT_SYMBOL=120, COMPACT_SYMBOL=121, COMPLETION_SYMBOL=122,
		COMPRESSED_SYMBOL=123, COMPRESSION_SYMBOL=124, CONCURRENT_SYMBOL=125,
		CONDITION_SYMBOL=126, CONNECTION_SYMBOL=127, CONSISTENT_SYMBOL=128, CONSTRAINT_SYMBOL=129,
		CONSTRAINT_CATALOG_SYMBOL=130, CONSTRAINT_NAME_SYMBOL=131, CONSTRAINT_SCHEMA_SYMBOL=132,
		CONTAINS_SYMBOL=133, CONTEXT_SYMBOL=134, CONTINUE_SYMBOL=135, CONVERT_SYMBOL=136,
		COUNT_SYMBOL=137, CPU_SYMBOL=138, CREATE_SYMBOL=139, CROSS_SYMBOL=140,
		CUBE_SYMBOL=141, CURDATE_SYMBOL=142, CURRENT_SYMBOL=143, CURRENT_DATE_SYMBOL=144,
		CURRENT_TIME_SYMBOL=145, CURRENT_USER_SYMBOL=146, CURSOR_SYMBOL=147, CURSOR_NAME_SYMBOL=148,
		CURTIME_SYMBOL=149, DATABASE_SYMBOL=150, DATABASES_SYMBOL=151, DATAFILE_SYMBOL=152,
		DATA_SYMBOL=153, DATETIME_SYMBOL=154, DATE_ADD_SYMBOL=155, DATE_SUB_SYMBOL=156,
		DATE_SYMBOL=157, DAY_HOUR_SYMBOL=158, DAY_MICROSECOND_SYMBOL=159, DAY_MINUTE_SYMBOL=160,
		DAY_SECOND_SYMBOL=161, DAY_SYMBOL=162, DEALLOCATE_SYMBOL=163, DECIMAL_SYMBOL=164,
		DECLARE_SYMBOL=165, DEFAULT_SYMBOL=166, DEFAULT_AUTH_SYMBOL=167, DEFINER_SYMBOL=168,
		DELAYED_SYMBOL=169, DELAY_KEY_WRITE_SYMBOL=170, DELETE_SYMBOL=171, DESC_SYMBOL=172,
		DESCRIBE_SYMBOL=173, DETERMINISTIC_SYMBOL=174, DIAGNOSTICS_SYMBOL=175,
		DIRECTORY_SYMBOL=176, DISABLE_SYMBOL=177, DISCARD_SYMBOL=178, DISK_SYMBOL=179,
		DISTINCT_SYMBOL=180, DIV_SYMBOL=181, DOUBLE_SYMBOL=182, DO_SYMBOL=183,
		DROP_SYMBOL=184, DUAL_SYMBOL=185, DUMPFILE_SYMBOL=186, DUPLICATE_SYMBOL=187,
		DYNAMIC_SYMBOL=188, EACH_SYMBOL=189, ELSE_SYMBOL=190, ELSEIF_SYMBOL=191,
		ENABLE_SYMBOL=192, ENCLOSED_SYMBOL=193, ENCRYPTION_SYMBOL=194, END_SYMBOL=195,
		ENDS_SYMBOL=196, ENGINES_SYMBOL=197, ENGINE_SYMBOL=198, ENUM_SYMBOL=199,
		ERROR_SYMBOL=200, ERRORS_SYMBOL=201, ESCAPED_SYMBOL=202, ESCAPE_SYMBOL=203,
		EVENTS_SYMBOL=204, EVENT_SYMBOL=205, EVERY_SYMBOL=206, EXCHANGE_SYMBOL=207,
		EXECUTE_SYMBOL=208, EXISTS_SYMBOL=209, EXIT_SYMBOL=210, EXPANSION_SYMBOL=211,
		EXPIRE_SYMBOL=212, EXPLAIN_SYMBOL=213, EXPORT_SYMBOL=214, EXTENDED_SYMBOL=215,
		EXTENT_SIZE_SYMBOL=216, EXTRACT_SYMBOL=217, FALSE_SYMBOL=218, FAST_SYMBOL=219,
		FAULTS_SYMBOL=220, FETCH_SYMBOL=221, FILE_SYMBOL=222, FILE_BLOCK_SIZE_SYMBOL=223,
		FILTER_SYMBOL=224, FIRST_SYMBOL=225, FIXED_SYMBOL=226, FLOAT_SYMBOL=227,
		FLUSH_SYMBOL=228, FOLLOWS_SYMBOL=229, FORCE_SYMBOL=230, FOREIGN_SYMBOL=231,
		FOR_SYMBOL=232, FORMAT_SYMBOL=233, FOUND_SYMBOL=234, FROM_SYMBOL=235,
		FULL_SYMBOL=236, FULLTEXT_SYMBOL=237, FUNCTION_SYMBOL=238, GET_SYMBOL=239,
		GENERAL_SYMBOL=240, GENERATED_SYMBOL=241, GROUP_REPLICATION_SYMBOL=242,
		GEOMETRYCOLLECTION_SYMBOL=243, GEOMETRY_SYMBOL=244, GET_FORMAT_SYMBOL=245,
		GLOBAL_SYMBOL=246, GRANT_SYMBOL=247, GRANTS_SYMBOL=248, GROUP_SYMBOL=249,
		GROUP_CONCAT_SYMBOL=250, HANDLER_SYMBOL=251, HASH_SYMBOL=252, HAVING_SYMBOL=253,
		HELP_SYMBOL=254, HIGH_PRIORITY_SYMBOL=255, HOST_SYMBOL=256, HOSTS_SYMBOL=257,
		HOUR_MICROSECOND_SYMBOL=258, HOUR_MINUTE_SYMBOL=259, HOUR_SECOND_SYMBOL=260,
		HOUR_SYMBOL=261, IDENTIFIED_SYMBOL=262, IF_SYMBOL=263, IGNORE_SYMBOL=264,
		IGNORE_SERVER_IDS_SYMBOL=265, IMPORT_SYMBOL=266, INDEXES_SYMBOL=267, INDEX_SYMBOL=268,
		INFILE_SYMBOL=269, INITIAL_SIZE_SYMBOL=270, INNER_SYMBOL=271, INOUT_SYMBOL=272,
		INSENSITIVE_SYMBOL=273, INSERT_SYMBOL=274, INSERT_METHOD_SYMBOL=275, INSTANCE_SYMBOL=276,
		INSTALL_SYMBOL=277, INTERVAL_SYMBOL=278, INTO_SYMBOL=279, INT_SYMBOL=280,
		INVOKER_SYMBOL=281, IN_SYMBOL=282, IO_AFTER_GTIDS_SYMBOL=283, IO_BEFORE_GTIDS_SYMBOL=284,
		IO_SYMBOL=285, IPC_SYMBOL=286, IS_SYMBOL=287, ISOLATION_SYMBOL=288, ISSUER_SYMBOL=289,
		ITERATE_SYMBOL=290, JOIN_SYMBOL=291, JSON_SYMBOL=292, KEYS_SYMBOL=293,
		KEY_BLOCK_SIZE_SYMBOL=294, KEY_SYMBOL=295, KILL_SYMBOL=296, LANGUAGE_SYMBOL=297,
		LAST_SYMBOL=298, LEADING_SYMBOL=299, LEAVES_SYMBOL=300, LEAVE_SYMBOL=301,
		LEFT_SYMBOL=302, LESS_SYMBOL=303, LEVEL_SYMBOL=304, LIKE_SYMBOL=305, LIMIT_SYMBOL=306,
		LINEAR_SYMBOL=307, LINES_SYMBOL=308, LINESTRING_SYMBOL=309, LIST_SYMBOL=310,
		LOAD_SYMBOL=311, LOCAL_SYMBOL=312, LOCKS_SYMBOL=313, LOCK_SYMBOL=314,
		LOGFILE_SYMBOL=315, LOGS_SYMBOL=316, LONGBLOB_SYMBOL=317, LONGTEXT_SYMBOL=318,
		LONG_SYMBOL=319, LOOP_SYMBOL=320, LOW_PRIORITY_SYMBOL=321, MASTER_AUTO_POSITION_SYMBOL=322,
		MASTER_BIND_SYMBOL=323, MASTER_CONNECT_RETRY_SYMBOL=324, MASTER_DELAY_SYMBOL=325,
		MASTER_HOST_SYMBOL=326, MASTER_LOG_FILE_SYMBOL=327, MASTER_LOG_POS_SYMBOL=328,
		MASTER_PASSWORD_SYMBOL=329, MASTER_PORT_SYMBOL=330, MASTER_RETRY_COUNT_SYMBOL=331,
		MASTER_SSL_CAPATH_SYMBOL=332, MASTER_SSL_CA_SYMBOL=333, MASTER_SSL_CERT_SYMBOL=334,
		MASTER_SSL_CIPHER_SYMBOL=335, MASTER_SSL_CRL_SYMBOL=336, MASTER_SSL_CRLPATH_SYMBOL=337,
		MASTER_SSL_KEY_SYMBOL=338, MASTER_SSL_SYMBOL=339, MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=340,
		MASTER_SYMBOL=341, MASTER_TLS_VERSION_SYMBOL=342, MASTER_USER_SYMBOL=343,
		MASTER_HEARTBEAT_PERIOD_SYMBOL=344, MATCH_SYMBOL=345, MAX_CONNECTIONS_PER_HOUR_SYMBOL=346,
		MAX_QUERIES_PER_HOUR_SYMBOL=347, MAX_ROWS_SYMBOL=348, MAX_SIZE_SYMBOL=349,
		MAX_SYMBOL=350, MAX_UPDATES_PER_HOUR_SYMBOL=351, MAX_USER_CONNECTIONS_SYMBOL=352,
		MAXVALUE_SYMBOL=353, MEDIUMBLOB_SYMBOL=354, MEDIUMINT_SYMBOL=355, MEDIUMTEXT_SYMBOL=356,
		MEDIUM_SYMBOL=357, MEMORY_SYMBOL=358, MERGE_SYMBOL=359, MESSAGE_TEXT_SYMBOL=360,
		MICROSECOND_SYMBOL=361, MID_SYMBOL=362, MIGRATE_SYMBOL=363, MINUTE_MICROSECOND_SYMBOL=364,
		MINUTE_SECOND_SYMBOL=365, MINUTE_SYMBOL=366, MIN_ROWS_SYMBOL=367, MIN_SYMBOL=368,
		MODE_SYMBOL=369, MODIFIES_SYMBOL=370, MODIFY_SYMBOL=371, MOD_SYMBOL=372,
		MONTH_SYMBOL=373, MULTILINESTRING_SYMBOL=374, MULTIPOINT_SYMBOL=375, MULTIPOLYGON_SYMBOL=376,
		MUTEX_SYMBOL=377, MYSQL_ERRNO_SYMBOL=378, NAMES_SYMBOL=379, NAME_SYMBOL=380,
		NATIONAL_SYMBOL=381, NATURAL_SYMBOL=382, NCHAR_SYMBOL=383, NDBCLUSTER_SYMBOL=384,
		NEVER_SYMBOL=385, NEW_SYMBOL=386, NEXT_SYMBOL=387, NODEGROUP_SYMBOL=388,
		NONE_SYMBOL=389, NOT_SYMBOL=390, NOW_SYMBOL=391, NO_SYMBOL=392, NO_WAIT_SYMBOL=393,
		NO_WRITE_TO_BINLOG_SYMBOL=394, NULL_SYMBOL=395, NUMBER_SYMBOL=396, NUMERIC_SYMBOL=397,
		NVARCHAR_SYMBOL=398, OFFLINE_SYMBOL=399, OFFSET_SYMBOL=400, ON_SYMBOL=401,
		ONE_SYMBOL=402, ONLINE_SYMBOL=403, ONLY_SYMBOL=404, OPEN_SYMBOL=405, OPTIMIZE_SYMBOL=406,
		OPTIMIZER_COSTS_SYMBOL=407, OPTIONS_SYMBOL=408, OPTION_SYMBOL=409, OPTIONALLY_SYMBOL=410,
		ORDER_SYMBOL=411, OR_SYMBOL=412, OUTER_SYMBOL=413, OUTFILE_SYMBOL=414,
		OUT_SYMBOL=415, OWNER_SYMBOL=416, PACK_KEYS_SYMBOL=417, PAGE_SYMBOL=418,
		PARSER_SYMBOL=419, PARTIAL_SYMBOL=420, PARTITIONING_SYMBOL=421, PARTITIONS_SYMBOL=422,
		PARTITION_SYMBOL=423, PASSWORD_SYMBOL=424, PHASE_SYMBOL=425, PLUGINS_SYMBOL=426,
		PLUGIN_DIR_SYMBOL=427, PLUGIN_SYMBOL=428, POINT_SYMBOL=429, POLYGON_SYMBOL=430,
		PORT_SYMBOL=431, POSITION_SYMBOL=432, PRECEDES_SYMBOL=433, PRECISION_SYMBOL=434,
		PREPARE_SYMBOL=435, PRESERVE_SYMBOL=436, PREV_SYMBOL=437, PRIMARY_SYMBOL=438,
		PRIVILEGES_SYMBOL=439, PROCEDURE_SYMBOL=440, PROCESS_SYMBOL=441, PROCESSLIST_SYMBOL=442,
		PROFILE_SYMBOL=443, PROFILES_SYMBOL=444, PROXY_SYMBOL=445, PURGE_SYMBOL=446,
		QUARTER_SYMBOL=447, QUERY_SYMBOL=448, QUICK_SYMBOL=449, RANGE_SYMBOL=450,
		READS_SYMBOL=451, READ_ONLY_SYMBOL=452, READ_SYMBOL=453, READ_WRITE_SYMBOL=454,
		REAL_SYMBOL=455, REBUILD_SYMBOL=456, RECOVER_SYMBOL=457, REDO_BUFFER_SIZE_SYMBOL=458,
		REDUNDANT_SYMBOL=459, REFERENCES_SYMBOL=460, REGEXP_SYMBOL=461, RELAY_SYMBOL=462,
		RELAYLOG_SYMBOL=463, RELAY_LOG_FILE_SYMBOL=464, RELAY_LOG_POS_SYMBOL=465,
		RELAY_THREAD_SYMBOL=466, RELEASE_SYMBOL=467, RELOAD_SYMBOL=468, REMOVE_SYMBOL=469,
		RENAME_SYMBOL=470, REORGANIZE_SYMBOL=471, REPAIR_SYMBOL=472, REPEATABLE_SYMBOL=473,
		REPEAT_SYMBOL=474, REPLACE_SYMBOL=475, REPLICATION_SYMBOL=476, REPLICATE_DO_DB_SYMBOL=477,
		REPLICATE_IGNORE_DB_SYMBOL=478, REPLICATE_DO_TABLE_SYMBOL=479, REPLICATE_IGNORE_TABLE_SYMBOL=480,
		REPLICATE_WILD_DO_TABLE_SYMBOL=481, REPLICATE_WILD_IGNORE_TABLE_SYMBOL=482,
		REPLICATE_REWRITE_DB_SYMBOL=483, REQUIRE_SYMBOL=484, RESET_SYMBOL=485,
		RESIGNAL_SYMBOL=486, RESTORE_SYMBOL=487, RESTRICT_SYMBOL=488, RESUME_SYMBOL=489,
		RETURNED_SQLSTATE_SYMBOL=490, RETURNS_SYMBOL=491, RETURN_SYMBOL=492, REVERSE_SYMBOL=493,
		REVOKE_SYMBOL=494, RIGHT_SYMBOL=495, ROLLBACK_SYMBOL=496, ROLLUP_SYMBOL=497,
		ROTATE_SYMBOL=498, ROUTINE_SYMBOL=499, ROWS_SYMBOL=500, ROW_COUNT_SYMBOL=501,
		ROW_FORMAT_SYMBOL=502, ROW_SYMBOL=503, RTREE_SYMBOL=504, SAVEPOINT_SYMBOL=505,
		SCHEDULE_SYMBOL=506, SCHEMA_NAME_SYMBOL=507, SECOND_MICROSECOND_SYMBOL=508,
		SECOND_SYMBOL=509, SECURITY_SYMBOL=510, SELECT_SYMBOL=511, SENSITIVE_SYMBOL=512,
		SEPARATOR_SYMBOL=513, SERIALIZABLE_SYMBOL=514, SERIAL_SYMBOL=515, SESSION_SYMBOL=516,
		SERVER_SYMBOL=517, SESSION_USER_SYMBOL=518, SET_SYMBOL=519, SHARE_SYMBOL=520,
		SHOW_SYMBOL=521, SHUTDOWN_SYMBOL=522, SIGNAL_SYMBOL=523, SIGNED_SYMBOL=524,
		SIMPLE_SYMBOL=525, SLAVE_SYMBOL=526, SLOW_SYMBOL=527, SMALLINT_SYMBOL=528,
		SNAPSHOT_SYMBOL=529, SOCKET_SYMBOL=530, SONAME_SYMBOL=531, SOUNDS_SYMBOL=532,
		SOURCE_SYMBOL=533, SPATIAL_SYMBOL=534, SPECIFIC_SYMBOL=535, SQLEXCEPTION_SYMBOL=536,
		SQLSTATE_SYMBOL=537, SQLWARNING_SYMBOL=538, SQL_AFTER_GTIDS_SYMBOL=539,
		SQL_AFTER_MTS_GAPS_SYMBOL=540, SQL_BEFORE_GTIDS_SYMBOL=541, SQL_BIG_RESULT_SYMBOL=542,
		SQL_BUFFER_RESULT_SYMBOL=543, SQL_CALC_FOUND_ROWS_SYMBOL=544, SQL_NO_CACHE_SYMBOL=545,
		SQL_SMALL_RESULT_SYMBOL=546, SQL_SYMBOL=547, SQL_THREAD_SYMBOL=548, SSL_SYMBOL=549,
		STACKED_SYMBOL=550, STARTING_SYMBOL=551, STARTS_SYMBOL=552, START_SYMBOL=553,
		STATS_AUTO_RECALC_SYMBOL=554, STATS_PERSISTENT_SYMBOL=555, STATS_SAMPLE_PAGES_SYMBOL=556,
		STATUS_SYMBOL=557, STDDEV_SAMP_SYMBOL=558, STDDEV_SYMBOL=559, STDDEV_POP_SYMBOL=560,
		STD_SYMBOL=561, STOP_SYMBOL=562, STORAGE_SYMBOL=563, STORED_SYMBOL=564,
		STRAIGHT_JOIN_SYMBOL=565, STRING_SYMBOL=566, SUBCLASS_ORIGIN_SYMBOL=567,
		SUBDATE_SYMBOL=568, SUBJECT_SYMBOL=569, SUBPARTITIONS_SYMBOL=570, SUBPARTITION_SYMBOL=571,
		SUBSTR_SYMBOL=572, SUBSTRING_SYMBOL=573, SUM_SYMBOL=574, SUPER_SYMBOL=575,
		SUSPEND_SYMBOL=576, SWAPS_SYMBOL=577, SWITCHES_SYMBOL=578, SYSDATE_SYMBOL=579,
		SYSTEM_USER_SYMBOL=580, TABLES_SYMBOL=581, TABLESPACE_SYMBOL=582, TABLE_SYMBOL=583,
		TABLE_CHECKSUM_SYMBOL=584, TABLE_NAME_SYMBOL=585, TEMPORARY_SYMBOL=586,
		TEMPTABLE_SYMBOL=587, TERMINATED_SYMBOL=588, TEXT_SYMBOL=589, THAN_SYMBOL=590,
		THEN_SYMBOL=591, TIMESTAMP_SYMBOL=592, TIMESTAMPADD_SYMBOL=593, TIMESTAMPDIFF_SYMBOL=594,
		TIME_SYMBOL=595, TINYBLOB_SYMBOL=596, TINYINT_SYMBOL=597, TINYTEXT_SYMBOL=598,
		TO_SYMBOL=599, TRAILING_SYMBOL=600, TRANSACTION_SYMBOL=601, TRIGGERS_SYMBOL=602,
		TRIGGER_SYMBOL=603, TRIM_SYMBOL=604, TRUE_SYMBOL=605, TRUNCATE_SYMBOL=606,
		TYPES_SYMBOL=607, TYPE_SYMBOL=608, UDF_RETURNS_SYMBOL=609, UNCOMMITTED_SYMBOL=610,
		UNDEFINED_SYMBOL=611, UNDOFILE_SYMBOL=612, UNDO_BUFFER_SIZE_SYMBOL=613,
		UNDO_SYMBOL=614, UNICODE_SYMBOL=615, UNINSTALL_SYMBOL=616, UNION_SYMBOL=617,
		UNIQUE_SYMBOL=618, UNKNOWN_SYMBOL=619, UNLOCK_SYMBOL=620, UNSIGNED_SYMBOL=621,
		UNTIL_SYMBOL=622, UPDATE_SYMBOL=623, UPGRADE_SYMBOL=624, USAGE_SYMBOL=625,
		USER_RESOURCES_SYMBOL=626, USER_SYMBOL=627, USE_FRM_SYMBOL=628, USE_SYMBOL=629,
		USING_SYMBOL=630, UTC_DATE_SYMBOL=631, UTC_TIMESTAMP_SYMBOL=632, UTC_TIME_SYMBOL=633,
		VALIDATION_SYMBOL=634, VALUES_SYMBOL=635, VALUE_SYMBOL=636, VARBINARY_SYMBOL=637,
		VARCHAR_SYMBOL=638, VARIABLES_SYMBOL=639, VARIANCE_SYMBOL=640, VARYING_SYMBOL=641,
		VAR_POP_SYMBOL=642, VAR_SAMP_SYMBOL=643, VIEW_SYMBOL=644, VIRTUAL_SYMBOL=645,
		WAIT_SYMBOL=646, WARNINGS_SYMBOL=647, WEEK_SYMBOL=648, WEIGHT_STRING_SYMBOL=649,
		WHEN_SYMBOL=650, WHERE_SYMBOL=651, WHILE_SYMBOL=652, WITH_SYMBOL=653,
		WITHOUT_SYMBOL=654, WORK_SYMBOL=655, WRAPPER_SYMBOL=656, WRITE_SYMBOL=657,
		X509_SYMBOL=658, XA_SYMBOL=659, XID_SYMBOL=660, XML_SYMBOL=661, XOR_SYMBOL=662,
		YEAR_MONTH_SYMBOL=663, YEAR_SYMBOL=664, ZEROFILL_SYMBOL=665, PERSIST_SYMBOL=666,
		ROLE_SYMBOL=667, ADMIN_SYMBOL=668, INVISIBLE_SYMBOL=669, VISIBLE_SYMBOL=670,
		EXCEPT_SYMBOL=671, COMPONENT_SYMBOL=672, RECURSIVE_SYMBOL=673, JSON_OBJECTAGG_SYMBOL=674,
		JSON_ARRAYAGG_SYMBOL=675, OF_SYMBOL=676, SKIP_SYMBOL=677, LOCKED_SYMBOL=678,
		NOWAIT_SYMBOL=679, GROUPING_SYMBOL=680, PERSIST_ONLY_SYMBOL=681, HISTOGRAM_SYMBOL=682,
		BUCKETS_SYMBOL=683, REMOTE_SYMBOL=684, CLONE_SYMBOL=685, CUME_DIST_SYMBOL=686,
		DENSE_RANK_SYMBOL=687, EXCLUDE_SYMBOL=688, FIRST_VALUE_SYMBOL=689, FOLLOWING_SYMBOL=690,
		GROUPS_SYMBOL=691, LAG_SYMBOL=692, LAST_VALUE_SYMBOL=693, LEAD_SYMBOL=694,
		NTH_VALUE_SYMBOL=695, NTILE_SYMBOL=696, NULLS_SYMBOL=697, OTHERS_SYMBOL=698,
		OVER_SYMBOL=699, PERCENT_RANK_SYMBOL=700, PRECEDING_SYMBOL=701, RANK_SYMBOL=702,
		RESPECT_SYMBOL=703, ROW_NUMBER_SYMBOL=704, TIES_SYMBOL=705, UNBOUNDED_SYMBOL=706,
		WINDOW_SYMBOL=707, EMPTY_SYMBOL=708, JSON_TABLE_SYMBOL=709, NESTED_SYMBOL=710,
		ORDINALITY_SYMBOL=711, PATH_SYMBOL=712, HISTORY_SYMBOL=713, REUSE_SYMBOL=714,
		SRID_SYMBOL=715, THREAD_PRIORITY_SYMBOL=716, RESOURCE_SYMBOL=717, SYSTEM_SYMBOL=718,
		VCPU_SYMBOL=719, MASTER_PUBLIC_KEY_PATH_SYMBOL=720, GET_MASTER_PUBLIC_KEY_SYMBOL=721,
		RESTART_SYMBOL=722, DEFINITION_SYMBOL=723, DESCRIPTION_SYMBOL=724, ORGANIZATION_SYMBOL=725,
		REFERENCE_SYMBOL=726, OPTIONAL_SYMBOL=727, SECONDARY_SYMBOL=728, SECONDARY_ENGINE_SYMBOL=729,
		SECONDARY_LOAD_SYMBOL=730, SECONDARY_UNLOAD_SYMBOL=731, ACTIVE_SYMBOL=732,
		INACTIVE_SYMBOL=733, LATERAL_SYMBOL=734, RETAIN_SYMBOL=735, OLD_SYMBOL=736,
		NETWORK_NAMESPACE_SYMBOL=737, ENFORCED_SYMBOL=738, ARRAY_SYMBOL=739, OJ_SYMBOL=740,
		MEMBER_SYMBOL=741, RANDOM_SYMBOL=742, MASTER_COMPRESSION_ALGORITHM_SYMBOL=743,
		MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=744, PRIVILEGE_CHECKS_USER_SYMBOL=745,
		MASTER_TLS_CIPHERSUITES_SYMBOL=746, REQUIRE_ROW_FORMAT_SYMBOL=747, PASSWORD_LOCK_TIME_SYMBOL=748,
		FAILED_LOGIN_ATTEMPTS_SYMBOL=749, REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL=750,
		STREAM_SYMBOL=751, OFF_SYMBOL=752, RETURNING_SYMBOL=753, JSON_VALUE_SYMBOL=754,
		TLS_SYMBOL=755, ATTRIBUTE_SYMBOL=756, ENGINE_ATTRIBUTE_SYMBOL=757, SECONDARY_ENGINE_ATTRIBUTE_SYMBOL=758,
		SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL=759, ZONE_SYMBOL=760, GRAMMAR_SELECTOR_DERIVED_EXPR=761,
		REPLICA_SYMBOL=762, REPLICAS_SYMBOL=763, ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL=764,
		GET_SOURCE_PUBLIC_KEY_SYMBOL=765, SOURCE_AUTO_POSITION_SYMBOL=766, SOURCE_BIND_SYMBOL=767,
		SOURCE_COMPRESSION_ALGORITHM_SYMBOL=768, SOURCE_CONNECT_RETRY_SYMBOL=769,
		SOURCE_DELAY_SYMBOL=770, SOURCE_HEARTBEAT_PERIOD_SYMBOL=771, SOURCE_HOST_SYMBOL=772,
		SOURCE_LOG_FILE_SYMBOL=773, SOURCE_LOG_POS_SYMBOL=774, SOURCE_PASSWORD_SYMBOL=775,
		SOURCE_PORT_SYMBOL=776, SOURCE_PUBLIC_KEY_PATH_SYMBOL=777, SOURCE_RETRY_COUNT_SYMBOL=778,
		SOURCE_SSL_SYMBOL=779, SOURCE_SSL_CA_SYMBOL=780, SOURCE_SSL_CAPATH_SYMBOL=781,
		SOURCE_SSL_CERT_SYMBOL=782, SOURCE_SSL_CIPHER_SYMBOL=783, SOURCE_SSL_CRL_SYMBOL=784,
		SOURCE_SSL_CRLPATH_SYMBOL=785, SOURCE_SSL_KEY_SYMBOL=786, SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL=787,
		SOURCE_TLS_CIPHERSUITES_SYMBOL=788, SOURCE_TLS_VERSION_SYMBOL=789, SOURCE_USER_SYMBOL=790,
		SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL=791, ST_COLLECT_SYMBOL=792, KEYRING_SYMBOL=793,
		AUTHENTICATION_SYMBOL=794, FACTOR_SYMBOL=795, FINISH_SYMBOL=796, INITIATE_SYMBOL=797,
		REGISTRATION_SYMBOL=798, UNREGISTER_SYMBOL=799, INITIAL_SYMBOL=800, CHALLENGE_RESPONSE_SYMBOL=801,
		GTID_ONLY_SYMBOL=802, INTERSECT_SYMBOL=803, BULK_SYMBOL=804, URL_SYMBOL=805,
		GENERATE_SYMBOL=806, PARSE_TREE_SYMBOL=807, LOG_SYMBOL=808, GTIDS_SYMBOL=809,
		PARALLEL_SYMBOL=810, S3_SYMBOL=811, QUALIFY_SYMBOL=812, AUTO_SYMBOL=813,
		MANUAL_SYMBOL=814, BERNOULLI_SYMBOL=815, TABLESAMPLE_SYMBOL=816, WHITESPACE=817,
		INVALID_INPUT=818, UNDERSCORE_CHARSET=819, IDENTIFIER=820, NCHAR_TEXT=821,
		BACK_TICK_QUOTED_ID=822, DOUBLE_QUOTED_TEXT=823, SINGLE_QUOTED_TEXT=824,
		DOLLAR_QUOTED_STRING_TEXT=825, VERSION_COMMENT_START=826, MYSQL_COMMENT_START=827,
		VERSION_COMMENT_END=828, BLOCK_COMMENT=829, INVALID_BLOCK_COMMENT=830,
		POUND_COMMENT=831, DASHDASH_COMMENT=832, NOT_EQUAL2_OPERATOR=833;
	public static final int
		RULE_queries = 0, RULE_query = 1, RULE_simpleStatement = 2, RULE_alterStatement = 3,
		RULE_alterDatabase = 4, RULE_alterDatabaseOption = 5, RULE_alterEvent = 6,
		RULE_alterLogfileGroup = 7, RULE_alterLogfileGroupOptions = 8, RULE_alterLogfileGroupOption = 9,
		RULE_alterServer = 10, RULE_alterTable = 11, RULE_alterTableActions = 12,
		RULE_alterCommandList = 13, RULE_alterCommandsModifierList = 14, RULE_standaloneAlterCommands = 15,
		RULE_alterPartition = 16, RULE_alterList = 17, RULE_alterCommandsModifier = 18,
		RULE_alterListItem = 19, RULE_place = 20, RULE_restrict = 21, RULE_alterOrderList = 22,
		RULE_alterAlgorithmOption = 23, RULE_alterLockOption = 24, RULE_indexLockAndAlgorithm = 25,
		RULE_withValidation = 26, RULE_removePartitioning = 27, RULE_allOrPartitionNameList = 28,
		RULE_alterTablespace = 29, RULE_alterUndoTablespace = 30, RULE_undoTableSpaceOptions = 31,
		RULE_undoTableSpaceOption = 32, RULE_alterTablespaceOptions = 33, RULE_alterTablespaceOption = 34,
		RULE_changeTablespaceOption = 35, RULE_alterView = 36, RULE_viewTail = 37,
		RULE_viewQueryBlock = 38, RULE_viewCheckOption = 39, RULE_alterInstanceStatement = 40,
		RULE_createStatement = 41, RULE_createDatabase = 42, RULE_createDatabaseOption = 43,
		RULE_createTable = 44, RULE_tableElementList = 45, RULE_tableElement = 46,
		RULE_duplicateAsQe = 47, RULE_asCreateQueryExpression = 48, RULE_queryExpressionOrParens = 49,
		RULE_queryExpressionWithOptLockingClauses = 50, RULE_createRoutine = 51,
		RULE_createProcedure = 52, RULE_routineString = 53, RULE_storedRoutineBody = 54,
		RULE_createFunction = 55, RULE_createUdf = 56, RULE_routineCreateOption = 57,
		RULE_routineAlterOptions = 58, RULE_routineOption = 59, RULE_createIndex = 60,
		RULE_indexNameAndType = 61, RULE_createIndexTarget = 62, RULE_createLogfileGroup = 63,
		RULE_logfileGroupOptions = 64, RULE_logfileGroupOption = 65, RULE_createServer = 66,
		RULE_serverOptions = 67, RULE_serverOption = 68, RULE_createTablespace = 69,
		RULE_createUndoTablespace = 70, RULE_tsDataFileName = 71, RULE_tsDataFile = 72,
		RULE_tablespaceOptions = 73, RULE_tablespaceOption = 74, RULE_tsOptionInitialSize = 75,
		RULE_tsOptionUndoRedoBufferSize = 76, RULE_tsOptionAutoextendSize = 77,
		RULE_tsOptionMaxSize = 78, RULE_tsOptionExtentSize = 79, RULE_tsOptionNodegroup = 80,
		RULE_tsOptionEngine = 81, RULE_tsOptionWait = 82, RULE_tsOptionComment = 83,
		RULE_tsOptionFileblockSize = 84, RULE_tsOptionEncryption = 85, RULE_tsOptionEngineAttribute = 86,
		RULE_createView = 87, RULE_viewReplaceOrAlgorithm = 88, RULE_viewAlgorithm = 89,
		RULE_viewSuid = 90, RULE_createTrigger = 91, RULE_triggerFollowsPrecedesClause = 92,
		RULE_createEvent = 93, RULE_createRole = 94, RULE_createSpatialReference = 95,
		RULE_srsAttribute = 96, RULE_dropStatement = 97, RULE_dropDatabase = 98,
		RULE_dropEvent = 99, RULE_dropFunction = 100, RULE_dropProcedure = 101,
		RULE_dropIndex = 102, RULE_dropLogfileGroup = 103, RULE_dropLogfileGroupOption = 104,
		RULE_dropServer = 105, RULE_dropTable = 106, RULE_dropTableSpace = 107,
		RULE_dropTrigger = 108, RULE_dropView = 109, RULE_dropRole = 110, RULE_dropSpatialReference = 111,
		RULE_dropUndoTablespace = 112, RULE_renameTableStatement = 113, RULE_renamePair = 114,
		RULE_truncateTableStatement = 115, RULE_importStatement = 116, RULE_callStatement = 117,
		RULE_deleteStatement = 118, RULE_partitionDelete = 119, RULE_deleteStatementOption = 120,
		RULE_doStatement = 121, RULE_handlerStatement = 122, RULE_handlerReadOrScan = 123,
		RULE_insertStatement = 124, RULE_insertLockOption = 125, RULE_insertFromConstructor = 126,
		RULE_fields = 127, RULE_insertValues = 128, RULE_insertQueryExpression = 129,
		RULE_valueList = 130, RULE_values = 131, RULE_valuesReference = 132, RULE_insertUpdateList = 133,
		RULE_loadStatement = 134, RULE_dataOrXml = 135, RULE_loadDataLock = 136,
		RULE_loadFrom = 137, RULE_loadSourceType = 138, RULE_sourceCount = 139,
		RULE_sourceOrder = 140, RULE_xmlRowsIdentifiedBy = 141, RULE_loadDataFileTail = 142,
		RULE_loadDataFileTargetList = 143, RULE_fieldOrVariableList = 144, RULE_loadAlgorithm = 145,
		RULE_loadParallel = 146, RULE_loadMemory = 147, RULE_replaceStatement = 148,
		RULE_selectStatement = 149, RULE_selectStatementWithInto = 150, RULE_queryExpression = 151,
		RULE_queryExpressionBody = 152, RULE_queryExpressionParens = 153, RULE_queryPrimary = 154,
		RULE_querySpecification = 155, RULE_subquery = 156, RULE_querySpecOption = 157,
		RULE_limitClause = 158, RULE_simpleLimitClause = 159, RULE_limitOptions = 160,
		RULE_limitOption = 161, RULE_intoClause = 162, RULE_procedureAnalyseClause = 163,
		RULE_havingClause = 164, RULE_qualifyClause = 165, RULE_windowClause = 166,
		RULE_windowDefinition = 167, RULE_windowSpec = 168, RULE_windowSpecDetails = 169,
		RULE_windowFrameClause = 170, RULE_windowFrameUnits = 171, RULE_windowFrameExtent = 172,
		RULE_windowFrameStart = 173, RULE_windowFrameBetween = 174, RULE_windowFrameBound = 175,
		RULE_windowFrameExclusion = 176, RULE_withClause = 177, RULE_commonTableExpression = 178,
		RULE_groupByClause = 179, RULE_olapOption = 180, RULE_orderClause = 181,
		RULE_direction = 182, RULE_fromClause = 183, RULE_tableReferenceList = 184,
		RULE_tableValueConstructor = 185, RULE_explicitTable = 186, RULE_rowValueExplicit = 187,
		RULE_selectOption = 188, RULE_lockingClauseList = 189, RULE_lockingClause = 190,
		RULE_lockStrengh = 191, RULE_lockedRowAction = 192, RULE_selectItemList = 193,
		RULE_selectItem = 194, RULE_selectAlias = 195, RULE_whereClause = 196,
		RULE_tableReference = 197, RULE_escapedTableReference = 198, RULE_joinedTable = 199,
		RULE_naturalJoinType = 200, RULE_innerJoinType = 201, RULE_outerJoinType = 202,
		RULE_tableFactor = 203, RULE_singleTable = 204, RULE_singleTableParens = 205,
		RULE_derivedTable = 206, RULE_tableReferenceListParens = 207, RULE_tableFunction = 208,
		RULE_columnsClause = 209, RULE_jtColumn = 210, RULE_onEmptyOrError = 211,
		RULE_onEmptyOrErrorJsonTable = 212, RULE_onEmpty = 213, RULE_onError = 214,
		RULE_jsonOnResponse = 215, RULE_unionOption = 216, RULE_tableAlias = 217,
		RULE_indexHintList = 218, RULE_indexHint = 219, RULE_indexHintType = 220,
		RULE_keyOrIndex = 221, RULE_constraintKeyType = 222, RULE_indexHintClause = 223,
		RULE_indexList = 224, RULE_indexListElement = 225, RULE_updateStatement = 226,
		RULE_transactionOrLockingStatement = 227, RULE_transactionStatement = 228,
		RULE_beginWork = 229, RULE_startTransactionOptionList = 230, RULE_savepointStatement = 231,
		RULE_lockStatement = 232, RULE_lockItem = 233, RULE_lockOption = 234,
		RULE_xaStatement = 235, RULE_xaConvert = 236, RULE_xid = 237, RULE_replicationStatement = 238,
		RULE_purgeOptions = 239, RULE_resetOption = 240, RULE_masterOrBinaryLogsAndGtids = 241,
		RULE_sourceResetOptions = 242, RULE_replicationLoad = 243, RULE_changeReplicationSource = 244,
		RULE_changeSource = 245, RULE_sourceDefinitions = 246, RULE_sourceDefinition = 247,
		RULE_changeReplicationSourceAutoPosition = 248, RULE_changeReplicationSourceHost = 249,
		RULE_changeReplicationSourceBind = 250, RULE_changeReplicationSourceUser = 251,
		RULE_changeReplicationSourcePassword = 252, RULE_changeReplicationSourcePort = 253,
		RULE_changeReplicationSourceConnectRetry = 254, RULE_changeReplicationSourceRetryCount = 255,
		RULE_changeReplicationSourceDelay = 256, RULE_changeReplicationSourceSSL = 257,
		RULE_changeReplicationSourceSSLCA = 258, RULE_changeReplicationSourceSSLCApath = 259,
		RULE_changeReplicationSourceSSLCipher = 260, RULE_changeReplicationSourceSSLCLR = 261,
		RULE_changeReplicationSourceSSLCLRpath = 262, RULE_changeReplicationSourceSSLKey = 263,
		RULE_changeReplicationSourceSSLVerifyServerCert = 264, RULE_changeReplicationSourceTLSVersion = 265,
		RULE_changeReplicationSourceTLSCiphersuites = 266, RULE_changeReplicationSourceSSLCert = 267,
		RULE_changeReplicationSourcePublicKey = 268, RULE_changeReplicationSourceGetSourcePublicKey = 269,
		RULE_changeReplicationSourceHeartbeatPeriod = 270, RULE_changeReplicationSourceCompressionAlgorithm = 271,
		RULE_changeReplicationSourceZstdCompressionLevel = 272, RULE_privilegeCheckDef = 273,
		RULE_tablePrimaryKeyCheckDef = 274, RULE_assignGtidsToAnonymousTransactionsDefinition = 275,
		RULE_sourceTlsCiphersuitesDef = 276, RULE_sourceFileDef = 277, RULE_sourceLogFile = 278,
		RULE_sourceLogPos = 279, RULE_serverIdList = 280, RULE_changeReplication = 281,
		RULE_filterDefinition = 282, RULE_filterDbList = 283, RULE_filterTableList = 284,
		RULE_filterStringList = 285, RULE_filterWildDbTableString = 286, RULE_filterDbPairList = 287,
		RULE_startReplicaStatement = 288, RULE_stopReplicaStatement = 289, RULE_replicaUntil = 290,
		RULE_userOption = 291, RULE_passwordOption = 292, RULE_defaultAuthOption = 293,
		RULE_pluginDirOption = 294, RULE_replicaThreadOptions = 295, RULE_replicaThreadOption = 296,
		RULE_groupReplication = 297, RULE_groupReplicationStartOptions = 298,
		RULE_groupReplicationStartOption = 299, RULE_groupReplicationUser = 300,
		RULE_groupReplicationPassword = 301, RULE_groupReplicationPluginAuth = 302,
		RULE_replica = 303, RULE_preparedStatement = 304, RULE_executeStatement = 305,
		RULE_executeVarList = 306, RULE_cloneStatement = 307, RULE_dataDirSSL = 308,
		RULE_ssl = 309, RULE_accountManagementStatement = 310, RULE_alterUserStatement = 311,
		RULE_alterUserList = 312, RULE_alterUser = 313, RULE_oldAlterUser = 314,
		RULE_userFunction = 315, RULE_createUserStatement = 316, RULE_createUserTail = 317,
		RULE_userAttributes = 318, RULE_defaultRoleClause = 319, RULE_requireClause = 320,
		RULE_connectOptions = 321, RULE_accountLockPasswordExpireOptions = 322,
		RULE_userAttribute = 323, RULE_dropUserStatement = 324, RULE_grantStatement = 325,
		RULE_grantTargetList = 326, RULE_grantOptions = 327, RULE_exceptRoleList = 328,
		RULE_withRoles = 329, RULE_grantAs = 330, RULE_versionedRequireClause = 331,
		RULE_renameUserStatement = 332, RULE_revokeStatement = 333, RULE_aclType = 334,
		RULE_roleOrPrivilegesList = 335, RULE_roleOrPrivilege = 336, RULE_grantIdentifier = 337,
		RULE_requireList = 338, RULE_requireListElement = 339, RULE_grantOption = 340,
		RULE_setRoleStatement = 341, RULE_roleList = 342, RULE_role = 343, RULE_tableAdministrationStatement = 344,
		RULE_histogramAutoUpdate = 345, RULE_histogramUpdateParam = 346, RULE_histogramNumBuckets = 347,
		RULE_histogram = 348, RULE_checkOption = 349, RULE_repairType = 350, RULE_uninstallStatement = 351,
		RULE_installStatement = 352, RULE_installOptionType = 353, RULE_installSetRvalue = 354,
		RULE_installSetValue = 355, RULE_installSetValueList = 356, RULE_setStatement = 357,
		RULE_startOptionValueList = 358, RULE_transactionCharacteristics = 359,
		RULE_transactionAccessMode = 360, RULE_isolationLevel = 361, RULE_optionValueListContinued = 362,
		RULE_optionValueNoOptionType = 363, RULE_optionValue = 364, RULE_setSystemVariable = 365,
		RULE_startOptionValueListFollowingOptionType = 366, RULE_optionValueFollowingOptionType = 367,
		RULE_setExprOrDefault = 368, RULE_showDatabasesStatement = 369, RULE_showTablesStatement = 370,
		RULE_showTriggersStatement = 371, RULE_showEventsStatement = 372, RULE_showTableStatusStatement = 373,
		RULE_showOpenTablesStatement = 374, RULE_showParseTreeStatement = 375,
		RULE_showPluginsStatement = 376, RULE_showEngineLogsStatement = 377, RULE_showEngineMutexStatement = 378,
		RULE_showEngineStatusStatement = 379, RULE_showColumnsStatement = 380,
		RULE_showBinaryLogsStatement = 381, RULE_showBinaryLogStatusStatement = 382,
		RULE_showReplicasStatement = 383, RULE_showBinlogEventsStatement = 384,
		RULE_showRelaylogEventsStatement = 385, RULE_showKeysStatement = 386,
		RULE_showEnginesStatement = 387, RULE_showCountWarningsStatement = 388,
		RULE_showCountErrorsStatement = 389, RULE_showWarningsStatement = 390,
		RULE_showErrorsStatement = 391, RULE_showProfilesStatement = 392, RULE_showProfileStatement = 393,
		RULE_showStatusStatement = 394, RULE_showProcessListStatement = 395, RULE_showVariablesStatement = 396,
		RULE_showCharacterSetStatement = 397, RULE_showCollationStatement = 398,
		RULE_showPrivilegesStatement = 399, RULE_showGrantsStatement = 400, RULE_showCreateDatabaseStatement = 401,
		RULE_showCreateTableStatement = 402, RULE_showCreateViewStatement = 403,
		RULE_showMasterStatusStatement = 404, RULE_showReplicaStatusStatement = 405,
		RULE_showCreateProcedureStatement = 406, RULE_showCreateFunctionStatement = 407,
		RULE_showCreateTriggerStatement = 408, RULE_showCreateProcedureStatusStatement = 409,
		RULE_showCreateFunctionStatusStatement = 410, RULE_showCreateProcedureCodeStatement = 411,
		RULE_showCreateFunctionCodeStatement = 412, RULE_showCreateEventStatement = 413,
		RULE_showCreateUserStatement = 414, RULE_showCommandType = 415, RULE_engineOrAll = 416,
		RULE_fromOrIn = 417, RULE_inDb = 418, RULE_profileDefinitions = 419, RULE_profileDefinition = 420,
		RULE_otherAdministrativeStatement = 421, RULE_keyCacheListOrParts = 422,
		RULE_keyCacheList = 423, RULE_assignToKeycache = 424, RULE_assignToKeycachePartition = 425,
		RULE_cacheKeyList = 426, RULE_keyUsageElement = 427, RULE_keyUsageList = 428,
		RULE_flushOption = 429, RULE_logType = 430, RULE_flushTables = 431, RULE_flushTablesOptions = 432,
		RULE_preloadTail = 433, RULE_preloadList = 434, RULE_preloadKeys = 435,
		RULE_adminPartition = 436, RULE_resourceGroupManagement = 437, RULE_createResourceGroup = 438,
		RULE_resourceGroupVcpuList = 439, RULE_vcpuNumOrRange = 440, RULE_resourceGroupPriority = 441,
		RULE_resourceGroupEnableDisable = 442, RULE_alterResourceGroup = 443,
		RULE_setResourceGroup = 444, RULE_threadIdList = 445, RULE_dropResourceGroup = 446,
		RULE_utilityStatement = 447, RULE_describeStatement = 448, RULE_explainStatement = 449,
		RULE_explainOptions = 450, RULE_explainableStatement = 451, RULE_explainInto = 452,
		RULE_helpCommand = 453, RULE_useCommand = 454, RULE_restartServer = 455,
		RULE_expr = 456, RULE_boolPri = 457, RULE_compOp = 458, RULE_predicate = 459,
		RULE_predicateOperations = 460, RULE_bitExpr = 461, RULE_simpleExpr = 462,
		RULE_arrayCast = 463, RULE_jsonOperator = 464, RULE_sumExpr = 465, RULE_groupingOperation = 466,
		RULE_windowFunctionCall = 467, RULE_samplingMethod = 468, RULE_samplingPercentage = 469,
		RULE_tablesampleClause = 470, RULE_windowingClause = 471, RULE_leadLagInfo = 472,
		RULE_stableInteger = 473, RULE_paramOrVar = 474, RULE_nullTreatment = 475,
		RULE_jsonFunction = 476, RULE_inSumExpr = 477, RULE_identListArg = 478,
		RULE_identList = 479, RULE_fulltextOptions = 480, RULE_runtimeFunctionCall = 481,
		RULE_returningType = 482, RULE_geometryFunction = 483, RULE_timeFunctionParameters = 484,
		RULE_fractionalPrecision = 485, RULE_weightStringLevels = 486, RULE_weightStringLevelListItem = 487,
		RULE_dateTimeTtype = 488, RULE_trimFunction = 489, RULE_substringFunction = 490,
		RULE_functionCall = 491, RULE_udfExprList = 492, RULE_udfExpr = 493, RULE_userVariable = 494,
		RULE_inExpressionUserVariableAssignment = 495, RULE_rvalueSystemOrUserVariable = 496,
		RULE_lvalueVariable = 497, RULE_rvalueSystemVariable = 498, RULE_whenExpression = 499,
		RULE_thenExpression = 500, RULE_elseExpression = 501, RULE_castType = 502,
		RULE_exprList = 503, RULE_charset = 504, RULE_notRule = 505, RULE_not2Rule = 506,
		RULE_interval = 507, RULE_intervalTimeStamp = 508, RULE_exprListWithParentheses = 509,
		RULE_exprWithParentheses = 510, RULE_simpleExprWithParentheses = 511,
		RULE_orderList = 512, RULE_orderExpression = 513, RULE_groupList = 514,
		RULE_groupingExpression = 515, RULE_channel = 516, RULE_compoundStatement = 517,
		RULE_returnStatement = 518, RULE_ifStatement = 519, RULE_ifBody = 520,
		RULE_thenStatement = 521, RULE_compoundStatementList = 522, RULE_caseStatement = 523,
		RULE_elseStatement = 524, RULE_labeledBlock = 525, RULE_unlabeledBlock = 526,
		RULE_label = 527, RULE_beginEndBlock = 528, RULE_labeledControl = 529,
		RULE_unlabeledControl = 530, RULE_loopBlock = 531, RULE_whileDoBlock = 532,
		RULE_repeatUntilBlock = 533, RULE_spDeclarations = 534, RULE_spDeclaration = 535,
		RULE_variableDeclaration = 536, RULE_conditionDeclaration = 537, RULE_spCondition = 538,
		RULE_sqlstate = 539, RULE_handlerDeclaration = 540, RULE_handlerCondition = 541,
		RULE_cursorDeclaration = 542, RULE_iterateStatement = 543, RULE_leaveStatement = 544,
		RULE_getDiagnosticsStatement = 545, RULE_signalAllowedExpr = 546, RULE_statementInformationItem = 547,
		RULE_conditionInformationItem = 548, RULE_signalInformationItemName = 549,
		RULE_signalStatement = 550, RULE_resignalStatement = 551, RULE_signalInformationItem = 552,
		RULE_cursorOpen = 553, RULE_cursorClose = 554, RULE_cursorFetch = 555,
		RULE_schedule = 556, RULE_columnDefinition = 557, RULE_checkOrReferences = 558,
		RULE_checkConstraint = 559, RULE_constraintEnforcement = 560, RULE_tableConstraintDef = 561,
		RULE_constraintName = 562, RULE_fieldDefinition = 563, RULE_columnAttribute = 564,
		RULE_columnFormat = 565, RULE_storageMedia = 566, RULE_now = 567, RULE_nowOrSignedLiteral = 568,
		RULE_gcolAttribute = 569, RULE_references = 570, RULE_deleteOption = 571,
		RULE_keyList = 572, RULE_keyPart = 573, RULE_keyListWithExpression = 574,
		RULE_keyPartOrExpression = 575, RULE_indexType = 576, RULE_indexOption = 577,
		RULE_commonIndexOption = 578, RULE_visibility = 579, RULE_indexTypeClause = 580,
		RULE_fulltextIndexOption = 581, RULE_spatialIndexOption = 582, RULE_dataTypeDefinition = 583,
		RULE_dataType = 584, RULE_nchar = 585, RULE_realType = 586, RULE_fieldLength = 587,
		RULE_fieldOptions = 588, RULE_charsetWithOptBinary = 589, RULE_ascii = 590,
		RULE_unicode = 591, RULE_wsNumCodepoints = 592, RULE_typeDatetimePrecision = 593,
		RULE_functionDatetimePrecision = 594, RULE_charsetName = 595, RULE_collationName = 596,
		RULE_createTableOptions = 597, RULE_createTableOptionsEtc = 598, RULE_createPartitioningEtc = 599,
		RULE_createTableOptionsSpaceSeparated = 600, RULE_createTableOption = 601,
		RULE_ternaryOption = 602, RULE_defaultCollation = 603, RULE_defaultEncryption = 604,
		RULE_defaultCharset = 605, RULE_partitionClause = 606, RULE_partitionTypeDef = 607,
		RULE_subPartitions = 608, RULE_partitionKeyAlgorithm = 609, RULE_partitionDefinitions = 610,
		RULE_partitionDefinition = 611, RULE_partitionValuesIn = 612, RULE_partitionOption = 613,
		RULE_subpartitionDefinition = 614, RULE_partitionValueItemListParen = 615,
		RULE_partitionValueItem = 616, RULE_definerClause = 617, RULE_ifExists = 618,
		RULE_ifExistsIdentifier = 619, RULE_persistedVariableIdentifier = 620,
		RULE_ifNotExists = 621, RULE_ignoreUnknownUser = 622, RULE_procedureParameter = 623,
		RULE_functionParameter = 624, RULE_collate = 625, RULE_typeWithOptCollate = 626,
		RULE_schemaIdentifierPair = 627, RULE_viewRefList = 628, RULE_updateList = 629,
		RULE_updateElement = 630, RULE_charsetClause = 631, RULE_fieldsClause = 632,
		RULE_fieldTerm = 633, RULE_linesClause = 634, RULE_lineTerm = 635, RULE_userList = 636,
		RULE_createUserList = 637, RULE_createUser = 638, RULE_createUserWithMfa = 639,
		RULE_identification = 640, RULE_identifiedByPassword = 641, RULE_identifiedByRandomPassword = 642,
		RULE_identifiedWithPlugin = 643, RULE_identifiedWithPluginAsAuth = 644,
		RULE_identifiedWithPluginByPassword = 645, RULE_identifiedWithPluginByRandomPassword = 646,
		RULE_initialAuth = 647, RULE_retainCurrentPassword = 648, RULE_discardOldPassword = 649,
		RULE_userRegistration = 650, RULE_factor = 651, RULE_replacePassword = 652,
		RULE_userIdentifierOrText = 653, RULE_user = 654, RULE_likeClause = 655,
		RULE_likeOrWhere = 656, RULE_onlineOption = 657, RULE_noWriteToBinLog = 658,
		RULE_usePartition = 659, RULE_fieldIdentifier = 660, RULE_columnName = 661,
		RULE_columnInternalRef = 662, RULE_columnInternalRefList = 663, RULE_columnRef = 664,
		RULE_insertIdentifier = 665, RULE_indexName = 666, RULE_indexRef = 667,
		RULE_tableWild = 668, RULE_schemaName = 669, RULE_schemaRef = 670, RULE_procedureName = 671,
		RULE_procedureRef = 672, RULE_functionName = 673, RULE_functionRef = 674,
		RULE_triggerName = 675, RULE_triggerRef = 676, RULE_viewName = 677, RULE_viewRef = 678,
		RULE_tablespaceName = 679, RULE_tablespaceRef = 680, RULE_logfileGroupName = 681,
		RULE_logfileGroupRef = 682, RULE_eventName = 683, RULE_eventRef = 684,
		RULE_udfName = 685, RULE_serverName = 686, RULE_serverRef = 687, RULE_engineRef = 688,
		RULE_tableName = 689, RULE_filterTableRef = 690, RULE_tableRefWithWildcard = 691,
		RULE_tableRef = 692, RULE_tableRefList = 693, RULE_tableAliasRefList = 694,
		RULE_parameterName = 695, RULE_labelIdentifier = 696, RULE_labelRef = 697,
		RULE_roleIdentifier = 698, RULE_pluginRef = 699, RULE_componentRef = 700,
		RULE_resourceGroupRef = 701, RULE_windowName = 702, RULE_pureIdentifier = 703,
		RULE_identifier = 704, RULE_identifierList = 705, RULE_identifierListWithParentheses = 706,
		RULE_qualifiedIdentifier = 707, RULE_simpleIdentifier = 708, RULE_dotIdentifier = 709,
		RULE_ulong_number = 710, RULE_real_ulong_number = 711, RULE_ulonglongNumber = 712,
		RULE_real_ulonglong_number = 713, RULE_signedLiteral = 714, RULE_signedLiteralOrNull = 715,
		RULE_literal = 716, RULE_literalOrNull = 717, RULE_nullAsLiteral = 718,
		RULE_stringList = 719, RULE_textStringLiteral = 720, RULE_textString = 721,
		RULE_textStringHash = 722, RULE_textLiteral = 723, RULE_textStringNoLinebreak = 724,
		RULE_textStringLiteralList = 725, RULE_numLiteral = 726, RULE_boolLiteral = 727,
		RULE_nullLiteral = 728, RULE_int64Literal = 729, RULE_temporalLiteral = 730,
		RULE_floatOptions = 731, RULE_standardFloatOptions = 732, RULE_precision = 733,
		RULE_textOrIdentifier = 734, RULE_lValueIdentifier = 735, RULE_roleIdentifierOrText = 736,
		RULE_sizeNumber = 737, RULE_parentheses = 738, RULE_equal = 739, RULE_optionType = 740,
		RULE_rvalueSystemVariableType = 741, RULE_setVarIdentType = 742, RULE_jsonAttribute = 743,
		RULE_identifierKeyword = 744, RULE_identifierKeywordsAmbiguous1RolesAndLabels = 745,
		RULE_identifierKeywordsAmbiguous2Labels = 746, RULE_labelKeyword = 747,
		RULE_identifierKeywordsAmbiguous3Roles = 748, RULE_identifierKeywordsUnambiguous = 749,
		RULE_roleKeyword = 750, RULE_lValueKeyword = 751, RULE_identifierKeywordsAmbiguous4SystemVariables = 752,
		RULE_roleOrIdentifierKeyword = 753, RULE_roleOrLabelKeyword = 754;
	private static String[] makeRuleNames() {
		return new String[] {
			"queries", "query", "simpleStatement", "alterStatement", "alterDatabase",
			"alterDatabaseOption", "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions",
			"alterLogfileGroupOption", "alterServer", "alterTable", "alterTableActions",
			"alterCommandList", "alterCommandsModifierList", "standaloneAlterCommands",
			"alterPartition", "alterList", "alterCommandsModifier", "alterListItem",
			"place", "restrict", "alterOrderList", "alterAlgorithmOption", "alterLockOption",
			"indexLockAndAlgorithm", "withValidation", "removePartitioning", "allOrPartitionNameList",
			"alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption",
			"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption",
			"alterView", "viewTail", "viewQueryBlock", "viewCheckOption", "alterInstanceStatement",
			"createStatement", "createDatabase", "createDatabaseOption", "createTable",
			"tableElementList", "tableElement", "duplicateAsQe", "asCreateQueryExpression",
			"queryExpressionOrParens", "queryExpressionWithOptLockingClauses", "createRoutine",
			"createProcedure", "routineString", "storedRoutineBody", "createFunction",
			"createUdf", "routineCreateOption", "routineAlterOptions", "routineOption",
			"createIndex", "indexNameAndType", "createIndexTarget", "createLogfileGroup",
			"logfileGroupOptions", "logfileGroupOption", "createServer", "serverOptions",
			"serverOption", "createTablespace", "createUndoTablespace", "tsDataFileName",
			"tsDataFile", "tablespaceOptions", "tablespaceOption", "tsOptionInitialSize",
			"tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", "tsOptionMaxSize",
			"tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", "tsOptionWait",
			"tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", "tsOptionEngineAttribute",
			"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid",
			"createTrigger", "triggerFollowsPrecedesClause", "createEvent", "createRole",
			"createSpatialReference", "srsAttribute", "dropStatement", "dropDatabase",
			"dropEvent", "dropFunction", "dropProcedure", "dropIndex", "dropLogfileGroup",
			"dropLogfileGroupOption", "dropServer", "dropTable", "dropTableSpace",
			"dropTrigger", "dropView", "dropRole", "dropSpatialReference", "dropUndoTablespace",
			"renameTableStatement", "renamePair", "truncateTableStatement", "importStatement",
			"callStatement", "deleteStatement", "partitionDelete", "deleteStatementOption",
			"doStatement", "handlerStatement", "handlerReadOrScan", "insertStatement",
			"insertLockOption", "insertFromConstructor", "fields", "insertValues",
			"insertQueryExpression", "valueList", "values", "valuesReference", "insertUpdateList",
			"loadStatement", "dataOrXml", "loadDataLock", "loadFrom", "loadSourceType",
			"sourceCount", "sourceOrder", "xmlRowsIdentifiedBy", "loadDataFileTail",
			"loadDataFileTargetList", "fieldOrVariableList", "loadAlgorithm", "loadParallel",
			"loadMemory", "replaceStatement", "selectStatement", "selectStatementWithInto",
			"queryExpression", "queryExpressionBody", "queryExpressionParens", "queryPrimary",
			"querySpecification", "subquery", "querySpecOption", "limitClause", "simpleLimitClause",
			"limitOptions", "limitOption", "intoClause", "procedureAnalyseClause",
			"havingClause", "qualifyClause", "windowClause", "windowDefinition",
			"windowSpec", "windowSpecDetails", "windowFrameClause", "windowFrameUnits",
			"windowFrameExtent", "windowFrameStart", "windowFrameBetween", "windowFrameBound",
			"windowFrameExclusion", "withClause", "commonTableExpression", "groupByClause",
			"olapOption", "orderClause", "direction", "fromClause", "tableReferenceList",
			"tableValueConstructor", "explicitTable", "rowValueExplicit", "selectOption",
			"lockingClauseList", "lockingClause", "lockStrengh", "lockedRowAction",
			"selectItemList", "selectItem", "selectAlias", "whereClause", "tableReference",
			"escapedTableReference", "joinedTable", "naturalJoinType", "innerJoinType",
			"outerJoinType", "tableFactor", "singleTable", "singleTableParens", "derivedTable",
			"tableReferenceListParens", "tableFunction", "columnsClause", "jtColumn",
			"onEmptyOrError", "onEmptyOrErrorJsonTable", "onEmpty", "onError", "jsonOnResponse",
			"unionOption", "tableAlias", "indexHintList", "indexHint", "indexHintType",
			"keyOrIndex", "constraintKeyType", "indexHintClause", "indexList", "indexListElement",
			"updateStatement", "transactionOrLockingStatement", "transactionStatement",
			"beginWork", "startTransactionOptionList", "savepointStatement", "lockStatement",
			"lockItem", "lockOption", "xaStatement", "xaConvert", "xid", "replicationStatement",
			"purgeOptions", "resetOption", "masterOrBinaryLogsAndGtids", "sourceResetOptions",
			"replicationLoad", "changeReplicationSource", "changeSource", "sourceDefinitions",
			"sourceDefinition", "changeReplicationSourceAutoPosition", "changeReplicationSourceHost",
			"changeReplicationSourceBind", "changeReplicationSourceUser", "changeReplicationSourcePassword",
			"changeReplicationSourcePort", "changeReplicationSourceConnectRetry",
			"changeReplicationSourceRetryCount", "changeReplicationSourceDelay",
			"changeReplicationSourceSSL", "changeReplicationSourceSSLCA", "changeReplicationSourceSSLCApath",
			"changeReplicationSourceSSLCipher", "changeReplicationSourceSSLCLR",
			"changeReplicationSourceSSLCLRpath", "changeReplicationSourceSSLKey",
			"changeReplicationSourceSSLVerifyServerCert", "changeReplicationSourceTLSVersion",
			"changeReplicationSourceTLSCiphersuites", "changeReplicationSourceSSLCert",
			"changeReplicationSourcePublicKey", "changeReplicationSourceGetSourcePublicKey",
			"changeReplicationSourceHeartbeatPeriod", "changeReplicationSourceCompressionAlgorithm",
			"changeReplicationSourceZstdCompressionLevel", "privilegeCheckDef", "tablePrimaryKeyCheckDef",
			"assignGtidsToAnonymousTransactionsDefinition", "sourceTlsCiphersuitesDef",
			"sourceFileDef", "sourceLogFile", "sourceLogPos", "serverIdList", "changeReplication",
			"filterDefinition", "filterDbList", "filterTableList", "filterStringList",
			"filterWildDbTableString", "filterDbPairList", "startReplicaStatement",
			"stopReplicaStatement", "replicaUntil", "userOption", "passwordOption",
			"defaultAuthOption", "pluginDirOption", "replicaThreadOptions", "replicaThreadOption",
			"groupReplication", "groupReplicationStartOptions", "groupReplicationStartOption",
			"groupReplicationUser", "groupReplicationPassword", "groupReplicationPluginAuth",
			"replica", "preparedStatement", "executeStatement", "executeVarList",
			"cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement",
			"alterUserStatement", "alterUserList", "alterUser", "oldAlterUser", "userFunction",
			"createUserStatement", "createUserTail", "userAttributes", "defaultRoleClause",
			"requireClause", "connectOptions", "accountLockPasswordExpireOptions",
			"userAttribute", "dropUserStatement", "grantStatement", "grantTargetList",
			"grantOptions", "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause",
			"renameUserStatement", "revokeStatement", "aclType", "roleOrPrivilegesList",
			"roleOrPrivilege", "grantIdentifier", "requireList", "requireListElement",
			"grantOption", "setRoleStatement", "roleList", "role", "tableAdministrationStatement",
			"histogramAutoUpdate", "histogramUpdateParam", "histogramNumBuckets",
			"histogram", "checkOption", "repairType", "uninstallStatement", "installStatement",
			"installOptionType", "installSetRvalue", "installSetValue", "installSetValueList",
			"setStatement", "startOptionValueList", "transactionCharacteristics",
			"transactionAccessMode", "isolationLevel", "optionValueListContinued",
			"optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType",
			"optionValueFollowingOptionType", "setExprOrDefault", "showDatabasesStatement",
			"showTablesStatement", "showTriggersStatement", "showEventsStatement",
			"showTableStatusStatement", "showOpenTablesStatement", "showParseTreeStatement",
			"showPluginsStatement", "showEngineLogsStatement", "showEngineMutexStatement",
			"showEngineStatusStatement", "showColumnsStatement", "showBinaryLogsStatement",
			"showBinaryLogStatusStatement", "showReplicasStatement", "showBinlogEventsStatement",
			"showRelaylogEventsStatement", "showKeysStatement", "showEnginesStatement",
			"showCountWarningsStatement", "showCountErrorsStatement", "showWarningsStatement",
			"showErrorsStatement", "showProfilesStatement", "showProfileStatement",
			"showStatusStatement", "showProcessListStatement", "showVariablesStatement",
			"showCharacterSetStatement", "showCollationStatement", "showPrivilegesStatement",
			"showGrantsStatement", "showCreateDatabaseStatement", "showCreateTableStatement",
			"showCreateViewStatement", "showMasterStatusStatement", "showReplicaStatusStatement",
			"showCreateProcedureStatement", "showCreateFunctionStatement", "showCreateTriggerStatement",
			"showCreateProcedureStatusStatement", "showCreateFunctionStatusStatement",
			"showCreateProcedureCodeStatement", "showCreateFunctionCodeStatement",
			"showCreateEventStatement", "showCreateUserStatement", "showCommandType",
			"engineOrAll", "fromOrIn", "inDb", "profileDefinitions", "profileDefinition",
			"otherAdministrativeStatement", "keyCacheListOrParts", "keyCacheList",
			"assignToKeycache", "assignToKeycachePartition", "cacheKeyList", "keyUsageElement",
			"keyUsageList", "flushOption", "logType", "flushTables", "flushTablesOptions",
			"preloadTail", "preloadList", "preloadKeys", "adminPartition", "resourceGroupManagement",
			"createResourceGroup", "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority",
			"resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup",
			"threadIdList", "dropResourceGroup", "utilityStatement", "describeStatement",
			"explainStatement", "explainOptions", "explainableStatement", "explainInto",
			"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp",
			"predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast",
			"jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall",
			"samplingMethod", "samplingPercentage", "tablesampleClause", "windowingClause",
			"leadLagInfo", "stableInteger", "paramOrVar", "nullTreatment", "jsonFunction",
			"inSumExpr", "identListArg", "identList", "fulltextOptions", "runtimeFunctionCall",
			"returningType", "geometryFunction", "timeFunctionParameters", "fractionalPrecision",
			"weightStringLevels", "weightStringLevelListItem", "dateTimeTtype", "trimFunction",
			"substringFunction", "functionCall", "udfExprList", "udfExpr", "userVariable",
			"inExpressionUserVariableAssignment", "rvalueSystemOrUserVariable", "lvalueVariable",
			"rvalueSystemVariable", "whenExpression", "thenExpression", "elseExpression",
			"castType", "exprList", "charset", "notRule", "not2Rule", "interval",
			"intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses",
			"simpleExprWithParentheses", "orderList", "orderExpression", "groupList",
			"groupingExpression", "channel", "compoundStatement", "returnStatement",
			"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement",
			"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock",
			"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock",
			"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration",
			"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition",
			"cursorDeclaration", "iterateStatement", "leaveStatement", "getDiagnosticsStatement",
			"signalAllowedExpr", "statementInformationItem", "conditionInformationItem",
			"signalInformationItemName", "signalStatement", "resignalStatement",
			"signalInformationItem", "cursorOpen", "cursorClose", "cursorFetch",
			"schedule", "columnDefinition", "checkOrReferences", "checkConstraint",
			"constraintEnforcement", "tableConstraintDef", "constraintName", "fieldDefinition",
			"columnAttribute", "columnFormat", "storageMedia", "now", "nowOrSignedLiteral",
			"gcolAttribute", "references", "deleteOption", "keyList", "keyPart",
			"keyListWithExpression", "keyPartOrExpression", "indexType", "indexOption",
			"commonIndexOption", "visibility", "indexTypeClause", "fulltextIndexOption",
			"spatialIndexOption", "dataTypeDefinition", "dataType", "nchar", "realType",
			"fieldLength", "fieldOptions", "charsetWithOptBinary", "ascii", "unicode",
			"wsNumCodepoints", "typeDatetimePrecision", "functionDatetimePrecision",
			"charsetName", "collationName", "createTableOptions", "createTableOptionsEtc",
			"createPartitioningEtc", "createTableOptionsSpaceSeparated", "createTableOption",
			"ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset",
			"partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm",
			"partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption",
			"subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem",
			"definerClause", "ifExists", "ifExistsIdentifier", "persistedVariableIdentifier",
			"ifNotExists", "ignoreUnknownUser", "procedureParameter", "functionParameter",
			"collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList",
			"updateList", "updateElement", "charsetClause", "fieldsClause", "fieldTerm",
			"linesClause", "lineTerm", "userList", "createUserList", "createUser",
			"createUserWithMfa", "identification", "identifiedByPassword", "identifiedByRandomPassword",
			"identifiedWithPlugin", "identifiedWithPluginAsAuth", "identifiedWithPluginByPassword",
			"identifiedWithPluginByRandomPassword", "initialAuth", "retainCurrentPassword",
			"discardOldPassword", "userRegistration", "factor", "replacePassword",
			"userIdentifierOrText", "user", "likeClause", "likeOrWhere", "onlineOption",
			"noWriteToBinLog", "usePartition", "fieldIdentifier", "columnName", "columnInternalRef",
			"columnInternalRefList", "columnRef", "insertIdentifier", "indexName",
			"indexRef", "tableWild", "schemaName", "schemaRef", "procedureName",
			"procedureRef", "functionName", "functionRef", "triggerName", "triggerRef",
			"viewName", "viewRef", "tablespaceName", "tablespaceRef", "logfileGroupName",
			"logfileGroupRef", "eventName", "eventRef", "udfName", "serverName",
			"serverRef", "engineRef", "tableName", "filterTableRef", "tableRefWithWildcard",
			"tableRef", "tableRefList", "tableAliasRefList", "parameterName", "labelIdentifier",
			"labelRef", "roleIdentifier", "pluginRef", "componentRef", "resourceGroupRef",
			"windowName", "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses",
			"qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", "ulong_number",
			"real_ulong_number", "ulonglongNumber", "real_ulonglong_number", "signedLiteral",
			"signedLiteralOrNull", "literal", "literalOrNull", "nullAsLiteral", "stringList",
			"textStringLiteral", "textString", "textStringHash", "textLiteral", "textStringNoLinebreak",
			"textStringLiteralList", "numLiteral", "boolLiteral", "nullLiteral",
			"int64Literal", "temporalLiteral", "floatOptions", "standardFloatOptions",
			"precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText",
			"sizeNumber", "parentheses", "equal", "optionType", "rvalueSystemVariableType",
			"setVarIdentType", "jsonAttribute", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels",
			"identifierKeywordsAmbiguous2Labels", "labelKeyword", "identifierKeywordsAmbiguous3Roles",
			"identifierKeywordsUnambiguous", "roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables",
			"roleOrIdentifierKeyword", "roleOrLabelKeyword"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, "'='", "':='", "'<=>'", "'>='", "'>'",
			"'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'",
			"'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'",
			"':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", "'@'", null,
			"'@@'", "'\\N'", "'?'", null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, "'<>'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", "INT_NUMBER", "LONG_NUMBER",
			"ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR",
			"GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR",
			"LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR",
			"MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR",
			"BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR",
			"LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR",
			"LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL",
			"SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL",
			"OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL",
			"JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX",
			"AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER",
			"DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL",
			"ACTION_SYMBOL", "ADD_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL",
			"AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL",
			"ALWAYS_SYMBOL", "ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL",
			"ASC_SYMBOL", "ASCII_SYMBOL", "ASENSITIVE_SYMBOL", "AT_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL",
			"AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BACKUP_SYMBOL",
			"BEFORE_SYMBOL", "BEGIN_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL",
			"BINLOG_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", "BIT_SYMBOL", "BIT_XOR_SYMBOL",
			"BLOB_SYMBOL", "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", "BOOL_SYMBOL", "BOTH_SYMBOL",
			"BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", "CALL_SYMBOL",
			"CASCADE_SYMBOL", "CASCADED_SYMBOL", "CASE_SYMBOL", "CAST_SYMBOL", "CATALOG_NAME_SYMBOL",
			"CHAIN_SYMBOL", "CHANGE_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL",
			"CHARSET_SYMBOL", "CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", "CIPHER_SYMBOL",
			"CLASS_ORIGIN_SYMBOL", "CLIENT_SYMBOL", "CLOSE_SYMBOL", "COALESCE_SYMBOL",
			"CODE_SYMBOL", "COLLATE_SYMBOL", "COLLATION_SYMBOL", "COLUMNS_SYMBOL",
			"COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", "COMMENT_SYMBOL",
			"COMMITTED_SYMBOL", "COMMIT_SYMBOL", "COMPACT_SYMBOL", "COMPLETION_SYMBOL",
			"COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", "CONCURRENT_SYMBOL", "CONDITION_SYMBOL",
			"CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", "CONSTRAINT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL",
			"CONSTRAINT_NAME_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", "CONTAINS_SYMBOL",
			"CONTEXT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL",
			"CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", "CUBE_SYMBOL", "CURDATE_SYMBOL",
			"CURRENT_SYMBOL", "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", "CURRENT_USER_SYMBOL",
			"CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", "CURTIME_SYMBOL", "DATABASE_SYMBOL",
			"DATABASES_SYMBOL", "DATAFILE_SYMBOL", "DATA_SYMBOL", "DATETIME_SYMBOL",
			"DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", "DAY_HOUR_SYMBOL",
			"DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", "DAY_SYMBOL",
			"DEALLOCATE_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL",
			"DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL", "DELAY_KEY_WRITE_SYMBOL",
			"DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL",
			"DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL",
			"DISK_SYMBOL", "DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", "DO_SYMBOL",
			"DROP_SYMBOL", "DUAL_SYMBOL", "DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL",
			"DYNAMIC_SYMBOL", "EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL",
			"ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", "END_SYMBOL", "ENDS_SYMBOL",
			"ENGINES_SYMBOL", "ENGINE_SYMBOL", "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL",
			"ESCAPED_SYMBOL", "ESCAPE_SYMBOL", "EVENTS_SYMBOL", "EVENT_SYMBOL", "EVERY_SYMBOL",
			"EXCHANGE_SYMBOL", "EXECUTE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL",
			"EXPANSION_SYMBOL", "EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL",
			"EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", "FALSE_SYMBOL",
			"FAST_SYMBOL", "FAULTS_SYMBOL", "FETCH_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL",
			"FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT_SYMBOL", "FLUSH_SYMBOL",
			"FOLLOWS_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", "FORMAT_SYMBOL",
			"FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", "FULLTEXT_SYMBOL", "FUNCTION_SYMBOL",
			"GET_SYMBOL", "GENERAL_SYMBOL", "GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL",
			"GEOMETRYCOLLECTION_SYMBOL", "GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL",
			"GLOBAL_SYMBOL", "GRANT_SYMBOL", "GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL",
			"HANDLER_SYMBOL", "HASH_SYMBOL", "HAVING_SYMBOL", "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL",
			"HOST_SYMBOL", "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL",
			"HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL",
			"IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL",
			"INDEX_SYMBOL", "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL",
			"INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", "INSERT_METHOD_SYMBOL",
			"INSTANCE_SYMBOL", "INSTALL_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL",
			"INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL",
			"IO_BEFORE_GTIDS_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", "IS_SYMBOL", "ISOLATION_SYMBOL",
			"ISSUER_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", "JSON_SYMBOL", "KEYS_SYMBOL",
			"KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", "LANGUAGE_SYMBOL",
			"LAST_SYMBOL", "LEADING_SYMBOL", "LEAVES_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL",
			"LESS_SYMBOL", "LEVEL_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL",
			"LINES_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOAD_SYMBOL", "LOCAL_SYMBOL",
			"LOCKS_SYMBOL", "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL",
			"LONGTEXT_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL",
			"MASTER_AUTO_POSITION_SYMBOL", "MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL",
			"MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL",
			"MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", "MASTER_PORT_SYMBOL",
			"MASTER_RETRY_COUNT_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_SSL_CA_SYMBOL",
			"MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL",
			"MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_SSL_SYMBOL",
			"MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MASTER_SYMBOL", "MASTER_TLS_VERSION_SYMBOL",
			"MASTER_USER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MATCH_SYMBOL",
			"MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_ROWS_SYMBOL",
			"MAX_SIZE_SYMBOL", "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL",
			"MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL",
			"MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL",
			"MICROSECOND_SYMBOL", "MID_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL",
			"MINUTE_SECOND_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL",
			"MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", "MOD_SYMBOL", "MONTH_SYMBOL",
			"MULTILINESTRING_SYMBOL", "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL",
			"MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL",
			"NATIONAL_SYMBOL", "NATURAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL",
			"NEVER_SYMBOL", "NEW_SYMBOL", "NEXT_SYMBOL", "NODEGROUP_SYMBOL", "NONE_SYMBOL",
			"NOT_SYMBOL", "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL",
			"NULL_SYMBOL", "NUMBER_SYMBOL", "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL",
			"OFFLINE_SYMBOL", "OFFSET_SYMBOL", "ON_SYMBOL", "ONE_SYMBOL", "ONLINE_SYMBOL",
			"ONLY_SYMBOL", "OPEN_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL",
			"OPTIONS_SYMBOL", "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL",
			"OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", "OUT_SYMBOL", "OWNER_SYMBOL",
			"PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARSER_SYMBOL", "PARTIAL_SYMBOL",
			"PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", "PASSWORD_SYMBOL",
			"PHASE_SYMBOL", "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL",
			"POINT_SYMBOL", "POLYGON_SYMBOL", "PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL",
			"PRECISION_SYMBOL", "PREPARE_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL",
			"PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", "PROCESS_SYMBOL",
			"PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL",
			"PURGE_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "RANGE_SYMBOL",
			"READS_SYMBOL", "READ_ONLY_SYMBOL", "READ_SYMBOL", "READ_WRITE_SYMBOL",
			"REAL_SYMBOL", "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL",
			"REDUNDANT_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", "RELAY_SYMBOL",
			"RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL",
			"RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", "RENAME_SYMBOL",
			"REORGANIZE_SYMBOL", "REPAIR_SYMBOL", "REPEATABLE_SYMBOL", "REPEAT_SYMBOL",
			"REPLACE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL",
			"REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", "REPLICATE_WILD_DO_TABLE_SYMBOL",
			"REPLICATE_WILD_IGNORE_TABLE_SYMBOL", "REPLICATE_REWRITE_DB_SYMBOL",
			"REQUIRE_SYMBOL", "RESET_SYMBOL", "RESIGNAL_SYMBOL", "RESTORE_SYMBOL",
			"RESTRICT_SYMBOL", "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL",
			"RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", "RIGHT_SYMBOL", "ROLLBACK_SYMBOL",
			"ROLLUP_SYMBOL", "ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL",
			"ROW_FORMAT_SYMBOL", "ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL",
			"SCHEDULE_SYMBOL", "SCHEMA_NAME_SYMBOL", "SECOND_MICROSECOND_SYMBOL",
			"SECOND_SYMBOL", "SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL",
			"SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", "SESSION_SYMBOL",
			"SERVER_SYMBOL", "SESSION_USER_SYMBOL", "SET_SYMBOL", "SHARE_SYMBOL",
			"SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", "SIGNED_SYMBOL", "SIMPLE_SYMBOL",
			"SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", "SNAPSHOT_SYMBOL",
			"SOCKET_SYMBOL", "SONAME_SYMBOL", "SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SPATIAL_SYMBOL",
			"SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL",
			"SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL",
			"SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL",
			"SQL_NO_CACHE_SYMBOL", "SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SQL_THREAD_SYMBOL",
			"SSL_SYMBOL", "STACKED_SYMBOL", "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL",
			"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL",
			"STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL",
			"STD_SYMBOL", "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL",
			"STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", "SUBDATE_SYMBOL", "SUBJECT_SYMBOL",
			"SUBPARTITIONS_SYMBOL", "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL",
			"SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL",
			"SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL",
			"TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", "TEMPORARY_SYMBOL",
			"TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL",
			"THEN_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMPADD_SYMBOL", "TIMESTAMPDIFF_SYMBOL",
			"TIME_SYMBOL", "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL",
			"TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL",
			"TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "TRUNCATE_SYMBOL", "TYPES_SYMBOL",
			"TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL",
			"UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDO_SYMBOL", "UNICODE_SYMBOL",
			"UNINSTALL_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL",
			"UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", "UPDATE_SYMBOL",
			"UPGRADE_SYMBOL", "USAGE_SYMBOL", "USER_RESOURCES_SYMBOL", "USER_SYMBOL",
			"USE_FRM_SYMBOL", "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL",
			"UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VALUE_SYMBOL",
			"VARBINARY_SYMBOL", "VARCHAR_SYMBOL", "VARIABLES_SYMBOL", "VARIANCE_SYMBOL",
			"VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", "VIEW_SYMBOL",
			"VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", "WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL",
			"WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL",
			"WORK_SYMBOL", "WRAPPER_SYMBOL", "WRITE_SYMBOL", "X509_SYMBOL", "XA_SYMBOL",
			"XID_SYMBOL", "XML_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL",
			"ZEROFILL_SYMBOL", "PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL",
			"VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL",
			"JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL",
			"LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL",
			"HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL",
			"CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL",
			"FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", "LAST_VALUE_SYMBOL",
			"LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL",
			"OVER_SYMBOL", "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", "RANK_SYMBOL",
			"RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL",
			"WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", "NESTED_SYMBOL",
			"ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", "REUSE_SYMBOL",
			"SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", "SYSTEM_SYMBOL",
			"VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL",
			"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL",
			"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL",
			"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL",
			"INACTIVE_SYMBOL", "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL",
			"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL",
			"MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL",
			"PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL",
			"PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL",
			"STREAM_SYMBOL", "OFF_SYMBOL", "RETURNING_SYMBOL", "JSON_VALUE_SYMBOL",
			"TLS_SYMBOL", "ATTRIBUTE_SYMBOL", "ENGINE_ATTRIBUTE_SYMBOL", "SECONDARY_ENGINE_ATTRIBUTE_SYMBOL",
			"SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL", "ZONE_SYMBOL", "GRAMMAR_SELECTOR_DERIVED_EXPR",
			"REPLICA_SYMBOL", "REPLICAS_SYMBOL", "ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL",
			"GET_SOURCE_PUBLIC_KEY_SYMBOL", "SOURCE_AUTO_POSITION_SYMBOL", "SOURCE_BIND_SYMBOL",
			"SOURCE_COMPRESSION_ALGORITHM_SYMBOL", "SOURCE_CONNECT_RETRY_SYMBOL",
			"SOURCE_DELAY_SYMBOL", "SOURCE_HEARTBEAT_PERIOD_SYMBOL", "SOURCE_HOST_SYMBOL",
			"SOURCE_LOG_FILE_SYMBOL", "SOURCE_LOG_POS_SYMBOL", "SOURCE_PASSWORD_SYMBOL",
			"SOURCE_PORT_SYMBOL", "SOURCE_PUBLIC_KEY_PATH_SYMBOL", "SOURCE_RETRY_COUNT_SYMBOL",
			"SOURCE_SSL_SYMBOL", "SOURCE_SSL_CA_SYMBOL", "SOURCE_SSL_CAPATH_SYMBOL",
			"SOURCE_SSL_CERT_SYMBOL", "SOURCE_SSL_CIPHER_SYMBOL", "SOURCE_SSL_CRL_SYMBOL",
			"SOURCE_SSL_CRLPATH_SYMBOL", "SOURCE_SSL_KEY_SYMBOL", "SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL",
			"SOURCE_TLS_CIPHERSUITES_SYMBOL", "SOURCE_TLS_VERSION_SYMBOL", "SOURCE_USER_SYMBOL",
			"SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL", "ST_COLLECT_SYMBOL", "KEYRING_SYMBOL",
			"AUTHENTICATION_SYMBOL", "FACTOR_SYMBOL", "FINISH_SYMBOL", "INITIATE_SYMBOL",
			"REGISTRATION_SYMBOL", "UNREGISTER_SYMBOL", "INITIAL_SYMBOL", "CHALLENGE_RESPONSE_SYMBOL",
			"GTID_ONLY_SYMBOL", "INTERSECT_SYMBOL", "BULK_SYMBOL", "URL_SYMBOL",
			"GENERATE_SYMBOL", "PARSE_TREE_SYMBOL", "LOG_SYMBOL", "GTIDS_SYMBOL",
			"PARALLEL_SYMBOL", "S3_SYMBOL", "QUALIFY_SYMBOL", "AUTO_SYMBOL", "MANUAL_SYMBOL",
			"BERNOULLI_SYMBOL", "TABLESAMPLE_SYMBOL", "WHITESPACE", "INVALID_INPUT",
			"UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID",
			"DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "DOLLAR_QUOTED_STRING_TEXT",
			"VERSION_COMMENT_START", "MYSQL_COMMENT_START", "VERSION_COMMENT_END",
			"BLOCK_COMMENT", "INVALID_BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT",
			"NOT_EQUAL2_OPERATOR"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueriesContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(Recognizer.EOF, 0); }
		public List<QueryContext> query() {
			return getRuleContexts(QueryContext.class);
		}
		public QueryContext query(int i) {
			return getRuleContext(QueryContext.class,i);
		}
		public QueriesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queries; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQueries(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQueries(this);
			}
		}
	}

	public final QueriesContext queries() throws RecognitionException {
		QueriesContext _localctx = new QueriesContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_queries);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1513);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1510);
					query();
					}
					}
				}
				setState(1515);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			}
			setState(1516);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryContext extends ParserRuleContext {
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQuery(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQuery(this);
			}
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				setState(1518);
				simpleStatement();
				}
				break;
			case 2:
				{
				setState(1519);
				beginWork();
				}
				break;
			}
			setState(1522);
			match(SEMICOLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleStatementContext extends ParserRuleContext {
		public AlterStatementContext alterStatement() {
			return getRuleContext(AlterStatementContext.class,0);
		}
		public CreateStatementContext createStatement() {
			return getRuleContext(CreateStatementContext.class,0);
		}
		public DropStatementContext dropStatement() {
			return getRuleContext(DropStatementContext.class,0);
		}
		public RenameTableStatementContext renameTableStatement() {
			return getRuleContext(RenameTableStatementContext.class,0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return getRuleContext(TruncateTableStatementContext.class,0);
		}
		public ImportStatementContext importStatement() {
			return getRuleContext(ImportStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public LoadStatementContext loadStatement() {
			return getRuleContext(LoadStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return getRuleContext(TransactionOrLockingStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public CloneStatementContext cloneStatement() {
			return getRuleContext(CloneStatementContext.class,0);
		}
		public AccountManagementStatementContext accountManagementStatement() {
			return getRuleContext(AccountManagementStatementContext.class,0);
		}
		public TableAdministrationStatementContext tableAdministrationStatement() {
			return getRuleContext(TableAdministrationStatementContext.class,0);
		}
		public UninstallStatementContext uninstallStatement() {
			return getRuleContext(UninstallStatementContext.class,0);
		}
		public InstallStatementContext installStatement() {
			return getRuleContext(InstallStatementContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowDatabasesStatementContext showDatabasesStatement() {
			return getRuleContext(ShowDatabasesStatementContext.class,0);
		}
		public ShowTablesStatementContext showTablesStatement() {
			return getRuleContext(ShowTablesStatementContext.class,0);
		}
		public ShowTriggersStatementContext showTriggersStatement() {
			return getRuleContext(ShowTriggersStatementContext.class,0);
		}
		public ShowEventsStatementContext showEventsStatement() {
			return getRuleContext(ShowEventsStatementContext.class,0);
		}
		public ShowTableStatusStatementContext showTableStatusStatement() {
			return getRuleContext(ShowTableStatusStatementContext.class,0);
		}
		public ShowOpenTablesStatementContext showOpenTablesStatement() {
			return getRuleContext(ShowOpenTablesStatementContext.class,0);
		}
		public ShowParseTreeStatementContext showParseTreeStatement() {
			return getRuleContext(ShowParseTreeStatementContext.class,0);
		}
		public ShowPluginsStatementContext showPluginsStatement() {
			return getRuleContext(ShowPluginsStatementContext.class,0);
		}
		public ShowEngineLogsStatementContext showEngineLogsStatement() {
			return getRuleContext(ShowEngineLogsStatementContext.class,0);
		}
		public ShowEngineMutexStatementContext showEngineMutexStatement() {
			return getRuleContext(ShowEngineMutexStatementContext.class,0);
		}
		public ShowEngineStatusStatementContext showEngineStatusStatement() {
			return getRuleContext(ShowEngineStatusStatementContext.class,0);
		}
		public ShowColumnsStatementContext showColumnsStatement() {
			return getRuleContext(ShowColumnsStatementContext.class,0);
		}
		public ShowBinaryLogsStatementContext showBinaryLogsStatement() {
			return getRuleContext(ShowBinaryLogsStatementContext.class,0);
		}
		public ShowBinaryLogStatusStatementContext showBinaryLogStatusStatement() {
			return getRuleContext(ShowBinaryLogStatusStatementContext.class,0);
		}
		public ShowReplicasStatementContext showReplicasStatement() {
			return getRuleContext(ShowReplicasStatementContext.class,0);
		}
		public ShowBinlogEventsStatementContext showBinlogEventsStatement() {
			return getRuleContext(ShowBinlogEventsStatementContext.class,0);
		}
		public ShowRelaylogEventsStatementContext showRelaylogEventsStatement() {
			return getRuleContext(ShowRelaylogEventsStatementContext.class,0);
		}
		public ShowKeysStatementContext showKeysStatement() {
			return getRuleContext(ShowKeysStatementContext.class,0);
		}
		public ShowEnginesStatementContext showEnginesStatement() {
			return getRuleContext(ShowEnginesStatementContext.class,0);
		}
		public ShowCountWarningsStatementContext showCountWarningsStatement() {
			return getRuleContext(ShowCountWarningsStatementContext.class,0);
		}
		public ShowCountErrorsStatementContext showCountErrorsStatement() {
			return getRuleContext(ShowCountErrorsStatementContext.class,0);
		}
		public ShowWarningsStatementContext showWarningsStatement() {
			return getRuleContext(ShowWarningsStatementContext.class,0);
		}
		public ShowErrorsStatementContext showErrorsStatement() {
			return getRuleContext(ShowErrorsStatementContext.class,0);
		}
		public ShowProfilesStatementContext showProfilesStatement() {
			return getRuleContext(ShowProfilesStatementContext.class,0);
		}
		public ShowProfileStatementContext showProfileStatement() {
			return getRuleContext(ShowProfileStatementContext.class,0);
		}
		public ShowStatusStatementContext showStatusStatement() {
			return getRuleContext(ShowStatusStatementContext.class,0);
		}
		public ShowProcessListStatementContext showProcessListStatement() {
			return getRuleContext(ShowProcessListStatementContext.class,0);
		}
		public ShowVariablesStatementContext showVariablesStatement() {
			return getRuleContext(ShowVariablesStatementContext.class,0);
		}
		public ShowCharacterSetStatementContext showCharacterSetStatement() {
			return getRuleContext(ShowCharacterSetStatementContext.class,0);
		}
		public ShowCollationStatementContext showCollationStatement() {
			return getRuleContext(ShowCollationStatementContext.class,0);
		}
		public ShowPrivilegesStatementContext showPrivilegesStatement() {
			return getRuleContext(ShowPrivilegesStatementContext.class,0);
		}
		public ShowGrantsStatementContext showGrantsStatement() {
			return getRuleContext(ShowGrantsStatementContext.class,0);
		}
		public ShowCreateDatabaseStatementContext showCreateDatabaseStatement() {
			return getRuleContext(ShowCreateDatabaseStatementContext.class,0);
		}
		public ShowCreateTableStatementContext showCreateTableStatement() {
			return getRuleContext(ShowCreateTableStatementContext.class,0);
		}
		public ShowCreateViewStatementContext showCreateViewStatement() {
			return getRuleContext(ShowCreateViewStatementContext.class,0);
		}
		public ShowMasterStatusStatementContext showMasterStatusStatement() {
			return getRuleContext(ShowMasterStatusStatementContext.class,0);
		}
		public ShowReplicaStatusStatementContext showReplicaStatusStatement() {
			return getRuleContext(ShowReplicaStatusStatementContext.class,0);
		}
		public ShowCreateProcedureStatementContext showCreateProcedureStatement() {
			return getRuleContext(ShowCreateProcedureStatementContext.class,0);
		}
		public ShowCreateFunctionStatementContext showCreateFunctionStatement() {
			return getRuleContext(ShowCreateFunctionStatementContext.class,0);
		}
		public ShowCreateTriggerStatementContext showCreateTriggerStatement() {
			return getRuleContext(ShowCreateTriggerStatementContext.class,0);
		}
		public ShowCreateProcedureStatusStatementContext showCreateProcedureStatusStatement() {
			return getRuleContext(ShowCreateProcedureStatusStatementContext.class,0);
		}
		public ShowCreateFunctionStatusStatementContext showCreateFunctionStatusStatement() {
			return getRuleContext(ShowCreateFunctionStatusStatementContext.class,0);
		}
		public ShowCreateProcedureCodeStatementContext showCreateProcedureCodeStatement() {
			return getRuleContext(ShowCreateProcedureCodeStatementContext.class,0);
		}
		public ShowCreateFunctionCodeStatementContext showCreateFunctionCodeStatement() {
			return getRuleContext(ShowCreateFunctionCodeStatementContext.class,0);
		}
		public ShowCreateEventStatementContext showCreateEventStatement() {
			return getRuleContext(ShowCreateEventStatementContext.class,0);
		}
		public ShowCreateUserStatementContext showCreateUserStatement() {
			return getRuleContext(ShowCreateUserStatementContext.class,0);
		}
		public ResourceGroupManagementContext resourceGroupManagement() {
			return getRuleContext(ResourceGroupManagementContext.class,0);
		}
		public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return getRuleContext(OtherAdministrativeStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public GetDiagnosticsStatementContext getDiagnosticsStatement() {
			return getRuleContext(GetDiagnosticsStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleStatement(this);
			}
		}
	}

	public final SimpleStatementContext simpleStatement() throws RecognitionException {
		SimpleStatementContext _localctx = new SimpleStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_simpleStatement);
		try {
			setState(1600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1524);
				alterStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1525);
				createStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1526);
				dropStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1527);
				renameTableStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1528);
				truncateTableStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1529);
				importStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1530);
				callStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1531);
				deleteStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1532);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1533);
				handlerStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1534);
				insertStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1535);
				loadStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1536);
				replaceStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1537);
				selectStatement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1538);
				updateStatement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1539);
				transactionOrLockingStatement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1540);
				replicationStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1541);
				preparedStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1542);
				cloneStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1543);
				accountManagementStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1544);
				tableAdministrationStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1545);
				uninstallStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1546);
				installStatement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1547);
				setStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1548);
				showDatabasesStatement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1549);
				showTablesStatement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1550);
				showTriggersStatement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1551);
				showEventsStatement();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1552);
				showTableStatusStatement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1553);
				showOpenTablesStatement();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1554);
				showParseTreeStatement();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1555);
				showPluginsStatement();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1556);
				showEngineLogsStatement();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1557);
				showEngineMutexStatement();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1558);
				showEngineStatusStatement();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1559);
				showColumnsStatement();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1560);
				showBinaryLogsStatement();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1561);
				showBinaryLogStatusStatement();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1562);
				showReplicasStatement();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1563);
				showBinlogEventsStatement();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1564);
				showRelaylogEventsStatement();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1565);
				showKeysStatement();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1566);
				showEnginesStatement();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1567);
				showCountWarningsStatement();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1568);
				showCountErrorsStatement();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1569);
				showWarningsStatement();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1570);
				showErrorsStatement();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1571);
				showProfilesStatement();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1572);
				showProfileStatement();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1573);
				showStatusStatement();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1574);
				showProcessListStatement();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1575);
				showVariablesStatement();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1576);
				showCharacterSetStatement();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1577);
				showCollationStatement();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1578);
				showPrivilegesStatement();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1579);
				showGrantsStatement();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1580);
				showCreateDatabaseStatement();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1581);
				showCreateTableStatement();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1582);
				showCreateViewStatement();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1583);
				showMasterStatusStatement();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1584);
				showReplicaStatusStatement();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1585);
				showCreateProcedureStatement();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1586);
				showCreateFunctionStatement();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1587);
				showCreateTriggerStatement();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1588);
				showCreateProcedureStatusStatement();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1589);
				showCreateFunctionStatusStatement();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1590);
				showCreateProcedureCodeStatement();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1591);
				showCreateFunctionCodeStatement();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1592);
				showCreateEventStatement();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1593);
				showCreateUserStatement();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1594);
				resourceGroupManagement();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1595);
				otherAdministrativeStatement();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1596);
				utilityStatement();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1597);
				getDiagnosticsStatement();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1598);
				signalStatement();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1599);
				resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterUndoTablespaceContext alterUndoTablespace() {
			return getRuleContext(AlterUndoTablespaceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterInstanceStatementContext alterInstanceStatement() {
			return getRuleContext(AlterInstanceStatementContext.class,0);
		}
		public RoutineAlterOptionsContext routineAlterOptions() {
			return getRuleContext(RoutineAlterOptionsContext.class,0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterStatement(this);
			}
		}
	}

	public final AlterStatementContext alterStatement() throws RecognitionException {
		AlterStatementContext _localctx = new AlterStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alterStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			match(ALTER_SYMBOL);
			setState(1623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(1603);
				alterTable();
				}
				break;
			case 2:
				{
				setState(1604);
				alterDatabase();
				}
				break;
			case 3:
				{
				setState(1605);
				match(PROCEDURE_SYMBOL);
				setState(1606);
				procedureRef();
				setState(1608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 72057594037960705L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & 5242881L) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					setState(1607);
					routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				setState(1610);
				match(FUNCTION_SYMBOL);
				setState(1611);
				functionRef();
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 72057594037960705L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & 5242881L) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					setState(1612);
					routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				setState(1615);
				alterView();
				}
				break;
			case 6:
				{
				setState(1616);
				alterEvent();
				}
				break;
			case 7:
				{
				setState(1617);
				alterTablespace();
				}
				break;
			case 8:
				{
				setState(1618);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(1619);
				alterUndoTablespace();
				}
				break;
			case 9:
				{
				setState(1620);
				alterLogfileGroup();
				}
				break;
			case 10:
				{
				setState(1621);
				alterServer();
				}
				break;
			case 11:
				{
				setState(1622);
				alterInstanceStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public List<AlterDatabaseOptionContext> alterDatabaseOption() {
			return getRuleContexts(AlterDatabaseOptionContext.class);
		}
		public AlterDatabaseOptionContext alterDatabaseOption(int i) {
			return getRuleContext(AlterDatabaseOptionContext.class,i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterDatabase(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterDatabase(this);
			}
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alterDatabase);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1625);
			match(DATABASE_SYMBOL);
			setState(1626);
			schemaRef();
			setState(1628);
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1627);
					alterDatabaseOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1630);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseOptionContext extends ParserRuleContext {
		public CreateDatabaseOptionContext createDatabaseOption() {
			return getRuleContext(CreateDatabaseOptionContext.class,0);
		}
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TernaryOptionContext ternaryOption() {
			return getRuleContext(TernaryOptionContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterDatabaseOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterDatabaseOption(this);
			}
		}
	}

	public final AlterDatabaseOptionContext alterDatabaseOption() throws RecognitionException {
		AlterDatabaseOptionContext _localctx = new AlterDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alterDatabaseOption);
		int _la;
		try {
			setState(1639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1632);
				createDatabaseOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1633);
				match(READ_SYMBOL);
				setState(1634);
				match(ONLY_SYMBOL);
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(1635);
					match(EQUAL_OPERATOR);
					}
				}

				setState(1638);
				ternaryOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public ReplicaContext replica() {
			return getRuleContext(ReplicaContext.class,0);
		}
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterEvent(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterEvent(this);
			}
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1641);
				definerClause();
				}
			}

			setState(1644);
			match(EVENT_SYMBOL);
			setState(1645);
			eventRef();
			setState(1649);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				setState(1646);
				match(ON_SYMBOL);
				setState(1647);
				match(SCHEDULE_SYMBOL);
				setState(1648);
				schedule();
				}
				break;
			}
			setState(1657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(1651);
				match(ON_SYMBOL);
				setState(1652);
				match(COMPLETION_SYMBOL);
				setState(1654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(1653);
					match(NOT_SYMBOL);
					}
				}

				setState(1656);
				match(PRESERVE_SYMBOL);
				}
			}

			setState(1662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RENAME_SYMBOL) {
				{
				setState(1659);
				match(RENAME_SYMBOL);
				setState(1660);
				match(TO_SYMBOL);
				setState(1661);
				identifier();
				}
			}

			setState(1670);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_SYMBOL:
				{
				setState(1664);
				match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				setState(1665);
				match(DISABLE_SYMBOL);
				setState(1668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(1666);
					match(ON_SYMBOL);
					setState(1667);
					replica();
					}
				}

				}
				break;
			case EOF:
			case SEMICOLON_SYMBOL:
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			setState(1674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				setState(1672);
				match(COMMENT_SYMBOL);
				setState(1673);
				textLiteral();
				}
			}

			setState(1678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DO_SYMBOL) {
				{
				setState(1676);
				match(DO_SYMBOL);
				setState(1677);
				compoundStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return getRuleContext(AlterLogfileGroupOptionsContext.class,0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterLogfileGroup(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterLogfileGroup(this);
			}
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1680);
			match(LOGFILE_SYMBOL);
			setState(1681);
			match(GROUP_SYMBOL);
			setState(1682);
			logfileGroupRef();
			setState(1683);
			match(ADD_SYMBOL);
			setState(1684);
			match(UNDOFILE_SYMBOL);
			setState(1685);
			textLiteral();
			setState(1687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(1686);
				alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterLogfileGroupOptionsContext extends ParserRuleContext {
		public List<AlterLogfileGroupOptionContext> alterLogfileGroupOption() {
			return getRuleContexts(AlterLogfileGroupOptionContext.class);
		}
		public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return getRuleContext(AlterLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterLogfileGroupOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterLogfileGroupOptions(this);
			}
		}
	}

	public final AlterLogfileGroupOptionsContext alterLogfileGroupOptions() throws RecognitionException {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1689);
			alterLogfileGroupOption();
			setState(1696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				{
				setState(1691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(1690);
					match(COMMA_SYMBOL);
					}
				}

				setState(1693);
				alterLogfileGroupOption();
				}
				}
				setState(1698);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterLogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterLogfileGroupOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterLogfileGroupOption(this);
			}
		}
	}

	public final AlterLogfileGroupOptionContext alterLogfileGroupOption() throws RecognitionException {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alterLogfileGroupOption);
		try {
			setState(1702);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1699);
				tsOptionInitialSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1700);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1701);
				tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterServer(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterServer(this);
			}
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alterServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1704);
			match(SERVER_SYMBOL);
			setState(1705);
			serverRef();
			setState(1706);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public AlterTableActionsContext alterTableActions() {
			return getRuleContext(AlterTableActionsContext.class,0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterTable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterTable(this);
			}
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				setState(1708);
				onlineOption();
				}
			}

			setState(1711);
			match(TABLE_SYMBOL);
			setState(1712);
			tableRef();
			setState(1714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1713);
				alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableActionsContext extends ParserRuleContext {
		public AlterCommandListContext alterCommandList() {
			return getRuleContext(AlterCommandListContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public RemovePartitioningContext removePartitioning() {
			return getRuleContext(RemovePartitioningContext.class,0);
		}
		public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return getRuleContext(StandaloneAlterCommandsContext.class,0);
		}
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterTableActions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterTableActions(this);
			}
		}
	}

	public final AlterTableActionsContext alterTableActions() throws RecognitionException {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alterTableActions);
		try {
			setState(1729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1716);
				alterCommandList();
				setState(1719);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PARTITION_SYMBOL:
					{
					setState(1717);
					partitionClause();
					}
					break;
				case REMOVE_SYMBOL:
					{
					setState(1718);
					removePartitioning();
					}
					break;
				case EOF:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1721);
				partitionClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1722);
				removePartitioning();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1726);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					setState(1723);
					alterCommandsModifierList();
					setState(1724);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1728);
				standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterCommandListContext extends ParserRuleContext {
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public AlterListContext alterList() {
			return getRuleContext(AlterListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterCommandList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterCommandList(this);
			}
		}
	}

	public final AlterCommandListContext alterCommandList() throws RecognitionException {
		AlterCommandListContext _localctx = new AlterCommandListContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alterCommandList);
		try {
			setState(1738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1731);
				alterCommandsModifierList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1735);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(1732);
					alterCommandsModifierList();
					setState(1733);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1737);
				alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterCommandsModifierListContext extends ParserRuleContext {
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterCommandsModifierList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterCommandsModifierList(this);
			}
		}
	}

	public final AlterCommandsModifierListContext alterCommandsModifierList() throws RecognitionException {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterCommandsModifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1740);
			alterCommandsModifier();
			setState(1745);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1741);
					match(COMMA_SYMBOL);
					setState(1742);
					alterCommandsModifier();
					}
					}
				}
				setState(1747);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StandaloneAlterCommandsContext extends ParserRuleContext {
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext alterPartition() {
			return getRuleContext(AlterPartitionContext.class,0);
		}
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standaloneAlterCommands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStandaloneAlterCommands(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStandaloneAlterCommands(this);
			}
		}
	}

	public final StandaloneAlterCommandsContext standaloneAlterCommands() throws RecognitionException {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_standaloneAlterCommands);
		int _la;
		try {
			setState(1755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1748);
				match(DISCARD_SYMBOL);
				setState(1749);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1750);
				match(IMPORT_SYMBOL);
				setState(1751);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1752);
				alterPartition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1753);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(1754);
				_la = _input.LA(1);
				if ( !(_la==SECONDARY_LOAD_SYMBOL || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterPartitionContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public List<NoWriteToBinLogContext> noWriteToBinLog() {
			return getRuleContexts(NoWriteToBinLogContext.class);
		}
		public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return getRuleContext(NoWriteToBinLogContext.class,i);
		}
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterPartition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterPartition(this);
			}
		}
	}

	public final AlterPartitionContext alterPartition() throws RecognitionException {
		AlterPartitionContext _localctx = new AlterPartitionContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterPartition);
		int _la;
		try {
			setState(1851);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1757);
				match(ADD_SYMBOL);
				setState(1758);
				match(PARTITION_SYMBOL);
				setState(1760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1759);
					noWriteToBinLog();
					}
				}

				setState(1765);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(1762);
					partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					setState(1763);
					match(PARTITIONS_SYMBOL);
					setState(1764);
					real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1767);
				match(DROP_SYMBOL);
				setState(1768);
				match(PARTITION_SYMBOL);
				setState(1769);
				identifierList();
				}
				break;
			case REBUILD_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1770);
				match(REBUILD_SYMBOL);
				setState(1771);
				match(PARTITION_SYMBOL);
				setState(1773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					setState(1772);
					noWriteToBinLog();
					}
					break;
				}
				setState(1775);
				allOrPartitionNameList();
				}
				break;
			case OPTIMIZE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(1776);
				match(OPTIMIZE_SYMBOL);
				setState(1777);
				match(PARTITION_SYMBOL);
				setState(1779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					setState(1778);
					noWriteToBinLog();
					}
					break;
				}
				setState(1781);
				allOrPartitionNameList();
				setState(1783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1782);
					noWriteToBinLog();
					}
				}

				}
				break;
			case ANALYZE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1785);
				match(ANALYZE_SYMBOL);
				setState(1786);
				match(PARTITION_SYMBOL);
				setState(1788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(1787);
					noWriteToBinLog();
					}
					break;
				}
				setState(1790);
				allOrPartitionNameList();
				}
				break;
			case CHECK_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1791);
				match(CHECK_SYMBOL);
				setState(1792);
				match(PARTITION_SYMBOL);
				setState(1793);
				allOrPartitionNameList();
				setState(1797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 131089L) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					setState(1794);
					checkOption();
					}
					}
					setState(1799);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case REPAIR_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(1800);
				match(REPAIR_SYMBOL);
				setState(1801);
				match(PARTITION_SYMBOL);
				setState(1803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1802);
					noWriteToBinLog();
					}
					break;
				}
				setState(1805);
				allOrPartitionNameList();
				setState(1809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					setState(1806);
					repairType();
					}
					}
					setState(1811);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case COALESCE_SYMBOL:
				enterOuterAlt(_localctx, 8);
				{
				setState(1812);
				match(COALESCE_SYMBOL);
				setState(1813);
				match(PARTITION_SYMBOL);
				setState(1815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1814);
					noWriteToBinLog();
					}
				}

				setState(1817);
				real_ulong_number();
				}
				break;
			case TRUNCATE_SYMBOL:
				enterOuterAlt(_localctx, 9);
				{
				setState(1818);
				match(TRUNCATE_SYMBOL);
				setState(1819);
				match(PARTITION_SYMBOL);
				setState(1820);
				allOrPartitionNameList();
				}
				break;
			case REORGANIZE_SYMBOL:
				enterOuterAlt(_localctx, 10);
				{
				setState(1821);
				match(REORGANIZE_SYMBOL);
				setState(1822);
				match(PARTITION_SYMBOL);
				setState(1824);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(1823);
					noWriteToBinLog();
					}
					break;
				}
				setState(1830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(1826);
					identifierList();
					setState(1827);
					match(INTO_SYMBOL);
					setState(1828);
					partitionDefinitions();
					}
					break;
				}
				}
				break;
			case EXCHANGE_SYMBOL:
				enterOuterAlt(_localctx, 11);
				{
				setState(1832);
				match(EXCHANGE_SYMBOL);
				setState(1833);
				match(PARTITION_SYMBOL);
				setState(1834);
				identifier();
				setState(1835);
				match(WITH_SYMBOL);
				setState(1836);
				match(TABLE_SYMBOL);
				setState(1837);
				tableRef();
				setState(1839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) {
					{
					setState(1838);
					withValidation();
					}
				}

				}
				break;
			case DISCARD_SYMBOL:
				enterOuterAlt(_localctx, 12);
				{
				setState(1841);
				match(DISCARD_SYMBOL);
				setState(1842);
				match(PARTITION_SYMBOL);
				setState(1843);
				allOrPartitionNameList();
				setState(1844);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case IMPORT_SYMBOL:
				enterOuterAlt(_localctx, 13);
				{
				setState(1846);
				match(IMPORT_SYMBOL);
				setState(1847);
				match(PARTITION_SYMBOL);
				setState(1848);
				allOrPartitionNameList();
				setState(1849);
				match(TABLESPACE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterListContext extends ParserRuleContext {
		public List<AlterListItemContext> alterListItem() {
			return getRuleContexts(AlterListItemContext.class);
		}
		public AlterListItemContext alterListItem(int i) {
			return getRuleContext(AlterListItemContext.class,i);
		}
		public List<CreateTableOptionsSpaceSeparatedContext> createTableOptionsSpaceSeparated() {
			return getRuleContexts(CreateTableOptionsSpaceSeparatedContext.class);
		}
		public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return getRuleContext(CreateTableOptionsSpaceSeparatedContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterList(this);
			}
		}
	}

	public final AlterListContext alterList() throws RecognitionException {
		AlterListContext _localctx = new AlterListContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				setState(1853);
				alterListItem();
				}
				break;
			case 2:
				{
				setState(1854);
				createTableOptionsSpaceSeparated();
				}
				break;
			}
			setState(1865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(1857);
				match(COMMA_SYMBOL);
				setState(1861);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(1858);
					alterListItem();
					}
					break;
				case 2:
					{
					setState(1859);
					alterCommandsModifier();
					}
					break;
				case 3:
					{
					setState(1860);
					createTableOptionsSpaceSeparated();
					}
					break;
				}
				}
				}
				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterCommandsModifierContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterCommandsModifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterCommandsModifier(this);
			}
		}
	}

	public final AlterCommandsModifierContext alterCommandsModifier() throws RecognitionException {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alterCommandsModifier);
		try {
			setState(1871);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1868);
				alterAlgorithmOption();
				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1869);
				alterLockOption();
				}
				break;
			case WITH_SYMBOL:
			case WITHOUT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1870);
				withValidation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterListItemContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMN_SYMBOL() { return getToken(MySQLParser.COLUMN_SYMBOL, 0); }
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public PlaceContext place() {
			return getRuleContext(PlaceContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ColumnInternalRefContext columnInternalRef() {
			return getRuleContext(ColumnInternalRefContext.class,0);
		}
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		public RestrictContext restrict() {
			return getRuleContext(RestrictContext.class,0);
		}
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public SignedLiteralOrNullContext signedLiteralOrNull() {
			return getRuleContext(SignedLiteralOrNullContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public AlterOrderListContext alterOrderList() {
			return getRuleContext(AlterOrderListContext.class,0);
		}
		public AlterListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterListItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterListItem(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterListItem(this);
			}
		}
	}

	public final AlterListItemContext alterListItem() throws RecognitionException {
		AlterListItemContext _localctx = new AlterListItemContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alterListItem);
		int _la;
		try {
			setState(2008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1873);
				match(ADD_SYMBOL);
				setState(1875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(1874);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1889);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(1877);
					identifier();
					setState(1878);
					fieldDefinition();
					setState(1880);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
					case 1:
						{
						setState(1879);
						checkOrReferences();
						}
						break;
					}
					setState(1883);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
						{
						setState(1882);
						place();
						}
					}

					}
					break;
				case 2:
					{
					setState(1885);
					match(OPEN_PAR_SYMBOL);
					setState(1886);
					tableElementList();
					setState(1887);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1891);
				match(ADD_SYMBOL);
				setState(1892);
				tableConstraintDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1893);
				match(CHANGE_SYMBOL);
				setState(1895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					setState(1894);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1897);
				columnInternalRef();
				setState(1898);
				identifier();
				setState(1899);
				fieldDefinition();
				setState(1901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					setState(1900);
					place();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1903);
				match(MODIFY_SYMBOL);
				setState(1905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(1904);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1907);
				columnInternalRef();
				setState(1908);
				fieldDefinition();
				setState(1910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					setState(1909);
					place();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1912);
				match(DROP_SYMBOL);
				setState(1934);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					setState(1914);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
					case 1:
						{
						setState(1913);
						match(COLUMN_SYMBOL);
						}
						break;
					}
					setState(1916);
					columnInternalRef();
					setState(1918);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
						{
						setState(1917);
						restrict();
						}
					}

					}
					break;
				case 2:
					{
					setState(1920);
					match(FOREIGN_SYMBOL);
					setState(1921);
					match(KEY_SYMBOL);
					setState(1922);
					columnInternalRef();
					}
					break;
				case 3:
					{
					setState(1923);
					match(PRIMARY_SYMBOL);
					setState(1924);
					match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					setState(1925);
					keyOrIndex();
					setState(1926);
					indexRef();
					}
					break;
				case 5:
					{
					setState(1928);
					if (!(this.isServerVersionGe80017())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
					}
					setState(1929);
					match(CHECK_SYMBOL);
					setState(1930);
					identifier();
					}
					break;
				case 6:
					{
					setState(1931);
					if (!(this.isServerVersionGe80019())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
					}
					setState(1932);
					match(CONSTRAINT_SYMBOL);
					setState(1933);
					identifier();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1936);
				match(DISABLE_SYMBOL);
				setState(1937);
				match(KEYS_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1938);
				match(ENABLE_SYMBOL);
				setState(1939);
				match(KEYS_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1940);
				match(ALTER_SYMBOL);
				setState(1942);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(1941);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1944);
				columnInternalRef();
				setState(1957);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
				case 1:
					{
					setState(1945);
					match(SET_SYMBOL);
					setState(1946);
					match(DEFAULT_SYMBOL);
					setState(1950);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
					case 1:
						{
						setState(1947);
						if (!(this.isServerVersionGe80014())) {
							throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
						}
						setState(1948);
						exprWithParentheses();
						}
						break;
					case 2:
						{
						setState(1949);
						signedLiteralOrNull();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(1952);
					match(DROP_SYMBOL);
					setState(1953);
					match(DEFAULT_SYMBOL);
					}
					break;
				case 3:
					{
					setState(1954);
					if (!(this.isServerVersionGe80024())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
					}
					setState(1955);
					match(SET_SYMBOL);
					setState(1956);
					visibility();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1959);
				match(ALTER_SYMBOL);
				setState(1960);
				match(INDEX_SYMBOL);
				setState(1961);
				indexRef();
				setState(1962);
				visibility();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1964);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(1965);
				match(ALTER_SYMBOL);
				setState(1966);
				match(CHECK_SYMBOL);
				setState(1967);
				identifier();
				setState(1968);
				constraintEnforcement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1970);
				if (!(this.isServerVersionGe80019())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				}
				setState(1971);
				match(ALTER_SYMBOL);
				setState(1972);
				match(CONSTRAINT_SYMBOL);
				setState(1973);
				identifier();
				setState(1974);
				constraintEnforcement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1976);
				match(RENAME_SYMBOL);
				setState(1977);
				match(COLUMN_SYMBOL);
				setState(1978);
				columnInternalRef();
				setState(1979);
				match(TO_SYMBOL);
				setState(1980);
				identifier();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1982);
				match(RENAME_SYMBOL);
				setState(1984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					setState(1983);
					_la = _input.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1986);
				tableName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1987);
				match(RENAME_SYMBOL);
				setState(1988);
				keyOrIndex();
				setState(1989);
				indexRef();
				setState(1990);
				match(TO_SYMBOL);
				setState(1991);
				indexName();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1993);
				match(CONVERT_SYMBOL);
				setState(1994);
				match(TO_SYMBOL);
				setState(1995);
				charset();
				setState(1999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(1996);
					if (!(this.isServerVersionGe80014())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					}
					setState(1997);
					match(DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					setState(1998);
					charsetName();
					}
					break;
				}
				setState(2002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					setState(2001);
					collate();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2004);
				match(FORCE_SYMBOL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2005);
				match(ORDER_SYMBOL);
				setState(2006);
				match(BY_SYMBOL);
				setState(2007);
				alterOrderList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PlaceContext extends ParserRuleContext {
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_place; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPlace(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPlace(this);
			}
		}
	}

	public final PlaceContext place() throws RecognitionException {
		PlaceContext _localctx = new PlaceContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_place);
		try {
			setState(2013);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFTER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2010);
				match(AFTER_SYMBOL);
				setState(2011);
				identifier();
				}
				break;
			case FIRST_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2012);
				match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RestrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRestrict(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRestrict(this);
			}
		}
	}

	public final RestrictContext restrict() throws RecognitionException {
		RestrictContext _localctx = new RestrictContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_restrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2015);
			_la = _input.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterOrderListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<DirectionContext> direction() {
			return getRuleContexts(DirectionContext.class);
		}
		public DirectionContext direction(int i) {
			return getRuleContext(DirectionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOrderList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterOrderList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterOrderList(this);
			}
		}
	}

	public final AlterOrderListContext alterOrderList() throws RecognitionException {
		AlterOrderListContext _localctx = new AlterOrderListContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alterOrderList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2017);
			identifier();
			setState(2019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				setState(2018);
				direction();
				}
			}

			setState(2028);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2021);
					match(COMMA_SYMBOL);
					setState(2022);
					identifier();
					setState(2024);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
						{
						setState(2023);
						direction();
						}
					}

					}
					}
				}
				setState(2030);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterAlgorithmOptionContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAlgorithmOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterAlgorithmOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterAlgorithmOption(this);
			}
		}
	}

	public final AlterAlgorithmOptionContext alterAlgorithmOption() throws RecognitionException {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alterAlgorithmOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2031);
			match(ALGORITHM_SYMBOL);
			setState(2033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(2032);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				setState(2035);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(2036);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterLockOptionContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterLockOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterLockOption(this);
			}
		}
	}

	public final AlterLockOptionContext alterLockOption() throws RecognitionException {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alterLockOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2039);
			match(LOCK_SYMBOL);
			setState(2041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(2040);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(2043);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(2044);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexLockAndAlgorithmContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexLockAndAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexLockAndAlgorithm(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexLockAndAlgorithm(this);
			}
		}
	}

	public final IndexLockAndAlgorithmContext indexLockAndAlgorithm() throws RecognitionException {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_indexLockAndAlgorithm);
		int _la;
		try {
			setState(2055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2047);
				alterAlgorithmOption();
				setState(2049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCK_SYMBOL) {
					{
					setState(2048);
					alterLockOption();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2051);
				alterLockOption();
				setState(2053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(2052);
					alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithValidationContext extends ParserRuleContext {
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withValidation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWithValidation(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWithValidation(this);
			}
		}
	}

	public final WithValidationContext withValidation() throws RecognitionException {
		WithValidationContext _localctx = new WithValidationContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_withValidation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2057);
			_la = _input.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2058);
			match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemovePartitioningContext extends ParserRuleContext {
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removePartitioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRemovePartitioning(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRemovePartitioning(this);
			}
		}
	}

	public final RemovePartitioningContext removePartitioning() throws RecognitionException {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_removePartitioning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			match(REMOVE_SYMBOL);
			setState(2061);
			match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AllOrPartitionNameListContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrPartitionNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAllOrPartitionNameList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAllOrPartitionNameList(this);
			}
		}
	}

	public final AllOrPartitionNameListContext allOrPartitionNameList() throws RecognitionException {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_allOrPartitionNameList);
		try {
			setState(2065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2063);
				match(ALL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2064);
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterTablespaceOptionsContext alterTablespaceOptions() {
			return getRuleContext(AlterTablespaceOptionsContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterTablespace(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterTablespace(this);
			}
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2067);
			match(TABLESPACE_SYMBOL);
			setState(2068);
			tablespaceRef();
			setState(2080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(2069);
				_la = _input.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2070);
				match(DATAFILE_SYMBOL);
				setState(2071);
				textLiteral();
				setState(2073);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
				case 1:
					{
					setState(2072);
					alterTablespaceOptions();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2075);
				match(RENAME_SYMBOL);
				setState(2076);
				match(TO_SYMBOL);
				setState(2077);
				identifier();
				}
				break;
			case 3:
				{
				setState(2078);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(2079);
				alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public AlterUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUndoTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterUndoTablespace(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterUndoTablespace(this);
			}
		}
	}

	public final AlterUndoTablespaceContext alterUndoTablespace() throws RecognitionException {
		AlterUndoTablespaceContext _localctx = new AlterUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alterUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2082);
			match(UNDO_SYMBOL);
			setState(2083);
			match(TABLESPACE_SYMBOL);
			setState(2084);
			tablespaceRef();
			setState(2085);
			match(SET_SYMBOL);
			setState(2086);
			_la = _input.LA(1);
			if ( !(_la==ACTIVE_SYMBOL || _la==INACTIVE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				setState(2087);
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UndoTableSpaceOptionsContext extends ParserRuleContext {
		public List<UndoTableSpaceOptionContext> undoTableSpaceOption() {
			return getRuleContexts(UndoTableSpaceOptionContext.class);
		}
		public UndoTableSpaceOptionContext undoTableSpaceOption(int i) {
			return getRuleContext(UndoTableSpaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UndoTableSpaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undoTableSpaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUndoTableSpaceOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUndoTableSpaceOptions(this);
			}
		}
	}

	public final UndoTableSpaceOptionsContext undoTableSpaceOptions() throws RecognitionException {
		UndoTableSpaceOptionsContext _localctx = new UndoTableSpaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_undoTableSpaceOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2090);
			undoTableSpaceOption();
			setState(2097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				{
				setState(2092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(2091);
					match(COMMA_SYMBOL);
					}
				}

				setState(2094);
				undoTableSpaceOption();
				}
				}
				setState(2099);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UndoTableSpaceOptionContext extends ParserRuleContext {
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public UndoTableSpaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undoTableSpaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUndoTableSpaceOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUndoTableSpaceOption(this);
			}
		}
	}

	public final UndoTableSpaceOptionContext undoTableSpaceOption() throws RecognitionException {
		UndoTableSpaceOptionContext _localctx = new UndoTableSpaceOptionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_undoTableSpaceOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2100);
			tsOptionEngine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTablespaceOptionsContext extends ParserRuleContext {
		public List<AlterTablespaceOptionContext> alterTablespaceOption() {
			return getRuleContexts(AlterTablespaceOptionContext.class);
		}
		public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return getRuleContext(AlterTablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterTablespaceOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterTablespaceOptions(this);
			}
		}
	}

	public final AlterTablespaceOptionsContext alterTablespaceOptions() throws RecognitionException {
		AlterTablespaceOptionsContext _localctx = new AlterTablespaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alterTablespaceOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2102);
			alterTablespaceOption();
			setState(2109);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2104);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
					case 1:
						{
						setState(2103);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(2106);
					alterTablespaceOption();
					}
					}
				}
				setState(2111);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return getRuleContext(TsOptionEncryptionContext.class,0);
		}
		public TsOptionEngineAttributeContext tsOptionEngineAttribute() {
			return getRuleContext(TsOptionEngineAttributeContext.class,0);
		}
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterTablespaceOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterTablespaceOption(this);
			}
		}
	}

	public final AlterTablespaceOptionContext alterTablespaceOption() throws RecognitionException {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alterTablespaceOption);
		try {
			setState(2124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2112);
				match(INITIAL_SIZE_SYMBOL);
				setState(2114);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
				case 1:
					{
					setState(2113);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2116);
				sizeNumber();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2117);
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2118);
				tsOptionMaxSize();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2119);
				tsOptionEngine();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2120);
				tsOptionWait();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2121);
				tsOptionEncryption();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2122);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(2123);
				tsOptionEngineAttribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeTablespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeTablespaceOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeTablespaceOption(this);
			}
		}
	}

	public final ChangeTablespaceOptionContext changeTablespaceOption() throws RecognitionException {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_changeTablespaceOption);
		try {
			setState(2133);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2126);
				match(INITIAL_SIZE_SYMBOL);
				setState(2128);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
				case 1:
					{
					setState(2127);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(2130);
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2131);
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2132);
				tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterView(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterView(this);
			}
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				setState(2135);
				viewAlgorithm();
				}
			}

			setState(2139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2138);
				definerClause();
				}
			}

			setState(2142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(2141);
				viewSuid();
				}
			}

			setState(2144);
			match(VIEW_SYMBOL);
			setState(2145);
			viewRef();
			setState(2146);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewTailContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public ViewQueryBlockContext viewQueryBlock() {
			return getRuleContext(ViewQueryBlockContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterViewTail(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitViewTail(this);
			}
		}
	}

	public final ViewTailContext viewTail() throws RecognitionException {
		ViewTailContext _localctx = new ViewTailContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_viewTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2148);
				columnInternalRefList();
				}
			}

			setState(2151);
			match(AS_SYMBOL);
			setState(2152);
			viewQueryBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewQueryBlockContext extends ParserRuleContext {
		public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return getRuleContext(QueryExpressionWithOptLockingClausesContext.class,0);
		}
		public ViewCheckOptionContext viewCheckOption() {
			return getRuleContext(ViewCheckOptionContext.class,0);
		}
		public ViewQueryBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewQueryBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterViewQueryBlock(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitViewQueryBlock(this);
			}
		}
	}

	public final ViewQueryBlockContext viewQueryBlock() throws RecognitionException {
		ViewQueryBlockContext _localctx = new ViewQueryBlockContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_viewQueryBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2154);
			queryExpressionWithOptLockingClauses();
			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				setState(2155);
				viewCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewCheckOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewCheckOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterViewCheckOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitViewCheckOption(this);
			}
		}
	}

	public final ViewCheckOptionContext viewCheckOption() throws RecognitionException {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_viewCheckOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2158);
			match(WITH_SYMBOL);
			setState(2160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				setState(2159);
				_la = _input.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2162);
			match(CHECK_SYMBOL);
			setState(2163);
			match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterInstanceStatementContext extends ParserRuleContext {
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode TLS_SYMBOL() { return getToken(MySQLParser.TLS_SYMBOL, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode KEYRING_SYMBOL() { return getToken(MySQLParser.KEYRING_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public AlterInstanceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstanceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterInstanceStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterInstanceStatement(this);
			}
		}
	}

	public final AlterInstanceStatementContext alterInstanceStatement() throws RecognitionException {
		AlterInstanceStatementContext _localctx = new AlterInstanceStatementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alterInstanceStatement);
		int _la;
		try {
			setState(2197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2165);
				match(INSTANCE_SYMBOL);
				setState(2166);
				match(ROTATE_SYMBOL);
				setState(2167);
				textOrIdentifier();
				setState(2168);
				match(MASTER_SYMBOL);
				setState(2169);
				match(KEY_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2171);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(2195);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					setState(2172);
					match(RELOAD_SYMBOL);
					setState(2173);
					match(TLS_SYMBOL);
					setState(2187);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NO_SYMBOL:
						{
						setState(2174);
						match(NO_SYMBOL);
						setState(2175);
						match(ROLLBACK_SYMBOL);
						setState(2176);
						match(ON_SYMBOL);
						setState(2177);
						match(ERROR_SYMBOL);
						}
						break;
					case FOR_SYMBOL:
						{
						setState(2178);
						match(FOR_SYMBOL);
						setState(2179);
						match(CHANNEL_SYMBOL);
						setState(2180);
						identifier();
						setState(2185);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(2181);
							match(NO_SYMBOL);
							setState(2182);
							match(ROLLBACK_SYMBOL);
							setState(2183);
							match(ON_SYMBOL);
							setState(2184);
							match(ERROR_SYMBOL);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					setState(2189);
					_la = _input.LA(1);
					if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2190);
					identifier();
					setState(2191);
					identifier();
					}
					break;
				case 3:
					{
					setState(2193);
					match(RELOAD_SYMBOL);
					setState(2194);
					match(KEYRING_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateStatementContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTablespaceContext createTablespace() {
			return getRuleContext(CreateTablespaceContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public CreateSpatialReferenceContext createSpatialReference() {
			return getRuleContext(CreateSpatialReferenceContext.class,0);
		}
		public CreateUndoTablespaceContext createUndoTablespace() {
			return getRuleContext(CreateUndoTablespaceContext.class,0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateStatement(this);
			}
		}
	}

	public final CreateStatementContext createStatement() throws RecognitionException {
		CreateStatementContext _localctx = new CreateStatementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_createStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2199);
			match(CREATE_SYMBOL);
			setState(2217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(2200);
				createDatabase();
				}
				break;
			case 2:
				{
				setState(2201);
				createTable();
				}
				break;
			case 3:
				{
				setState(2202);
				createFunction();
				}
				break;
			case 4:
				{
				setState(2203);
				createProcedure();
				}
				break;
			case 5:
				{
				setState(2204);
				createUdf();
				}
				break;
			case 6:
				{
				setState(2205);
				createLogfileGroup();
				}
				break;
			case 7:
				{
				setState(2206);
				createView();
				}
				break;
			case 8:
				{
				setState(2207);
				createTrigger();
				}
				break;
			case 9:
				{
				setState(2208);
				createIndex();
				}
				break;
			case 10:
				{
				setState(2209);
				createServer();
				}
				break;
			case 11:
				{
				setState(2210);
				createTablespace();
				}
				break;
			case 12:
				{
				setState(2211);
				createEvent();
				}
				break;
			case 13:
				{
				setState(2212);
				createRole();
				}
				break;
			case 14:
				{
				setState(2213);
				if (!(this.isServerVersionGe80011())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
				}
				setState(2214);
				createSpatialReference();
				}
				break;
			case 15:
				{
				setState(2215);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(2216);
				createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateDatabase(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateDatabase(this);
			}
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_createDatabase);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2219);
			match(DATABASE_SYMBOL);
			setState(2221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				setState(2220);
				ifNotExists();
				}
				break;
			}
			setState(2223);
			schemaName();
			setState(2227);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,102,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2224);
					createDatabaseOption();
					}
					}
				}
				setState(2229);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,102,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public DefaultEncryptionContext defaultEncryption() {
			return getRuleContext(DefaultEncryptionContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateDatabaseOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateDatabaseOption(this);
			}
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_createDatabaseOption);
		try {
			setState(2234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2230);
				defaultCharset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2231);
				defaultCollation();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2232);
				if (!(this.isServerVersionGe80016())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80016()");
				}
				setState(2233);
				defaultEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public CreateTableOptionsEtcContext createTableOptionsEtc() {
			return getRuleContext(CreateTableOptionsEtcContext.class,0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateTable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateTable(this);
			}
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2237);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(2236);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(2239);
			match(TABLE_SYMBOL);
			setState(2241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(2240);
				ifNotExists();
				}
				break;
			}
			setState(2243);
			tableName();
			setState(2260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(2248);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
				case 1:
					{
					setState(2244);
					match(OPEN_PAR_SYMBOL);
					setState(2245);
					tableElementList();
					setState(2246);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				setState(2251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					setState(2250);
					createTableOptionsEtc();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2253);
				match(LIKE_SYMBOL);
				setState(2254);
				tableRef();
				}
				break;
			case 3:
				{
				setState(2255);
				match(OPEN_PAR_SYMBOL);
				setState(2256);
				match(LIKE_SYMBOL);
				setState(2257);
				tableRef();
				setState(2258);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableElementList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableElementList(this);
			}
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2262);
			tableElement();
			setState(2267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2263);
				match(COMMA_SYMBOL);
				setState(2264);
				tableElement();
				}
				}
				setState(2269);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableElement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableElement(this);
			}
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_tableElement);
		try {
			setState(2272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2270);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2271);
				tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DuplicateAsQeContext extends ParserRuleContext {
		public AsCreateQueryExpressionContext asCreateQueryExpression() {
			return getRuleContext(AsCreateQueryExpressionContext.class,0);
		}
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_duplicateAsQe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDuplicateAsQe(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDuplicateAsQe(this);
			}
		}
	}

	public final DuplicateAsQeContext duplicateAsQe() throws RecognitionException {
		DuplicateAsQeContext _localctx = new DuplicateAsQeContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_duplicateAsQe);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(2274);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2277);
			asCreateQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AsCreateQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return getRuleContext(QueryExpressionWithOptLockingClausesContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public AsCreateQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asCreateQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAsCreateQueryExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAsCreateQueryExpression(this);
			}
		}
	}

	public final AsCreateQueryExpressionContext asCreateQueryExpression() throws RecognitionException {
		AsCreateQueryExpressionContext _localctx = new AsCreateQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_asCreateQueryExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(2279);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(2282);
			queryExpressionWithOptLockingClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryExpressionOrParensContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockingClauseListContext lockingClauseList() {
			return getRuleContext(LockingClauseListContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionOrParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQueryExpressionOrParens(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQueryExpressionOrParens(this);
			}
		}
	}

	public final QueryExpressionOrParensContext queryExpressionOrParens() throws RecognitionException {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_queryExpressionOrParens);
		try {
			setState(2289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2284);
				queryExpression();
				setState(2286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(2285);
					lockingClauseList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2288);
				queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryExpressionWithOptLockingClausesContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockingClauseListContext lockingClauseList() {
			return getRuleContext(LockingClauseListContext.class,0);
		}
		public QueryExpressionWithOptLockingClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionWithOptLockingClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQueryExpressionWithOptLockingClauses(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQueryExpressionWithOptLockingClauses(this);
			}
		}
	}

	public final QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() throws RecognitionException {
		QueryExpressionWithOptLockingClausesContext _localctx = new QueryExpressionWithOptLockingClausesContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_queryExpressionWithOptLockingClauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2291);
			queryExpression();
			setState(2293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(2292);
				lockingClauseList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateRoutineContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode EOF() { return getToken(Recognizer.EOF, 0); }
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoutine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateRoutine(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateRoutine(this);
			}
		}
	}

	public final CreateRoutineContext createRoutine() throws RecognitionException {
		CreateRoutineContext _localctx = new CreateRoutineContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_createRoutine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2295);
			match(CREATE_SYMBOL);
			setState(2299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(2296);
				createProcedure();
				}
				break;
			case 2:
				{
				setState(2297);
				createFunction();
				}
				break;
			case 3:
				{
				setState(2298);
				createUdf();
				}
				break;
			}
			setState(2302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				setState(2301);
				match(SEMICOLON_SYMBOL);
				}
			}

			setState(2304);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public StoredRoutineBodyContext storedRoutineBody() {
			return getRuleContext(StoredRoutineBodyContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateProcedure(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateProcedure(this);
			}
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2306);
				definerClause();
				}
			}

			setState(2309);
			match(PROCEDURE_SYMBOL);
			setState(2311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				setState(2310);
				ifNotExists();
				}
				break;
			}
			setState(2313);
			procedureName();
			setState(2314);
			match(OPEN_PAR_SYMBOL);
			setState(2323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(2315);
				procedureParameter();
				setState(2320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(2316);
					match(COMMA_SYMBOL);
					setState(2317);
					procedureParameter();
					}
					}
					setState(2322);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2325);
			match(CLOSE_PAR_SYMBOL);
			setState(2329);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,122,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2326);
					routineCreateOption();
					}
					}
				}
				setState(2331);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,122,_ctx);
			}
			setState(2332);
			storedRoutineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutineStringContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DOLLAR_QUOTED_STRING_TEXT() { return getToken(MySQLParser.DOLLAR_QUOTED_STRING_TEXT, 0); }
		public RoutineStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoutineString(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoutineString(this);
			}
		}
	}

	public final RoutineStringContext routineString() throws RecognitionException {
		RoutineStringContext _localctx = new RoutineStringContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_routineString);
		try {
			setState(2336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2334);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2335);
				match(DOLLAR_QUOTED_STRING_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StoredRoutineBodyContext extends ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public RoutineStringContext routineString() {
			return getRuleContext(RoutineStringContext.class,0);
		}
		public StoredRoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storedRoutineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStoredRoutineBody(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStoredRoutineBody(this);
			}
		}
	}

	public final StoredRoutineBodyContext storedRoutineBody() throws RecognitionException {
		StoredRoutineBodyContext _localctx = new StoredRoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_storedRoutineBody);
		try {
			setState(2342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2338);
				compoundStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2339);
				if (!(this.isStoredRoutineBody())) {
					throw new FailedPredicateException(this, "this.isStoredRoutineBody()");
				}
				setState(2340);
				match(AS_SYMBOL);
				setState(2341);
				routineString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public StoredRoutineBodyContext storedRoutineBody() {
			return getRuleContext(StoredRoutineBodyContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateFunction(this);
			}
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2344);
				definerClause();
				}
			}

			setState(2347);
			match(FUNCTION_SYMBOL);
			setState(2349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(2348);
				ifNotExists();
				}
				break;
			}
			setState(2351);
			functionName();
			setState(2352);
			match(OPEN_PAR_SYMBOL);
			setState(2361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(2353);
				functionParameter();
				setState(2358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(2354);
					match(COMMA_SYMBOL);
					setState(2355);
					functionParameter();
					}
					}
					setState(2360);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2363);
			match(CLOSE_PAR_SYMBOL);
			setState(2364);
			match(RETURNS_SYMBOL);
			setState(2365);
			typeWithOptCollate();
			setState(2369);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2366);
					routineCreateOption();
					}
					}
				}
				setState(2371);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			}
			setState(2372);
			storedRoutineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUdfContext extends ParserRuleContext {
		public Token type;
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public UdfNameContext udfName() {
			return getRuleContext(UdfNameContext.class,0);
		}
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateUdfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateUdf(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateUdf(this);
			}
		}
	}

	public final CreateUdfContext createUdf() throws RecognitionException {
		CreateUdfContext _localctx = new CreateUdfContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_createUdf);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				setState(2374);
				match(AGGREGATE_SYMBOL);
				}
			}

			setState(2377);
			match(FUNCTION_SYMBOL);
			setState(2379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(2378);
				ifNotExists();
				}
				break;
			}
			setState(2381);
			udfName();
			setState(2382);
			match(RETURNS_SYMBOL);
			setState(2383);
			_localctx.type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL || _la==STRING_SYMBOL) ) {
				_localctx.type = _errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2384);
			match(SONAME_SYMBOL);
			setState(2385);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutineCreateOptionContext extends ParserRuleContext {
		public RoutineOptionContext routineOption() {
			return getRuleContext(RoutineOptionContext.class,0);
		}
		public TerminalNode DETERMINISTIC_SYMBOL() { return getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineCreateOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoutineCreateOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoutineCreateOption(this);
			}
		}
	}

	public final RoutineCreateOptionContext routineCreateOption() throws RecognitionException {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_routineCreateOption);
		int _la;
		try {
			setState(2392);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case MODIFIES_SYMBOL:
			case NO_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2387);
				routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(2388);
					match(NOT_SYMBOL);
					}
				}

				setState(2391);
				match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutineAlterOptionsContext extends ParserRuleContext {
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineAlterOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoutineAlterOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoutineAlterOptions(this);
			}
		}
	}

	public final RoutineAlterOptionsContext routineAlterOptions() throws RecognitionException {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_routineAlterOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2394);
				routineCreateOption();
				}
				}
				setState(2397);
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 72057594037960705L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & 5242881L) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutineOptionContext extends ParserRuleContext {
		public Token option;
		public Token security;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode SQL_SYMBOL() { return getToken(MySQLParser.SQL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode READS_SYMBOL() { return getToken(MySQLParser.READS_SYMBOL, 0); }
		public TerminalNode MODIFIES_SYMBOL() { return getToken(MySQLParser.MODIFIES_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoutineOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoutineOption(this);
			}
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_routineOption);
		int _la;
		try {
			setState(2420);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2399);
				_localctx.option = match(COMMENT_SYMBOL);
				setState(2400);
				textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2401);
				_localctx.option = match(LANGUAGE_SYMBOL);
				setState(2405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(2402);
					match(SQL_SYMBOL);
					}
					break;
				case 2:
					{
					setState(2403);
					if (!(this.isServerVersionGe80032())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
					}
					setState(2404);
					identifier();
					}
					break;
				}
				}
				break;
			case NO_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2407);
				_localctx.option = match(NO_SYMBOL);
				setState(2408);
				match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2409);
				_localctx.option = match(CONTAINS_SYMBOL);
				setState(2410);
				match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2411);
				_localctx.option = match(READS_SYMBOL);
				setState(2412);
				match(SQL_SYMBOL);
				setState(2413);
				match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2414);
				_localctx.option = match(MODIFIES_SYMBOL);
				setState(2415);
				match(SQL_SYMBOL);
				setState(2416);
				match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2417);
				_localctx.option = match(SQL_SYMBOL);
				setState(2418);
				match(SECURITY_SYMBOL);
				setState(2419);
				_localctx.security = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					_localctx.security = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexContext extends ParserRuleContext {
		public Token type;
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public CreateIndexTargetContext createIndexTarget() {
			return getRuleContext(CreateIndexTargetContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public IndexTypeClauseContext indexTypeClause() {
			return getRuleContext(IndexTypeClauseContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateIndex(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateIndex(this);
			}
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				setState(2422);
				onlineOption();
				}
			}

			setState(2460);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				setState(2426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					setState(2425);
					match(UNIQUE_SYMBOL);
					}
				}

				setState(2428);
				_localctx.type = match(INDEX_SYMBOL);
				setState(2429);
				indexName();
				setState(2431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE_SYMBOL || _la==USING_SYMBOL) {
					{
					setState(2430);
					indexTypeClause();
					}
				}

				setState(2433);
				createIndexTarget();
				setState(2437);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2434);
						indexOption();
						}
						}
					}
					setState(2439);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				setState(2440);
				_localctx.type = match(FULLTEXT_SYMBOL);
				setState(2441);
				match(INDEX_SYMBOL);
				setState(2442);
				indexName();
				setState(2443);
				createIndexTarget();
				setState(2447);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2444);
						fulltextIndexOption();
						}
						}
					}
					setState(2449);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				setState(2450);
				_localctx.type = match(SPATIAL_SYMBOL);
				setState(2451);
				match(INDEX_SYMBOL);
				setState(2452);
				indexName();
				setState(2453);
				createIndexTarget();
				setState(2457);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2454);
						spatialIndexOption();
						}
						}
					}
					setState(2459);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				setState(2462);
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexNameAndTypeContext extends ParserRuleContext {
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNameAndType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexNameAndType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexNameAndType(this);
			}
		}
	}

	public final IndexNameAndTypeContext indexNameAndType() throws RecognitionException {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_indexNameAndType);
		try {
			setState(2475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2465);
				indexName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2467);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(2466);
					indexName();
					}
					break;
				}
				setState(2469);
				match(USING_SYMBOL);
				setState(2470);
				indexType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2471);
				indexName();
				setState(2472);
				match(TYPE_SYMBOL);
				setState(2473);
				indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexTargetContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public KeyListWithExpressionContext keyListWithExpression() {
			return getRuleContext(KeyListWithExpressionContext.class,0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateIndexTarget(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateIndexTarget(this);
			}
		}
	}

	public final CreateIndexTargetContext createIndexTarget() throws RecognitionException {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_createIndexTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2477);
			match(ON_SYMBOL);
			setState(2478);
			tableRef();
			setState(2479);
			keyListWithExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupNameContext logfileGroupName() {
			return getRuleContext(LogfileGroupNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public LogfileGroupOptionsContext logfileGroupOptions() {
			return getRuleContext(LogfileGroupOptionsContext.class,0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateLogfileGroup(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateLogfileGroup(this);
			}
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2481);
			match(LOGFILE_SYMBOL);
			setState(2482);
			match(GROUP_SYMBOL);
			setState(2483);
			logfileGroupName();
			setState(2484);
			match(ADD_SYMBOL);
			setState(2485);
			match(UNDOFILE_SYMBOL);
			setState(2486);
			textLiteral();
			setState(2488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2487);
				logfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LogfileGroupOptionsContext extends ParserRuleContext {
		public List<LogfileGroupOptionContext> logfileGroupOption() {
			return getRuleContexts(LogfileGroupOptionContext.class);
		}
		public LogfileGroupOptionContext logfileGroupOption(int i) {
			return getRuleContext(LogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLogfileGroupOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLogfileGroupOptions(this);
			}
		}
	}

	public final LogfileGroupOptionsContext logfileGroupOptions() throws RecognitionException {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_logfileGroupOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2490);
			logfileGroupOption();
			setState(2497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL || _la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				{
				setState(2492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(2491);
					match(COMMA_SYMBOL);
					}
				}

				setState(2494);
				logfileGroupOption();
				}
				}
				setState(2499);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
			return getRuleContext(TsOptionUndoRedoBufferSizeContext.class,0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return getRuleContext(TsOptionNodegroupContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return getRuleContext(TsOptionCommentContext.class,0);
		}
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLogfileGroupOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLogfileGroupOption(this);
			}
		}
	}

	public final LogfileGroupOptionContext logfileGroupOption() throws RecognitionException {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_logfileGroupOption);
		try {
			setState(2506);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2500);
				tsOptionInitialSize();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2501);
				tsOptionUndoRedoBufferSize();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2502);
				tsOptionNodegroup();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2503);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2504);
				tsOptionWait();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2505);
				tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerNameContext serverName() {
			return getRuleContext(ServerNameContext.class,0);
		}
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateServer(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateServer(this);
			}
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_createServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2508);
			match(SERVER_SYMBOL);
			setState(2509);
			serverName();
			setState(2510);
			match(FOREIGN_SYMBOL);
			setState(2511);
			match(DATA_SYMBOL);
			setState(2512);
			match(WRAPPER_SYMBOL);
			setState(2513);
			textOrIdentifier();
			setState(2514);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServerOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterServerOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitServerOptions(this);
			}
		}
	}

	public final ServerOptionsContext serverOptions() throws RecognitionException {
		ServerOptionsContext _localctx = new ServerOptionsContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_serverOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2516);
			match(OPTIONS_SYMBOL);
			setState(2517);
			match(OPEN_PAR_SYMBOL);
			setState(2518);
			serverOption();
			setState(2523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2519);
				match(COMMA_SYMBOL);
				setState(2520);
				serverOption();
				}
				}
				setState(2525);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2526);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServerOptionContext extends ParserRuleContext {
		public Token option;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterServerOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitServerOption(this);
			}
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_serverOption);
		try {
			setState(2542);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2528);
				_localctx.option = match(HOST_SYMBOL);
				setState(2529);
				textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2530);
				_localctx.option = match(DATABASE_SYMBOL);
				setState(2531);
				textLiteral();
				}
				break;
			case USER_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2532);
				_localctx.option = match(USER_SYMBOL);
				setState(2533);
				textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2534);
				_localctx.option = match(PASSWORD_SYMBOL);
				setState(2535);
				textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2536);
				_localctx.option = match(SOCKET_SYMBOL);
				setState(2537);
				textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2538);
				_localctx.option = match(OWNER_SYMBOL);
				setState(2539);
				textLiteral();
				}
				break;
			case PORT_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2540);
				_localctx.option = match(PORT_SYMBOL);
				setState(2541);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TsDataFileNameContext tsDataFileName() {
			return getRuleContext(TsDataFileNameContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TablespaceOptionsContext tablespaceOptions() {
			return getRuleContext(TablespaceOptionsContext.class,0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateTablespace(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateTablespace(this);
			}
		}
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_createTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2544);
			match(TABLESPACE_SYMBOL);
			setState(2545);
			tablespaceName();
			setState(2546);
			tsDataFileName();
			setState(2551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				setState(2547);
				match(USE_SYMBOL);
				setState(2548);
				match(LOGFILE_SYMBOL);
				setState(2549);
				match(GROUP_SYMBOL);
				setState(2550);
				logfileGroupRef();
				}
				break;
			}
			setState(2554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(2553);
				tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return getRuleContext(TsDataFileContext.class,0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public CreateUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUndoTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateUndoTablespace(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateUndoTablespace(this);
			}
		}
	}

	public final CreateUndoTablespaceContext createUndoTablespace() throws RecognitionException {
		CreateUndoTablespaceContext _localctx = new CreateUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_createUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2556);
			match(UNDO_SYMBOL);
			setState(2557);
			match(TABLESPACE_SYMBOL);
			setState(2558);
			tablespaceName();
			setState(2559);
			match(ADD_SYMBOL);
			setState(2560);
			tsDataFile();
			setState(2562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				setState(2561);
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsDataFileNameContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return getRuleContext(TsDataFileContext.class,0);
		}
		public TsDataFileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsDataFileName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsDataFileName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsDataFileName(this);
			}
		}
	}

	public final TsDataFileNameContext tsDataFileName() throws RecognitionException {
		TsDataFileNameContext _localctx = new TsDataFileNameContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_tsDataFileName);
		try {
			setState(2571);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2564);
				match(ADD_SYMBOL);
				setState(2565);
				tsDataFile();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2566);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(2569);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(2567);
					match(ADD_SYMBOL);
					setState(2568);
					tsDataFile();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsDataFileContext extends ParserRuleContext {
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TsDataFileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsDataFile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsDataFile(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsDataFile(this);
			}
		}
	}

	public final TsDataFileContext tsDataFile() throws RecognitionException {
		TsDataFileContext _localctx = new TsDataFileContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_tsDataFile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2573);
			match(DATAFILE_SYMBOL);
			setState(2574);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablespaceOptionsContext extends ParserRuleContext {
		public List<TablespaceOptionContext> tablespaceOption() {
			return getRuleContexts(TablespaceOptionContext.class);
		}
		public TablespaceOptionContext tablespaceOption(int i) {
			return getRuleContext(TablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTablespaceOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTablespaceOptions(this);
			}
		}
	}

	public final TablespaceOptionsContext tablespaceOptions() throws RecognitionException {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_tablespaceOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2576);
			tablespaceOption();
			setState(2583);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2578);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
					case 1:
						{
						setState(2577);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(2580);
					tablespaceOption();
					}
					}
				}
				setState(2585);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablespaceOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public TsOptionExtentSizeContext tsOptionExtentSize() {
			return getRuleContext(TsOptionExtentSizeContext.class,0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return getRuleContext(TsOptionNodegroupContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return getRuleContext(TsOptionCommentContext.class,0);
		}
		public TsOptionFileblockSizeContext tsOptionFileblockSize() {
			return getRuleContext(TsOptionFileblockSizeContext.class,0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return getRuleContext(TsOptionEncryptionContext.class,0);
		}
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTablespaceOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTablespaceOption(this);
			}
		}
	}

	public final TablespaceOptionContext tablespaceOption() throws RecognitionException {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_tablespaceOption);
		try {
			setState(2597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2586);
				tsOptionInitialSize();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2587);
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2588);
				tsOptionMaxSize();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2589);
				tsOptionExtentSize();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2590);
				tsOptionNodegroup();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2591);
				tsOptionEngine();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2592);
				tsOptionWait();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2593);
				tsOptionComment();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2594);
				tsOptionFileblockSize();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2595);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(2596);
				tsOptionEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionInitialSizeContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionInitialSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionInitialSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionInitialSize(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionInitialSize(this);
			}
		}
	}

	public final TsOptionInitialSizeContext tsOptionInitialSize() throws RecognitionException {
		TsOptionInitialSizeContext _localctx = new TsOptionInitialSizeContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_tsOptionInitialSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2599);
			match(INITIAL_SIZE_SYMBOL);
			setState(2601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(2600);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2603);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext {
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionUndoRedoBufferSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionUndoRedoBufferSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionUndoRedoBufferSize(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionUndoRedoBufferSize(this);
			}
		}
	}

	public final TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() throws RecognitionException {
		TsOptionUndoRedoBufferSizeContext _localctx = new TsOptionUndoRedoBufferSizeContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_tsOptionUndoRedoBufferSize);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2605);
			_la = _input.LA(1);
			if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				setState(2606);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2609);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionAutoextendSizeContext extends ParserRuleContext {
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionAutoextendSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionAutoextendSize(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionAutoextendSize(this);
			}
		}
	}

	public final TsOptionAutoextendSizeContext tsOptionAutoextendSize() throws RecognitionException {
		TsOptionAutoextendSizeContext _localctx = new TsOptionAutoextendSizeContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_tsOptionAutoextendSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(AUTOEXTEND_SIZE_SYMBOL);
			setState(2613);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2612);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2615);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionMaxSizeContext extends ParserRuleContext {
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionMaxSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionMaxSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionMaxSize(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionMaxSize(this);
			}
		}
	}

	public final TsOptionMaxSizeContext tsOptionMaxSize() throws RecognitionException {
		TsOptionMaxSizeContext _localctx = new TsOptionMaxSizeContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_tsOptionMaxSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2617);
			match(MAX_SIZE_SYMBOL);
			setState(2619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(2618);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2621);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionExtentSizeContext extends ParserRuleContext {
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionExtentSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionExtentSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionExtentSize(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionExtentSize(this);
			}
		}
	}

	public final TsOptionExtentSizeContext tsOptionExtentSize() throws RecognitionException {
		TsOptionExtentSizeContext _localctx = new TsOptionExtentSizeContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_tsOptionExtentSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2623);
			match(EXTENT_SIZE_SYMBOL);
			setState(2625);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(2624);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2627);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionNodegroupContext extends ParserRuleContext {
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionNodegroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionNodegroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionNodegroup(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionNodegroup(this);
			}
		}
	}

	public final TsOptionNodegroupContext tsOptionNodegroup() throws RecognitionException {
		TsOptionNodegroupContext _localctx = new TsOptionNodegroupContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_tsOptionNodegroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2629);
			match(NODEGROUP_SYMBOL);
			setState(2631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR) {
				{
				setState(2630);
				match(EQUAL_OPERATOR);
				}
			}

			setState(2633);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionEngineContext extends ParserRuleContext {
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionEngine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionEngine(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionEngine(this);
			}
		}
	}

	public final TsOptionEngineContext tsOptionEngine() throws RecognitionException {
		TsOptionEngineContext _localctx = new TsOptionEngineContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_tsOptionEngine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				setState(2635);
				match(STORAGE_SYMBOL);
				}
			}

			setState(2638);
			match(ENGINE_SYMBOL);
			setState(2640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(2639);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2642);
			engineRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionWaitContext extends ParserRuleContext {
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TsOptionWaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionWait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionWait(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionWait(this);
			}
		}
	}

	public final TsOptionWaitContext tsOptionWait() throws RecognitionException {
		TsOptionWaitContext _localctx = new TsOptionWaitContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_tsOptionWait);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2644);
			_la = _input.LA(1);
			if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionCommentContext extends ParserRuleContext {
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionComment(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionComment(this);
			}
		}
	}

	public final TsOptionCommentContext tsOptionComment() throws RecognitionException {
		TsOptionCommentContext _localctx = new TsOptionCommentContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_tsOptionComment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2646);
			match(COMMENT_SYMBOL);
			setState(2648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(2647);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2650);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionFileblockSizeContext extends ParserRuleContext {
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionFileblockSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionFileblockSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionFileblockSize(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionFileblockSize(this);
			}
		}
	}

	public final TsOptionFileblockSizeContext tsOptionFileblockSize() throws RecognitionException {
		TsOptionFileblockSizeContext _localctx = new TsOptionFileblockSizeContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_tsOptionFileblockSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2652);
			match(FILE_BLOCK_SIZE_SYMBOL);
			setState(2654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(2653);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2656);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionEncryptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEncryptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionEncryption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionEncryption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionEncryption(this);
			}
		}
	}

	public final TsOptionEncryptionContext tsOptionEncryption() throws RecognitionException {
		TsOptionEncryptionContext _localctx = new TsOptionEncryptionContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_tsOptionEncryption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2658);
			match(ENCRYPTION_SYMBOL);
			setState(2660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(2659);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2662);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TsOptionEngineAttributeContext extends ParserRuleContext {
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public JsonAttributeContext jsonAttribute() {
			return getRuleContext(JsonAttributeContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionEngineAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTsOptionEngineAttribute(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTsOptionEngineAttribute(this);
			}
		}
	}

	public final TsOptionEngineAttributeContext tsOptionEngineAttribute() throws RecognitionException {
		TsOptionEngineAttributeContext _localctx = new TsOptionEngineAttributeContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_tsOptionEngineAttribute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2664);
			match(ENGINE_SYMBOL);
			setState(2666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2665);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2668);
			jsonAttribute();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return getRuleContext(ViewReplaceOrAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateView(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateView(this);
			}
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				setState(2670);
				viewReplaceOrAlgorithm();
				}
			}

			setState(2674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2673);
				definerClause();
				}
			}

			setState(2677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(2676);
				viewSuid();
				}
			}

			setState(2679);
			match(VIEW_SYMBOL);
			setState(2680);
			viewName();
			setState(2681);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewReplaceOrAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterViewReplaceOrAlgorithm(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitViewReplaceOrAlgorithm(this);
			}
		}
	}

	public final ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() throws RecognitionException {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			setState(2689);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2683);
				match(OR_SYMBOL);
				setState(2684);
				match(REPLACE_SYMBOL);
				setState(2686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(2685);
					viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2688);
				viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewAlgorithmContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterViewAlgorithm(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitViewAlgorithm(this);
			}
		}
	}

	public final ViewAlgorithmContext viewAlgorithm() throws RecognitionException {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_viewAlgorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2691);
			match(ALGORITHM_SYMBOL);
			setState(2692);
			match(EQUAL_OPERATOR);
			setState(2693);
			_localctx.algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				_localctx.algorithm = _errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewSuidContext extends ParserRuleContext {
		public TerminalNode SQL_SYMBOL() { return getToken(MySQLParser.SQL_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSuid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterViewSuid(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitViewSuid(this);
			}
		}
	}

	public final ViewSuidContext viewSuid() throws RecognitionException {
		ViewSuidContext _localctx = new ViewSuidContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_viewSuid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2695);
			match(SQL_SYMBOL);
			setState(2696);
			match(SECURITY_SYMBOL);
			setState(2697);
			_la = _input.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTriggerContext extends ParserRuleContext {
		public Token timing;
		public Token event;
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EACH_SYMBOL() { return getToken(MySQLParser.EACH_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return getRuleContext(TriggerFollowsPrecedesClauseContext.class,0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateTrigger(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateTrigger(this);
			}
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2699);
				definerClause();
				}
			}

			setState(2702);
			match(TRIGGER_SYMBOL);
			setState(2704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2703);
				ifNotExists();
				}
				break;
			}
			setState(2706);
			triggerName();
			setState(2707);
			_localctx.timing = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				_localctx.timing = _errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2708);
			_localctx.event = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				_localctx.event = _errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2709);
			match(ON_SYMBOL);
			setState(2710);
			tableRef();
			setState(2711);
			match(FOR_SYMBOL);
			setState(2712);
			match(EACH_SYMBOL);
			setState(2713);
			match(ROW_SYMBOL);
			setState(2715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(2714);
				triggerFollowsPrecedesClause();
				}
				break;
			}
			setState(2717);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
		public Token ordering;
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFollowsPrecedesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTriggerFollowsPrecedesClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTriggerFollowsPrecedesClause(this);
			}
		}
	}

	public final TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() throws RecognitionException {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2719);
			_localctx.ordering = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				_localctx.ordering = _errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2720);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventNameContext eventName() {
			return getRuleContext(EventNameContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public ReplicaContext replica() {
			return getRuleContext(ReplicaContext.class,0);
		}
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateEvent(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateEvent(this);
			}
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2722);
				definerClause();
				}
			}

			setState(2725);
			match(EVENT_SYMBOL);
			setState(2727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2726);
				ifNotExists();
				}
				break;
			}
			setState(2729);
			eventName();
			setState(2730);
			match(ON_SYMBOL);
			setState(2731);
			match(SCHEDULE_SYMBOL);
			setState(2732);
			schedule();
			setState(2739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(2733);
				match(ON_SYMBOL);
				setState(2734);
				match(COMPLETION_SYMBOL);
				setState(2736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(2735);
					match(NOT_SYMBOL);
					}
				}

				setState(2738);
				match(PRESERVE_SYMBOL);
				}
			}

			setState(2747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_SYMBOL:
				{
				setState(2741);
				match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				setState(2742);
				match(DISABLE_SYMBOL);
				setState(2745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(2743);
					match(ON_SYMBOL);
					setState(2744);
					replica();
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			setState(2751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				setState(2749);
				match(COMMENT_SYMBOL);
				setState(2750);
				textLiteral();
				}
			}

			setState(2753);
			match(DO_SYMBOL);
			setState(2754);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateRole(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateRole(this);
			}
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_createRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2756);
			match(ROLE_SYMBOL);
			setState(2758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2757);
				ifNotExists();
				}
				break;
			}
			setState(2760);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public List<SrsAttributeContext> srsAttribute() {
			return getRuleContexts(SrsAttributeContext.class);
		}
		public SrsAttributeContext srsAttribute(int i) {
			return getRuleContext(SrsAttributeContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSpatialReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateSpatialReference(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateSpatialReference(this);
			}
		}
	}

	public final CreateSpatialReferenceContext createSpatialReference() throws RecognitionException {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_createSpatialReference);
		int _la;
		try {
			setState(2787);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2762);
				match(OR_SYMBOL);
				setState(2763);
				match(REPLACE_SYMBOL);
				setState(2764);
				match(SPATIAL_SYMBOL);
				setState(2765);
				match(REFERENCE_SYMBOL);
				setState(2766);
				match(SYSTEM_SYMBOL);
				setState(2767);
				real_ulonglong_number();
				setState(2771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & 7L) != 0)) {
					{
					{
					setState(2768);
					srsAttribute();
					}
					}
					setState(2773);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2774);
				match(SPATIAL_SYMBOL);
				setState(2775);
				match(REFERENCE_SYMBOL);
				setState(2776);
				match(SYSTEM_SYMBOL);
				setState(2778);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(2777);
					ifNotExists();
					}
					break;
				}
				setState(2780);
				real_ulonglong_number();
				setState(2784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & 7L) != 0)) {
					{
					{
					setState(2781);
					srsAttribute();
					}
					}
					setState(2786);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SrsAttributeContext extends ParserRuleContext {
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode DEFINITION_SYMBOL() { return getToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_srsAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSrsAttribute(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSrsAttribute(this);
			}
		}
	}

	public final SrsAttributeContext srsAttribute() throws RecognitionException {
		SrsAttributeContext _localctx = new SrsAttributeContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_srsAttribute);
		try {
			setState(2804);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2789);
				match(NAME_SYMBOL);
				setState(2790);
				match(TEXT_SYMBOL);
				setState(2791);
				textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2792);
				match(DEFINITION_SYMBOL);
				setState(2793);
				match(TEXT_SYMBOL);
				setState(2794);
				textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2795);
				match(ORGANIZATION_SYMBOL);
				setState(2796);
				textStringNoLinebreak();
				setState(2797);
				match(IDENTIFIED_SYMBOL);
				setState(2798);
				match(BY_SYMBOL);
				setState(2799);
				real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2801);
				match(DESCRIPTION_SYMBOL);
				setState(2802);
				match(TEXT_SYMBOL);
				setState(2803);
				textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropStatementContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTableSpaceContext dropTableSpace() {
			return getRuleContext(DropTableSpaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public DropSpatialReferenceContext dropSpatialReference() {
			return getRuleContext(DropSpatialReferenceContext.class,0);
		}
		public DropUndoTablespaceContext dropUndoTablespace() {
			return getRuleContext(DropUndoTablespaceContext.class,0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropStatement(this);
			}
		}
	}

	public final DropStatementContext dropStatement() throws RecognitionException {
		DropStatementContext _localctx = new DropStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_dropStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2806);
			match(DROP_SYMBOL);
			setState(2823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2807);
				dropDatabase();
				}
				break;
			case 2:
				{
				setState(2808);
				dropEvent();
				}
				break;
			case 3:
				{
				setState(2809);
				dropFunction();
				}
				break;
			case 4:
				{
				setState(2810);
				dropProcedure();
				}
				break;
			case 5:
				{
				setState(2811);
				dropIndex();
				}
				break;
			case 6:
				{
				setState(2812);
				dropLogfileGroup();
				}
				break;
			case 7:
				{
				setState(2813);
				dropServer();
				}
				break;
			case 8:
				{
				setState(2814);
				dropTable();
				}
				break;
			case 9:
				{
				setState(2815);
				dropTableSpace();
				}
				break;
			case 10:
				{
				setState(2816);
				dropTrigger();
				}
				break;
			case 11:
				{
				setState(2817);
				dropView();
				}
				break;
			case 12:
				{
				setState(2818);
				dropRole();
				}
				break;
			case 13:
				{
				setState(2819);
				if (!(this.isServerVersionGe80011())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
				}
				setState(2820);
				dropSpatialReference();
				}
				break;
			case 14:
				{
				setState(2821);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(2822);
				dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropDatabase(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropDatabase(this);
			}
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_dropDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2825);
			match(DATABASE_SYMBOL);
			setState(2827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2826);
				ifExists();
				}
				break;
			}
			setState(2829);
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropEvent(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropEvent(this);
			}
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_dropEvent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2831);
			match(EVENT_SYMBOL);
			setState(2833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2832);
				ifExists();
				}
				break;
			}
			setState(2835);
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropFunction(this);
			}
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_dropFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2837);
			match(FUNCTION_SYMBOL);
			setState(2839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2838);
				ifExists();
				}
				break;
			}
			setState(2841);
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropProcedure(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropProcedure(this);
			}
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_dropProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2843);
			match(PROCEDURE_SYMBOL);
			setState(2845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2844);
				ifExists();
				}
				break;
			}
			setState(2847);
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropIndexContext extends ParserRuleContext {
		public Token type;
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropIndex(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropIndex(this);
			}
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				setState(2849);
				onlineOption();
				}
			}

			setState(2852);
			_localctx.type = match(INDEX_SYMBOL);
			setState(2853);
			indexRef();
			setState(2854);
			match(ON_SYMBOL);
			setState(2855);
			tableRef();
			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				setState(2856);
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropLogfileGroup(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropLogfileGroup(this);
			}
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_dropLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2859);
			match(LOGFILE_SYMBOL);
			setState(2860);
			match(GROUP_SYMBOL);
			setState(2861);
			logfileGroupRef();
			setState(2872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2862);
				dropLogfileGroupOption();
				setState(2869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					{
					setState(2864);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(2863);
						match(COMMA_SYMBOL);
						}
					}

					setState(2866);
					dropLogfileGroupOption();
					}
					}
					setState(2871);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropLogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropLogfileGroupOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropLogfileGroupOption(this);
			}
		}
	}

	public final DropLogfileGroupOptionContext dropLogfileGroupOption() throws RecognitionException {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_dropLogfileGroupOption);
		try {
			setState(2876);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2874);
				tsOptionWait();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2875);
				tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropServer(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropServer(this);
			}
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_dropServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2878);
			match(SERVER_SYMBOL);
			setState(2880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				setState(2879);
				ifExists();
				}
				break;
			}
			setState(2882);
			serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTableContext extends ParserRuleContext {
		public Token type;
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropTable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropTable(this);
			}
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(2884);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(2887);
			_localctx.type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_localctx.type = _errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2888);
				ifExists();
				}
				break;
			}
			setState(2891);
			tableRefList();
			setState(2893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				setState(2892);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropTableSpace(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropTableSpace(this);
			}
		}
	}

	public final DropTableSpaceContext dropTableSpace() throws RecognitionException {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_dropTableSpace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2895);
			match(TABLESPACE_SYMBOL);
			setState(2896);
			tablespaceRef();
			setState(2907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2897);
				dropLogfileGroupOption();
				setState(2904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					{
					setState(2899);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(2898);
						match(COMMA_SYMBOL);
						}
					}

					setState(2901);
					dropLogfileGroupOption();
					}
					}
					setState(2906);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropTrigger(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropTrigger(this);
			}
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_dropTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2909);
			match(TRIGGER_SYMBOL);
			setState(2911);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				setState(2910);
				ifExists();
				}
				break;
			}
			setState(2913);
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefListContext viewRefList() {
			return getRuleContext(ViewRefListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropView(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropView(this);
			}
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2915);
			match(VIEW_SYMBOL);
			setState(2917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2916);
				ifExists();
				}
				break;
			}
			setState(2919);
			viewRefList();
			setState(2921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				setState(2920);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropRole(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropRole(this);
			}
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_dropRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2923);
			match(ROLE_SYMBOL);
			setState(2925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				setState(2924);
				ifExists();
				}
				break;
			}
			setState(2927);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSpatialReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropSpatialReference(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropSpatialReference(this);
			}
		}
	}

	public final DropSpatialReferenceContext dropSpatialReference() throws RecognitionException {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_dropSpatialReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			match(SPATIAL_SYMBOL);
			setState(2930);
			match(REFERENCE_SYMBOL);
			setState(2931);
			match(SYSTEM_SYMBOL);
			setState(2933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2932);
				ifExists();
				}
				break;
			}
			setState(2935);
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public DropUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUndoTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropUndoTablespace(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropUndoTablespace(this);
			}
		}
	}

	public final DropUndoTablespaceContext dropUndoTablespace() throws RecognitionException {
		DropUndoTablespaceContext _localctx = new DropUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_dropUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2937);
			match(UNDO_SYMBOL);
			setState(2938);
			match(TABLESPACE_SYMBOL);
			setState(2939);
			tablespaceRef();
			setState(2941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				setState(2940);
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameTableStatementContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public List<RenamePairContext> renamePair() {
			return getRuleContexts(RenamePairContext.class);
		}
		public RenamePairContext renamePair(int i) {
			return getRuleContext(RenamePairContext.class,i);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRenameTableStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRenameTableStatement(this);
			}
		}
	}

	public final RenameTableStatementContext renameTableStatement() throws RecognitionException {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_renameTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2943);
			match(RENAME_SYMBOL);
			setState(2944);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2945);
			renamePair();
			setState(2950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2946);
				match(COMMA_SYMBOL);
				setState(2947);
				renamePair();
				}
				}
				setState(2952);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenamePairContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRenamePair(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRenamePair(this);
			}
		}
	}

	public final RenamePairContext renamePair() throws RecognitionException {
		RenamePairContext _localctx = new RenamePairContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_renamePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2953);
			tableRef();
			setState(2954);
			match(TO_SYMBOL);
			setState(2955);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TruncateTableStatementContext extends ParserRuleContext {
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTruncateTableStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTruncateTableStatement(this);
			}
		}
	}

	public final TruncateTableStatementContext truncateTableStatement() throws RecognitionException {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_truncateTableStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			match(TRUNCATE_SYMBOL);
			setState(2959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				setState(2958);
				match(TABLE_SYMBOL);
				}
				break;
			}
			setState(2961);
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImportStatementContext extends ParserRuleContext {
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterImportStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitImportStatement(this);
			}
		}
	}

	public final ImportStatementContext importStatement() throws RecognitionException {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_importStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2963);
			match(IMPORT_SYMBOL);
			setState(2964);
			match(TABLE_SYMBOL);
			setState(2965);
			match(FROM_SYMBOL);
			setState(2966);
			textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL_SYMBOL() { return getToken(MySQLParser.CALL_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCallStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCallStatement(this);
			}
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_callStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2968);
			match(CALL_SYMBOL);
			setState(2969);
			procedureRef();
			setState(2975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2970);
				match(OPEN_PAR_SYMBOL);
				setState(2972);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					setState(2971);
					exprList();
					}
					break;
				}
				setState(2974);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public List<DeleteStatementOptionContext> deleteStatementOption() {
			return getRuleContexts(DeleteStatementOptionContext.class);
		}
		public DeleteStatementOptionContext deleteStatementOption(int i) {
			return getRuleContext(DeleteStatementOptionContext.class,i);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public PartitionDeleteContext partitionDelete() {
			return getRuleContext(PartitionDeleteContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDeleteStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDeleteStatement(this);
			}
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				setState(2977);
				withClause();
				}
			}

			setState(2980);
			match(DELETE_SYMBOL);
			setState(2984);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2981);
					deleteStatementOption();
					}
					}
				}
				setState(2986);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			}
			setState(3019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(2987);
				match(FROM_SYMBOL);
				setState(3011);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					setState(2988);
					tableAliasRefList();
					setState(2989);
					match(USING_SYMBOL);
					setState(2990);
					tableReferenceList();
					setState(2992);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2991);
						whereClause();
						}
					}

					}
					break;
				case 2:
					{
					setState(2994);
					tableRef();
					setState(2997);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
					case 1:
						{
						setState(2995);
						if (!(this.isServerVersionGe80017())) {
							throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
						}
						setState(2996);
						tableAlias();
						}
						break;
					}
					setState(3000);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARTITION_SYMBOL) {
						{
						setState(2999);
						partitionDelete();
						}
					}

					setState(3003);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(3002);
						whereClause();
						}
					}

					setState(3006);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER_SYMBOL) {
						{
						setState(3005);
						orderClause();
						}
					}

					setState(3009);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						setState(3008);
						simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3013);
				tableAliasRefList();
				setState(3014);
				match(FROM_SYMBOL);
				setState(3015);
				tableReferenceList();
				setState(3017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					setState(3016);
					whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDeleteContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionDelete(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionDelete(this);
			}
		}
	}

	public final PartitionDeleteContext partitionDelete() throws RecognitionException {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_partitionDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3021);
			match(PARTITION_SYMBOL);
			setState(3022);
			match(OPEN_PAR_SYMBOL);
			setState(3023);
			identifierList();
			setState(3024);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteStatementOptionContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatementOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDeleteStatementOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDeleteStatementOption(this);
			}
		}
	}

	public final DeleteStatementOptionContext deleteStatementOption() throws RecognitionException {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_deleteStatementOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3026);
			_la = _input.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL || _la==QUICK_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDoStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDoStatement(this);
			}
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3028);
			match(DO_SYMBOL);
			setState(3029);
			selectItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public HandlerReadOrScanContext handlerReadOrScan() {
			return getRuleContext(HandlerReadOrScanContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHandlerStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHandlerStatement(this);
			}
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_handlerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3031);
			match(HANDLER_SYMBOL);
			setState(3049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				setState(3032);
				tableRef();
				setState(3033);
				match(OPEN_SYMBOL);
				setState(3035);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					setState(3034);
					tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3037);
				identifier();
				setState(3047);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLOSE_SYMBOL:
					{
					setState(3038);
					match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					setState(3039);
					match(READ_SYMBOL);
					setState(3040);
					handlerReadOrScan();
					setState(3042);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(3041);
						whereClause();
						}
					}

					setState(3045);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						setState(3044);
						limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerReadOrScanContext extends ParserRuleContext {
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadOrScan; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHandlerReadOrScan(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHandlerReadOrScan(this);
			}
		}
	}

	public final HandlerReadOrScanContext handlerReadOrScan() throws RecognitionException {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_handlerReadOrScan);
		int _la;
		try {
			setState(3061);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3051);
				_la = _input.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3052);
				identifier();
				setState(3059);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					setState(3053);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					setState(3054);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7744L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3055);
					match(OPEN_PAR_SYMBOL);
					setState(3056);
					values();
					setState(3057);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public InsertLockOptionContext insertLockOption() {
			return getRuleContext(InsertLockOptionContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public InsertUpdateListContext insertUpdateList() {
			return getRuleContext(InsertUpdateListContext.class,0);
		}
		public ValuesReferenceContext valuesReference() {
			return getRuleContext(ValuesReferenceContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInsertStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInsertStatement(this);
			}
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3063);
			match(INSERT_SYMBOL);
			setState(3065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				setState(3064);
				insertLockOption();
				}
				break;
			}
			setState(3068);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(3067);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(3071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				setState(3070);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(3073);
			tableRef();
			setState(3075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(3074);
				usePartition();
				}
				break;
			}
			setState(3087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				setState(3077);
				insertFromConstructor();
				setState(3079);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(3078);
					valuesReference();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3081);
				match(SET_SYMBOL);
				setState(3082);
				updateList();
				setState(3084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(3083);
					valuesReference();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(3086);
				insertQueryExpression();
				}
				break;
			}
			setState(3090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(3089);
				insertUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertLockOptionContext extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInsertLockOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInsertLockOption(this);
			}
		}
	}

	public final InsertLockOptionContext insertLockOption() throws RecognitionException {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_insertLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3092);
			_la = _input.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertFromConstructorContext extends ParserRuleContext {
		public InsertValuesContext insertValues() {
			return getRuleContext(InsertValuesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertFromConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInsertFromConstructor(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInsertFromConstructor(this);
			}
		}
	}

	public final InsertFromConstructorContext insertFromConstructor() throws RecognitionException {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_insertFromConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(3094);
				match(OPEN_PAR_SYMBOL);
				setState(3096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(3095);
					fields();
					}
					break;
				}
				setState(3098);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			setState(3101);
			insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldsContext extends ParserRuleContext {
		public List<InsertIdentifierContext> insertIdentifier() {
			return getRuleContexts(InsertIdentifierContext.class);
		}
		public InsertIdentifierContext insertIdentifier(int i) {
			return getRuleContext(InsertIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFields(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFields(this);
			}
		}
	}

	public final FieldsContext fields() throws RecognitionException {
		FieldsContext _localctx = new FieldsContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_fields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3103);
			insertIdentifier();
			setState(3108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3104);
				match(COMMA_SYMBOL);
				setState(3105);
				insertIdentifier();
				}
				}
				setState(3110);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertValuesContext extends ParserRuleContext {
		public ValueListContext valueList() {
			return getRuleContext(ValueListContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInsertValues(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInsertValues(this);
			}
		}
	}

	public final InsertValuesContext insertValues() throws RecognitionException {
		InsertValuesContext _localctx = new InsertValuesContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_insertValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3111);
			_la = _input.LA(1);
			if ( !(_la==VALUES_SYMBOL || _la==VALUE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3112);
			valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return getRuleContext(QueryExpressionWithOptLockingClausesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInsertQueryExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInsertQueryExpression(this);
			}
		}
	}

	public final InsertQueryExpressionContext insertQueryExpression() throws RecognitionException {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_insertQueryExpression);
		try {
			setState(3124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3114);
				queryExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3115);
				queryExpressionParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					setState(3116);
					match(OPEN_PAR_SYMBOL);
					setState(3118);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
					case 1:
						{
						setState(3117);
						fields();
						}
						break;
					}
					setState(3120);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				setState(3123);
				queryExpressionWithOptLockingClauses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueListContext extends ParserRuleContext {
		public List<TerminalNode> OPEN_PAR_SYMBOL() { return getTokens(MySQLParser.OPEN_PAR_SYMBOL); }
		public TerminalNode OPEN_PAR_SYMBOL(int i) {
			return getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
		}
		public List<TerminalNode> CLOSE_PAR_SYMBOL() { return getTokens(MySQLParser.CLOSE_PAR_SYMBOL); }
		public TerminalNode CLOSE_PAR_SYMBOL(int i) {
			return getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
		}
		public List<ValuesContext> values() {
			return getRuleContexts(ValuesContext.class);
		}
		public ValuesContext values(int i) {
			return getRuleContext(ValuesContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterValueList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitValueList(this);
			}
		}
	}

	public final ValueListContext valueList() throws RecognitionException {
		ValueListContext _localctx = new ValueListContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_valueList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3126);
			match(OPEN_PAR_SYMBOL);
			setState(3128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(3127);
				values();
				}
				break;
			}
			setState(3130);
			match(CLOSE_PAR_SYMBOL);
			setState(3139);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3131);
					match(COMMA_SYMBOL);
					setState(3132);
					match(OPEN_PAR_SYMBOL);
					setState(3134);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
					case 1:
						{
						setState(3133);
						values();
						}
						break;
					}
					setState(3136);
					match(CLOSE_PAR_SYMBOL);
					}
					}
				}
				setState(3141);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValuesContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> DEFAULT_SYMBOL() { return getTokens(MySQLParser.DEFAULT_SYMBOL); }
		public TerminalNode DEFAULT_SYMBOL(int i) {
			return getToken(MySQLParser.DEFAULT_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterValues(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitValues(this);
			}
		}
	}

	public final ValuesContext values() throws RecognitionException {
		ValuesContext _localctx = new ValuesContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_values);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				{
				setState(3142);
				expr(0);
				}
				break;
			case 2:
				{
				setState(3143);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			setState(3153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3146);
				match(COMMA_SYMBOL);
				setState(3149);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(3147);
					expr(0);
					}
					break;
				case 2:
					{
					setState(3148);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				setState(3155);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValuesReferenceContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public ValuesReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterValuesReference(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitValuesReference(this);
			}
		}
	}

	public final ValuesReferenceContext valuesReference() throws RecognitionException {
		ValuesReferenceContext _localctx = new ValuesReferenceContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_valuesReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3156);
			if (!(this.isServerVersionGe80018())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80018()");
			}
			setState(3157);
			match(AS_SYMBOL);
			setState(3158);
			identifier();
			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(3159);
				columnInternalRefList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertUpdateListContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertUpdateList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInsertUpdateList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInsertUpdateList(this);
			}
		}
	}

	public final InsertUpdateListContext insertUpdateList() throws RecognitionException {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_insertUpdateList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3162);
			match(ON_SYMBOL);
			setState(3163);
			match(DUPLICATE_SYMBOL);
			setState(3164);
			match(KEY_SYMBOL);
			setState(3165);
			match(UPDATE_SYMBOL);
			setState(3166);
			updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadStatementContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public DataOrXmlContext dataOrXml() {
			return getRuleContext(DataOrXmlContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LoadDataFileTailContext loadDataFileTail() {
			return getRuleContext(LoadDataFileTailContext.class,0);
		}
		public LoadDataLockContext loadDataLock() {
			return getRuleContext(LoadDataLockContext.class,0);
		}
		public LoadFromContext loadFrom() {
			return getRuleContext(LoadFromContext.class,0);
		}
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public LoadSourceTypeContext loadSourceType() {
			return getRuleContext(LoadSourceTypeContext.class,0);
		}
		public SourceCountContext sourceCount() {
			return getRuleContext(SourceCountContext.class,0);
		}
		public SourceOrderContext sourceOrder() {
			return getRuleContext(SourceOrderContext.class,0);
		}
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return getRuleContext(XmlRowsIdentifiedByContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public LoadParallelContext loadParallel() {
			return getRuleContext(LoadParallelContext.class,0);
		}
		public LoadMemoryContext loadMemory() {
			return getRuleContext(LoadMemoryContext.class,0);
		}
		public LoadAlgorithmContext loadAlgorithm() {
			return getRuleContext(LoadAlgorithmContext.class,0);
		}
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoadStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoadStatement(this);
			}
		}
	}

	public final LoadStatementContext loadStatement() throws RecognitionException {
		LoadStatementContext _localctx = new LoadStatementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_loadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3168);
			match(LOAD_SYMBOL);
			setState(3169);
			dataOrXml();
			setState(3171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(3170);
				loadDataLock();
				}
				break;
			}
			setState(3174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				setState(3173);
				loadFrom();
				}
				break;
			}
			setState(3177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(3176);
				match(LOCAL_SYMBOL);
				}
				break;
			}
			setState(3180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(3179);
				loadSourceType();
				}
				break;
			}
			setState(3182);
			textStringLiteral();
			setState(3184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				setState(3183);
				sourceCount();
				}
				break;
			}
			setState(3187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(3186);
				sourceOrder();
				}
				break;
			}
			setState(3190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				setState(3189);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3192);
			match(INTO_SYMBOL);
			setState(3193);
			match(TABLE_SYMBOL);
			setState(3194);
			tableRef();
			setState(3196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(3195);
				usePartition();
				}
				break;
			}
			setState(3199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(3198);
				charsetClause();
				}
				break;
			}
			setState(3202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(3201);
				xmlRowsIdentifiedBy();
				}
				break;
			}
			setState(3205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(3204);
				fieldsClause();
				}
				break;
			}
			setState(3208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(3207);
				linesClause();
				}
				break;
			}
			setState(3210);
			loadDataFileTail();
			setState(3212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				setState(3211);
				loadParallel();
				}
				break;
			}
			setState(3215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				setState(3214);
				loadMemory();
				}
				break;
			}
			setState(3218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(3217);
				loadAlgorithm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataOrXmlContext extends ParserRuleContext {
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataOrXml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDataOrXml(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDataOrXml(this);
			}
		}
	}

	public final DataOrXmlContext dataOrXml() throws RecognitionException {
		DataOrXmlContext _localctx = new DataOrXmlContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_dataOrXml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3220);
			_la = _input.LA(1);
			if ( !(_la==DATA_SYMBOL || _la==XML_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadDataLockContext extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public LoadDataLockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataLock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoadDataLock(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoadDataLock(this);
			}
		}
	}

	public final LoadDataLockContext loadDataLock() throws RecognitionException {
		LoadDataLockContext _localctx = new LoadDataLockContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_loadDataLock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3222);
			_la = _input.LA(1);
			if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadFromContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public LoadFromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadFrom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoadFrom(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoadFrom(this);
			}
		}
	}

	public final LoadFromContext loadFrom() throws RecognitionException {
		LoadFromContext _localctx = new LoadFromContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_loadFrom);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3224);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(3225);
			match(FROM_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadSourceTypeContext extends ParserRuleContext {
		public TerminalNode INFILE_SYMBOL() { return getToken(MySQLParser.INFILE_SYMBOL, 0); }
		public TerminalNode URL_SYMBOL() { return getToken(MySQLParser.URL_SYMBOL, 0); }
		public TerminalNode S3_SYMBOL() { return getToken(MySQLParser.S3_SYMBOL, 0); }
		public LoadSourceTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadSourceType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoadSourceType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoadSourceType(this);
			}
		}
	}

	public final LoadSourceTypeContext loadSourceType() throws RecognitionException {
		LoadSourceTypeContext _localctx = new LoadSourceTypeContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_loadSourceType);
		int _la;
		try {
			setState(3230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3227);
				match(INFILE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3228);
				if (!(this.isServerVersionGe80200())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
				}
				setState(3229);
				_la = _input.LA(1);
				if ( !(_la==URL_SYMBOL || _la==S3_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceCountContext extends ParserRuleContext {
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public SourceCountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceCount; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSourceCount(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSourceCount(this);
			}
		}
	}

	public final SourceCountContext sourceCount() throws RecognitionException {
		SourceCountContext _localctx = new SourceCountContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_sourceCount);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3232);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(3238);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				setState(3233);
				match(COUNT_SYMBOL);
				setState(3234);
				match(INT_NUMBER);
				}
				break;
			case 2:
				{
				setState(3235);
				pureIdentifier();
				setState(3236);
				match(INT_NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceOrderContext extends ParserRuleContext {
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public SourceOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSourceOrder(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSourceOrder(this);
			}
		}
	}

	public final SourceOrderContext sourceOrder() throws RecognitionException {
		SourceOrderContext _localctx = new SourceOrderContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_sourceOrder);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3240);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(3241);
			match(IN_SYMBOL);
			setState(3242);
			match(PRIMARY_SYMBOL);
			setState(3243);
			match(KEY_SYMBOL);
			setState(3244);
			match(ORDER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmlRowsIdentifiedByContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRowsIdentifiedBy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterXmlRowsIdentifiedBy(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitXmlRowsIdentifiedBy(this);
			}
		}
	}

	public final XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() throws RecognitionException {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_xmlRowsIdentifiedBy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3246);
			match(ROWS_SYMBOL);
			setState(3247);
			match(IDENTIFIED_SYMBOL);
			setState(3248);
			match(BY_SYMBOL);
			setState(3249);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadDataFileTailContext extends ParserRuleContext {
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LoadDataFileTargetListContext loadDataFileTargetList() {
			return getRuleContext(LoadDataFileTargetListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public TerminalNode LINES_SYMBOL() { return getToken(MySQLParser.LINES_SYMBOL, 0); }
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoadDataFileTail(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoadDataFileTail(this);
			}
		}
	}

	public final LoadDataFileTailContext loadDataFileTail() throws RecognitionException {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_loadDataFileTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				setState(3251);
				match(IGNORE_SYMBOL);
				setState(3252);
				match(INT_NUMBER);
				setState(3253);
				_la = _input.LA(1);
				if ( !(_la==LINES_SYMBOL || _la==ROWS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(3256);
				loadDataFileTargetList();
				}
				break;
			}
			setState(3261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				setState(3259);
				match(SET_SYMBOL);
				setState(3260);
				updateList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadDataFileTargetListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldOrVariableListContext fieldOrVariableList() {
			return getRuleContext(FieldOrVariableListContext.class,0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoadDataFileTargetList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoadDataFileTargetList(this);
			}
		}
	}

	public final LoadDataFileTargetListContext loadDataFileTargetList() throws RecognitionException {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_loadDataFileTargetList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3263);
			match(OPEN_PAR_SYMBOL);
			setState(3265);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(3264);
				fieldOrVariableList();
				}
				break;
			}
			setState(3267);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldOrVariableListContext extends ParserRuleContext {
		public List<ColumnRefContext> columnRef() {
			return getRuleContexts(ColumnRefContext.class);
		}
		public ColumnRefContext columnRef(int i) {
			return getRuleContext(ColumnRefContext.class,i);
		}
		public List<TerminalNode> AT_SIGN_SYMBOL() { return getTokens(MySQLParser.AT_SIGN_SYMBOL); }
		public TerminalNode AT_SIGN_SYMBOL(int i) {
			return getToken(MySQLParser.AT_SIGN_SYMBOL, i);
		}
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public List<TerminalNode> AT_AT_SIGN_SYMBOL() { return getTokens(MySQLParser.AT_AT_SIGN_SYMBOL); }
		public TerminalNode AT_AT_SIGN_SYMBOL(int i) {
			return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public List<TerminalNode> AT_TEXT_SUFFIX() { return getTokens(MySQLParser.AT_TEXT_SUFFIX); }
		public TerminalNode AT_TEXT_SUFFIX(int i) {
			return getToken(MySQLParser.AT_TEXT_SUFFIX, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOrVariableList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFieldOrVariableList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFieldOrVariableList(this);
			}
		}
	}

	public final FieldOrVariableListContext fieldOrVariableList() throws RecognitionException {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_fieldOrVariableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				setState(3269);
				columnRef();
				}
				break;
			case 2:
				{
				setState(3270);
				match(AT_SIGN_SYMBOL);
				setState(3271);
				textOrIdentifier();
				}
				break;
			case 3:
				{
				setState(3272);
				match(AT_AT_SIGN_SYMBOL);
				}
				break;
			}
			setState(3285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3275);
				match(COMMA_SYMBOL);
				setState(3281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(3276);
					columnRef();
					}
					break;
				case 2:
					{
					setState(3277);
					match(AT_SIGN_SYMBOL);
					setState(3278);
					textOrIdentifier();
					}
					break;
				case 3:
					{
					setState(3279);
					match(AT_TEXT_SUFFIX);
					}
					break;
				case 4:
					{
					setState(3280);
					match(AT_AT_SIGN_SYMBOL);
					}
					break;
				}
				}
				}
				setState(3287);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadAlgorithmContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode BULK_SYMBOL() { return getToken(MySQLParser.BULK_SYMBOL, 0); }
		public LoadAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoadAlgorithm(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoadAlgorithm(this);
			}
		}
	}

	public final LoadAlgorithmContext loadAlgorithm() throws RecognitionException {
		LoadAlgorithmContext _localctx = new LoadAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_loadAlgorithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3288);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(3289);
			match(ALGORITHM_SYMBOL);
			setState(3290);
			match(EQUAL_OPERATOR);
			setState(3291);
			match(BULK_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadParallelContext extends ParserRuleContext {
		public TerminalNode PARALLEL_SYMBOL() { return getToken(MySQLParser.PARALLEL_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LoadParallelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadParallel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoadParallel(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoadParallel(this);
			}
		}
	}

	public final LoadParallelContext loadParallel() throws RecognitionException {
		LoadParallelContext _localctx = new LoadParallelContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_loadParallel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3293);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(3294);
			match(PARALLEL_SYMBOL);
			setState(3295);
			match(EQUAL_OPERATOR);
			setState(3296);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadMemoryContext extends ParserRuleContext {
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public LoadMemoryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadMemory; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoadMemory(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoadMemory(this);
			}
		}
	}

	public final LoadMemoryContext loadMemory() throws RecognitionException {
		LoadMemoryContext _localctx = new LoadMemoryContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_loadMemory);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3298);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(3299);
			match(MEMORY_SYMBOL);
			setState(3300);
			match(EQUAL_OPERATOR);
			setState(3301);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplaceStatementContext extends ParserRuleContext {
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReplaceStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReplaceStatement(this);
			}
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3303);
			match(REPLACE_SYMBOL);
			setState(3305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(3304);
				_la = _input.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(3307);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(3310);
			tableRef();
			setState(3312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(3311);
				usePartition();
				}
				break;
			}
			setState(3318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				setState(3314);
				insertFromConstructor();
				}
				break;
			case 2:
				{
				setState(3315);
				match(SET_SYMBOL);
				setState(3316);
				updateList();
				}
				break;
			case 3:
				{
				setState(3317);
				insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectStatementContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockingClauseListContext lockingClauseList() {
			return getRuleContext(LockingClauseListContext.class,0);
		}
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSelectStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSelectStatement(this);
			}
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_selectStatement);
		try {
			setState(3325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3320);
				queryExpression();
				setState(3322);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(3321);
					lockingClauseList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3324);
				selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectStatementWithIntoContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public LockingClauseListContext lockingClauseList() {
			return getRuleContext(LockingClauseListContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatementWithInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSelectStatementWithInto(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSelectStatementWithInto(this);
			}
		}
	}

	public final SelectStatementWithIntoContext selectStatementWithInto() throws RecognitionException {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_selectStatementWithInto);
		try {
			setState(3344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3327);
				match(OPEN_PAR_SYMBOL);
				setState(3328);
				selectStatementWithInto();
				setState(3329);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3331);
				queryExpression();
				setState(3332);
				intoClause();
				setState(3334);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(3333);
					lockingClauseList();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3336);
				queryExpression();
				setState(3337);
				lockingClauseList();
				setState(3338);
				intoClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3340);
				if (!(this.isSelectStatementWithInto())) {
					throw new FailedPredicateException(this, "this.isSelectStatementWithInto()");
				}
				setState(3341);
				queryExpressionParens();
				setState(3342);
				intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryExpressionContext extends ParserRuleContext {
		public QueryExpressionBodyContext queryExpressionBody() {
			return getRuleContext(QueryExpressionBodyContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQueryExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQueryExpression(this);
			}
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_queryExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(3346);
				withClause();
				}
				break;
			}
			setState(3349);
			queryExpressionBody();
			setState(3351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				setState(3350);
				orderClause();
				}
				break;
			}
			setState(3354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				setState(3353);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryExpressionBodyContext extends ParserRuleContext {
		public QueryPrimaryContext queryPrimary() {
			return getRuleContext(QueryPrimaryContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public List<QueryExpressionBodyContext> queryExpressionBody() {
			return getRuleContexts(QueryExpressionBodyContext.class);
		}
		public QueryExpressionBodyContext queryExpressionBody(int i) {
			return getRuleContext(QueryExpressionBodyContext.class,i);
		}
		public List<TerminalNode> UNION_SYMBOL() { return getTokens(MySQLParser.UNION_SYMBOL); }
		public TerminalNode UNION_SYMBOL(int i) {
			return getToken(MySQLParser.UNION_SYMBOL, i);
		}
		public List<TerminalNode> EXCEPT_SYMBOL() { return getTokens(MySQLParser.EXCEPT_SYMBOL); }
		public TerminalNode EXCEPT_SYMBOL(int i) {
			return getToken(MySQLParser.EXCEPT_SYMBOL, i);
		}
		public List<TerminalNode> INTERSECT_SYMBOL() { return getTokens(MySQLParser.INTERSECT_SYMBOL); }
		public TerminalNode INTERSECT_SYMBOL(int i) {
			return getToken(MySQLParser.INTERSECT_SYMBOL, i);
		}
		public List<UnionOptionContext> unionOption() {
			return getRuleContexts(UnionOptionContext.class);
		}
		public UnionOptionContext unionOption(int i) {
			return getRuleContext(UnionOptionContext.class,i);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQueryExpressionBody(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQueryExpressionBody(this);
			}
		}
	}

	public final QueryExpressionBodyContext queryExpressionBody() throws RecognitionException {
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_queryExpressionBody);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(3356);
				queryPrimary();
				}
				break;
			case 2:
				{
				setState(3357);
				queryExpressionParens();
				}
				break;
			}
			setState(3371);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,299,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3363);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
					case 1:
						{
						setState(3360);
						match(UNION_SYMBOL);
						}
						break;
					case 2:
						{
						setState(3361);
						if (!(this.isServerVersionGe80031())) {
							throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
						}
						setState(3362);
						_la = _input.LA(1);
						if ( !(_la==EXCEPT_SYMBOL || _la==INTERSECT_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) {
								matchedEOF = true;
							}
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(3366);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
					case 1:
						{
						setState(3365);
						unionOption();
						}
						break;
					}
					setState(3368);
					queryExpressionBody();
					}
					}
				}
				setState(3373);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,299,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryExpressionParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return getRuleContext(QueryExpressionWithOptLockingClausesContext.class,0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQueryExpressionParens(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQueryExpressionParens(this);
			}
		}
	}

	public final QueryExpressionParensContext queryExpressionParens() throws RecognitionException {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_queryExpressionParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			match(OPEN_PAR_SYMBOL);
			setState(3377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(3375);
				queryExpressionParens();
				}
				break;
			case 2:
				{
				setState(3376);
				queryExpressionWithOptLockingClauses();
				}
				break;
			}
			setState(3379);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryPrimaryContext extends ParserRuleContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TableValueConstructorContext tableValueConstructor() {
			return getRuleContext(TableValueConstructorContext.class,0);
		}
		public ExplicitTableContext explicitTable() {
			return getRuleContext(ExplicitTableContext.class,0);
		}
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQueryPrimary(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQueryPrimary(this);
			}
		}
	}

	public final QueryPrimaryContext queryPrimary() throws RecognitionException {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_queryPrimary);
		try {
			setState(3386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3381);
				querySpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3382);
				if (!(this.isServerVersionGe80019())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				}
				setState(3383);
				tableValueConstructor();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3384);
				if (!(this.isServerVersionGe80019())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				}
				setState(3385);
				explicitTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT_SYMBOL() { return getToken(MySQLParser.SELECT_SYMBOL, 0); }
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public List<SelectOptionContext> selectOption() {
			return getRuleContexts(SelectOptionContext.class);
		}
		public SelectOptionContext selectOption(int i) {
			return getRuleContext(SelectOptionContext.class,i);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public QualifyClauseContext qualifyClause() {
			return getRuleContext(QualifyClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQuerySpecification(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQuerySpecification(this);
			}
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_querySpecification);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3388);
			match(SELECT_SYMBOL);
			setState(3392);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,302,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3389);
					selectOption();
					}
					}
				}
				setState(3394);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,302,_ctx);
			}
			setState(3395);
			selectItemList();
			setState(3397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(3396);
				intoClause();
				}
				break;
			}
			setState(3400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(3399);
				fromClause();
				}
				break;
			}
			setState(3403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(3402);
				whereClause();
				}
				break;
			}
			setState(3406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(3405);
				groupByClause();
				}
				break;
			}
			setState(3409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(3408);
				havingClause();
				}
				break;
			}
			setState(3412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(3411);
				windowClause();
				}
				break;
			}
			setState(3415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(3414);
				qualifyClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryContext extends ParserRuleContext {
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSubquery(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSubquery(this);
			}
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3417);
			queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuerySpecOptionContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public TerminalNode SQL_SMALL_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BIG_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQuerySpecOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQuerySpecOption(this);
			}
		}
	}

	public final QuerySpecOptionContext querySpecOption() throws RecognitionException {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_querySpecOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3419);
			_la = _input.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & 8388631L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionsContext limitOptions() {
			return getRuleContext(LimitOptionsContext.class,0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLimitClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLimitClause(this);
			}
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3421);
			match(LIMIT_SYMBOL);
			setState(3422);
			limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleLimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionContext limitOption() {
			return getRuleContext(LimitOptionContext.class,0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleLimitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleLimitClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleLimitClause(this);
			}
		}
	}

	public final SimpleLimitClauseContext simpleLimitClause() throws RecognitionException {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_simpleLimitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3424);
			match(LIMIT_SYMBOL);
			setState(3425);
			limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitOptionsContext extends ParserRuleContext {
		public List<LimitOptionContext> limitOption() {
			return getRuleContexts(LimitOptionContext.class);
		}
		public LimitOptionContext limitOption(int i) {
			return getRuleContext(LimitOptionContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLimitOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLimitOptions(this);
			}
		}
	}

	public final LimitOptionsContext limitOptions() throws RecognitionException {
		LimitOptionsContext _localctx = new LimitOptionsContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_limitOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3427);
			limitOption();
			setState(3430);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(3428);
				_la = _input.LA(1);
				if ( !(_la==COMMA_SYMBOL || _la==OFFSET_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3429);
				limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitOptionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLimitOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLimitOption(this);
			}
		}
	}

	public final LimitOptionContext limitOption() throws RecognitionException {
		LimitOptionContext _localctx = new LimitOptionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_limitOption);
		int _la;
		try {
			setState(3434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3432);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3433);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8796093022264L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode OUTFILE_SYMBOL() { return getToken(MySQLParser.OUTFILE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIntoClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIntoClause(this);
			}
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_intoClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3436);
			match(INTO_SYMBOL);
			setState(3464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(3437);
				match(OUTFILE_SYMBOL);
				setState(3438);
				textStringLiteral();
				setState(3440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(3439);
					charsetClause();
					}
					break;
				}
				setState(3443);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(3442);
					fieldsClause();
					}
					break;
				}
				setState(3446);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(3445);
					linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3448);
				match(DUMPFILE_SYMBOL);
				setState(3449);
				textStringLiteral();
				}
				break;
			case 3:
				{
				setState(3452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(3450);
					textOrIdentifier();
					}
					break;
				case 2:
					{
					setState(3451);
					userVariable();
					}
					break;
				}
				setState(3461);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3454);
						match(COMMA_SYMBOL);
						setState(3457);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
						case 1:
							{
							setState(3455);
							textOrIdentifier();
							}
							break;
						case 2:
							{
							setState(3456);
							userVariable();
							}
							break;
						}
						}
						}
					}
					setState(3463);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureAnalyseClauseContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureAnalyseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterProcedureAnalyseClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitProcedureAnalyseClause(this);
			}
		}
	}

	public final ProcedureAnalyseClauseContext procedureAnalyseClause() throws RecognitionException {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_procedureAnalyseClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3466);
			match(PROCEDURE_SYMBOL);
			setState(3467);
			match(OPEN_PAR_SYMBOL);
			setState(3473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INT_NUMBER) {
				{
				setState(3468);
				match(INT_NUMBER);
				setState(3471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(3469);
					match(COMMA_SYMBOL);
					setState(3470);
					match(INT_NUMBER);
					}
				}

				}
			}

			setState(3475);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING_SYMBOL() { return getToken(MySQLParser.HAVING_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHavingClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHavingClause(this);
			}
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3477);
			match(HAVING_SYMBOL);
			setState(3478);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifyClauseContext extends ParserRuleContext {
		public TerminalNode QUALIFY_SYMBOL() { return getToken(MySQLParser.QUALIFY_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public QualifyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQualifyClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQualifyClause(this);
			}
		}
	}

	public final QualifyClauseContext qualifyClause() throws RecognitionException {
		QualifyClauseContext _localctx = new QualifyClauseContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_qualifyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3480);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(3481);
			match(QUALIFY_SYMBOL);
			setState(3482);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW_SYMBOL() { return getToken(MySQLParser.WINDOW_SYMBOL, 0); }
		public List<WindowDefinitionContext> windowDefinition() {
			return getRuleContexts(WindowDefinitionContext.class);
		}
		public WindowDefinitionContext windowDefinition(int i) {
			return getRuleContext(WindowDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowClause(this);
			}
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			match(WINDOW_SYMBOL);
			setState(3485);
			windowDefinition();
			setState(3490);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,321,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3486);
					match(COMMA_SYMBOL);
					setState(3487);
					windowDefinition();
					}
					}
				}
				setState(3492);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,321,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowDefinitionContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowDefinition(this);
			}
		}
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3493);
			windowName();
			setState(3494);
			match(AS_SYMBOL);
			setState(3495);
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowSpecContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public WindowSpecDetailsContext windowSpecDetails() {
			return getRuleContext(WindowSpecDetailsContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowSpec(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowSpec(this);
			}
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_windowSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3497);
			match(OPEN_PAR_SYMBOL);
			setState(3498);
			windowSpecDetails();
			setState(3499);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowSpecDetailsContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public WindowFrameClauseContext windowFrameClause() {
			return getRuleContext(WindowFrameClauseContext.class,0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecDetails; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowSpecDetails(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowSpecDetails(this);
			}
		}
	}

	public final WindowSpecDetailsContext windowSpecDetails() throws RecognitionException {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_windowSpecDetails);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(3501);
				windowName();
				}
				break;
			}
			setState(3507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				setState(3504);
				match(PARTITION_SYMBOL);
				setState(3505);
				match(BY_SYMBOL);
				setState(3506);
				orderList();
				}
			}

			setState(3510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				setState(3509);
				orderClause();
				}
			}

			setState(3513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				setState(3512);
				windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameClauseContext extends ParserRuleContext {
		public WindowFrameUnitsContext windowFrameUnits() {
			return getRuleContext(WindowFrameUnitsContext.class,0);
		}
		public WindowFrameExtentContext windowFrameExtent() {
			return getRuleContext(WindowFrameExtentContext.class,0);
		}
		public WindowFrameExclusionContext windowFrameExclusion() {
			return getRuleContext(WindowFrameExclusionContext.class,0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowFrameClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowFrameClause(this);
			}
		}
	}

	public final WindowFrameClauseContext windowFrameClause() throws RecognitionException {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_windowFrameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3515);
			windowFrameUnits();
			setState(3516);
			windowFrameExtent();
			setState(3518);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				setState(3517);
				windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode RANGE_SYMBOL() { return getToken(MySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode GROUPS_SYMBOL() { return getToken(MySQLParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowFrameUnits(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowFrameUnits(this);
			}
		}
	}

	public final WindowFrameUnitsContext windowFrameUnits() throws RecognitionException {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_windowFrameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3520);
			_la = _input.LA(1);
			if ( !(_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameExtentContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public WindowFrameBetweenContext windowFrameBetween() {
			return getRuleContext(WindowFrameBetweenContext.class,0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowFrameExtent(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowFrameExtent(this);
			}
		}
	}

	public final WindowFrameExtentContext windowFrameExtent() throws RecognitionException {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_windowFrameExtent);
		try {
			setState(3524);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
			case CURRENT_SYMBOL:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3522);
				windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3523);
				windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameStartContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public UlonglongNumberContext ulonglongNumber() {
			return getRuleContext(UlonglongNumberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowFrameStart(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowFrameStart(this);
			}
		}
	}

	public final WindowFrameStartContext windowFrameStart() throws RecognitionException {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_windowFrameStart);
		try {
			setState(3540);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3526);
				match(UNBOUNDED_SYMBOL);
				setState(3527);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3528);
				ulonglongNumber();
				setState(3529);
				match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3531);
				match(PARAM_MARKER);
				setState(3532);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3533);
				match(INTERVAL_SYMBOL);
				setState(3534);
				expr(0);
				setState(3535);
				interval();
				setState(3536);
				match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3538);
				match(CURRENT_SYMBOL);
				setState(3539);
				match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public List<WindowFrameBoundContext> windowFrameBound() {
			return getRuleContexts(WindowFrameBoundContext.class);
		}
		public WindowFrameBoundContext windowFrameBound(int i) {
			return getRuleContext(WindowFrameBoundContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowFrameBetween(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowFrameBetween(this);
			}
		}
	}

	public final WindowFrameBetweenContext windowFrameBetween() throws RecognitionException {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_windowFrameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3542);
			match(BETWEEN_SYMBOL);
			setState(3543);
			windowFrameBound();
			setState(3544);
			match(AND_SYMBOL);
			setState(3545);
			windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameBoundContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public UlonglongNumberContext ulonglongNumber() {
			return getRuleContext(UlonglongNumberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowFrameBound(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowFrameBound(this);
			}
		}
	}

	public final WindowFrameBoundContext windowFrameBound() throws RecognitionException {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_windowFrameBound);
		try {
			setState(3560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3547);
				windowFrameStart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3548);
				match(UNBOUNDED_SYMBOL);
				setState(3549);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3550);
				ulonglongNumber();
				setState(3551);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3553);
				match(PARAM_MARKER);
				setState(3554);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3555);
				match(INTERVAL_SYMBOL);
				setState(3556);
				expr(0);
				setState(3557);
				interval();
				setState(3558);
				match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameExclusionContext extends ParserRuleContext {
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExclusion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowFrameExclusion(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowFrameExclusion(this);
			}
		}
	}

	public final WindowFrameExclusionContext windowFrameExclusion() throws RecognitionException {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_windowFrameExclusion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3562);
			match(EXCLUDE_SYMBOL);
			setState(3569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SYMBOL:
				{
				setState(3563);
				match(CURRENT_SYMBOL);
				setState(3564);
				match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(3565);
				match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				setState(3566);
				match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				setState(3567);
				match(NO_SYMBOL);
				setState(3568);
				match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public TerminalNode RECURSIVE_SYMBOL() { return getToken(MySQLParser.RECURSIVE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWithClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWithClause(this);
			}
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_withClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3571);
			match(WITH_SYMBOL);
			setState(3573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(3572);
				match(RECURSIVE_SYMBOL);
				}
				break;
			}
			setState(3575);
			commonTableExpression();
			setState(3580);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3576);
					match(COMMA_SYMBOL);
					setState(3577);
					commonTableExpression();
					}
					}
				}
				setState(3582);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommonTableExpressionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCommonTableExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCommonTableExpression(this);
			}
		}
	}

	public final CommonTableExpressionContext commonTableExpression() throws RecognitionException {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_commonTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3583);
			identifier();
			setState(3585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(3584);
				columnInternalRefList();
				}
			}

			setState(3587);
			match(AS_SYMBOL);
			setState(3588);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OlapOptionContext olapOption() {
			return getRuleContext(OlapOptionContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public GroupListContext groupList() {
			return getRuleContext(GroupListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode CUBE_SYMBOL() { return getToken(MySQLParser.CUBE_SYMBOL, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupByClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupByClause(this);
			}
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_groupByClause);
		int _la;
		try {
			setState(3604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3590);
				match(GROUP_SYMBOL);
				setState(3591);
				match(BY_SYMBOL);
				setState(3592);
				orderList();
				setState(3594);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(3593);
					olapOption();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3596);
				if (!(this.isServerVersionGe80032())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				}
				setState(3597);
				match(GROUP_SYMBOL);
				setState(3598);
				match(BY_SYMBOL);
				setState(3599);
				_la = _input.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==ROLLUP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3600);
				match(OPEN_PAR_SYMBOL);
				setState(3601);
				groupList();
				setState(3602);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OlapOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOlapOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOlapOption(this);
			}
		}
	}

	public final OlapOptionContext olapOption() throws RecognitionException {
		OlapOptionContext _localctx = new OlapOptionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_olapOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3606);
			match(WITH_SYMBOL);
			setState(3607);
			match(ROLLUP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderClauseContext extends ParserRuleContext {
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOrderClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOrderClause(this);
			}
		}
	}

	public final OrderClauseContext orderClause() throws RecognitionException {
		OrderClauseContext _localctx = new OrderClauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_orderClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3609);
			match(ORDER_SYMBOL);
			setState(3610);
			match(BY_SYMBOL);
			setState(3611);
			orderList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DirectionContext extends ParserRuleContext {
		public TerminalNode ASC_SYMBOL() { return getToken(MySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDirection(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDirection(this);
			}
		}
	}

	public final DirectionContext direction() throws RecognitionException {
		DirectionContext _localctx = new DirectionContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_direction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3613);
			_la = _input.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode DUAL_SYMBOL() { return getToken(MySQLParser.DUAL_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFromClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFromClause(this);
			}
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3615);
			match(FROM_SYMBOL);
			setState(3618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(3616);
				match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				setState(3617);
				tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableReferenceListContext extends ParserRuleContext {
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableReferenceList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableReferenceList(this);
			}
		}
	}

	public final TableReferenceListContext tableReferenceList() throws RecognitionException {
		TableReferenceListContext _localctx = new TableReferenceListContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_tableReferenceList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3620);
			tableReference();
			setState(3625);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3621);
					match(COMMA_SYMBOL);
					setState(3622);
					tableReference();
					}
					}
				}
				setState(3627);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableValueConstructorContext extends ParserRuleContext {
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public List<RowValueExplicitContext> rowValueExplicit() {
			return getRuleContexts(RowValueExplicitContext.class);
		}
		public RowValueExplicitContext rowValueExplicit(int i) {
			return getRuleContext(RowValueExplicitContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableValueConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableValueConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableValueConstructor(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableValueConstructor(this);
			}
		}
	}

	public final TableValueConstructorContext tableValueConstructor() throws RecognitionException {
		TableValueConstructorContext _localctx = new TableValueConstructorContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_tableValueConstructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3628);
			match(VALUES_SYMBOL);
			setState(3629);
			rowValueExplicit();
			setState(3634);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3630);
					match(COMMA_SYMBOL);
					setState(3631);
					rowValueExplicit();
					}
					}
				}
				setState(3636);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplicitTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public ExplicitTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicitTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExplicitTable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExplicitTable(this);
			}
		}
	}

	public final ExplicitTableContext explicitTable() throws RecognitionException {
		ExplicitTableContext _localctx = new ExplicitTableContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_explicitTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3637);
			match(TABLE_SYMBOL);
			setState(3638);
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowValueExplicitContext extends ParserRuleContext {
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public RowValueExplicitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowValueExplicit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRowValueExplicit(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRowValueExplicit(this);
			}
		}
	}

	public final RowValueExplicitContext rowValueExplicit() throws RecognitionException {
		RowValueExplicitContext _localctx = new RowValueExplicitContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_rowValueExplicit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3640);
			match(ROW_SYMBOL);
			setState(3641);
			match(OPEN_PAR_SYMBOL);
			setState(3643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				setState(3642);
				values();
				}
				break;
			}
			setState(3645);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectOptionContext extends ParserRuleContext {
		public QuerySpecOptionContext querySpecOption() {
			return getRuleContext(QuerySpecOptionContext.class,0);
		}
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public SelectOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSelectOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSelectOption(this);
			}
		}
	}

	public final SelectOptionContext selectOption() throws RecognitionException {
		SelectOptionContext _localctx = new SelectOptionContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_selectOption);
		try {
			setState(3649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL_SYMBOL:
			case DISTINCT_SYMBOL:
			case HIGH_PRIORITY_SYMBOL:
			case SQL_BIG_RESULT_SYMBOL:
			case SQL_BUFFER_RESULT_SYMBOL:
			case SQL_CALC_FOUND_ROWS_SYMBOL:
			case SQL_SMALL_RESULT_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3647);
				querySpecOption();
				}
				break;
			case SQL_NO_CACHE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3648);
				match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockingClauseListContext extends ParserRuleContext {
		public List<LockingClauseContext> lockingClause() {
			return getRuleContexts(LockingClauseContext.class);
		}
		public LockingClauseContext lockingClause(int i) {
			return getRuleContext(LockingClauseContext.class,i);
		}
		public LockingClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockingClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLockingClauseList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLockingClauseList(this);
			}
		}
	}

	public final LockingClauseListContext lockingClauseList() throws RecognitionException {
		LockingClauseListContext _localctx = new LockingClauseListContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_lockingClauseList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3651);
			if (!(this.isServerVersionGe80031())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
			}
			setState(3653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3652);
				lockingClause();
				}
				}
				setState(3655);
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR_SYMBOL || _la==LOCK_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockingClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public LockStrenghContext lockStrengh() {
			return getRuleContext(LockStrenghContext.class,0);
		}
		public TerminalNode OF_SYMBOL() { return getToken(MySQLParser.OF_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public LockedRowActionContext lockedRowAction() {
			return getRuleContext(LockedRowActionContext.class,0);
		}
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLockingClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLockingClause(this);
			}
		}
	}

	public final LockingClauseContext lockingClause() throws RecognitionException {
		LockingClauseContext _localctx = new LockingClauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_lockingClause);
		int _la;
		try {
			setState(3670);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3657);
				match(FOR_SYMBOL);
				setState(3658);
				lockStrengh();
				setState(3661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF_SYMBOL) {
					{
					setState(3659);
					match(OF_SYMBOL);
					setState(3660);
					tableAliasRefList();
					}
				}

				setState(3664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SKIP_SYMBOL || _la==NOWAIT_SYMBOL) {
					{
					setState(3663);
					lockedRowAction();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3666);
				match(LOCK_SYMBOL);
				setState(3667);
				match(IN_SYMBOL);
				setState(3668);
				match(SHARE_SYMBOL);
				setState(3669);
				match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockStrenghContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStrengh; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLockStrengh(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLockStrengh(this);
			}
		}
	}

	public final LockStrenghContext lockStrengh() throws RecognitionException {
		LockStrenghContext _localctx = new LockStrenghContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_lockStrengh);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3672);
			_la = _input.LA(1);
			if ( !(_la==SHARE_SYMBOL || _la==UPDATE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockedRowActionContext extends ParserRuleContext {
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRowAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLockedRowAction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLockedRowAction(this);
			}
		}
	}

	public final LockedRowActionContext lockedRowAction() throws RecognitionException {
		LockedRowActionContext _localctx = new LockedRowActionContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_lockedRowAction);
		try {
			setState(3677);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3674);
				match(SKIP_SYMBOL);
				setState(3675);
				match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3676);
				match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectItemListContext extends ParserRuleContext {
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSelectItemList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSelectItemList(this);
			}
		}
	}

	public final SelectItemListContext selectItemList() throws RecognitionException {
		SelectItemListContext _localctx = new SelectItemListContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_selectItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3679);
				selectItem();
				}
				break;
			case 2:
				{
				setState(3680);
				match(MULT_OPERATOR);
				}
				break;
			}
			setState(3687);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,347,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3683);
					match(COMMA_SYMBOL);
					setState(3684);
					selectItem();
					}
					}
				}
				setState(3689);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,347,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectItemContext extends ParserRuleContext {
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSelectItem(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSelectItem(this);
			}
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_selectItem);
		try {
			setState(3695);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3690);
				tableWild();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3691);
				expr(0);
				setState(3693);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
				case 1:
					{
					setState(3692);
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSelectAlias(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSelectAlias(this);
			}
		}
	}

	public final SelectAliasContext selectAlias() throws RecognitionException {
		SelectAliasContext _localctx = new SelectAliasContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_selectAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				setState(3697);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(3702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				setState(3700);
				identifier();
				}
				break;
			case 2:
				{
				setState(3701);
				textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE_SYMBOL() { return getToken(MySQLParser.WHERE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWhereClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWhereClause(this);
			}
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3704);
			match(WHERE_SYMBOL);
			setState(3705);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public EscapedTableReferenceContext escapedTableReference() {
			return getRuleContext(EscapedTableReferenceContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OJ_SYMBOL() { return getToken(MySQLParser.OJ_SYMBOL, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableReference(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableReference(this);
			}
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_tableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				setState(3707);
				tableFactor();
				}
				break;
			case 2:
				{
				setState(3708);
				match(OPEN_CURLY_SYMBOL);
				setState(3712);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3709);
					if (!(this.isServerVersionGe80017())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
					}
					setState(3710);
					identifier();
					}
					break;
				case 2:
					{
					setState(3711);
					match(OJ_SYMBOL);
					}
					break;
				}
				setState(3714);
				escapedTableReference();
				setState(3715);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			setState(3722);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3719);
					joinedTable();
					}
					}
				}
				setState(3724);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EscapedTableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escapedTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterEscapedTableReference(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitEscapedTableReference(this);
			}
		}
	}

	public final EscapedTableReferenceContext escapedTableReference() throws RecognitionException {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_escapedTableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3725);
			tableFactor();
			setState(3729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CROSS_SYMBOL || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & 2148532225L) != 0) || _la==NATURAL_SYMBOL || _la==RIGHT_SYMBOL || _la==STRAIGHT_JOIN_SYMBOL) {
				{
				{
				setState(3726);
				joinedTable();
				}
				}
				setState(3731);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinedTableContext extends ParserRuleContext {
		public InnerJoinTypeContext innerJoinType() {
			return getRuleContext(InnerJoinTypeContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public OuterJoinTypeContext outerJoinType() {
			return getRuleContext(OuterJoinTypeContext.class,0);
		}
		public NaturalJoinTypeContext naturalJoinType() {
			return getRuleContext(NaturalJoinTypeContext.class,0);
		}
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterJoinedTable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitJoinedTable(this);
			}
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_joinedTable);
		try {
			setState(3751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3732);
				innerJoinType();
				setState(3733);
				tableReference();
				setState(3738);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					setState(3734);
					match(ON_SYMBOL);
					setState(3735);
					expr(0);
					}
					break;
				case 2:
					{
					setState(3736);
					match(USING_SYMBOL);
					setState(3737);
					identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3740);
				outerJoinType();
				setState(3741);
				tableReference();
				setState(3746);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON_SYMBOL:
					{
					setState(3742);
					match(ON_SYMBOL);
					setState(3743);
					expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					setState(3744);
					match(USING_SYMBOL);
					setState(3745);
					identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3748);
				naturalJoinType();
				setState(3749);
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NaturalJoinTypeContext extends ParserRuleContext {
		public TerminalNode NATURAL_SYMBOL() { return getToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MySQLParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNaturalJoinType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNaturalJoinType(this);
			}
		}
	}

	public final NaturalJoinTypeContext naturalJoinType() throws RecognitionException {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_naturalJoinType);
		int _la;
		try {
			setState(3764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3753);
				match(NATURAL_SYMBOL);
				setState(3755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					setState(3754);
					match(INNER_SYMBOL);
					}
				}

				setState(3757);
				match(JOIN_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3758);
				match(NATURAL_SYMBOL);
				setState(3759);
				_la = _input.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					setState(3760);
					match(OUTER_SYMBOL);
					}
				}

				setState(3763);
				match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InnerJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode CROSS_SYMBOL() { return getToken(MySQLParser.CROSS_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInnerJoinType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInnerJoinType(this);
			}
		}
	}

	public final InnerJoinTypeContext innerJoinType() throws RecognitionException {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_innerJoinType);
		int _la;
		try {
			setState(3771);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					setState(3766);
					_localctx.type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						_localctx.type = _errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3769);
				match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3770);
				_localctx.type = match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OuterJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MySQLParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOuterJoinType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOuterJoinType(this);
			}
		}
	}

	public final OuterJoinTypeContext outerJoinType() throws RecognitionException {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_outerJoinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3773);
			_localctx.type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_localctx.type = _errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				setState(3774);
				match(OUTER_SYMBOL);
				}
			}

			setState(3777);
			match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableFactorContext extends ParserRuleContext {
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public DerivedTableContext derivedTable() {
			return getRuleContext(DerivedTableContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableFunctionContext tableFunction() {
			return getRuleContext(TableFunctionContext.class,0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFactor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableFactor(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableFactor(this);
			}
		}
	}

	public final TableFactorContext tableFactor() throws RecognitionException {
		TableFactorContext _localctx = new TableFactorContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_tableFactor);
		try {
			setState(3785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3779);
				singleTable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3780);
				singleTableParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3781);
				derivedTable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3782);
				tableReferenceListParens();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3783);
				if (!(this.isServerVersionGe80004())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80004()");
				}
				setState(3784);
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleTableContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public IndexHintListContext indexHintList() {
			return getRuleContext(IndexHintListContext.class,0);
		}
		public TablesampleClauseContext tablesampleClause() {
			return getRuleContext(TablesampleClauseContext.class,0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSingleTable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSingleTable(this);
			}
		}
	}

	public final SingleTableContext singleTable() throws RecognitionException {
		SingleTableContext _localctx = new SingleTableContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_singleTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3787);
			tableRef();
			setState(3789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				setState(3788);
				usePartition();
				}
				break;
			}
			setState(3792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				setState(3791);
				tableAlias();
				}
				break;
			}
			setState(3795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				setState(3794);
				indexHintList();
				}
				break;
			}
			setState(3798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				setState(3797);
				tablesampleClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleTableParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSingleTableParens(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSingleTableParens(this);
			}
		}
	}

	public final SingleTableParensContext singleTableParens() throws RecognitionException {
		SingleTableParensContext _localctx = new SingleTableParensContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_singleTableParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			match(OPEN_PAR_SYMBOL);
			setState(3803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				setState(3801);
				singleTable();
				}
				break;
			case 2:
				{
				setState(3802);
				singleTableParens();
				}
				break;
			}
			setState(3805);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DerivedTableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public TerminalNode LATERAL_SYMBOL() { return getToken(MySQLParser.LATERAL_SYMBOL, 0); }
		public DerivedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derivedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDerivedTable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDerivedTable(this);
			}
		}
	}

	public final DerivedTableContext derivedTable() throws RecognitionException {
		DerivedTableContext _localctx = new DerivedTableContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_derivedTable);
		try {
			setState(3823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3807);
				subquery();
				setState(3809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(3808);
					tableAlias();
					}
					break;
				}
				setState(3812);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3811);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3814);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(3815);
				match(LATERAL_SYMBOL);
				setState(3816);
				subquery();
				setState(3818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(3817);
					tableAlias();
					}
					break;
				}
				setState(3821);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3820);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableReferenceListParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceListParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableReferenceListParens(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableReferenceListParens(this);
			}
		}
	}

	public final TableReferenceListParensContext tableReferenceListParens() throws RecognitionException {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_tableReferenceListParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3825);
			match(OPEN_PAR_SYMBOL);
			setState(3828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				setState(3826);
				tableReferenceList();
				}
				break;
			case 2:
				{
				setState(3827);
				tableReferenceListParens();
				}
				break;
			}
			setState(3830);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE_SYMBOL() { return getToken(MySQLParser.JSON_TABLE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableFunction(this);
			}
		}
	}

	public final TableFunctionContext tableFunction() throws RecognitionException {
		TableFunctionContext _localctx = new TableFunctionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_tableFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3832);
			match(JSON_TABLE_SYMBOL);
			setState(3833);
			match(OPEN_PAR_SYMBOL);
			setState(3834);
			expr(0);
			setState(3835);
			match(COMMA_SYMBOL);
			setState(3836);
			textStringLiteral();
			setState(3837);
			columnsClause();
			setState(3838);
			match(CLOSE_PAR_SYMBOL);
			setState(3840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(3839);
				tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<JtColumnContext> jtColumn() {
			return getRuleContexts(JtColumnContext.class);
		}
		public JtColumnContext jtColumn(int i) {
			return getRuleContext(JtColumnContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterColumnsClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitColumnsClause(this);
			}
		}
	}

	public final ColumnsClauseContext columnsClause() throws RecognitionException {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_columnsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3842);
			match(COLUMNS_SYMBOL);
			setState(3843);
			match(OPEN_PAR_SYMBOL);
			setState(3844);
			jtColumn();
			setState(3849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3845);
				match(COMMA_SYMBOL);
				setState(3846);
				jtColumn();
				}
				}
				setState(3851);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3852);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JtColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public OnEmptyOrErrorJsonTableContext onEmptyOrErrorJsonTable() {
			return getRuleContext(OnEmptyOrErrorJsonTableContext.class,0);
		}
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jtColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterJtColumn(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitJtColumn(this);
			}
		}
	}

	public final JtColumnContext jtColumn() throws RecognitionException {
		JtColumnContext _localctx = new JtColumnContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_jtColumn);
		int _la;
		try {
			setState(3877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3854);
				identifier();
				setState(3855);
				match(FOR_SYMBOL);
				setState(3856);
				match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3858);
				identifier();
				setState(3859);
				dataType();
				setState(3862);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					setState(3860);
					if (!(this.isServerVersionGe80014())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					}
					setState(3861);
					collate();
					}
					break;
				}
				setState(3865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(3864);
					match(EXISTS_SYMBOL);
					}
				}

				setState(3867);
				match(PATH_SYMBOL);
				setState(3868);
				textStringLiteral();
				setState(3870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3869);
					onEmptyOrErrorJsonTable();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3872);
				match(NESTED_SYMBOL);
				setState(3873);
				match(PATH_SYMBOL);
				setState(3874);
				textStringLiteral();
				setState(3875);
				columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnEmptyOrErrorContext extends ParserRuleContext {
		public OnEmptyContext onEmpty() {
			return getRuleContext(OnEmptyContext.class,0);
		}
		public OnErrorContext onError() {
			return getRuleContext(OnErrorContext.class,0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmptyOrError; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOnEmptyOrError(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOnEmptyOrError(this);
			}
		}
	}

	public final OnEmptyOrErrorContext onEmptyOrError() throws RecognitionException {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_onEmptyOrError);
		int _la;
		try {
			setState(3884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3879);
				onEmpty();
				setState(3881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3880);
					onError();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3883);
				onError();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnEmptyOrErrorJsonTableContext extends ParserRuleContext {
		public OnEmptyOrErrorContext onEmptyOrError() {
			return getRuleContext(OnEmptyOrErrorContext.class,0);
		}
		public OnErrorContext onError() {
			return getRuleContext(OnErrorContext.class,0);
		}
		public OnEmptyContext onEmpty() {
			return getRuleContext(OnEmptyContext.class,0);
		}
		public OnEmptyOrErrorJsonTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmptyOrErrorJsonTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOnEmptyOrErrorJsonTable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOnEmptyOrErrorJsonTable(this);
			}
		}
	}

	public final OnEmptyOrErrorJsonTableContext onEmptyOrErrorJsonTable() throws RecognitionException {
		OnEmptyOrErrorJsonTableContext _localctx = new OnEmptyOrErrorJsonTableContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_onEmptyOrErrorJsonTable);
		try {
			setState(3890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3886);
				onEmptyOrError();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3887);
				onError();
				setState(3888);
				onEmpty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnEmptyContext extends ParserRuleContext {
		public JsonOnResponseContext jsonOnResponse() {
			return getRuleContext(JsonOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode EMPTY_SYMBOL() { return getToken(MySQLParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOnEmpty(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOnEmpty(this);
			}
		}
	}

	public final OnEmptyContext onEmpty() throws RecognitionException {
		OnEmptyContext _localctx = new OnEmptyContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_onEmpty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3892);
			jsonOnResponse();
			setState(3893);
			match(ON_SYMBOL);
			setState(3894);
			match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnErrorContext extends ParserRuleContext {
		public JsonOnResponseContext jsonOnResponse() {
			return getRuleContext(JsonOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onError; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOnError(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOnError(this);
			}
		}
	}

	public final OnErrorContext onError() throws RecognitionException {
		OnErrorContext _localctx = new OnErrorContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_onError);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3896);
			jsonOnResponse();
			setState(3897);
			match(ON_SYMBOL);
			setState(3898);
			match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonOnResponseContext extends ParserRuleContext {
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public JsonOnResponseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnResponse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterJsonOnResponse(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitJsonOnResponse(this);
			}
		}
	}

	public final JsonOnResponseContext jsonOnResponse() throws RecognitionException {
		JsonOnResponseContext _localctx = new JsonOnResponseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_jsonOnResponse);
		try {
			setState(3904);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ERROR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3900);
				match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3901);
				match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3902);
				match(DEFAULT_SYMBOL);
				setState(3903);
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnionOptionContext extends ParserRuleContext {
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUnionOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUnionOption(this);
			}
		}
	}

	public final UnionOptionContext unionOption() throws RecognitionException {
		UnionOptionContext _localctx = new UnionOptionContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_unionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3906);
			_la = _input.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableAlias(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableAlias(this);
			}
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3911);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				setState(3908);
				match(AS_SYMBOL);
				}
				break;
			case 2:
				{
				setState(3909);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(3910);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(3913);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexHintListContext extends ParserRuleContext {
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexHintList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexHintList(this);
			}
		}
	}

	public final IndexHintListContext indexHintList() throws RecognitionException {
		IndexHintListContext _localctx = new IndexHintListContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_indexHintList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3915);
			indexHint();
			setState(3920);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,388,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3916);
					match(COMMA_SYMBOL);
					setState(3917);
					indexHint();
					}
					}
				}
				setState(3922);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,388,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexHintContext extends ParserRuleContext {
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IndexHintClauseContext indexHintClause() {
			return getRuleContext(IndexHintClauseContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexHint(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexHint(this);
			}
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_indexHint);
		int _la;
		try {
			setState(3943);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3923);
				indexHintType();
				setState(3924);
				keyOrIndex();
				setState(3926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3925);
					indexHintClause();
					}
				}

				setState(3928);
				match(OPEN_PAR_SYMBOL);
				setState(3929);
				indexList();
				setState(3930);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3932);
				match(USE_SYMBOL);
				setState(3933);
				keyOrIndex();
				setState(3935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3934);
					indexHintClause();
					}
				}

				setState(3937);
				match(OPEN_PAR_SYMBOL);
				setState(3939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
				case 1:
					{
					setState(3938);
					indexList();
					}
					break;
				}
				setState(3941);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexHintType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexHintType(this);
			}
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_indexHintType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			_la = _input.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyOrIndexContext extends ParserRuleContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyOrIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterKeyOrIndex(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitKeyOrIndex(this);
			}
		}
	}

	public final KeyOrIndexContext keyOrIndex() throws RecognitionException {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_keyOrIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3947);
			_la = _input.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintKeyTypeContext extends ParserRuleContext {
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public ConstraintKeyTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintKeyType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterConstraintKeyType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitConstraintKeyType(this);
			}
		}
	}

	public final ConstraintKeyTypeContext constraintKeyType() throws RecognitionException {
		ConstraintKeyTypeContext _localctx = new ConstraintKeyTypeContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_constraintKeyType);
		int _la;
		try {
			setState(3955);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3949);
				match(PRIMARY_SYMBOL);
				setState(3950);
				match(KEY_SYMBOL);
				}
				break;
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3951);
				match(UNIQUE_SYMBOL);
				setState(3953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					setState(3952);
					keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexHintClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexHintClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexHintClause(this);
			}
		}
	}

	public final IndexHintClauseContext indexHintClause() throws RecognitionException {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_indexHintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3957);
			match(FOR_SYMBOL);
			setState(3963);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_SYMBOL:
				{
				setState(3958);
				match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				setState(3959);
				match(ORDER_SYMBOL);
				setState(3960);
				match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(3961);
				match(GROUP_SYMBOL);
				setState(3962);
				match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexListContext extends ParserRuleContext {
		public List<IndexListElementContext> indexListElement() {
			return getRuleContexts(IndexListElementContext.class);
		}
		public IndexListElementContext indexListElement(int i) {
			return getRuleContext(IndexListElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexList(this);
			}
		}
	}

	public final IndexListContext indexList() throws RecognitionException {
		IndexListContext _localctx = new IndexListContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_indexList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3965);
			indexListElement();
			setState(3970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3966);
				match(COMMA_SYMBOL);
				setState(3967);
				indexListElement();
				}
				}
				setState(3972);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexListElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexListElement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexListElement(this);
			}
		}
	}

	public final IndexListElementContext indexListElement() throws RecognitionException {
		IndexListElementContext _localctx = new IndexListElementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_indexListElement);
		try {
			setState(3975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3973);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3974);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdateStatementContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUpdateStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUpdateStatement(this);
			}
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_updateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				setState(3977);
				withClause();
				}
			}

			setState(3980);
			match(UPDATE_SYMBOL);
			setState(3982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3981);
				match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			setState(3985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3984);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(3987);
			tableReferenceList();
			setState(3988);
			match(SET_SYMBOL);
			setState(3989);
			updateList();
			setState(3991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				setState(3990);
				whereClause();
				}
			}

			setState(3994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				setState(3993);
				orderClause();
				}
			}

			setState(3997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				setState(3996);
				simpleLimitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionOrLockingStatementContext extends ParserRuleContext {
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public LockStatementContext lockStatement() {
			return getRuleContext(LockStatementContext.class,0);
		}
		public XaStatementContext xaStatement() {
			return getRuleContext(XaStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOrLockingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTransactionOrLockingStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTransactionOrLockingStatement(this);
			}
		}
	}

	public final TransactionOrLockingStatementContext transactionOrLockingStatement() throws RecognitionException {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_transactionOrLockingStatement);
		try {
			setState(4003);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMIT_SYMBOL:
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3999);
				transactionStatement();
				}
				break;
			case RELEASE_SYMBOL:
			case ROLLBACK_SYMBOL:
			case SAVEPOINT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4000);
				savepointStatement();
				}
				break;
			case LOCK_SYMBOL:
			case UNLOCK_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4001);
				lockStatement();
				}
				break;
			case XA_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4002);
				xaStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionStatementContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public List<StartTransactionOptionListContext> startTransactionOptionList() {
			return getRuleContexts(StartTransactionOptionListContext.class);
		}
		public StartTransactionOptionListContext startTransactionOptionList(int i) {
			return getRuleContext(StartTransactionOptionListContext.class,i);
		}
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MySQLParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTransactionStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTransactionStatement(this);
			}
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_transactionStatement);
		int _la;
		try {
			setState(4030);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4005);
				match(START_SYMBOL);
				setState(4006);
				match(TRANSACTION_SYMBOL);
				setState(4010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==READ_SYMBOL || _la==WITH_SYMBOL) {
					{
					{
					setState(4007);
					startTransactionOptionList();
					}
					}
					setState(4012);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case COMMIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4013);
				match(COMMIT_SYMBOL);
				setState(4015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					setState(4014);
					match(WORK_SYMBOL);
					}
				}

				setState(4022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND_SYMBOL) {
					{
					setState(4017);
					match(AND_SYMBOL);
					setState(4019);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(4018);
						match(NO_SYMBOL);
						}
					}

					setState(4021);
					match(CHAIN_SYMBOL);
					}
				}

				setState(4028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
					{
					setState(4025);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(4024);
						match(NO_SYMBOL);
						}
					}

					setState(4027);
					match(RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterBeginWork(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitBeginWork(this);
			}
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4032);
			match(BEGIN_SYMBOL);
			setState(4034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK_SYMBOL) {
				{
				setState(4033);
				match(WORK_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartTransactionOptionListContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public StartTransactionOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransactionOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStartTransactionOptionList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStartTransactionOptionList(this);
			}
		}
	}

	public final StartTransactionOptionListContext startTransactionOptionList() throws RecognitionException {
		StartTransactionOptionListContext _localctx = new StartTransactionOptionListContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_startTransactionOptionList);
		int _la;
		try {
			setState(4041);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4036);
				match(WITH_SYMBOL);
				setState(4037);
				match(CONSISTENT_SYMBOL);
				setState(4038);
				match(SNAPSHOT_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4039);
				match(READ_SYMBOL);
				setState(4040);
				_la = _input.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MySQLParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSavepointStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSavepointStatement(this);
			}
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_savepointStatement);
		int _la;
		try {
			setState(4072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SAVEPOINT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4043);
				match(SAVEPOINT_SYMBOL);
				setState(4044);
				identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4045);
				match(ROLLBACK_SYMBOL);
				setState(4047);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					setState(4046);
					match(WORK_SYMBOL);
					}
				}

				setState(4067);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO_SYMBOL:
					{
					setState(4049);
					match(TO_SYMBOL);
					setState(4051);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
					case 1:
						{
						setState(4050);
						match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					setState(4053);
					identifier();
					}
					break;
				case EOF:
				case SEMICOLON_SYMBOL:
				case AND_SYMBOL:
				case NO_SYMBOL:
				case RELEASE_SYMBOL:
					{
					setState(4059);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND_SYMBOL) {
						{
						setState(4054);
						match(AND_SYMBOL);
						setState(4056);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(4055);
							match(NO_SYMBOL);
							}
						}

						setState(4058);
						match(CHAIN_SYMBOL);
						}
					}

					setState(4065);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
						{
						setState(4062);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(4061);
							match(NO_SYMBOL);
							}
						}

						setState(4064);
						match(RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELEASE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4069);
				match(RELEASE_SYMBOL);
				setState(4070);
				match(SAVEPOINT_SYMBOL);
				setState(4071);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockStatementContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public List<LockItemContext> lockItem() {
			return getRuleContexts(LockItemContext.class);
		}
		public LockItemContext lockItem(int i) {
			return getRuleContext(LockItemContext.class,i);
		}
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLockStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLockStatement(this);
			}
		}
	}

	public final LockStatementContext lockStatement() throws RecognitionException {
		LockStatementContext _localctx = new LockStatementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_lockStatement);
		int _la;
		try {
			setState(4090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4074);
				match(LOCK_SYMBOL);
				setState(4075);
				_la = _input.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4076);
				lockItem();
				setState(4081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(4077);
					match(COMMA_SYMBOL);
					setState(4078);
					lockItem();
					}
					}
					setState(4083);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4084);
				match(LOCK_SYMBOL);
				setState(4085);
				match(INSTANCE_SYMBOL);
				setState(4086);
				match(FOR_SYMBOL);
				setState(4087);
				match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4088);
				match(UNLOCK_SYMBOL);
				setState(4089);
				_la = _input.LA(1);
				if ( !(_la==INSTANCE_SYMBOL || _la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockItemContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LockOptionContext lockOption() {
			return getRuleContext(LockOptionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLockItem(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLockItem(this);
			}
		}
	}

	public final LockItemContext lockItem() throws RecognitionException {
		LockItemContext _localctx = new LockItemContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_lockItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4092);
			tableRef();
			setState(4094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				setState(4093);
				tableAlias();
				}
				break;
			}
			setState(4096);
			lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockOptionContext extends ParserRuleContext {
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLockOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLockOption(this);
			}
		}
	}

	public final LockOptionContext lockOption() throws RecognitionException {
		LockOptionContext _localctx = new LockOptionContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_lockOption);
		int _la;
		try {
			setState(4106);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4098);
				match(READ_SYMBOL);
				setState(4100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL) {
					{
					setState(4099);
					match(LOCAL_SYMBOL);
					}
				}

				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					setState(4102);
					match(LOW_PRIORITY_SYMBOL);
					}
				}

				setState(4105);
				match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XaStatementContext extends ParserRuleContext {
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public XaConvertContext xaConvert() {
			return getRuleContext(XaConvertContext.class,0);
		}
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterXaStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitXaStatement(this);
			}
		}
	}

	public final XaStatementContext xaStatement() throws RecognitionException {
		XaStatementContext _localctx = new XaStatementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_xaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4108);
			match(XA_SYMBOL);
			setState(4137);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				setState(4109);
				_la = _input.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4110);
				xid();
				setState(4112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) {
					{
					setState(4111);
					_la = _input.LA(1);
					if ( !(_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case END_SYMBOL:
				{
				setState(4114);
				match(END_SYMBOL);
				setState(4115);
				xid();
				setState(4121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUSPEND_SYMBOL) {
					{
					setState(4116);
					match(SUSPEND_SYMBOL);
					setState(4119);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR_SYMBOL) {
						{
						setState(4117);
						match(FOR_SYMBOL);
						setState(4118);
						match(MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case PREPARE_SYMBOL:
				{
				setState(4123);
				match(PREPARE_SYMBOL);
				setState(4124);
				xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				setState(4125);
				match(COMMIT_SYMBOL);
				setState(4126);
				xid();
				setState(4129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONE_SYMBOL) {
					{
					setState(4127);
					match(ONE_SYMBOL);
					setState(4128);
					match(PHASE_SYMBOL);
					}
				}

				}
				break;
			case ROLLBACK_SYMBOL:
				{
				setState(4131);
				match(ROLLBACK_SYMBOL);
				setState(4132);
				xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				setState(4133);
				match(RECOVER_SYMBOL);
				setState(4135);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONVERT_SYMBOL) {
					{
					setState(4134);
					xaConvert();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XaConvertContext extends ParserRuleContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaConvert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterXaConvert(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitXaConvert(this);
			}
		}
	}

	public final XaConvertContext xaConvert() throws RecognitionException {
		XaConvertContext _localctx = new XaConvertContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_xaConvert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4139);
			match(CONVERT_SYMBOL);
			setState(4140);
			match(XID_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XidContext extends ParserRuleContext {
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterXid(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitXid(this);
			}
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4142);
			textString();
			setState(4149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				setState(4143);
				match(COMMA_SYMBOL);
				setState(4144);
				textString();
				setState(4147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(4145);
					match(COMMA_SYMBOL);
					setState(4146);
					ulong_number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicationStatementContext extends ParserRuleContext {
		public TerminalNode PURGE_SYMBOL() { return getToken(MySQLParser.PURGE_SYMBOL, 0); }
		public PurgeOptionsContext purgeOptions() {
			return getRuleContext(PurgeOptionsContext.class,0);
		}
		public ChangeSourceContext changeSource() {
			return getRuleContext(ChangeSourceContext.class,0);
		}
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public List<ResetOptionContext> resetOption() {
			return getRuleContexts(ResetOptionContext.class);
		}
		public ResetOptionContext resetOption(int i) {
			return getRuleContext(ResetOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public IfExistsIdentifierContext ifExistsIdentifier() {
			return getRuleContext(IfExistsIdentifierContext.class,0);
		}
		public StartReplicaStatementContext startReplicaStatement() {
			return getRuleContext(StartReplicaStatementContext.class,0);
		}
		public StopReplicaStatementContext stopReplicaStatement() {
			return getRuleContext(StopReplicaStatementContext.class,0);
		}
		public ChangeReplicationContext changeReplication() {
			return getRuleContext(ChangeReplicationContext.class,0);
		}
		public ReplicationLoadContext replicationLoad() {
			return getRuleContext(ReplicationLoadContext.class,0);
		}
		public GroupReplicationContext groupReplication() {
			return getRuleContext(GroupReplicationContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReplicationStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReplicationStatement(this);
			}
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_replicationStatement);
		int _la;
		try {
			setState(4173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4151);
				match(PURGE_SYMBOL);
				setState(4152);
				purgeOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4153);
				changeSource();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4154);
				match(RESET_SYMBOL);
				setState(4155);
				resetOption();
				setState(4160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(4156);
					match(COMMA_SYMBOL);
					setState(4157);
					resetOption();
					}
					}
					setState(4162);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4163);
				match(RESET_SYMBOL);
				setState(4164);
				match(PERSIST_SYMBOL);
				setState(4166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF_SYMBOL) {
					{
					setState(4165);
					ifExistsIdentifier();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4168);
				startReplicaStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4169);
				stopReplicaStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4170);
				changeReplication();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4171);
				replicationLoad();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4172);
				groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PurgeOptionsContext extends ParserRuleContext {
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PurgeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPurgeOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPurgeOptions(this);
			}
		}
	}

	public final PurgeOptionsContext purgeOptions() throws RecognitionException {
		PurgeOptionsContext _localctx = new PurgeOptionsContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_purgeOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4175);
			_la = _input.LA(1);
			if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4176);
			match(LOGS_SYMBOL);
			setState(4181);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO_SYMBOL:
				{
				setState(4177);
				match(TO_SYMBOL);
				setState(4178);
				textLiteral();
				}
				break;
			case BEFORE_SYMBOL:
				{
				setState(4179);
				match(BEFORE_SYMBOL);
				setState(4180);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResetOptionContext extends ParserRuleContext {
		public MasterOrBinaryLogsAndGtidsContext masterOrBinaryLogsAndGtids() {
			return getRuleContext(MasterOrBinaryLogsAndGtidsContext.class,0);
		}
		public SourceResetOptionsContext sourceResetOptions() {
			return getRuleContext(SourceResetOptionsContext.class,0);
		}
		public ReplicaContext replica() {
			return getRuleContext(ReplicaContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterResetOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitResetOption(this);
			}
		}
	}

	public final ResetOptionContext resetOption() throws RecognitionException {
		ResetOptionContext _localctx = new ResetOptionContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_resetOption);
		int _la;
		try {
			setState(4194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4183);
				masterOrBinaryLogsAndGtids();
				setState(4185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO_SYMBOL) {
					{
					setState(4184);
					sourceResetOptions();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4187);
				replica();
				setState(4189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					setState(4188);
					match(ALL_SYMBOL);
					}
				}

				setState(4192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4191);
					channel();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MasterOrBinaryLogsAndGtidsContext extends ParserRuleContext {
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode GTIDS_SYMBOL() { return getToken(MySQLParser.GTIDS_SYMBOL, 0); }
		public MasterOrBinaryLogsAndGtidsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOrBinaryLogsAndGtids; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterMasterOrBinaryLogsAndGtids(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitMasterOrBinaryLogsAndGtids(this);
			}
		}
	}

	public final MasterOrBinaryLogsAndGtidsContext masterOrBinaryLogsAndGtids() throws RecognitionException {
		MasterOrBinaryLogsAndGtidsContext _localctx = new MasterOrBinaryLogsAndGtidsContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_masterOrBinaryLogsAndGtids);
		try {
			setState(4202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4196);
				match(MASTER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4197);
				if (!(this.isServerVersionGe80032())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				}
				setState(4198);
				match(BINARY_SYMBOL);
				setState(4199);
				match(LOGS_SYMBOL);
				setState(4200);
				match(AND_SYMBOL);
				setState(4201);
				match(GTIDS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceResetOptionsContext extends ParserRuleContext {
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public SourceResetOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceResetOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSourceResetOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSourceResetOptions(this);
			}
		}
	}

	public final SourceResetOptionsContext sourceResetOptions() throws RecognitionException {
		SourceResetOptionsContext _localctx = new SourceResetOptionsContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_sourceResetOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4204);
			match(TO_SYMBOL);
			setState(4205);
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicationLoadContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationLoad; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReplicationLoad(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReplicationLoad(this);
			}
		}
	}

	public final ReplicationLoadContext replicationLoad() throws RecognitionException {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_replicationLoad);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4207);
			match(LOAD_SYMBOL);
			setState(4211);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA_SYMBOL:
				{
				setState(4208);
				match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				setState(4209);
				match(TABLE_SYMBOL);
				setState(4210);
				tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4213);
			match(FROM_SYMBOL);
			setState(4214);
			match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceContext extends ParserRuleContext {
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public ChangeReplicationSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSource(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSource(this);
			}
		}
	}

	public final ChangeReplicationSourceContext changeReplicationSource() throws RecognitionException {
		ChangeReplicationSourceContext _localctx = new ChangeReplicationSourceContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_changeReplicationSource);
		try {
			setState(4220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4216);
				match(MASTER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4217);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(4218);
				match(REPLICATION_SYMBOL);
				setState(4219);
				match(SOURCE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeSourceContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ChangeReplicationSourceContext changeReplicationSource() {
			return getRuleContext(ChangeReplicationSourceContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public SourceDefinitionsContext sourceDefinitions() {
			return getRuleContext(SourceDefinitionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeSource(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeSource(this);
			}
		}
	}

	public final ChangeSourceContext changeSource() throws RecognitionException {
		ChangeSourceContext _localctx = new ChangeSourceContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_changeSource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4222);
			match(CHANGE_SYMBOL);
			setState(4223);
			changeReplicationSource();
			setState(4224);
			match(TO_SYMBOL);
			setState(4225);
			sourceDefinitions();
			setState(4227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(4226);
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceDefinitionsContext extends ParserRuleContext {
		public List<SourceDefinitionContext> sourceDefinition() {
			return getRuleContexts(SourceDefinitionContext.class);
		}
		public SourceDefinitionContext sourceDefinition(int i) {
			return getRuleContext(SourceDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SourceDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSourceDefinitions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSourceDefinitions(this);
			}
		}
	}

	public final SourceDefinitionsContext sourceDefinitions() throws RecognitionException {
		SourceDefinitionsContext _localctx = new SourceDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_sourceDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4229);
			sourceDefinition();
			setState(4234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4230);
				match(COMMA_SYMBOL);
				setState(4231);
				sourceDefinition();
				}
				}
				setState(4236);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceDefinitionContext extends ParserRuleContext {
		public ChangeReplicationSourceHostContext changeReplicationSourceHost() {
			return getRuleContext(ChangeReplicationSourceHostContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode NETWORK_NAMESPACE_SYMBOL() { return getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public ChangeReplicationSourceBindContext changeReplicationSourceBind() {
			return getRuleContext(ChangeReplicationSourceBindContext.class,0);
		}
		public ChangeReplicationSourceUserContext changeReplicationSourceUser() {
			return getRuleContext(ChangeReplicationSourceUserContext.class,0);
		}
		public ChangeReplicationSourcePasswordContext changeReplicationSourcePassword() {
			return getRuleContext(ChangeReplicationSourcePasswordContext.class,0);
		}
		public ChangeReplicationSourcePortContext changeReplicationSourcePort() {
			return getRuleContext(ChangeReplicationSourcePortContext.class,0);
		}
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public ChangeReplicationSourceConnectRetryContext changeReplicationSourceConnectRetry() {
			return getRuleContext(ChangeReplicationSourceConnectRetryContext.class,0);
		}
		public ChangeReplicationSourceRetryCountContext changeReplicationSourceRetryCount() {
			return getRuleContext(ChangeReplicationSourceRetryCountContext.class,0);
		}
		public ChangeReplicationSourceDelayContext changeReplicationSourceDelay() {
			return getRuleContext(ChangeReplicationSourceDelayContext.class,0);
		}
		public ChangeReplicationSourceSSLContext changeReplicationSourceSSL() {
			return getRuleContext(ChangeReplicationSourceSSLContext.class,0);
		}
		public ChangeReplicationSourceSSLCAContext changeReplicationSourceSSLCA() {
			return getRuleContext(ChangeReplicationSourceSSLCAContext.class,0);
		}
		public ChangeReplicationSourceSSLCApathContext changeReplicationSourceSSLCApath() {
			return getRuleContext(ChangeReplicationSourceSSLCApathContext.class,0);
		}
		public ChangeReplicationSourceTLSVersionContext changeReplicationSourceTLSVersion() {
			return getRuleContext(ChangeReplicationSourceTLSVersionContext.class,0);
		}
		public ChangeReplicationSourceSSLCertContext changeReplicationSourceSSLCert() {
			return getRuleContext(ChangeReplicationSourceSSLCertContext.class,0);
		}
		public ChangeReplicationSourceTLSCiphersuitesContext changeReplicationSourceTLSCiphersuites() {
			return getRuleContext(ChangeReplicationSourceTLSCiphersuitesContext.class,0);
		}
		public SourceTlsCiphersuitesDefContext sourceTlsCiphersuitesDef() {
			return getRuleContext(SourceTlsCiphersuitesDefContext.class,0);
		}
		public ChangeReplicationSourceSSLCipherContext changeReplicationSourceSSLCipher() {
			return getRuleContext(ChangeReplicationSourceSSLCipherContext.class,0);
		}
		public ChangeReplicationSourceSSLKeyContext changeReplicationSourceSSLKey() {
			return getRuleContext(ChangeReplicationSourceSSLKeyContext.class,0);
		}
		public ChangeReplicationSourceSSLVerifyServerCertContext changeReplicationSourceSSLVerifyServerCert() {
			return getRuleContext(ChangeReplicationSourceSSLVerifyServerCertContext.class,0);
		}
		public ChangeReplicationSourceSSLCLRContext changeReplicationSourceSSLCLR() {
			return getRuleContext(ChangeReplicationSourceSSLCLRContext.class,0);
		}
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public ChangeReplicationSourceSSLCLRpathContext changeReplicationSourceSSLCLRpath() {
			return getRuleContext(ChangeReplicationSourceSSLCLRpathContext.class,0);
		}
		public ChangeReplicationSourcePublicKeyContext changeReplicationSourcePublicKey() {
			return getRuleContext(ChangeReplicationSourcePublicKeyContext.class,0);
		}
		public ChangeReplicationSourceGetSourcePublicKeyContext changeReplicationSourceGetSourcePublicKey() {
			return getRuleContext(ChangeReplicationSourceGetSourcePublicKeyContext.class,0);
		}
		public ChangeReplicationSourceHeartbeatPeriodContext changeReplicationSourceHeartbeatPeriod() {
			return getRuleContext(ChangeReplicationSourceHeartbeatPeriodContext.class,0);
		}
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ServerIdListContext serverIdList() {
			return getRuleContext(ServerIdListContext.class,0);
		}
		public ChangeReplicationSourceCompressionAlgorithmContext changeReplicationSourceCompressionAlgorithm() {
			return getRuleContext(ChangeReplicationSourceCompressionAlgorithmContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ChangeReplicationSourceZstdCompressionLevelContext changeReplicationSourceZstdCompressionLevel() {
			return getRuleContext(ChangeReplicationSourceZstdCompressionLevelContext.class,0);
		}
		public ChangeReplicationSourceAutoPositionContext changeReplicationSourceAutoPosition() {
			return getRuleContext(ChangeReplicationSourceAutoPositionContext.class,0);
		}
		public TerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public PrivilegeCheckDefContext privilegeCheckDef() {
			return getRuleContext(PrivilegeCheckDefContext.class,0);
		}
		public TerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
			return getRuleContext(TablePrimaryKeyCheckDefContext.class,0);
		}
		public TerminalNode SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL() { return getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL() { return getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0); }
		public AssignGtidsToAnonymousTransactionsDefinitionContext assignGtidsToAnonymousTransactionsDefinition() {
			return getRuleContext(AssignGtidsToAnonymousTransactionsDefinitionContext.class,0);
		}
		public TerminalNode GTID_ONLY_SYMBOL() { return getToken(MySQLParser.GTID_ONLY_SYMBOL, 0); }
		public SourceFileDefContext sourceFileDef() {
			return getRuleContext(SourceFileDefContext.class,0);
		}
		public SourceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSourceDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSourceDefinition(this);
			}
		}
	}

	public final SourceDefinitionContext sourceDefinition() throws RecognitionException {
		SourceDefinitionContext _localctx = new SourceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_sourceDefinition);
		try {
			setState(4365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4237);
				changeReplicationSourceHost();
				setState(4238);
				match(EQUAL_OPERATOR);
				setState(4239);
				textStringNoLinebreak();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4241);
				match(NETWORK_NAMESPACE_SYMBOL);
				setState(4242);
				match(EQUAL_OPERATOR);
				setState(4243);
				textStringNoLinebreak();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4244);
				changeReplicationSourceBind();
				setState(4245);
				match(EQUAL_OPERATOR);
				setState(4246);
				textStringNoLinebreak();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4248);
				changeReplicationSourceUser();
				setState(4249);
				match(EQUAL_OPERATOR);
				setState(4250);
				textStringNoLinebreak();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4252);
				changeReplicationSourcePassword();
				setState(4253);
				match(EQUAL_OPERATOR);
				setState(4254);
				textStringNoLinebreak();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4256);
				changeReplicationSourcePort();
				setState(4257);
				match(EQUAL_OPERATOR);
				setState(4258);
				ulong_number();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4260);
				changeReplicationSourceConnectRetry();
				setState(4261);
				match(EQUAL_OPERATOR);
				setState(4262);
				ulong_number();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4264);
				changeReplicationSourceRetryCount();
				setState(4265);
				match(EQUAL_OPERATOR);
				setState(4266);
				ulong_number();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4268);
				changeReplicationSourceDelay();
				setState(4269);
				match(EQUAL_OPERATOR);
				setState(4270);
				ulong_number();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4272);
				changeReplicationSourceSSL();
				setState(4273);
				match(EQUAL_OPERATOR);
				setState(4274);
				ulong_number();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4276);
				changeReplicationSourceSSLCA();
				setState(4277);
				match(EQUAL_OPERATOR);
				setState(4278);
				textStringNoLinebreak();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4280);
				changeReplicationSourceSSLCApath();
				setState(4281);
				match(EQUAL_OPERATOR);
				setState(4282);
				textStringNoLinebreak();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4284);
				changeReplicationSourceTLSVersion();
				setState(4285);
				match(EQUAL_OPERATOR);
				setState(4286);
				textStringNoLinebreak();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4288);
				changeReplicationSourceSSLCert();
				setState(4289);
				match(EQUAL_OPERATOR);
				setState(4290);
				textStringNoLinebreak();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4292);
				changeReplicationSourceTLSCiphersuites();
				setState(4293);
				match(EQUAL_OPERATOR);
				setState(4294);
				sourceTlsCiphersuitesDef();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4296);
				changeReplicationSourceSSLCipher();
				setState(4297);
				match(EQUAL_OPERATOR);
				setState(4298);
				textStringNoLinebreak();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4300);
				changeReplicationSourceSSLKey();
				setState(4301);
				match(EQUAL_OPERATOR);
				setState(4302);
				textStringNoLinebreak();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4304);
				changeReplicationSourceSSLVerifyServerCert();
				setState(4305);
				match(EQUAL_OPERATOR);
				setState(4306);
				ulong_number();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4308);
				changeReplicationSourceSSLCLR();
				setState(4309);
				match(EQUAL_OPERATOR);
				setState(4310);
				textLiteral();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4312);
				changeReplicationSourceSSLCLRpath();
				setState(4313);
				match(EQUAL_OPERATOR);
				setState(4314);
				textStringNoLinebreak();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4316);
				changeReplicationSourcePublicKey();
				setState(4317);
				match(EQUAL_OPERATOR);
				setState(4318);
				textStringNoLinebreak();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4320);
				changeReplicationSourceGetSourcePublicKey();
				setState(4321);
				match(EQUAL_OPERATOR);
				setState(4322);
				ulong_number();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4324);
				changeReplicationSourceHeartbeatPeriod();
				setState(4325);
				match(EQUAL_OPERATOR);
				setState(4326);
				ulong_number();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4328);
				match(IGNORE_SERVER_IDS_SYMBOL);
				setState(4329);
				match(EQUAL_OPERATOR);
				setState(4330);
				serverIdList();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(4331);
				changeReplicationSourceCompressionAlgorithm();
				setState(4332);
				match(EQUAL_OPERATOR);
				setState(4333);
				textStringLiteral();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(4335);
				changeReplicationSourceZstdCompressionLevel();
				setState(4336);
				match(EQUAL_OPERATOR);
				setState(4337);
				ulong_number();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(4339);
				changeReplicationSourceAutoPosition();
				setState(4340);
				match(EQUAL_OPERATOR);
				setState(4341);
				ulong_number();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(4343);
				match(PRIVILEGE_CHECKS_USER_SYMBOL);
				setState(4344);
				match(EQUAL_OPERATOR);
				setState(4345);
				privilegeCheckDef();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(4346);
				match(REQUIRE_ROW_FORMAT_SYMBOL);
				setState(4347);
				match(EQUAL_OPERATOR);
				setState(4348);
				ulong_number();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(4349);
				match(REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
				setState(4350);
				match(EQUAL_OPERATOR);
				setState(4351);
				tablePrimaryKeyCheckDef();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(4352);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(4353);
				match(SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL);
				setState(4354);
				match(EQUAL_OPERATOR);
				setState(4355);
				real_ulong_number();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(4356);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(4357);
				match(ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL);
				setState(4358);
				match(EQUAL_OPERATOR);
				setState(4359);
				assignGtidsToAnonymousTransactionsDefinition();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(4360);
				if (!(this.isServerVersionGe80027())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80027()");
				}
				setState(4361);
				match(GTID_ONLY_SYMBOL);
				setState(4362);
				match(EQUAL_OPERATOR);
				setState(4363);
				real_ulong_number();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(4364);
				sourceFileDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceAutoPositionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode SOURCE_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0); }
		public ChangeReplicationSourceAutoPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceAutoPosition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceAutoPosition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceAutoPosition(this);
			}
		}
	}

	public final ChangeReplicationSourceAutoPositionContext changeReplicationSourceAutoPosition() throws RecognitionException {
		ChangeReplicationSourceAutoPositionContext _localctx = new ChangeReplicationSourceAutoPositionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_changeReplicationSourceAutoPosition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4367);
			_la = _input.LA(1);
			if ( !(_la==MASTER_AUTO_POSITION_SYMBOL || _la==SOURCE_AUTO_POSITION_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceHostContext extends ParserRuleContext {
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode SOURCE_HOST_SYMBOL() { return getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0); }
		public ChangeReplicationSourceHostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceHost; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceHost(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceHost(this);
			}
		}
	}

	public final ChangeReplicationSourceHostContext changeReplicationSourceHost() throws RecognitionException {
		ChangeReplicationSourceHostContext _localctx = new ChangeReplicationSourceHostContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_changeReplicationSourceHost);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4369);
			_la = _input.LA(1);
			if ( !(_la==MASTER_HOST_SYMBOL || _la==SOURCE_HOST_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceBindContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND_SYMBOL() { return getToken(MySQLParser.MASTER_BIND_SYMBOL, 0); }
		public TerminalNode SOURCE_BIND_SYMBOL() { return getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0); }
		public ChangeReplicationSourceBindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceBind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceBind(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceBind(this);
			}
		}
	}

	public final ChangeReplicationSourceBindContext changeReplicationSourceBind() throws RecognitionException {
		ChangeReplicationSourceBindContext _localctx = new ChangeReplicationSourceBindContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_changeReplicationSourceBind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4371);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND_SYMBOL || _la==SOURCE_BIND_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceUserContext extends ParserRuleContext {
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode SOURCE_USER_SYMBOL() { return getToken(MySQLParser.SOURCE_USER_SYMBOL, 0); }
		public ChangeReplicationSourceUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceUser(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceUser(this);
			}
		}
	}

	public final ChangeReplicationSourceUserContext changeReplicationSourceUser() throws RecognitionException {
		ChangeReplicationSourceUserContext _localctx = new ChangeReplicationSourceUserContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_changeReplicationSourceUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4373);
			_la = _input.LA(1);
			if ( !(_la==MASTER_USER_SYMBOL || _la==SOURCE_USER_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourcePasswordContext extends ParserRuleContext {
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode SOURCE_PASSWORD_SYMBOL() { return getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0); }
		public ChangeReplicationSourcePasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourcePassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourcePassword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourcePassword(this);
			}
		}
	}

	public final ChangeReplicationSourcePasswordContext changeReplicationSourcePassword() throws RecognitionException {
		ChangeReplicationSourcePasswordContext _localctx = new ChangeReplicationSourcePasswordContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_changeReplicationSourcePassword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4375);
			_la = _input.LA(1);
			if ( !(_la==MASTER_PASSWORD_SYMBOL || _la==SOURCE_PASSWORD_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourcePortContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode SOURCE_PORT_SYMBOL() { return getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0); }
		public ChangeReplicationSourcePortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourcePort; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourcePort(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourcePort(this);
			}
		}
	}

	public final ChangeReplicationSourcePortContext changeReplicationSourcePort() throws RecognitionException {
		ChangeReplicationSourcePortContext _localctx = new ChangeReplicationSourcePortContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_changeReplicationSourcePort);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4377);
			_la = _input.LA(1);
			if ( !(_la==MASTER_PORT_SYMBOL || _la==SOURCE_PORT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceConnectRetryContext extends ParserRuleContext {
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode SOURCE_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0); }
		public ChangeReplicationSourceConnectRetryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceConnectRetry; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceConnectRetry(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceConnectRetry(this);
			}
		}
	}

	public final ChangeReplicationSourceConnectRetryContext changeReplicationSourceConnectRetry() throws RecognitionException {
		ChangeReplicationSourceConnectRetryContext _localctx = new ChangeReplicationSourceConnectRetryContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_changeReplicationSourceConnectRetry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4379);
			_la = _input.LA(1);
			if ( !(_la==MASTER_CONNECT_RETRY_SYMBOL || _la==SOURCE_CONNECT_RETRY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceRetryCountContext extends ParserRuleContext {
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode SOURCE_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0); }
		public ChangeReplicationSourceRetryCountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceRetryCount; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceRetryCount(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceRetryCount(this);
			}
		}
	}

	public final ChangeReplicationSourceRetryCountContext changeReplicationSourceRetryCount() throws RecognitionException {
		ChangeReplicationSourceRetryCountContext _localctx = new ChangeReplicationSourceRetryCountContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_changeReplicationSourceRetryCount);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4381);
			_la = _input.LA(1);
			if ( !(_la==MASTER_RETRY_COUNT_SYMBOL || _la==SOURCE_RETRY_COUNT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceDelayContext extends ParserRuleContext {
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode SOURCE_DELAY_SYMBOL() { return getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0); }
		public ChangeReplicationSourceDelayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceDelay; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceDelay(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceDelay(this);
			}
		}
	}

	public final ChangeReplicationSourceDelayContext changeReplicationSourceDelay() throws RecognitionException {
		ChangeReplicationSourceDelayContext _localctx = new ChangeReplicationSourceDelayContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_changeReplicationSourceDelay);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4383);
			_la = _input.LA(1);
			if ( !(_la==MASTER_DELAY_SYMBOL || _la==SOURCE_DELAY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceSSLContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0); }
		public ChangeReplicationSourceSSLContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceSSL; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceSSL(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceSSL(this);
			}
		}
	}

	public final ChangeReplicationSourceSSLContext changeReplicationSourceSSL() throws RecognitionException {
		ChangeReplicationSourceSSLContext _localctx = new ChangeReplicationSourceSSLContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_changeReplicationSourceSSL);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4385);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_SYMBOL || _la==SOURCE_SSL_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceSSLCAContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CA_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCAContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceSSLCA; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceSSLCA(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceSSLCA(this);
			}
		}
	}

	public final ChangeReplicationSourceSSLCAContext changeReplicationSourceSSLCA() throws RecognitionException {
		ChangeReplicationSourceSSLCAContext _localctx = new ChangeReplicationSourceSSLCAContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_changeReplicationSourceSSLCA);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4387);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_CA_SYMBOL || _la==SOURCE_SSL_CA_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceSSLCApathContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCApathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceSSLCApath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceSSLCApath(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceSSLCApath(this);
			}
		}
	}

	public final ChangeReplicationSourceSSLCApathContext changeReplicationSourceSSLCApath() throws RecognitionException {
		ChangeReplicationSourceSSLCApathContext _localctx = new ChangeReplicationSourceSSLCApathContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_changeReplicationSourceSSLCApath);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4389);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_CAPATH_SYMBOL || _la==SOURCE_SSL_CAPATH_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceSSLCipherContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCipherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceSSLCipher; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceSSLCipher(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceSSLCipher(this);
			}
		}
	}

	public final ChangeReplicationSourceSSLCipherContext changeReplicationSourceSSLCipher() throws RecognitionException {
		ChangeReplicationSourceSSLCipherContext _localctx = new ChangeReplicationSourceSSLCipherContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_changeReplicationSourceSSLCipher);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4391);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_CIPHER_SYMBOL || _la==SOURCE_SSL_CIPHER_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceSSLCLRContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CRL_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCLRContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceSSLCLR; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceSSLCLR(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceSSLCLR(this);
			}
		}
	}

	public final ChangeReplicationSourceSSLCLRContext changeReplicationSourceSSLCLR() throws RecognitionException {
		ChangeReplicationSourceSSLCLRContext _localctx = new ChangeReplicationSourceSSLCLRContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_changeReplicationSourceSSLCLR);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4393);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_CRL_SYMBOL || _la==SOURCE_SSL_CRL_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceSSLCLRpathContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCLRpathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceSSLCLRpath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceSSLCLRpath(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceSSLCLRpath(this);
			}
		}
	}

	public final ChangeReplicationSourceSSLCLRpathContext changeReplicationSourceSSLCLRpath() throws RecognitionException {
		ChangeReplicationSourceSSLCLRpathContext _localctx = new ChangeReplicationSourceSSLCLRpathContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_changeReplicationSourceSSLCLRpath);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4395);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_CRLPATH_SYMBOL || _la==SOURCE_SSL_CRLPATH_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceSSLKeyContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_KEY_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0); }
		public ChangeReplicationSourceSSLKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceSSLKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceSSLKey(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceSSLKey(this);
			}
		}
	}

	public final ChangeReplicationSourceSSLKeyContext changeReplicationSourceSSLKey() throws RecognitionException {
		ChangeReplicationSourceSSLKeyContext _localctx = new ChangeReplicationSourceSSLKeyContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_changeReplicationSourceSSLKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4397);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_KEY_SYMBOL || _la==SOURCE_SSL_KEY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceSSLVerifyServerCertContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public ChangeReplicationSourceSSLVerifyServerCertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceSSLVerifyServerCert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceSSLVerifyServerCert(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceSSLVerifyServerCert(this);
			}
		}
	}

	public final ChangeReplicationSourceSSLVerifyServerCertContext changeReplicationSourceSSLVerifyServerCert() throws RecognitionException {
		ChangeReplicationSourceSSLVerifyServerCertContext _localctx = new ChangeReplicationSourceSSLVerifyServerCertContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_changeReplicationSourceSSLVerifyServerCert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4399);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL || _la==SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceTLSVersionContext extends ParserRuleContext {
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode SOURCE_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0); }
		public ChangeReplicationSourceTLSVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceTLSVersion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceTLSVersion(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceTLSVersion(this);
			}
		}
	}

	public final ChangeReplicationSourceTLSVersionContext changeReplicationSourceTLSVersion() throws RecognitionException {
		ChangeReplicationSourceTLSVersionContext _localctx = new ChangeReplicationSourceTLSVersionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_changeReplicationSourceTLSVersion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4401);
			_la = _input.LA(1);
			if ( !(_la==MASTER_TLS_VERSION_SYMBOL || _la==SOURCE_TLS_VERSION_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceTLSCiphersuitesContext extends ParserRuleContext {
		public TerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public TerminalNode SOURCE_TLS_CIPHERSUITES_SYMBOL() { return getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0); }
		public ChangeReplicationSourceTLSCiphersuitesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceTLSCiphersuites; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceTLSCiphersuites(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceTLSCiphersuites(this);
			}
		}
	}

	public final ChangeReplicationSourceTLSCiphersuitesContext changeReplicationSourceTLSCiphersuites() throws RecognitionException {
		ChangeReplicationSourceTLSCiphersuitesContext _localctx = new ChangeReplicationSourceTLSCiphersuitesContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_changeReplicationSourceTLSCiphersuites);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4403);
			_la = _input.LA(1);
			if ( !(_la==MASTER_TLS_CIPHERSUITES_SYMBOL || _la==SOURCE_TLS_CIPHERSUITES_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceSSLCertContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CERT_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceSSLCert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceSSLCert(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceSSLCert(this);
			}
		}
	}

	public final ChangeReplicationSourceSSLCertContext changeReplicationSourceSSLCert() throws RecognitionException {
		ChangeReplicationSourceSSLCertContext _localctx = new ChangeReplicationSourceSSLCertContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_changeReplicationSourceSSLCert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4405);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_CERT_SYMBOL || _la==SOURCE_SSL_CERT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourcePublicKeyContext extends ParserRuleContext {
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode SOURCE_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public ChangeReplicationSourcePublicKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourcePublicKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourcePublicKey(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourcePublicKey(this);
			}
		}
	}

	public final ChangeReplicationSourcePublicKeyContext changeReplicationSourcePublicKey() throws RecognitionException {
		ChangeReplicationSourcePublicKeyContext _localctx = new ChangeReplicationSourcePublicKeyContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_changeReplicationSourcePublicKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4407);
			_la = _input.LA(1);
			if ( !(_la==MASTER_PUBLIC_KEY_PATH_SYMBOL || _la==SOURCE_PUBLIC_KEY_PATH_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceGetSourcePublicKeyContext extends ParserRuleContext {
		public TerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public TerminalNode GET_SOURCE_PUBLIC_KEY_SYMBOL() { return getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0); }
		public ChangeReplicationSourceGetSourcePublicKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceGetSourcePublicKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceGetSourcePublicKey(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceGetSourcePublicKey(this);
			}
		}
	}

	public final ChangeReplicationSourceGetSourcePublicKeyContext changeReplicationSourceGetSourcePublicKey() throws RecognitionException {
		ChangeReplicationSourceGetSourcePublicKeyContext _localctx = new ChangeReplicationSourceGetSourcePublicKeyContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_changeReplicationSourceGetSourcePublicKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4409);
			_la = _input.LA(1);
			if ( !(_la==GET_MASTER_PUBLIC_KEY_SYMBOL || _la==GET_SOURCE_PUBLIC_KEY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceHeartbeatPeriodContext extends ParserRuleContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode SOURCE_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public ChangeReplicationSourceHeartbeatPeriodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceHeartbeatPeriod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceHeartbeatPeriod(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceHeartbeatPeriod(this);
			}
		}
	}

	public final ChangeReplicationSourceHeartbeatPeriodContext changeReplicationSourceHeartbeatPeriod() throws RecognitionException {
		ChangeReplicationSourceHeartbeatPeriodContext _localctx = new ChangeReplicationSourceHeartbeatPeriodContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_changeReplicationSourceHeartbeatPeriod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4411);
			_la = _input.LA(1);
			if ( !(_la==MASTER_HEARTBEAT_PERIOD_SYMBOL || _la==SOURCE_HEARTBEAT_PERIOD_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceCompressionAlgorithmContext extends ParserRuleContext {
		public TerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TerminalNode SOURCE_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public ChangeReplicationSourceCompressionAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceCompressionAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceCompressionAlgorithm(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceCompressionAlgorithm(this);
			}
		}
	}

	public final ChangeReplicationSourceCompressionAlgorithmContext changeReplicationSourceCompressionAlgorithm() throws RecognitionException {
		ChangeReplicationSourceCompressionAlgorithmContext _localctx = new ChangeReplicationSourceCompressionAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_changeReplicationSourceCompressionAlgorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4413);
			_la = _input.LA(1);
			if ( !(_la==MASTER_COMPRESSION_ALGORITHM_SYMBOL || _la==SOURCE_COMPRESSION_ALGORITHM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationSourceZstdCompressionLevelContext extends ParserRuleContext {
		public TerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public TerminalNode SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public ChangeReplicationSourceZstdCompressionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationSourceZstdCompressionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplicationSourceZstdCompressionLevel(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplicationSourceZstdCompressionLevel(this);
			}
		}
	}

	public final ChangeReplicationSourceZstdCompressionLevelContext changeReplicationSourceZstdCompressionLevel() throws RecognitionException {
		ChangeReplicationSourceZstdCompressionLevelContext _localctx = new ChangeReplicationSourceZstdCompressionLevelContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_changeReplicationSourceZstdCompressionLevel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4415);
			_la = _input.LA(1);
			if ( !(_la==MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL || _la==SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeCheckDefContext extends ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return getRuleContext(UserIdentifierOrTextContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public PrivilegeCheckDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeCheckDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPrivilegeCheckDef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPrivilegeCheckDef(this);
			}
		}
	}

	public final PrivilegeCheckDefContext privilegeCheckDef() throws RecognitionException {
		PrivilegeCheckDefContext _localctx = new PrivilegeCheckDefContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_privilegeCheckDef);
		try {
			setState(4419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4417);
				userIdentifierOrText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4418);
				match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablePrimaryKeyCheckDefContext extends ParserRuleContext {
		public TerminalNode STREAM_SYMBOL() { return getToken(MySQLParser.STREAM_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode OFF_SYMBOL() { return getToken(MySQLParser.OFF_SYMBOL, 0); }
		public TerminalNode GENERATE_SYMBOL() { return getToken(MySQLParser.GENERATE_SYMBOL, 0); }
		public TablePrimaryKeyCheckDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePrimaryKeyCheckDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTablePrimaryKeyCheckDef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTablePrimaryKeyCheckDef(this);
			}
		}
	}

	public final TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() throws RecognitionException {
		TablePrimaryKeyCheckDefContext _localctx = new TablePrimaryKeyCheckDefContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_tablePrimaryKeyCheckDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4421);
			_la = _input.LA(1);
			if ( !(_la==ON_SYMBOL || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & 36028797018963971L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignGtidsToAnonymousTransactionsDefinitionContext extends ParserRuleContext {
		public TerminalNode OFF_SYMBOL() { return getToken(MySQLParser.OFF_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public AssignGtidsToAnonymousTransactionsDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignGtidsToAnonymousTransactionsDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAssignGtidsToAnonymousTransactionsDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAssignGtidsToAnonymousTransactionsDefinition(this);
			}
		}
	}

	public final AssignGtidsToAnonymousTransactionsDefinitionContext assignGtidsToAnonymousTransactionsDefinition() throws RecognitionException {
		AssignGtidsToAnonymousTransactionsDefinitionContext _localctx = new AssignGtidsToAnonymousTransactionsDefinitionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_assignGtidsToAnonymousTransactionsDefinition);
		try {
			setState(4426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4423);
				match(OFF_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4424);
				match(LOCAL_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4425);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceTlsCiphersuitesDefContext extends ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public SourceTlsCiphersuitesDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceTlsCiphersuitesDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSourceTlsCiphersuitesDef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSourceTlsCiphersuitesDef(this);
			}
		}
	}

	public final SourceTlsCiphersuitesDefContext sourceTlsCiphersuitesDef() throws RecognitionException {
		SourceTlsCiphersuitesDefContext _localctx = new SourceTlsCiphersuitesDefContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_sourceTlsCiphersuitesDef);
		try {
			setState(4430);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4428);
				textStringNoLinebreak();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4429);
				match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceFileDefContext extends ParserRuleContext {
		public SourceLogFileContext sourceLogFile() {
			return getRuleContext(SourceLogFileContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public SourceLogPosContext sourceLogPos() {
			return getRuleContext(SourceLogPosContext.class,0);
		}
		public UlonglongNumberContext ulonglongNumber() {
			return getRuleContext(UlonglongNumberContext.class,0);
		}
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public SourceFileDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceFileDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSourceFileDef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSourceFileDef(this);
			}
		}
	}

	public final SourceFileDefContext sourceFileDef() throws RecognitionException {
		SourceFileDefContext _localctx = new SourceFileDefContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_sourceFileDef);
		try {
			setState(4446);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
			case SOURCE_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4432);
				sourceLogFile();
				setState(4433);
				match(EQUAL_OPERATOR);
				setState(4434);
				textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
			case SOURCE_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4436);
				sourceLogPos();
				setState(4437);
				match(EQUAL_OPERATOR);
				setState(4438);
				ulonglongNumber();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4440);
				match(RELAY_LOG_FILE_SYMBOL);
				setState(4441);
				match(EQUAL_OPERATOR);
				setState(4442);
				textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4443);
				match(RELAY_LOG_POS_SYMBOL);
				setState(4444);
				match(EQUAL_OPERATOR);
				setState(4445);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceLogFileContext extends ParserRuleContext {
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode SOURCE_LOG_FILE_SYMBOL() { return getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0); }
		public SourceLogFileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceLogFile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSourceLogFile(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSourceLogFile(this);
			}
		}
	}

	public final SourceLogFileContext sourceLogFile() throws RecognitionException {
		SourceLogFileContext _localctx = new SourceLogFileContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_sourceLogFile);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4448);
			_la = _input.LA(1);
			if ( !(_la==MASTER_LOG_FILE_SYMBOL || _la==SOURCE_LOG_FILE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceLogPosContext extends ParserRuleContext {
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode SOURCE_LOG_POS_SYMBOL() { return getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0); }
		public SourceLogPosContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceLogPos; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSourceLogPos(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSourceLogPos(this);
			}
		}
	}

	public final SourceLogPosContext sourceLogPos() throws RecognitionException {
		SourceLogPosContext _localctx = new SourceLogPosContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_sourceLogPos);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4450);
			_la = _input.LA(1);
			if ( !(_la==MASTER_LOG_POS_SYMBOL || _la==SOURCE_LOG_POS_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServerIdListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverIdList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterServerIdList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitServerIdList(this);
			}
		}
	}

	public final ServerIdListContext serverIdList() throws RecognitionException {
		ServerIdListContext _localctx = new ServerIdListContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_serverIdList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4452);
			match(OPEN_PAR_SYMBOL);
			setState(4461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 228698418577464L) != 0)) {
				{
				setState(4453);
				ulong_number();
				setState(4458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(4454);
					match(COMMA_SYMBOL);
					setState(4455);
					ulong_number();
					}
					}
					setState(4460);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4463);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public List<FilterDefinitionContext> filterDefinition() {
			return getRuleContexts(FilterDefinitionContext.class);
		}
		public FilterDefinitionContext filterDefinition(int i) {
			return getRuleContext(FilterDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChangeReplication(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChangeReplication(this);
			}
		}
	}

	public final ChangeReplicationContext changeReplication() throws RecognitionException {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_changeReplication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4465);
			match(CHANGE_SYMBOL);
			setState(4466);
			match(REPLICATION_SYMBOL);
			setState(4467);
			match(FILTER_SYMBOL);
			setState(4468);
			filterDefinition();
			setState(4473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4469);
				match(COMMA_SYMBOL);
				setState(4470);
				filterDefinition();
				}
				}
				setState(4475);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(4476);
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterDefinitionContext extends ParserRuleContext {
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FilterDbListContext filterDbList() {
			return getRuleContext(FilterDbListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public FilterTableListContext filterTableList() {
			return getRuleContext(FilterTableListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public FilterStringListContext filterStringList() {
			return getRuleContext(FilterStringListContext.class,0);
		}
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public FilterDbPairListContext filterDbPairList() {
			return getRuleContext(FilterDbPairListContext.class,0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFilterDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFilterDefinition(this);
			}
		}
	}

	public final FilterDefinitionContext filterDefinition() throws RecognitionException {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_filterDefinition);
		int _la;
		try {
			setState(4528);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4479);
				match(REPLICATE_DO_DB_SYMBOL);
				setState(4480);
				match(EQUAL_OPERATOR);
				setState(4481);
				match(OPEN_PAR_SYMBOL);
				setState(4483);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
				case 1:
					{
					setState(4482);
					filterDbList();
					}
					break;
				}
				setState(4485);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4486);
				match(REPLICATE_IGNORE_DB_SYMBOL);
				setState(4487);
				match(EQUAL_OPERATOR);
				setState(4488);
				match(OPEN_PAR_SYMBOL);
				setState(4490);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					setState(4489);
					filterDbList();
					}
					break;
				}
				setState(4492);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4493);
				match(REPLICATE_DO_TABLE_SYMBOL);
				setState(4494);
				match(EQUAL_OPERATOR);
				setState(4495);
				match(OPEN_PAR_SYMBOL);
				setState(4497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
				case 1:
					{
					setState(4496);
					filterTableList();
					}
					break;
				}
				setState(4499);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4500);
				match(REPLICATE_IGNORE_TABLE_SYMBOL);
				setState(4501);
				match(EQUAL_OPERATOR);
				setState(4502);
				match(OPEN_PAR_SYMBOL);
				setState(4504);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
				case 1:
					{
					setState(4503);
					filterTableList();
					}
					break;
				}
				setState(4506);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4507);
				match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				setState(4508);
				match(EQUAL_OPERATOR);
				setState(4509);
				match(OPEN_PAR_SYMBOL);
				setState(4511);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(4510);
					filterStringList();
					}
					break;
				}
				setState(4513);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(4514);
				match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				setState(4515);
				match(EQUAL_OPERATOR);
				setState(4516);
				match(OPEN_PAR_SYMBOL);
				setState(4518);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(4517);
					filterStringList();
					}
					break;
				}
				setState(4520);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(4521);
				match(REPLICATE_REWRITE_DB_SYMBOL);
				setState(4522);
				match(EQUAL_OPERATOR);
				setState(4523);
				match(OPEN_PAR_SYMBOL);
				setState(4525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					setState(4524);
					filterDbPairList();
					}
				}

				setState(4527);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterDbListContext extends ParserRuleContext {
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFilterDbList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFilterDbList(this);
			}
		}
	}

	public final FilterDbListContext filterDbList() throws RecognitionException {
		FilterDbListContext _localctx = new FilterDbListContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_filterDbList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4530);
			schemaRef();
			setState(4535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4531);
				match(COMMA_SYMBOL);
				setState(4532);
				schemaRef();
				}
				}
				setState(4537);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterTableListContext extends ParserRuleContext {
		public List<FilterTableRefContext> filterTableRef() {
			return getRuleContexts(FilterTableRefContext.class);
		}
		public FilterTableRefContext filterTableRef(int i) {
			return getRuleContext(FilterTableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFilterTableList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFilterTableList(this);
			}
		}
	}

	public final FilterTableListContext filterTableList() throws RecognitionException {
		FilterTableListContext _localctx = new FilterTableListContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_filterTableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4538);
			filterTableRef();
			setState(4543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4539);
				match(COMMA_SYMBOL);
				setState(4540);
				filterTableRef();
				}
				}
				setState(4545);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterStringListContext extends ParserRuleContext {
		public List<FilterWildDbTableStringContext> filterWildDbTableString() {
			return getRuleContexts(FilterWildDbTableStringContext.class);
		}
		public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return getRuleContext(FilterWildDbTableStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterStringList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFilterStringList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFilterStringList(this);
			}
		}
	}

	public final FilterStringListContext filterStringList() throws RecognitionException {
		FilterStringListContext _localctx = new FilterStringListContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_filterStringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4546);
			filterWildDbTableString();
			setState(4551);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4547);
				match(COMMA_SYMBOL);
				setState(4548);
				filterWildDbTableString();
				}
				}
				setState(4553);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterWildDbTableStringContext extends ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterWildDbTableString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFilterWildDbTableString(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFilterWildDbTableString(this);
			}
		}
	}

	public final FilterWildDbTableStringContext filterWildDbTableString() throws RecognitionException {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_filterWildDbTableString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4554);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterDbPairListContext extends ParserRuleContext {
		public List<SchemaIdentifierPairContext> schemaIdentifierPair() {
			return getRuleContexts(SchemaIdentifierPairContext.class);
		}
		public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return getRuleContext(SchemaIdentifierPairContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbPairList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFilterDbPairList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFilterDbPairList(this);
			}
		}
	}

	public final FilterDbPairListContext filterDbPairList() throws RecognitionException {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_filterDbPairList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4556);
			schemaIdentifierPair();
			setState(4561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4557);
				match(COMMA_SYMBOL);
				setState(4558);
				schemaIdentifierPair();
				}
				}
				setState(4563);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartReplicaStatementContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public ReplicaContext replica() {
			return getRuleContext(ReplicaContext.class,0);
		}
		public ReplicaThreadOptionsContext replicaThreadOptions() {
			return getRuleContext(ReplicaThreadOptionsContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ReplicaUntilContext replicaUntil() {
			return getRuleContext(ReplicaUntilContext.class,0);
		}
		public UserOptionContext userOption() {
			return getRuleContext(UserOptionContext.class,0);
		}
		public PasswordOptionContext passwordOption() {
			return getRuleContext(PasswordOptionContext.class,0);
		}
		public DefaultAuthOptionContext defaultAuthOption() {
			return getRuleContext(DefaultAuthOptionContext.class,0);
		}
		public PluginDirOptionContext pluginDirOption() {
			return getRuleContext(PluginDirOptionContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public StartReplicaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startReplicaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStartReplicaStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStartReplicaStatement(this);
			}
		}
	}

	public final StartReplicaStatementContext startReplicaStatement() throws RecognitionException {
		StartReplicaStatementContext _localctx = new StartReplicaStatementContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_startReplicaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4564);
			match(START_SYMBOL);
			setState(4565);
			replica();
			setState(4567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) {
				{
				setState(4566);
				replicaThreadOptions();
				}
			}

			setState(4571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL_SYMBOL) {
				{
				setState(4569);
				match(UNTIL_SYMBOL);
				setState(4570);
				replicaUntil();
				}
			}

			setState(4574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER_SYMBOL) {
				{
				setState(4573);
				userOption();
				}
			}

			setState(4577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSWORD_SYMBOL) {
				{
				setState(4576);
				passwordOption();
				}
			}

			setState(4580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_AUTH_SYMBOL) {
				{
				setState(4579);
				defaultAuthOption();
				}
			}

			setState(4583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUGIN_DIR_SYMBOL) {
				{
				setState(4582);
				pluginDirOption();
				}
			}

			setState(4586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(4585);
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StopReplicaStatementContext extends ParserRuleContext {
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public ReplicaContext replica() {
			return getRuleContext(ReplicaContext.class,0);
		}
		public ReplicaThreadOptionsContext replicaThreadOptions() {
			return getRuleContext(ReplicaThreadOptionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public StopReplicaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopReplicaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStopReplicaStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStopReplicaStatement(this);
			}
		}
	}

	public final StopReplicaStatementContext stopReplicaStatement() throws RecognitionException {
		StopReplicaStatementContext _localctx = new StopReplicaStatementContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_stopReplicaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4588);
			match(STOP_SYMBOL);
			setState(4589);
			replica();
			setState(4591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) {
				{
				setState(4590);
				replicaThreadOptions();
				}
			}

			setState(4594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(4593);
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicaUntilContext extends ParserRuleContext {
		public List<SourceFileDefContext> sourceFileDef() {
			return getRuleContexts(SourceFileDefContext.class);
		}
		public SourceFileDefContext sourceFileDef(int i) {
			return getRuleContext(SourceFileDefContext.class,i);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ReplicaUntilContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicaUntil; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReplicaUntil(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReplicaUntil(this);
			}
		}
	}

	public final ReplicaUntilContext replicaUntil() throws RecognitionException {
		ReplicaUntilContext _localctx = new ReplicaUntilContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_replicaUntil);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4601);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
			case SOURCE_LOG_FILE_SYMBOL:
			case SOURCE_LOG_POS_SYMBOL:
				{
				setState(4596);
				sourceFileDef();
				}
				break;
			case SQL_AFTER_GTIDS_SYMBOL:
			case SQL_BEFORE_GTIDS_SYMBOL:
				{
				setState(4597);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4598);
				match(EQUAL_OPERATOR);
				setState(4599);
				textString();
				}
				break;
			case SQL_AFTER_MTS_GAPS_SYMBOL:
				{
				setState(4600);
				match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4603);
				match(COMMA_SYMBOL);
				setState(4604);
				sourceFileDef();
				}
				}
				setState(4609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserOptionContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public UserOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUserOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUserOption(this);
			}
		}
	}

	public final UserOptionContext userOption() throws RecognitionException {
		UserOptionContext _localctx = new UserOptionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_userOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4610);
			match(USER_SYMBOL);
			setState(4611);
			match(EQUAL_OPERATOR);
			setState(4612);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PasswordOptionContext extends ParserRuleContext {
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public PasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPasswordOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPasswordOption(this);
			}
		}
	}

	public final PasswordOptionContext passwordOption() throws RecognitionException {
		PasswordOptionContext _localctx = new PasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_passwordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4614);
			match(PASSWORD_SYMBOL);
			setState(4615);
			match(EQUAL_OPERATOR);
			setState(4616);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultAuthOptionContext extends ParserRuleContext {
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public DefaultAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultAuthOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDefaultAuthOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDefaultAuthOption(this);
			}
		}
	}

	public final DefaultAuthOptionContext defaultAuthOption() throws RecognitionException {
		DefaultAuthOptionContext _localctx = new DefaultAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_defaultAuthOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4618);
			match(DEFAULT_AUTH_SYMBOL);
			setState(4619);
			match(EQUAL_OPERATOR);
			setState(4620);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PluginDirOptionContext extends ParserRuleContext {
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public PluginDirOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pluginDirOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPluginDirOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPluginDirOption(this);
			}
		}
	}

	public final PluginDirOptionContext pluginDirOption() throws RecognitionException {
		PluginDirOptionContext _localctx = new PluginDirOptionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_pluginDirOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4622);
			match(PLUGIN_DIR_SYMBOL);
			setState(4623);
			match(EQUAL_OPERATOR);
			setState(4624);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicaThreadOptionsContext extends ParserRuleContext {
		public List<ReplicaThreadOptionContext> replicaThreadOption() {
			return getRuleContexts(ReplicaThreadOptionContext.class);
		}
		public ReplicaThreadOptionContext replicaThreadOption(int i) {
			return getRuleContext(ReplicaThreadOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ReplicaThreadOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicaThreadOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReplicaThreadOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReplicaThreadOptions(this);
			}
		}
	}

	public final ReplicaThreadOptionsContext replicaThreadOptions() throws RecognitionException {
		ReplicaThreadOptionsContext _localctx = new ReplicaThreadOptionsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_replicaThreadOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4626);
			replicaThreadOption();
			setState(4631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4627);
				match(COMMA_SYMBOL);
				setState(4628);
				replicaThreadOption();
				}
				}
				setState(4633);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicaThreadOptionContext extends ParserRuleContext {
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public ReplicaThreadOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicaThreadOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReplicaThreadOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReplicaThreadOption(this);
			}
		}
	}

	public final ReplicaThreadOptionContext replicaThreadOption() throws RecognitionException {
		ReplicaThreadOptionContext _localctx = new ReplicaThreadOptionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_replicaThreadOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4634);
			_la = _input.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupReplicationContext extends ParserRuleContext {
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public GroupReplicationStartOptionsContext groupReplicationStartOptions() {
			return getRuleContext(GroupReplicationStartOptionsContext.class,0);
		}
		public GroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupReplication(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupReplication(this);
			}
		}
	}

	public final GroupReplicationContext groupReplication() throws RecognitionException {
		GroupReplicationContext _localctx = new GroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_groupReplication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				{
				setState(4636);
				match(START_SYMBOL);
				setState(4638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_AUTH_SYMBOL || _la==PASSWORD_SYMBOL || _la==USER_SYMBOL) {
					{
					setState(4637);
					groupReplicationStartOptions();
					}
				}

				}
				break;
			case STOP_SYMBOL:
				{
				setState(4640);
				match(STOP_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4643);
			match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupReplicationStartOptionsContext extends ParserRuleContext {
		public List<GroupReplicationStartOptionContext> groupReplicationStartOption() {
			return getRuleContexts(GroupReplicationStartOptionContext.class);
		}
		public GroupReplicationStartOptionContext groupReplicationStartOption(int i) {
			return getRuleContext(GroupReplicationStartOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GroupReplicationStartOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplicationStartOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupReplicationStartOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupReplicationStartOptions(this);
			}
		}
	}

	public final GroupReplicationStartOptionsContext groupReplicationStartOptions() throws RecognitionException {
		GroupReplicationStartOptionsContext _localctx = new GroupReplicationStartOptionsContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_groupReplicationStartOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4645);
			groupReplicationStartOption();
			setState(4650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4646);
				match(COMMA_SYMBOL);
				setState(4647);
				groupReplicationStartOption();
				}
				}
				setState(4652);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupReplicationStartOptionContext extends ParserRuleContext {
		public GroupReplicationUserContext groupReplicationUser() {
			return getRuleContext(GroupReplicationUserContext.class,0);
		}
		public GroupReplicationPasswordContext groupReplicationPassword() {
			return getRuleContext(GroupReplicationPasswordContext.class,0);
		}
		public GroupReplicationPluginAuthContext groupReplicationPluginAuth() {
			return getRuleContext(GroupReplicationPluginAuthContext.class,0);
		}
		public GroupReplicationStartOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplicationStartOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupReplicationStartOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupReplicationStartOption(this);
			}
		}
	}

	public final GroupReplicationStartOptionContext groupReplicationStartOption() throws RecognitionException {
		GroupReplicationStartOptionContext _localctx = new GroupReplicationStartOptionContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_groupReplicationStartOption);
		try {
			setState(4656);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4653);
				groupReplicationUser();
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4654);
				groupReplicationPassword();
				}
				break;
			case DEFAULT_AUTH_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4655);
				groupReplicationPluginAuth();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupReplicationUserContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public GroupReplicationUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplicationUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupReplicationUser(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupReplicationUser(this);
			}
		}
	}

	public final GroupReplicationUserContext groupReplicationUser() throws RecognitionException {
		GroupReplicationUserContext _localctx = new GroupReplicationUserContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_groupReplicationUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4658);
			match(USER_SYMBOL);
			setState(4659);
			match(EQUAL_OPERATOR);
			setState(4660);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupReplicationPasswordContext extends ParserRuleContext {
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public GroupReplicationPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplicationPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupReplicationPassword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupReplicationPassword(this);
			}
		}
	}

	public final GroupReplicationPasswordContext groupReplicationPassword() throws RecognitionException {
		GroupReplicationPasswordContext _localctx = new GroupReplicationPasswordContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_groupReplicationPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4662);
			match(PASSWORD_SYMBOL);
			setState(4663);
			match(EQUAL_OPERATOR);
			setState(4664);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupReplicationPluginAuthContext extends ParserRuleContext {
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public GroupReplicationPluginAuthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplicationPluginAuth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupReplicationPluginAuth(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupReplicationPluginAuth(this);
			}
		}
	}

	public final GroupReplicationPluginAuthContext groupReplicationPluginAuth() throws RecognitionException {
		GroupReplicationPluginAuthContext _localctx = new GroupReplicationPluginAuthContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_groupReplicationPluginAuth);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4666);
			match(DEFAULT_AUTH_SYMBOL);
			setState(4667);
			match(EQUAL_OPERATOR);
			setState(4668);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicaContext extends ParserRuleContext {
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode REPLICA_SYMBOL() { return getToken(MySQLParser.REPLICA_SYMBOL, 0); }
		public ReplicaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replica; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReplica(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReplica(this);
			}
		}
	}

	public final ReplicaContext replica() throws RecognitionException {
		ReplicaContext _localctx = new ReplicaContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_replica);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4670);
			_la = _input.LA(1);
			if ( !(_la==SLAVE_SYMBOL || _la==REPLICA_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreparedStatementContext extends ParserRuleContext {
		public Token type;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPreparedStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPreparedStatement(this);
			}
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_preparedStatement);
		int _la;
		try {
			setState(4683);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4672);
				_localctx.type = match(PREPARE_SYMBOL);
				setState(4673);
				identifier();
				setState(4674);
				match(FROM_SYMBOL);
				setState(4677);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
				case 1:
					{
					setState(4675);
					textLiteral();
					}
					break;
				case 2:
					{
					setState(4676);
					userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4679);
				executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4680);
				_localctx.type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					_localctx.type = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4681);
				match(PREPARE_SYMBOL);
				setState(4682);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public ExecuteVarListContext executeVarList() {
			return getRuleContext(ExecuteVarListContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExecuteStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExecuteStatement(this);
			}
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4685);
			match(EXECUTE_SYMBOL);
			setState(4686);
			identifier();
			setState(4689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING_SYMBOL) {
				{
				setState(4687);
				match(USING_SYMBOL);
				setState(4688);
				executeVarList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteVarListContext extends ParserRuleContext {
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeVarList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExecuteVarList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExecuteVarList(this);
			}
		}
	}

	public final ExecuteVarListContext executeVarList() throws RecognitionException {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_executeVarList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4691);
			userVariable();
			setState(4696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4692);
				match(COMMA_SYMBOL);
				setState(4693);
				userVariable();
				}
				}
				setState(4698);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CloneStatementContext extends ParserRuleContext {
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode REMOTE_SYMBOL() { return getToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode COLON_SYMBOL() { return getToken(MySQLParser.COLON_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public DataDirSSLContext dataDirSSL() {
			return getRuleContext(DataDirSSLContext.class,0);
		}
		public CloneStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCloneStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCloneStatement(this);
			}
		}
	}

	public final CloneStatementContext cloneStatement() throws RecognitionException {
		CloneStatementContext _localctx = new CloneStatementContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_cloneStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4699);
			match(CLONE_SYMBOL);
			setState(4724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(4700);
				match(LOCAL_SYMBOL);
				setState(4701);
				match(DATA_SYMBOL);
				setState(4702);
				match(DIRECTORY_SYMBOL);
				setState(4704);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					setState(4703);
					equal();
					}
					break;
				}
				setState(4706);
				textStringLiteral();
				}
				break;
			case 2:
				{
				setState(4707);
				match(REMOTE_SYMBOL);
				setState(4710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4708);
					match(FOR_SYMBOL);
					setState(4709);
					match(REPLICATION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				{
				setState(4712);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(4713);
				match(INSTANCE_SYMBOL);
				setState(4714);
				match(FROM_SYMBOL);
				setState(4715);
				user();
				setState(4716);
				match(COLON_SYMBOL);
				setState(4717);
				ulong_number();
				setState(4718);
				match(IDENTIFIED_SYMBOL);
				setState(4719);
				match(BY_SYMBOL);
				setState(4720);
				textStringLiteral();
				setState(4722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA_SYMBOL || _la==REQUIRE_SYMBOL) {
					{
					setState(4721);
					dataDirSSL();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataDirSSLContext extends ParserRuleContext {
		public SslContext ssl() {
			return getRuleContext(SslContext.class,0);
		}
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public DataDirSSLContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataDirSSL; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDataDirSSL(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDataDirSSL(this);
			}
		}
	}

	public final DataDirSSLContext dataDirSSL() throws RecognitionException {
		DataDirSSLContext _localctx = new DataDirSSLContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_dataDirSSL);
		int _la;
		try {
			setState(4736);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REQUIRE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4726);
				ssl();
				}
				break;
			case DATA_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4727);
				match(DATA_SYMBOL);
				setState(4728);
				match(DIRECTORY_SYMBOL);
				setState(4730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(4729);
					equal();
					}
					break;
				}
				setState(4732);
				textStringLiteral();
				setState(4734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					setState(4733);
					ssl();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SslContext extends ParserRuleContext {
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public TerminalNode SSL_SYMBOL() { return getToken(MySQLParser.SSL_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public SslContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ssl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSsl(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSsl(this);
			}
		}
	}

	public final SslContext ssl() throws RecognitionException {
		SslContext _localctx = new SslContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_ssl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4738);
			match(REQUIRE_SYMBOL);
			setState(4740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_SYMBOL) {
				{
				setState(4739);
				match(NO_SYMBOL);
				}
			}

			setState(4742);
			match(SSL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AccountManagementStatementContext extends ParserRuleContext {
		public AlterUserStatementContext alterUserStatement() {
			return getRuleContext(AlterUserStatementContext.class,0);
		}
		public CreateUserStatementContext createUserStatement() {
			return getRuleContext(CreateUserStatementContext.class,0);
		}
		public DropUserStatementContext dropUserStatement() {
			return getRuleContext(DropUserStatementContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public RenameUserStatementContext renameUserStatement() {
			return getRuleContext(RenameUserStatementContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public SetRoleStatementContext setRoleStatement() {
			return getRuleContext(SetRoleStatementContext.class,0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountManagementStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAccountManagementStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAccountManagementStatement(this);
			}
		}
	}

	public final AccountManagementStatementContext accountManagementStatement() throws RecognitionException {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_accountManagementStatement);
		try {
			setState(4751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4744);
				alterUserStatement();
				}
				break;
			case CREATE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4745);
				createUserStatement();
				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4746);
				dropUserStatement();
				}
				break;
			case GRANT_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4747);
				grantStatement();
				}
				break;
			case RENAME_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4748);
				renameUserStatement();
				}
				break;
			case REVOKE_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(4749);
				revokeStatement();
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(4750);
				setRoleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserStatementContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public UserFunctionContext userFunction() {
			return getRuleContext(UserFunctionContext.class,0);
		}
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public AlterUserListContext alterUserList() {
			return getRuleContext(AlterUserListContext.class,0);
		}
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return getRuleContext(IdentifiedByRandomPasswordContext.class,0);
		}
		public IdentifiedByPasswordContext identifiedByPassword() {
			return getRuleContext(IdentifiedByPasswordContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public ReplacePasswordContext replacePassword() {
			return getRuleContext(ReplacePasswordContext.class,0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public UserRegistrationContext userRegistration() {
			return getRuleContext(UserRegistrationContext.class,0);
		}
		public AlterUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterUserStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterUserStatement(this);
			}
		}
	}

	public final AlterUserStatementContext alterUserStatement() throws RecognitionException {
		AlterUserStatementContext _localctx = new AlterUserStatementContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_alterUserStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4753);
			match(ALTER_SYMBOL);
			setState(4754);
			match(USER_SYMBOL);
			setState(4756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4755);
				ifExists();
				}
				break;
			}
			setState(4798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				setState(4762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
				case 1:
					{
					setState(4758);
					if (!(this.isServerVersionGe80014())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					}
					setState(4759);
					createUserList();
					}
					break;
				case 2:
					{
					setState(4760);
					if (!(this.isServerVersionGe80014())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					}
					setState(4761);
					alterUserList();
					}
					break;
				}
				setState(4764);
				createUserTail();
				}
				break;
			case 2:
				{
				setState(4766);
				userFunction();
				setState(4783);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IDENTIFIED_SYMBOL:
					{
					setState(4769);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
					case 1:
						{
						setState(4767);
						identifiedByRandomPassword();
						}
						break;
					case 2:
						{
						setState(4768);
						identifiedByPassword();
						}
						break;
					}
					setState(4772);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						setState(4771);
						replacePassword();
						}
					}

					setState(4775);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						setState(4774);
						retainCurrentPassword();
						}
					}

					}
					break;
				case DISCARD_SYMBOL:
					{
					setState(4777);
					match(DISCARD_SYMBOL);
					setState(4778);
					match(OLD_SYMBOL);
					setState(4779);
					match(PASSWORD_SYMBOL);
					}
					break;
				case EOF:
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case SEMICOLON_SYMBOL:
				case DECIMAL_NUMBER:
				case FLOAT_NUMBER:
					{
					setState(4781);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 211106232533048L) != 0)) {
						{
						setState(4780);
						userRegistration();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(4785);
				user();
				setState(4796);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT_SYMBOL:
					{
					setState(4786);
					match(DEFAULT_SYMBOL);
					setState(4787);
					match(ROLE_SYMBOL);
					setState(4791);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
					case 1:
						{
						setState(4788);
						match(ALL_SYMBOL);
						}
						break;
					case 2:
						{
						setState(4789);
						match(NONE_SYMBOL);
						}
						break;
					case 3:
						{
						setState(4790);
						roleList();
						}
						break;
					}
					}
					break;
				case EOF:
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case SEMICOLON_SYMBOL:
				case DECIMAL_NUMBER:
				case FLOAT_NUMBER:
					{
					setState(4794);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 211106232533048L) != 0)) {
						{
						setState(4793);
						userRegistration();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserListContext extends ParserRuleContext {
		public List<AlterUserContext> alterUser() {
			return getRuleContexts(AlterUserContext.class);
		}
		public AlterUserContext alterUser(int i) {
			return getRuleContext(AlterUserContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterUserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterUserList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterUserList(this);
			}
		}
	}

	public final AlterUserListContext alterUserList() throws RecognitionException {
		AlterUserListContext _localctx = new AlterUserListContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_alterUserList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4800);
			alterUser();
			setState(4805);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,510,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4801);
					match(COMMA_SYMBOL);
					setState(4802);
					alterUser();
					}
					}
				}
				setState(4807);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,510,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserContext extends ParserRuleContext {
		public OldAlterUserContext oldAlterUser() {
			return getRuleContext(OldAlterUserContext.class,0);
		}
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public IdentifiedByPasswordContext identifiedByPassword() {
			return getRuleContext(IdentifiedByPasswordContext.class,0);
		}
		public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return getRuleContext(IdentifiedByRandomPasswordContext.class,0);
		}
		public IdentifiedWithPluginContext identifiedWithPlugin() {
			return getRuleContext(IdentifiedWithPluginContext.class,0);
		}
		public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
			return getRuleContext(IdentifiedWithPluginAsAuthContext.class,0);
		}
		public IdentifiedWithPluginByPasswordContext identifiedWithPluginByPassword() {
			return getRuleContext(IdentifiedWithPluginByPasswordContext.class,0);
		}
		public IdentifiedWithPluginByRandomPasswordContext identifiedWithPluginByRandomPassword() {
			return getRuleContext(IdentifiedWithPluginByRandomPasswordContext.class,0);
		}
		public List<TerminalNode> ADD_SYMBOL() { return getTokens(MySQLParser.ADD_SYMBOL); }
		public TerminalNode ADD_SYMBOL(int i) {
			return getToken(MySQLParser.ADD_SYMBOL, i);
		}
		public List<FactorContext> factor() {
			return getRuleContexts(FactorContext.class);
		}
		public FactorContext factor(int i) {
			return getRuleContext(FactorContext.class,i);
		}
		public List<IdentificationContext> identification() {
			return getRuleContexts(IdentificationContext.class);
		}
		public IdentificationContext identification(int i) {
			return getRuleContext(IdentificationContext.class,i);
		}
		public List<TerminalNode> MODIFY_SYMBOL() { return getTokens(MySQLParser.MODIFY_SYMBOL); }
		public TerminalNode MODIFY_SYMBOL(int i) {
			return getToken(MySQLParser.MODIFY_SYMBOL, i);
		}
		public List<TerminalNode> DROP_SYMBOL() { return getTokens(MySQLParser.DROP_SYMBOL); }
		public TerminalNode DROP_SYMBOL(int i) {
			return getToken(MySQLParser.DROP_SYMBOL, i);
		}
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return getRuleContext(DiscardOldPasswordContext.class,0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterUser(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterUser(this);
			}
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_alterUser);
		try {
			setState(4883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4808);
				if (!(this.isServerVersionLt80025())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80025()");
				}
				setState(4809);
				oldAlterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4810);
				if (!(this.isServerVersionGe80025())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80025()");
				}
				{
				setState(4811);
				user();
				setState(4881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
				case 1:
					{
					setState(4812);
					identifiedByPassword();
					setState(4821);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
					case 1:
						{
						setState(4813);
						match(REPLACE_SYMBOL);
						setState(4814);
						textStringLiteral();
						setState(4816);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
						case 1:
							{
							setState(4815);
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					case 2:
						{
						setState(4819);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
						case 1:
							{
							setState(4818);
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4823);
					identifiedByRandomPassword();
					setState(4832);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
					case 1:
						{
						setState(4825);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
						case 1:
							{
							setState(4824);
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					case 2:
						{
						setState(4827);
						match(REPLACE_SYMBOL);
						setState(4828);
						textStringLiteral();
						setState(4830);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
						case 1:
							{
							setState(4829);
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(4834);
					identifiedWithPlugin();
					}
					break;
				case 4:
					{
					setState(4835);
					identifiedWithPluginAsAuth();
					setState(4837);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
					case 1:
						{
						setState(4836);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 5:
					{
					setState(4839);
					identifiedWithPluginByPassword();
					setState(4848);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
					case 1:
						{
						setState(4840);
						match(REPLACE_SYMBOL);
						setState(4841);
						textStringLiteral();
						setState(4843);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
						case 1:
							{
							setState(4842);
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					case 2:
						{
						setState(4846);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
						case 1:
							{
							setState(4845);
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 6:
					{
					setState(4850);
					identifiedWithPluginByRandomPassword();
					setState(4852);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
					case 1:
						{
						setState(4851);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 7:
					{
					setState(4855);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
					case 1:
						{
						setState(4854);
						discardOldPassword();
						}
						break;
					}
					}
					break;
				case 8:
					{
					setState(4857);
					match(ADD_SYMBOL);
					setState(4858);
					factor();
					setState(4859);
					identification();
					setState(4864);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
					case 1:
						{
						setState(4860);
						match(ADD_SYMBOL);
						setState(4861);
						factor();
						setState(4862);
						identification();
						}
						break;
					}
					}
					break;
				case 9:
					{
					setState(4866);
					match(MODIFY_SYMBOL);
					setState(4867);
					factor();
					setState(4868);
					identification();
					setState(4873);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
					case 1:
						{
						setState(4869);
						match(MODIFY_SYMBOL);
						setState(4870);
						factor();
						setState(4871);
						identification();
						}
						break;
					}
					}
					break;
				case 10:
					{
					setState(4875);
					match(DROP_SYMBOL);
					setState(4876);
					factor();
					setState(4879);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
					case 1:
						{
						setState(4877);
						match(DROP_SYMBOL);
						setState(4878);
						factor();
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OldAlterUserContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return getRuleContext(TextStringHashContext.class,0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return getRuleContext(DiscardOldPasswordContext.class,0);
		}
		public OldAlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAlterUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOldAlterUser(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOldAlterUser(this);
			}
		}
	}

	public final OldAlterUserContext oldAlterUser() throws RecognitionException {
		OldAlterUserContext _localctx = new OldAlterUserContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_oldAlterUser);
		try {
			setState(4942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4885);
				user();
				setState(4886);
				match(IDENTIFIED_SYMBOL);
				setState(4887);
				match(BY_SYMBOL);
				setState(4907);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
				case 1:
					{
					setState(4888);
					textString();
					setState(4889);
					match(REPLACE_SYMBOL);
					setState(4890);
					textString();
					setState(4892);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
					case 1:
						{
						setState(4891);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4894);
					textString();
					setState(4896);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
					case 1:
						{
						setState(4895);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(4898);
					match(RANDOM_SYMBOL);
					setState(4899);
					match(PASSWORD_SYMBOL);
					setState(4902);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
					case 1:
						{
						setState(4900);
						match(REPLACE_SYMBOL);
						setState(4901);
						textString();
						}
						break;
					}
					setState(4905);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
					case 1:
						{
						setState(4904);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4909);
				user();
				setState(4910);
				match(IDENTIFIED_SYMBOL);
				setState(4911);
				match(WITH_SYMBOL);
				{
				setState(4912);
				textOrIdentifier();
				setState(4936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
				case 1:
					{
					setState(4913);
					match(BY_SYMBOL);
					setState(4914);
					textString();
					setState(4915);
					match(REPLACE_SYMBOL);
					setState(4916);
					textString();
					setState(4918);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
					case 1:
						{
						setState(4917);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4920);
					match(AS_SYMBOL);
					setState(4921);
					textStringHash();
					setState(4923);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
					case 1:
						{
						setState(4922);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(4925);
					match(BY_SYMBOL);
					setState(4926);
					textString();
					setState(4928);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
					case 1:
						{
						setState(4927);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 4:
					{
					setState(4930);
					match(BY_SYMBOL);
					setState(4931);
					match(RANDOM_SYMBOL);
					setState(4932);
					match(PASSWORD_SYMBOL);
					setState(4934);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
					case 1:
						{
						setState(4933);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4938);
				user();
				setState(4940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(4939);
					discardOldPassword();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserFunctionContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public UserFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUserFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUserFunction(this);
			}
		}
	}

	public final UserFunctionContext userFunction() throws RecognitionException {
		UserFunctionContext _localctx = new UserFunctionContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_userFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4944);
			match(USER_SYMBOL);
			setState(4945);
			parentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserStatementContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public DefaultRoleClauseContext defaultRoleClause() {
			return getRuleContext(DefaultRoleClauseContext.class,0);
		}
		public CreateUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateUserStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateUserStatement(this);
			}
		}
	}

	public final CreateUserStatementContext createUserStatement() throws RecognitionException {
		CreateUserStatementContext _localctx = new CreateUserStatementContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_createUserStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4947);
			match(CREATE_SYMBOL);
			setState(4948);
			match(USER_SYMBOL);
			setState(4950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				setState(4949);
				ifNotExists();
				}
				break;
			}
			setState(4952);
			createUserList();
			setState(4954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				{
				setState(4953);
				defaultRoleClause();
				}
				break;
			}
			setState(4956);
			createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserTailContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public ConnectOptionsContext connectOptions() {
			return getRuleContext(ConnectOptionsContext.class,0);
		}
		public List<AccountLockPasswordExpireOptionsContext> accountLockPasswordExpireOptions() {
			return getRuleContexts(AccountLockPasswordExpireOptionsContext.class);
		}
		public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions(int i) {
			return getRuleContext(AccountLockPasswordExpireOptionsContext.class,i);
		}
		public UserAttributesContext userAttributes() {
			return getRuleContext(UserAttributesContext.class,0);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateUserTail(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateUserTail(this);
			}
		}
	}

	public final CreateUserTailContext createUserTail() throws RecognitionException {
		CreateUserTailContext _localctx = new CreateUserTailContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_createUserTail);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(4958);
				requireClause();
				}
				break;
			}
			setState(4962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				setState(4961);
				connectOptions();
				}
				break;
			}
			setState(4967);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4964);
					accountLockPasswordExpireOptions();
					}
					}
				}
				setState(4969);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
			}
			setState(4972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				setState(4970);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(4971);
				userAttributes();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserAttributesContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public UserAttributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAttributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUserAttributes(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUserAttributes(this);
			}
		}
	}

	public final UserAttributesContext userAttributes() throws RecognitionException {
		UserAttributesContext _localctx = new UserAttributesContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_userAttributes);
		try {
			setState(4978);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTRIBUTE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4974);
				match(ATTRIBUTE_SYMBOL);
				setState(4975);
				textStringLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4976);
				match(COMMENT_SYMBOL);
				setState(4977);
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultRoleClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultRoleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDefaultRoleClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDefaultRoleClause(this);
			}
		}
	}

	public final DefaultRoleClauseContext defaultRoleClause() throws RecognitionException {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_defaultRoleClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4980);
			match(DEFAULT_SYMBOL);
			setState(4981);
			match(ROLE_SYMBOL);
			setState(4982);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RequireClauseContext extends ParserRuleContext {
		public Token option;
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public RequireListContext requireList() {
			return getRuleContext(RequireListContext.class,0);
		}
		public TerminalNode SSL_SYMBOL() { return getToken(MySQLParser.SSL_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRequireClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRequireClause(this);
			}
		}
	}

	public final RequireClauseContext requireClause() throws RecognitionException {
		RequireClauseContext _localctx = new RequireClauseContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_requireClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4984);
			match(REQUIRE_SYMBOL);
			setState(4987);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				setState(4985);
				requireList();
				}
				break;
			case NONE_SYMBOL:
			case SSL_SYMBOL:
			case X509_SYMBOL:
				{
				setState(4986);
				_localctx.option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==SSL_SYMBOL || _la==X509_SYMBOL) ) {
					_localctx.option = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConnectOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<TerminalNode> MAX_QUERIES_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> MAX_UPDATES_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_USER_CONNECTIONS_SYMBOL() { return getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterConnectOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitConnectOptions(this);
			}
		}
	}

	public final ConnectOptionsContext connectOptions() throws RecognitionException {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_connectOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4989);
			match(WITH_SYMBOL);
			setState(4998);
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(4998);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case MAX_QUERIES_PER_HOUR_SYMBOL:
						{
						setState(4990);
						match(MAX_QUERIES_PER_HOUR_SYMBOL);
						setState(4991);
						ulong_number();
						}
						break;
					case MAX_UPDATES_PER_HOUR_SYMBOL:
						{
						setState(4992);
						match(MAX_UPDATES_PER_HOUR_SYMBOL);
						setState(4993);
						ulong_number();
						}
						break;
					case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
						{
						setState(4994);
						match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
						setState(4995);
						ulong_number();
						}
						break;
					case MAX_USER_CONNECTIONS_SYMBOL:
						{
						setState(4996);
						match(MAX_USER_CONNECTIONS_SYMBOL);
						setState(4997);
						ulong_number();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5000);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		public TerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountLockPasswordExpireOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAccountLockPasswordExpireOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAccountLockPasswordExpireOptions(this);
			}
		}
	}

	public final AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() throws RecognitionException {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			setState(5042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5002);
				match(ACCOUNT_SYMBOL);
				setState(5003);
				_la = _input.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5004);
				match(PASSWORD_SYMBOL);
				setState(5033);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
				case 1:
					{
					setState(5005);
					match(EXPIRE_SYMBOL);
					setState(5012);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
					case 1:
						{
						setState(5006);
						match(INTERVAL_SYMBOL);
						setState(5007);
						real_ulong_number();
						setState(5008);
						match(DAY_SYMBOL);
						}
						break;
					case 2:
						{
						setState(5010);
						match(NEVER_SYMBOL);
						}
						break;
					case 3:
						{
						setState(5011);
						match(DEFAULT_SYMBOL);
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(5014);
					match(HISTORY_SYMBOL);
					setState(5017);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						setState(5015);
						real_ulong_number();
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(5016);
						match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					setState(5019);
					match(REUSE_SYMBOL);
					setState(5020);
					match(INTERVAL_SYMBOL);
					setState(5025);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						setState(5021);
						real_ulong_number();
						setState(5022);
						match(DAY_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(5024);
						match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					setState(5027);
					if (!(this.isServerVersionGe80014())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
					}
					setState(5028);
					match(REQUIRE_SYMBOL);
					setState(5029);
					match(CURRENT_SYMBOL);
					setState(5031);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
					case 1:
						{
						setState(5030);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) {
								matchedEOF = true;
							}
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case FAILED_LOGIN_ATTEMPTS_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5035);
				match(FAILED_LOGIN_ATTEMPTS_SYMBOL);
				setState(5036);
				real_ulong_number();
				}
				break;
			case PASSWORD_LOCK_TIME_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5037);
				match(PASSWORD_LOCK_TIME_SYMBOL);
				setState(5040);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case HEX_NUMBER:
					{
					setState(5038);
					real_ulong_number();
					}
					break;
				case UNBOUNDED_SYMBOL:
					{
					setState(5039);
					match(UNBOUNDED_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserAttributeContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public UserAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUserAttribute(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUserAttribute(this);
			}
		}
	}

	public final UserAttributeContext userAttribute() throws RecognitionException {
		UserAttributeContext _localctx = new UserAttributeContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_userAttribute);
		try {
			setState(5049);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ATTRIBUTE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5045);
				match(ATTRIBUTE_SYMBOL);
				setState(5046);
				textStringLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5047);
				match(COMMENT_SYMBOL);
				setState(5048);
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropUserStatementContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropUserStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropUserStatement(this);
			}
		}
	}

	public final DropUserStatementContext dropUserStatement() throws RecognitionException {
		DropUserStatementContext _localctx = new DropUserStatementContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_dropUserStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5051);
			match(DROP_SYMBOL);
			setState(5052);
			match(USER_SYMBOL);
			setState(5054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(5053);
				ifExists();
				}
				break;
			}
			setState(5056);
			userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantStatementContext extends ParserRuleContext {
		public List<TerminalNode> GRANT_SYMBOL() { return getTokens(MySQLParser.GRANT_SYMBOL); }
		public TerminalNode GRANT_SYMBOL(int i) {
			return getToken(MySQLParser.GRANT_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public GrantTargetListContext grantTargetList() {
			return getRuleContext(GrantTargetListContext.class,0);
		}
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public VersionedRequireClauseContext versionedRequireClause() {
			return getRuleContext(VersionedRequireClauseContext.class,0);
		}
		public GrantOptionsContext grantOptions() {
			return getRuleContext(GrantOptionsContext.class,0);
		}
		public GrantAsContext grantAs() {
			return getRuleContext(GrantAsContext.class,0);
		}
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGrantStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGrantStatement(this);
			}
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_grantStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5058);
			match(GRANT_SYMBOL);
			setState(5100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
			case 1:
				{
				setState(5059);
				roleOrPrivilegesList();
				setState(5060);
				match(TO_SYMBOL);
				setState(5061);
				userList();
				setState(5065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(5062);
					match(WITH_SYMBOL);
					setState(5063);
					match(ADMIN_SYMBOL);
					setState(5064);
					match(OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				setState(5072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
				case 1:
					{
					setState(5067);
					roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					setState(5068);
					match(ALL_SYMBOL);
					setState(5070);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						setState(5069);
						match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				setState(5074);
				match(ON_SYMBOL);
				setState(5076);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
				case 1:
					{
					setState(5075);
					aclType();
					}
					break;
				}
				setState(5078);
				grantIdentifier();
				setState(5079);
				match(TO_SYMBOL);
				setState(5080);
				grantTargetList();
				setState(5082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(5081);
					versionedRequireClause();
					}
					break;
				}
				setState(5085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(5084);
					grantOptions();
					}
				}

				setState(5088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS_SYMBOL) {
					{
					setState(5087);
					grantAs();
					}
				}

				}
				break;
			case 3:
				{
				setState(5090);
				match(PROXY_SYMBOL);
				setState(5091);
				match(ON_SYMBOL);
				setState(5092);
				user();
				setState(5093);
				match(TO_SYMBOL);
				setState(5094);
				grantTargetList();
				setState(5098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(5095);
					match(WITH_SYMBOL);
					setState(5096);
					match(GRANT_SYMBOL);
					setState(5097);
					match(OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantTargetListContext extends ParserRuleContext {
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGrantTargetList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGrantTargetList(this);
			}
		}
	}

	public final GrantTargetListContext grantTargetList() throws RecognitionException {
		GrantTargetListContext _localctx = new GrantTargetListContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_grantTargetList);
		try {
			setState(5106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5102);
				if (!(this.isServerVersionLt80011())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				}
				setState(5103);
				createUserList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5104);
				if (!(this.isServerVersionGe80011())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
				}
				setState(5105);
				userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public GrantOptionContext grantOption() {
			return getRuleContext(GrantOptionContext.class,0);
		}
		public GrantOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGrantOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGrantOptions(this);
			}
		}
	}

	public final GrantOptionsContext grantOptions() throws RecognitionException {
		GrantOptionsContext _localctx = new GrantOptionsContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_grantOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5108);
			match(WITH_SYMBOL);
			setState(5109);
			grantOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExceptRoleListContext extends ParserRuleContext {
		public TerminalNode EXCEPT_SYMBOL() { return getToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public ExceptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptRoleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExceptRoleList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExceptRoleList(this);
			}
		}
	}

	public final ExceptRoleListContext exceptRoleList() throws RecognitionException {
		ExceptRoleListContext _localctx = new ExceptRoleListContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_exceptRoleList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5111);
			match(EXCEPT_SYMBOL);
			setState(5112);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithRolesContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExceptRoleListContext exceptRoleList() {
			return getRuleContext(ExceptRoleListContext.class,0);
		}
		public WithRolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withRoles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWithRoles(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWithRoles(this);
			}
		}
	}

	public final WithRolesContext withRoles() throws RecognitionException {
		WithRolesContext _localctx = new WithRolesContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_withRoles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5114);
			match(WITH_SYMBOL);
			setState(5115);
			match(ROLE_SYMBOL);
			setState(5123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				{
				setState(5116);
				roleList();
				}
				break;
			case 2:
				{
				setState(5117);
				match(ALL_SYMBOL);
				setState(5119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					setState(5118);
					exceptRoleList();
					}
				}

				}
				break;
			case 3:
				{
				setState(5121);
				match(NONE_SYMBOL);
				}
				break;
			case 4:
				{
				setState(5122);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantAsContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public WithRolesContext withRoles() {
			return getRuleContext(WithRolesContext.class,0);
		}
		public GrantAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantAs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGrantAs(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGrantAs(this);
			}
		}
	}

	public final GrantAsContext grantAs() throws RecognitionException {
		GrantAsContext _localctx = new GrantAsContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_grantAs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5125);
			match(AS_SYMBOL);
			setState(5126);
			match(USER_SYMBOL);
			setState(5128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				setState(5127);
				withRoles();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VersionedRequireClauseContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_versionedRequireClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterVersionedRequireClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitVersionedRequireClause(this);
			}
		}
	}

	public final VersionedRequireClauseContext versionedRequireClause() throws RecognitionException {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_versionedRequireClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5130);
			if (!(this.isServerVersionLt80011())) {
				throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
			}
			setState(5131);
			requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameUserStatementContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> TO_SYMBOL() { return getTokens(MySQLParser.TO_SYMBOL); }
		public TerminalNode TO_SYMBOL(int i) {
			return getToken(MySQLParser.TO_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRenameUserStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRenameUserStatement(this);
			}
		}
	}

	public final RenameUserStatementContext renameUserStatement() throws RecognitionException {
		RenameUserStatementContext _localctx = new RenameUserStatementContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_renameUserStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5133);
			match(RENAME_SYMBOL);
			setState(5134);
			match(USER_SYMBOL);
			setState(5135);
			user();
			setState(5136);
			match(TO_SYMBOL);
			setState(5137);
			user();
			setState(5145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5138);
				match(COMMA_SYMBOL);
				setState(5139);
				user();
				setState(5140);
				match(TO_SYMBOL);
				setState(5141);
				user();
				}
				}
				setState(5147);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokeStatementContext extends ParserRuleContext {
		public TerminalNode REVOKE_SYMBOL() { return getToken(MySQLParser.REVOKE_SYMBOL, 0); }
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public IgnoreUnknownUserContext ignoreUnknownUser() {
			return getRuleContext(IgnoreUnknownUserContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRevokeStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRevokeStatement(this);
			}
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_revokeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5148);
			match(REVOKE_SYMBOL);
			setState(5151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				{
				setState(5149);
				if (!(this.isServerVersionGe80031())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
				}
				setState(5150);
				ifExists();
				}
				break;
			}
			setState(5188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				{
				setState(5153);
				roleOrPrivilegesList();
				setState(5154);
				match(FROM_SYMBOL);
				setState(5155);
				userList();
				}
				break;
			case 2:
				{
				setState(5157);
				roleOrPrivilegesList();
				setState(5158);
				match(ON_SYMBOL);
				setState(5160);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
				case 1:
					{
					setState(5159);
					aclType();
					}
					break;
				}
				setState(5162);
				grantIdentifier();
				setState(5163);
				match(FROM_SYMBOL);
				setState(5164);
				userList();
				}
				break;
			case 3:
				{
				setState(5166);
				match(ALL_SYMBOL);
				setState(5168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES_SYMBOL) {
					{
					setState(5167);
					match(PRIVILEGES_SYMBOL);
					}
				}

				setState(5178);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON_SYMBOL:
					{
					setState(5170);
					match(ON_SYMBOL);
					setState(5172);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
					case 1:
						{
						setState(5171);
						aclType();
						}
						break;
					}
					setState(5174);
					grantIdentifier();
					}
					break;
				case COMMA_SYMBOL:
					{
					setState(5175);
					match(COMMA_SYMBOL);
					setState(5176);
					match(GRANT_SYMBOL);
					setState(5177);
					match(OPTION_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5180);
				match(FROM_SYMBOL);
				setState(5181);
				userList();
				}
				break;
			case 4:
				{
				setState(5182);
				match(PROXY_SYMBOL);
				setState(5183);
				match(ON_SYMBOL);
				setState(5184);
				user();
				setState(5185);
				match(FROM_SYMBOL);
				setState(5186);
				userList();
				}
				break;
			}
			setState(5192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				{
				setState(5190);
				if (!(this.isServerVersionGe80031())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
				}
				setState(5191);
				ignoreUnknownUser();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AclTypeContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aclType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAclType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAclType(this);
			}
		}
	}

	public final AclTypeContext aclType() throws RecognitionException {
		AclTypeContext _localctx = new AclTypeContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_aclType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5194);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleOrPrivilegesListContext extends ParserRuleContext {
		public List<RoleOrPrivilegeContext> roleOrPrivilege() {
			return getRuleContexts(RoleOrPrivilegeContext.class);
		}
		public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return getRuleContext(RoleOrPrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilegesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoleOrPrivilegesList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoleOrPrivilegesList(this);
			}
		}
	}

	public final RoleOrPrivilegesListContext roleOrPrivilegesList() throws RecognitionException {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_roleOrPrivilegesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5196);
			roleOrPrivilege();
			setState(5201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5197);
				match(COMMA_SYMBOL);
				setState(5198);
				roleOrPrivilege();
				}
				}
				setState(5203);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleOrPrivilegeContext extends ParserRuleContext {
		public Token object;
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public TerminalNode SELECT_SYMBOL() { return getToken(MySQLParser.SELECT_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode USAGE_SYMBOL() { return getToken(MySQLParser.USAGE_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public ReplicaContext replica() {
			return getRuleContext(ReplicaContext.class,0);
		}
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoleOrPrivilege(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoleOrPrivilege(this);
			}
		}
	}

	public final RoleOrPrivilegeContext roleOrPrivilege() throws RecognitionException {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_roleOrPrivilege);
		int _la;
		try {
			setState(5246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5214);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(5204);
					roleIdentifierOrText();
					setState(5206);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPEN_PAR_SYMBOL) {
						{
						setState(5205);
						columnInternalRefList();
						}
					}

					}
					break;
				case 2:
					{
					setState(5208);
					roleIdentifierOrText();
					setState(5212);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						setState(5209);
						match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						setState(5210);
						match(AT_SIGN_SYMBOL);
						setState(5211);
						textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5216);
				_la = _input.LA(1);
				if ( !(_la==INSERT_SYMBOL || _la==REFERENCES_SYMBOL || _la==SELECT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					setState(5217);
					columnInternalRefList();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5220);
				_la = _input.LA(1);
				if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & 2251954432516097L) != 0) || _la==INDEX_SYMBOL || ((((_la - 441)) & ~0x3f) == 0 && ((1L << (_la - 441)) & 134217745L) != 0) || _la==SHUTDOWN_SYMBOL || _la==SUPER_SYMBOL || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5221);
				match(GRANT_SYMBOL);
				setState(5222);
				match(OPTION_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5223);
				match(SHOW_SYMBOL);
				setState(5224);
				match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5225);
				match(CREATE_SYMBOL);
				setState(5229);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY_SYMBOL:
					{
					setState(5226);
					match(TEMPORARY_SYMBOL);
					setState(5227);
					_localctx.object = match(TABLES_SYMBOL);
					}
					break;
				case ROUTINE_SYMBOL:
				case TABLESPACE_SYMBOL:
				case USER_SYMBOL:
				case VIEW_SYMBOL:
					{
					setState(5228);
					_localctx.object = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4611721202799476737L) != 0)) ) {
						_localctx.object = _errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case COMMA_SYMBOL:
				case FROM_SYMBOL:
				case ON_SYMBOL:
				case TO_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5231);
				match(LOCK_SYMBOL);
				setState(5232);
				match(TABLES_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5233);
				match(REPLICATION_SYMBOL);
				setState(5236);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLIENT_SYMBOL:
					{
					setState(5234);
					match(CLIENT_SYMBOL);
					}
					break;
				case SLAVE_SYMBOL:
				case REPLICA_SYMBOL:
					{
					setState(5235);
					replica();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5238);
				match(SHOW_SYMBOL);
				setState(5239);
				match(VIEW_SYMBOL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5240);
				match(ALTER_SYMBOL);
				setState(5242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE_SYMBOL) {
					{
					setState(5241);
					match(ROUTINE_SYMBOL);
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5244);
				_la = _input.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5245);
				match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantIdentifierContext extends ParserRuleContext {
		public List<TerminalNode> MULT_OPERATOR() { return getTokens(MySQLParser.MULT_OPERATOR); }
		public TerminalNode MULT_OPERATOR(int i) {
			return getToken(MySQLParser.MULT_OPERATOR, i);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGrantIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGrantIdentifier(this);
			}
		}
	}

	public final GrantIdentifierContext grantIdentifier() throws RecognitionException {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_grantIdentifier);
		int _la;
		try {
			setState(5264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5248);
				match(MULT_OPERATOR);
				setState(5251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(5249);
					match(DOT_SYMBOL);
					setState(5250);
					match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5253);
				schemaRef();
				setState(5256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(5254);
					match(DOT_SYMBOL);
					setState(5255);
					match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5258);
				tableRef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5259);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(5260);
				schemaRef();
				setState(5261);
				match(DOT_SYMBOL);
				setState(5262);
				tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RequireListContext extends ParserRuleContext {
		public List<RequireListElementContext> requireListElement() {
			return getRuleContexts(RequireListElementContext.class);
		}
		public RequireListElementContext requireListElement(int i) {
			return getRuleContext(RequireListElementContext.class,i);
		}
		public List<TerminalNode> AND_SYMBOL() { return getTokens(MySQLParser.AND_SYMBOL); }
		public TerminalNode AND_SYMBOL(int i) {
			return getToken(MySQLParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRequireList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRequireList(this);
			}
		}
	}

	public final RequireListContext requireList() throws RecognitionException {
		RequireListContext _localctx = new RequireListContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_requireList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5266);
			requireListElement();
			setState(5273);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,593,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5268);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND_SYMBOL) {
						{
						setState(5267);
						match(AND_SYMBOL);
						}
					}

					setState(5270);
					requireListElement();
					}
					}
				}
				setState(5275);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,593,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RequireListElementContext extends ParserRuleContext {
		public Token element;
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRequireListElement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRequireListElement(this);
			}
		}
	}

	public final RequireListElementContext requireListElement() throws RecognitionException {
		RequireListElementContext _localctx = new RequireListElementContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_requireListElement);
		try {
			setState(5282);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5276);
				_localctx.element = match(CIPHER_SYMBOL);
				setState(5277);
				textString();
				}
				break;
			case ISSUER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5278);
				_localctx.element = match(ISSUER_SYMBOL);
				setState(5279);
				textString();
				}
				break;
			case SUBJECT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5280);
				_localctx.element = match(SUBJECT_SYMBOL);
				setState(5281);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGrantOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGrantOption(this);
			}
		}
	}

	public final GrantOptionContext grantOption() throws RecognitionException {
		GrantOptionContext _localctx = new GrantOptionContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_grantOption);
		try {
			setState(5297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5284);
				_localctx.option = match(GRANT_SYMBOL);
				setState(5285);
				match(OPTION_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5286);
				if (!(this.isServerVersionLt80011())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				}
				setState(5295);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAX_QUERIES_PER_HOUR_SYMBOL:
					{
					setState(5287);
					_localctx.option = match(MAX_QUERIES_PER_HOUR_SYMBOL);
					setState(5288);
					ulong_number();
					}
					break;
				case MAX_UPDATES_PER_HOUR_SYMBOL:
					{
					setState(5289);
					_localctx.option = match(MAX_UPDATES_PER_HOUR_SYMBOL);
					setState(5290);
					ulong_number();
					}
					break;
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
					{
					setState(5291);
					_localctx.option = match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					setState(5292);
					ulong_number();
					}
					break;
				case MAX_USER_CONNECTIONS_SYMBOL:
					{
					setState(5293);
					_localctx.option = match(MAX_USER_CONNECTIONS_SYMBOL);
					setState(5294);
					ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetRoleStatementContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public List<RoleListContext> roleList() {
			return getRuleContexts(RoleListContext.class);
		}
		public RoleListContext roleList(int i) {
			return getRuleContext(RoleListContext.class,i);
		}
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode EXCEPT_SYMBOL() { return getToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public SetRoleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRoleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSetRoleStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSetRoleStatement(this);
			}
		}
	}

	public final SetRoleStatementContext setRoleStatement() throws RecognitionException {
		SetRoleStatementContext _localctx = new SetRoleStatementContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_setRoleStatement);
		int _la;
		try {
			setState(5322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5299);
				match(SET_SYMBOL);
				setState(5300);
				match(ROLE_SYMBOL);
				setState(5301);
				roleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5302);
				match(SET_SYMBOL);
				setState(5303);
				match(ROLE_SYMBOL);
				setState(5304);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT_SYMBOL || _la==NONE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5305);
				match(SET_SYMBOL);
				setState(5306);
				match(DEFAULT_SYMBOL);
				setState(5307);
				match(ROLE_SYMBOL);
				setState(5311);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
				case 1:
					{
					setState(5308);
					roleList();
					}
					break;
				case 2:
					{
					setState(5309);
					match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(5310);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(5313);
				match(TO_SYMBOL);
				setState(5314);
				roleList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5315);
				match(SET_SYMBOL);
				setState(5316);
				match(ROLE_SYMBOL);
				setState(5317);
				match(ALL_SYMBOL);
				setState(5320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					setState(5318);
					match(EXCEPT_SYMBOL);
					setState(5319);
					roleList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleListContext extends ParserRuleContext {
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoleList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoleList(this);
			}
		}
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_roleList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5324);
			role();
			setState(5329);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,600,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5325);
					match(COMMA_SYMBOL);
					setState(5326);
					role();
					}
					}
				}
				setState(5331);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,600,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleContext extends ParserRuleContext {
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public RoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRole(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRole(this);
			}
		}
	}

	public final RoleContext role() throws RecognitionException {
		RoleContext _localctx = new RoleContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5332);
			roleIdentifierOrText();
			setState(5334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				{
				setState(5333);
				userVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableAdministrationStatementContext extends ParserRuleContext {
		public Token type;
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public HistogramContext histogram() {
			return getRuleContext(HistogramContext.class,0);
		}
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAdministrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableAdministrationStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableAdministrationStatement(this);
			}
		}
	}

	public final TableAdministrationStatementContext tableAdministrationStatement() throws RecognitionException {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_tableAdministrationStatement);
		int _la;
		try {
			setState(5378);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANALYZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5336);
				_localctx.type = match(ANALYZE_SYMBOL);
				setState(5338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(5337);
					noWriteToBinLog();
					}
				}

				setState(5340);
				match(TABLE_SYMBOL);
				setState(5341);
				tableRefList();
				setState(5343);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DROP_SYMBOL || _la==UPDATE_SYMBOL) {
					{
					setState(5342);
					histogram();
					}
				}

				}
				break;
			case CHECK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5345);
				_localctx.type = match(CHECK_SYMBOL);
				setState(5346);
				match(TABLE_SYMBOL);
				setState(5347);
				tableRefList();
				setState(5351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 131089L) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					setState(5348);
					checkOption();
					}
					}
					setState(5353);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case CHECKSUM_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5354);
				_localctx.type = match(CHECKSUM_SYMBOL);
				setState(5355);
				match(TABLE_SYMBOL);
				setState(5356);
				tableRefList();
				setState(5358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) {
					{
					setState(5357);
					_la = _input.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case OPTIMIZE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5360);
				_localctx.type = match(OPTIMIZE_SYMBOL);
				setState(5362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(5361);
					noWriteToBinLog();
					}
				}

				setState(5364);
				match(TABLE_SYMBOL);
				setState(5365);
				tableRefList();
				}
				break;
			case REPAIR_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5366);
				_localctx.type = match(REPAIR_SYMBOL);
				setState(5368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(5367);
					noWriteToBinLog();
					}
				}

				setState(5370);
				match(TABLE_SYMBOL);
				setState(5371);
				tableRefList();
				setState(5375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					setState(5372);
					repairType();
					}
					}
					setState(5377);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HistogramAutoUpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode MANUAL_SYMBOL() { return getToken(MySQLParser.MANUAL_SYMBOL, 0); }
		public TerminalNode AUTO_SYMBOL() { return getToken(MySQLParser.AUTO_SYMBOL, 0); }
		public HistogramAutoUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_histogramAutoUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHistogramAutoUpdate(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHistogramAutoUpdate(this);
			}
		}
	}

	public final HistogramAutoUpdateContext histogramAutoUpdate() throws RecognitionException {
		HistogramAutoUpdateContext _localctx = new HistogramAutoUpdateContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_histogramAutoUpdate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5380);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(5381);
			_la = _input.LA(1);
			if ( !(_la==AUTO_SYMBOL || _la==MANUAL_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5382);
			match(UPDATE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HistogramUpdateParamContext extends ParserRuleContext {
		public HistogramNumBucketsContext histogramNumBuckets() {
			return getRuleContext(HistogramNumBucketsContext.class,0);
		}
		public HistogramAutoUpdateContext histogramAutoUpdate() {
			return getRuleContext(HistogramAutoUpdateContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public HistogramUpdateParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_histogramUpdateParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHistogramUpdateParam(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHistogramUpdateParam(this);
			}
		}
	}

	public final HistogramUpdateParamContext histogramUpdateParam() throws RecognitionException {
		HistogramUpdateParamContext _localctx = new HistogramUpdateParamContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_histogramUpdateParam);
		try {
			setState(5394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
				case 1:
					{
					setState(5384);
					histogramNumBuckets();
					}
					break;
				}
				setState(5388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
				case 1:
					{
					setState(5387);
					histogramAutoUpdate();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5390);
				if (!(this.isServerVersionGe80031())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80031()");
				}
				setState(5391);
				match(USING_SYMBOL);
				setState(5392);
				match(DATA_SYMBOL);
				setState(5393);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HistogramNumBucketsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public HistogramNumBucketsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_histogramNumBuckets; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHistogramNumBuckets(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHistogramNumBuckets(this);
			}
		}
	}

	public final HistogramNumBucketsContext histogramNumBuckets() throws RecognitionException {
		HistogramNumBucketsContext _localctx = new HistogramNumBucketsContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_histogramNumBuckets);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5396);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(5397);
			match(WITH_SYMBOL);
			setState(5398);
			match(INT_NUMBER);
			setState(5399);
			match(BUCKETS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HistogramContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public HistogramUpdateParamContext histogramUpdateParam() {
			return getRuleContext(HistogramUpdateParamContext.class,0);
		}
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_histogram; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHistogram(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHistogram(this);
			}
		}
	}

	public final HistogramContext histogram() throws RecognitionException {
		HistogramContext _localctx = new HistogramContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_histogram);
		try {
			setState(5411);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5401);
				match(UPDATE_SYMBOL);
				setState(5402);
				match(HISTOGRAM_SYMBOL);
				setState(5403);
				match(ON_SYMBOL);
				setState(5404);
				identifierList();
				setState(5405);
				histogramUpdateParam();
				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5407);
				match(DROP_SYMBOL);
				setState(5408);
				match(HISTOGRAM_SYMBOL);
				setState(5409);
				match(ON_SYMBOL);
				setState(5410);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckOptionContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCheckOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCheckOption(this);
			}
		}
	}

	public final CheckOptionContext checkOption() throws RecognitionException {
		CheckOptionContext _localctx = new CheckOptionContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_checkOption);
		int _la;
		try {
			setState(5416);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5413);
				match(FOR_SYMBOL);
				setState(5414);
				match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5415);
				_la = _input.LA(1);
				if ( !(_la==CHANGED_SYMBOL || _la==EXTENDED_SYMBOL || _la==FAST_SYMBOL || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RepairTypeContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRepairType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRepairType(this);
			}
		}
	}

	public final RepairTypeContext repairType() throws RecognitionException {
		RepairTypeContext _localctx = new RepairTypeContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_repairType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5418);
			_la = _input.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UninstallStatementContext extends ParserRuleContext {
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public PluginRefContext pluginRef() {
			return getRuleContext(PluginRefContext.class,0);
		}
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public List<ComponentRefContext> componentRef() {
			return getRuleContexts(ComponentRefContext.class);
		}
		public ComponentRefContext componentRef(int i) {
			return getRuleContext(ComponentRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UninstallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUninstallStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUninstallStatement(this);
			}
		}
	}

	public final UninstallStatementContext uninstallStatement() throws RecognitionException {
		UninstallStatementContext _localctx = new UninstallStatementContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_uninstallStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5420);
			match(UNINSTALL_SYMBOL);
			setState(5432);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUGIN_SYMBOL:
				{
				setState(5421);
				match(PLUGIN_SYMBOL);
				setState(5422);
				pluginRef();
				}
				break;
			case COMPONENT_SYMBOL:
				{
				setState(5423);
				match(COMPONENT_SYMBOL);
				setState(5424);
				componentRef();
				setState(5429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(5425);
					match(COMMA_SYMBOL);
					setState(5426);
					componentRef();
					}
					}
					setState(5431);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InstallStatementContext extends ParserRuleContext {
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public InstallSetValueListContext installSetValueList() {
			return getRuleContext(InstallSetValueListContext.class,0);
		}
		public InstallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInstallStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInstallStatement(this);
			}
		}
	}

	public final InstallStatementContext installStatement() throws RecognitionException {
		InstallStatementContext _localctx = new InstallStatementContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_installStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5434);
			match(INSTALL_SYMBOL);
			setState(5445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUGIN_SYMBOL:
				{
				setState(5435);
				match(PLUGIN_SYMBOL);
				setState(5436);
				identifier();
				setState(5437);
				match(SONAME_SYMBOL);
				setState(5438);
				textStringLiteral();
				}
				break;
			case COMPONENT_SYMBOL:
				{
				setState(5440);
				match(COMPONENT_SYMBOL);
				setState(5441);
				textStringLiteralList();
				setState(5443);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
				case 1:
					{
					setState(5442);
					installSetValueList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InstallOptionTypeContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public InstallOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installOptionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInstallOptionType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInstallOptionType(this);
			}
		}
	}

	public final InstallOptionTypeContext installOptionType() throws RecognitionException {
		InstallOptionTypeContext _localctx = new InstallOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_installOptionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5447);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==PERSIST_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InstallSetRvalueContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public InstallSetRvalueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installSetRvalue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInstallSetRvalue(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInstallSetRvalue(this);
			}
		}
	}

	public final InstallSetRvalueContext installSetRvalue() throws RecognitionException {
		InstallSetRvalueContext _localctx = new InstallSetRvalueContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_installSetRvalue);
		try {
			setState(5451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5449);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5450);
				match(ON_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InstallSetValueContext extends ParserRuleContext {
		public InstallOptionTypeContext installOptionType() {
			return getRuleContext(InstallOptionTypeContext.class,0);
		}
		public LvalueVariableContext lvalueVariable() {
			return getRuleContext(LvalueVariableContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public InstallSetRvalueContext installSetRvalue() {
			return getRuleContext(InstallSetRvalueContext.class,0);
		}
		public InstallSetValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installSetValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInstallSetValue(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInstallSetValue(this);
			}
		}
	}

	public final InstallSetValueContext installSetValue() throws RecognitionException {
		InstallSetValueContext _localctx = new InstallSetValueContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_installSetValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5453);
			installOptionType();
			setState(5454);
			lvalueVariable();
			setState(5455);
			equal();
			setState(5456);
			installSetRvalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InstallSetValueListContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<InstallSetValueContext> installSetValue() {
			return getRuleContexts(InstallSetValueContext.class);
		}
		public InstallSetValueContext installSetValue(int i) {
			return getRuleContext(InstallSetValueContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public InstallSetValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installSetValueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInstallSetValueList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInstallSetValueList(this);
			}
		}
	}

	public final InstallSetValueListContext installSetValueList() throws RecognitionException {
		InstallSetValueListContext _localctx = new InstallSetValueListContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_installSetValueList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5458);
			if (!(this.isServerVersionGe80032())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
			}
			setState(5459);
			match(SET_SYMBOL);
			setState(5460);
			installSetValue();
			setState(5465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5461);
				match(COMMA_SYMBOL);
				setState(5462);
				installSetValue();
				}
				}
				setState(5467);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetStatementContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public StartOptionValueListContext startOptionValueList() {
			return getRuleContext(StartOptionValueListContext.class,0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSetStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSetStatement(this);
			}
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_setStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5468);
			match(SET_SYMBOL);
			setState(5469);
			startOptionValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartOptionValueListContext extends ParserRuleContext {
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return getRuleContext(OptionValueListContinuedContext.class,0);
		}
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
			return getRuleContext(StartOptionValueListFollowingOptionTypeContext.class,0);
		}
		public List<TerminalNode> PASSWORD_SYMBOL() { return getTokens(MySQLParser.PASSWORD_SYMBOL); }
		public TerminalNode PASSWORD_SYMBOL(int i) {
			return getToken(MySQLParser.PASSWORD_SYMBOL, i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public ReplacePasswordContext replacePassword() {
			return getRuleContext(ReplacePasswordContext.class,0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public StartOptionValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startOptionValueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStartOptionValueList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStartOptionValueList(this);
			}
		}
	}

	public final StartOptionValueListContext startOptionValueList() throws RecognitionException {
		StartOptionValueListContext _localctx = new StartOptionValueListContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_startOptionValueList);
		int _la;
		try {
			setState(5521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5471);
				optionValueNoOptionType();
				setState(5472);
				optionValueListContinued();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5474);
				match(TRANSACTION_SYMBOL);
				setState(5475);
				transactionCharacteristics();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5476);
				optionType();
				setState(5477);
				startOptionValueListFollowingOptionType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5479);
				match(PASSWORD_SYMBOL);
				setState(5482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(5480);
					match(FOR_SYMBOL);
					setState(5481);
					user();
					}
				}

				setState(5484);
				equal();
				setState(5505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
				case 1:
					{
					setState(5485);
					textString();
					setState(5487);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						setState(5486);
						replacePassword();
						}
					}

					setState(5490);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						setState(5489);
						retainCurrentPassword();
						}
					}

					}
					break;
				case 2:
					{
					setState(5492);
					textString();
					setState(5494);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						setState(5493);
						replacePassword();
						}
					}

					setState(5497);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						setState(5496);
						retainCurrentPassword();
						}
					}

					}
					break;
				case 3:
					{
					setState(5499);
					if (!(this.isServerVersionLt80014())) {
						throw new FailedPredicateException(this, "this.isServerVersionLt80014()");
					}
					setState(5500);
					match(PASSWORD_SYMBOL);
					setState(5501);
					match(OPEN_PAR_SYMBOL);
					setState(5502);
					textString();
					setState(5503);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5507);
				if (!(this.isServerVersionGe80018())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80018()");
				}
				setState(5508);
				match(PASSWORD_SYMBOL);
				setState(5511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(5509);
					match(FOR_SYMBOL);
					setState(5510);
					user();
					}
				}

				setState(5513);
				match(TO_SYMBOL);
				setState(5514);
				match(RANDOM_SYMBOL);
				setState(5516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLACE_SYMBOL) {
					{
					setState(5515);
					replacePassword();
					}
				}

				setState(5519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					setState(5518);
					retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionCharacteristicsContext extends ParserRuleContext {
		public TransactionAccessModeContext transactionAccessMode() {
			return getRuleContext(TransactionAccessModeContext.class,0);
		}
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTransactionCharacteristics(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTransactionCharacteristics(this);
			}
		}
	}

	public final TransactionCharacteristicsContext transactionCharacteristics() throws RecognitionException {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_transactionCharacteristics);
		int _la;
		try {
			setState(5532);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5523);
				transactionAccessMode();
				setState(5525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ISOLATION_SYMBOL) {
					{
					setState(5524);
					isolationLevel();
					}
				}

				}
				break;
			case ISOLATION_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5527);
				isolationLevel();
				setState(5530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5528);
					match(COMMA_SYMBOL);
					setState(5529);
					transactionAccessMode();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionAccessModeContext extends ParserRuleContext {
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionAccessMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTransactionAccessMode(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTransactionAccessMode(this);
			}
		}
	}

	public final TransactionAccessModeContext transactionAccessMode() throws RecognitionException {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_transactionAccessMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5534);
			match(READ_SYMBOL);
			setState(5535);
			_la = _input.LA(1);
			if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIsolationLevel(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIsolationLevel(this);
			}
		}
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_isolationLevel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5537);
			match(ISOLATION_SYMBOL);
			setState(5538);
			match(LEVEL_SYMBOL);
			setState(5544);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE_SYMBOL:
				{
				setState(5539);
				match(REPEATABLE_SYMBOL);
				setState(5540);
				match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				{
				setState(5541);
				match(READ_SYMBOL);
				setState(5542);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				{
				setState(5543);
				match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionValueListContinuedContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public List<OptionValueContext> optionValue() {
			return getRuleContexts(OptionValueContext.class);
		}
		public OptionValueContext optionValue(int i) {
			return getRuleContext(OptionValueContext.class,i);
		}
		public OptionValueListContinuedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueListContinued; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOptionValueListContinued(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOptionValueListContinued(this);
			}
		}
	}

	public final OptionValueListContinuedContext optionValueListContinued() throws RecognitionException {
		OptionValueListContinuedContext _localctx = new OptionValueListContinuedContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_optionValueListContinued);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5546);
				match(COMMA_SYMBOL);
				setState(5547);
				optionValue();
				}
				}
				setState(5552);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionValueNoOptionTypeContext extends ParserRuleContext {
		public LvalueVariableContext lvalueVariable() {
			return getRuleContext(LvalueVariableContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public SetVarIdentTypeContext setVarIdentType() {
			return getRuleContext(SetVarIdentTypeContext.class,0);
		}
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueNoOptionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOptionValueNoOptionType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOptionValueNoOptionType(this);
			}
		}
	}

	public final OptionValueNoOptionTypeContext optionValueNoOptionType() throws RecognitionException {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_optionValueNoOptionType);
		int _la;
		try {
			setState(5582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5553);
				lvalueVariable();
				setState(5554);
				equal();
				setState(5555);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5557);
				charsetClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5558);
				userVariable();
				setState(5559);
				equal();
				setState(5560);
				expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5562);
				match(AT_AT_SIGN_SYMBOL);
				setState(5564);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
				case 1:
					{
					setState(5563);
					setVarIdentType();
					}
					break;
				}
				setState(5566);
				lvalueVariable();
				setState(5567);
				equal();
				setState(5568);
				setExprOrDefault();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5570);
				match(NAMES_SYMBOL);
				setState(5580);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
				case 1:
					{
					setState(5571);
					equal();
					setState(5572);
					expr(0);
					}
					break;
				case 2:
					{
					setState(5574);
					charsetName();
					setState(5576);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE_SYMBOL) {
						{
						setState(5575);
						collate();
						}
					}

					}
					break;
				case 3:
					{
					setState(5578);
					if (!(this.isServerVersionGe80011())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
					}
					setState(5579);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionValueContext extends ParserRuleContext {
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public LvalueVariableContext lvalueVariable() {
			return getRuleContext(LvalueVariableContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOptionValue(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOptionValue(this);
			}
		}
	}

	public final OptionValueContext optionValue() throws RecognitionException {
		OptionValueContext _localctx = new OptionValueContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_optionValue);
		try {
			setState(5590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5584);
				optionType();
				setState(5585);
				lvalueVariable();
				setState(5586);
				equal();
				setState(5587);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5589);
				optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetSystemVariableContext extends ParserRuleContext {
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public LvalueVariableContext lvalueVariable() {
			return getRuleContext(LvalueVariableContext.class,0);
		}
		public SetVarIdentTypeContext setVarIdentType() {
			return getRuleContext(SetVarIdentTypeContext.class,0);
		}
		public SetSystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setSystemVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSetSystemVariable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSetSystemVariable(this);
			}
		}
	}

	public final SetSystemVariableContext setSystemVariable() throws RecognitionException {
		SetSystemVariableContext _localctx = new SetSystemVariableContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_setSystemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5592);
			match(AT_AT_SIGN_SYMBOL);
			setState(5594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				{
				setState(5593);
				setVarIdentType();
				}
				break;
			}
			setState(5596);
			lvalueVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext {
		public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return getRuleContext(OptionValueFollowingOptionTypeContext.class,0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return getRuleContext(OptionValueListContinuedContext.class,0);
		}
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public StartOptionValueListFollowingOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startOptionValueListFollowingOptionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStartOptionValueListFollowingOptionType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStartOptionValueListFollowingOptionType(this);
			}
		}
	}

	public final StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() throws RecognitionException {
		StartOptionValueListFollowingOptionTypeContext _localctx = new StartOptionValueListFollowingOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_startOptionValueListFollowingOptionType);
		try {
			setState(5603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5598);
				optionValueFollowingOptionType();
				setState(5599);
				optionValueListContinued();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5601);
				match(TRANSACTION_SYMBOL);
				setState(5602);
				transactionCharacteristics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
		public LvalueVariableContext lvalueVariable() {
			return getRuleContext(LvalueVariableContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueFollowingOptionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOptionValueFollowingOptionType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOptionValueFollowingOptionType(this);
			}
		}
	}

	public final OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() throws RecognitionException {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_optionValueFollowingOptionType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5605);
			lvalueVariable();
			setState(5606);
			equal();
			setState(5607);
			setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetExprOrDefaultContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setExprOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSetExprOrDefault(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSetExprOrDefault(this);
			}
		}
	}

	public final SetExprOrDefaultContext setExprOrDefault() throws RecognitionException {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_setExprOrDefault);
		try {
			setState(5616);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5609);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5610);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5611);
				match(ON_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5612);
				match(ALL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5613);
				match(BINARY_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5614);
				match(ROW_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5615);
				match(SYSTEM_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowDatabasesStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowDatabasesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showDatabasesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowDatabasesStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowDatabasesStatement(this);
			}
		}
	}

	public final ShowDatabasesStatementContext showDatabasesStatement() throws RecognitionException {
		ShowDatabasesStatementContext _localctx = new ShowDatabasesStatementContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_showDatabasesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5618);
			match(SHOW_SYMBOL);
			setState(5619);
			match(DATABASES_SYMBOL);
			setState(5621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5620);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowTablesStatementContext extends ParserRuleContext {
		public Token value;
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public ShowCommandTypeContext showCommandType() {
			return getRuleContext(ShowCommandTypeContext.class,0);
		}
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowTablesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTablesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowTablesStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowTablesStatement(this);
			}
		}
	}

	public final ShowTablesStatementContext showTablesStatement() throws RecognitionException {
		ShowTablesStatementContext _localctx = new ShowTablesStatementContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_showTablesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5623);
			match(SHOW_SYMBOL);
			setState(5625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED_SYMBOL || _la==FULL_SYMBOL) {
				{
				setState(5624);
				showCommandType();
				}
			}

			setState(5627);
			_localctx.value = match(TABLES_SYMBOL);
			setState(5629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				setState(5628);
				inDb();
				}
			}

			setState(5632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5631);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowTriggersStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowTriggersStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTriggersStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowTriggersStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowTriggersStatement(this);
			}
		}
	}

	public final ShowTriggersStatementContext showTriggersStatement() throws RecognitionException {
		ShowTriggersStatementContext _localctx = new ShowTriggersStatementContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_showTriggersStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5634);
			match(SHOW_SYMBOL);
			setState(5636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULL_SYMBOL) {
				{
				setState(5635);
				match(FULL_SYMBOL);
				}
			}

			setState(5638);
			match(TRIGGERS_SYMBOL);
			setState(5640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				setState(5639);
				inDb();
				}
			}

			setState(5643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5642);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowEventsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowEventsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEventsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowEventsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowEventsStatement(this);
			}
		}
	}

	public final ShowEventsStatementContext showEventsStatement() throws RecognitionException {
		ShowEventsStatementContext _localctx = new ShowEventsStatementContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_showEventsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5645);
			match(SHOW_SYMBOL);
			setState(5646);
			match(EVENTS_SYMBOL);
			setState(5648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				setState(5647);
				inDb();
				}
			}

			setState(5651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5650);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowTableStatusStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowTableStatusStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTableStatusStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowTableStatusStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowTableStatusStatement(this);
			}
		}
	}

	public final ShowTableStatusStatementContext showTableStatusStatement() throws RecognitionException {
		ShowTableStatusStatementContext _localctx = new ShowTableStatusStatementContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_showTableStatusStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5653);
			match(SHOW_SYMBOL);
			setState(5654);
			match(TABLE_SYMBOL);
			setState(5655);
			match(STATUS_SYMBOL);
			setState(5657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				setState(5656);
				inDb();
				}
			}

			setState(5660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5659);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowOpenTablesStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowOpenTablesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showOpenTablesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowOpenTablesStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowOpenTablesStatement(this);
			}
		}
	}

	public final ShowOpenTablesStatementContext showOpenTablesStatement() throws RecognitionException {
		ShowOpenTablesStatementContext _localctx = new ShowOpenTablesStatementContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_showOpenTablesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5662);
			match(SHOW_SYMBOL);
			setState(5663);
			match(OPEN_SYMBOL);
			setState(5664);
			match(TABLES_SYMBOL);
			setState(5666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				setState(5665);
				inDb();
				}
			}

			setState(5669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5668);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowParseTreeStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode PARSE_TREE_SYMBOL() { return getToken(MySQLParser.PARSE_TREE_SYMBOL, 0); }
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public ShowParseTreeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showParseTreeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowParseTreeStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowParseTreeStatement(this);
			}
		}
	}

	public final ShowParseTreeStatementContext showParseTreeStatement() throws RecognitionException {
		ShowParseTreeStatementContext _localctx = new ShowParseTreeStatementContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_showParseTreeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5671);
			if (!(this.isServerVersionGe80100())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80100()");
			}
			setState(5672);
			match(SHOW_SYMBOL);
			setState(5673);
			match(PARSE_TREE_SYMBOL);
			setState(5674);
			simpleStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowPluginsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public ShowPluginsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showPluginsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowPluginsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowPluginsStatement(this);
			}
		}
	}

	public final ShowPluginsStatementContext showPluginsStatement() throws RecognitionException {
		ShowPluginsStatementContext _localctx = new ShowPluginsStatementContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_showPluginsStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5676);
			match(SHOW_SYMBOL);
			setState(5677);
			match(PLUGINS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowEngineLogsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineOrAllContext engineOrAll() {
			return getRuleContext(EngineOrAllContext.class,0);
		}
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ShowEngineLogsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEngineLogsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowEngineLogsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowEngineLogsStatement(this);
			}
		}
	}

	public final ShowEngineLogsStatementContext showEngineLogsStatement() throws RecognitionException {
		ShowEngineLogsStatementContext _localctx = new ShowEngineLogsStatementContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_showEngineLogsStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5679);
			match(SHOW_SYMBOL);
			setState(5680);
			match(ENGINE_SYMBOL);
			setState(5681);
			engineOrAll();
			setState(5682);
			match(LOGS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowEngineMutexStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineOrAllContext engineOrAll() {
			return getRuleContext(EngineOrAllContext.class,0);
		}
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public ShowEngineMutexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEngineMutexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowEngineMutexStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowEngineMutexStatement(this);
			}
		}
	}

	public final ShowEngineMutexStatementContext showEngineMutexStatement() throws RecognitionException {
		ShowEngineMutexStatementContext _localctx = new ShowEngineMutexStatementContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_showEngineMutexStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5684);
			match(SHOW_SYMBOL);
			setState(5685);
			match(ENGINE_SYMBOL);
			setState(5686);
			engineOrAll();
			setState(5687);
			match(MUTEX_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowEngineStatusStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineOrAllContext engineOrAll() {
			return getRuleContext(EngineOrAllContext.class,0);
		}
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ShowEngineStatusStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEngineStatusStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowEngineStatusStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowEngineStatusStatement(this);
			}
		}
	}

	public final ShowEngineStatusStatementContext showEngineStatusStatement() throws RecognitionException {
		ShowEngineStatusStatementContext _localctx = new ShowEngineStatusStatementContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_showEngineStatusStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5689);
			match(SHOW_SYMBOL);
			setState(5690);
			match(ENGINE_SYMBOL);
			setState(5691);
			engineOrAll();
			setState(5692);
			match(STATUS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowColumnsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public ShowCommandTypeContext showCommandType() {
			return getRuleContext(ShowCommandTypeContext.class,0);
		}
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowColumnsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showColumnsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowColumnsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowColumnsStatement(this);
			}
		}
	}

	public final ShowColumnsStatementContext showColumnsStatement() throws RecognitionException {
		ShowColumnsStatementContext _localctx = new ShowColumnsStatementContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_showColumnsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5694);
			match(SHOW_SYMBOL);
			setState(5696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED_SYMBOL || _la==FULL_SYMBOL) {
				{
				setState(5695);
				showCommandType();
				}
			}

			setState(5698);
			match(COLUMNS_SYMBOL);
			setState(5699);
			_la = _input.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5700);
			tableRef();
			setState(5702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				setState(5701);
				inDb();
				}
			}

			setState(5705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5704);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowBinaryLogsStatementContext extends ParserRuleContext {
		public Token value;
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public ShowBinaryLogsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showBinaryLogsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowBinaryLogsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowBinaryLogsStatement(this);
			}
		}
	}

	public final ShowBinaryLogsStatementContext showBinaryLogsStatement() throws RecognitionException {
		ShowBinaryLogsStatementContext _localctx = new ShowBinaryLogsStatementContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_showBinaryLogsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5707);
			match(SHOW_SYMBOL);
			setState(5708);
			_la = _input.LA(1);
			if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5709);
			_localctx.value = match(LOGS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowBinaryLogStatusStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode LOG_SYMBOL() { return getToken(MySQLParser.LOG_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ShowBinaryLogStatusStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showBinaryLogStatusStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowBinaryLogStatusStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowBinaryLogStatusStatement(this);
			}
		}
	}

	public final ShowBinaryLogStatusStatementContext showBinaryLogStatusStatement() throws RecognitionException {
		ShowBinaryLogStatusStatementContext _localctx = new ShowBinaryLogStatusStatementContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_showBinaryLogStatusStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5711);
			match(SHOW_SYMBOL);
			setState(5712);
			match(BINARY_SYMBOL);
			setState(5713);
			match(LOG_SYMBOL);
			setState(5714);
			match(STATUS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowReplicasStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public ReplicaContext replica() {
			return getRuleContext(ReplicaContext.class,0);
		}
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode REPLICAS_SYMBOL() { return getToken(MySQLParser.REPLICAS_SYMBOL, 0); }
		public ShowReplicasStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showReplicasStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowReplicasStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowReplicasStatement(this);
			}
		}
	}

	public final ShowReplicasStatementContext showReplicasStatement() throws RecognitionException {
		ShowReplicasStatementContext _localctx = new ShowReplicasStatementContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_showReplicasStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5716);
			match(SHOW_SYMBOL);
			setState(5721);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SLAVE_SYMBOL:
			case REPLICA_SYMBOL:
				{
				setState(5717);
				replica();
				setState(5718);
				match(HOSTS_SYMBOL);
				}
				break;
			case REPLICAS_SYMBOL:
				{
				setState(5720);
				match(REPLICAS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowBinlogEventsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public UlonglongNumberContext ulonglongNumber() {
			return getRuleContext(UlonglongNumberContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ShowBinlogEventsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showBinlogEventsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowBinlogEventsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowBinlogEventsStatement(this);
			}
		}
	}

	public final ShowBinlogEventsStatementContext showBinlogEventsStatement() throws RecognitionException {
		ShowBinlogEventsStatementContext _localctx = new ShowBinlogEventsStatementContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_showBinlogEventsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5723);
			match(SHOW_SYMBOL);
			setState(5724);
			match(BINLOG_SYMBOL);
			setState(5725);
			match(EVENTS_SYMBOL);
			setState(5728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN_SYMBOL) {
				{
				setState(5726);
				match(IN_SYMBOL);
				setState(5727);
				textString();
				}
			}

			setState(5732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM_SYMBOL) {
				{
				setState(5730);
				match(FROM_SYMBOL);
				setState(5731);
				ulonglongNumber();
				}
			}

			setState(5735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				setState(5734);
				limitClause();
				}
			}

			setState(5738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(5737);
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowRelaylogEventsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public UlonglongNumberContext ulonglongNumber() {
			return getRuleContext(UlonglongNumberContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ShowRelaylogEventsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showRelaylogEventsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowRelaylogEventsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowRelaylogEventsStatement(this);
			}
		}
	}

	public final ShowRelaylogEventsStatementContext showRelaylogEventsStatement() throws RecognitionException {
		ShowRelaylogEventsStatementContext _localctx = new ShowRelaylogEventsStatementContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_showRelaylogEventsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5740);
			match(SHOW_SYMBOL);
			setState(5741);
			match(RELAYLOG_SYMBOL);
			setState(5742);
			match(EVENTS_SYMBOL);
			setState(5745);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN_SYMBOL) {
				{
				setState(5743);
				match(IN_SYMBOL);
				setState(5744);
				textString();
				}
			}

			setState(5749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM_SYMBOL) {
				{
				setState(5747);
				match(FROM_SYMBOL);
				setState(5748);
				ulonglongNumber();
				}
			}

			setState(5752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				setState(5751);
				limitClause();
				}
			}

			setState(5755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(5754);
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowKeysStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public ShowKeysStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showKeysStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowKeysStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowKeysStatement(this);
			}
		}
	}

	public final ShowKeysStatementContext showKeysStatement() throws RecognitionException {
		ShowKeysStatementContext _localctx = new ShowKeysStatementContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_showKeysStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5757);
			match(SHOW_SYMBOL);
			setState(5759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED_SYMBOL) {
				{
				setState(5758);
				match(EXTENDED_SYMBOL);
				}
			}

			setState(5761);
			_la = _input.LA(1);
			if ( !(((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & 67108867L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5762);
			fromOrIn();
			setState(5763);
			tableRef();
			setState(5765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				setState(5764);
				inDb();
				}
			}

			setState(5768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				setState(5767);
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowEnginesStatementContext extends ParserRuleContext {
		public Token value;
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public ShowEnginesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEnginesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowEnginesStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowEnginesStatement(this);
			}
		}
	}

	public final ShowEnginesStatementContext showEnginesStatement() throws RecognitionException {
		ShowEnginesStatementContext _localctx = new ShowEnginesStatementContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_showEnginesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5770);
			match(SHOW_SYMBOL);
			setState(5772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				setState(5771);
				match(STORAGE_SYMBOL);
				}
			}

			setState(5774);
			_localctx.value = match(ENGINES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCountWarningsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public ShowCountWarningsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCountWarningsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCountWarningsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCountWarningsStatement(this);
			}
		}
	}

	public final ShowCountWarningsStatementContext showCountWarningsStatement() throws RecognitionException {
		ShowCountWarningsStatementContext _localctx = new ShowCountWarningsStatementContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_showCountWarningsStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5776);
			match(SHOW_SYMBOL);
			setState(5777);
			match(COUNT_SYMBOL);
			setState(5778);
			match(OPEN_PAR_SYMBOL);
			setState(5779);
			match(MULT_OPERATOR);
			setState(5780);
			match(CLOSE_PAR_SYMBOL);
			setState(5781);
			match(WARNINGS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCountErrorsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public ShowCountErrorsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCountErrorsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCountErrorsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCountErrorsStatement(this);
			}
		}
	}

	public final ShowCountErrorsStatementContext showCountErrorsStatement() throws RecognitionException {
		ShowCountErrorsStatementContext _localctx = new ShowCountErrorsStatementContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_showCountErrorsStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5783);
			match(SHOW_SYMBOL);
			setState(5784);
			match(COUNT_SYMBOL);
			setState(5785);
			match(OPEN_PAR_SYMBOL);
			setState(5786);
			match(MULT_OPERATOR);
			setState(5787);
			match(CLOSE_PAR_SYMBOL);
			setState(5788);
			match(ERRORS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowWarningsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public ShowWarningsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showWarningsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowWarningsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowWarningsStatement(this);
			}
		}
	}

	public final ShowWarningsStatementContext showWarningsStatement() throws RecognitionException {
		ShowWarningsStatementContext _localctx = new ShowWarningsStatementContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_showWarningsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5790);
			match(SHOW_SYMBOL);
			setState(5791);
			match(WARNINGS_SYMBOL);
			setState(5793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				setState(5792);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowErrorsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public ShowErrorsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showErrorsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowErrorsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowErrorsStatement(this);
			}
		}
	}

	public final ShowErrorsStatementContext showErrorsStatement() throws RecognitionException {
		ShowErrorsStatementContext _localctx = new ShowErrorsStatementContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_showErrorsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5795);
			match(SHOW_SYMBOL);
			setState(5796);
			match(ERRORS_SYMBOL);
			setState(5798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				setState(5797);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowProfilesStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public ShowProfilesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfilesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowProfilesStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowProfilesStatement(this);
			}
		}
	}

	public final ShowProfilesStatementContext showProfilesStatement() throws RecognitionException {
		ShowProfilesStatementContext _localctx = new ShowProfilesStatementContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_showProfilesStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5800);
			match(SHOW_SYMBOL);
			setState(5801);
			match(PROFILES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowProfileStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public ProfileDefinitionsContext profileDefinitions() {
			return getRuleContext(ProfileDefinitionsContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public ShowProfileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowProfileStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowProfileStatement(this);
			}
		}
	}

	public final ShowProfileStatementContext showProfileStatement() throws RecognitionException {
		ShowProfileStatementContext _localctx = new ShowProfileStatementContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_showProfileStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5803);
			match(SHOW_SYMBOL);
			setState(5804);
			match(PROFILE_SYMBOL);
			setState(5806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL_SYMBOL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 19140298416324609L) != 0) || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==PAGE_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) {
				{
				setState(5805);
				profileDefinitions();
				}
			}

			setState(5811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(5808);
				match(FOR_SYMBOL);
				setState(5809);
				match(QUERY_SYMBOL);
				setState(5810);
				match(INT_NUMBER);
				}
			}

			setState(5814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				setState(5813);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowStatusStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowStatusStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatusStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowStatusStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowStatusStatement(this);
			}
		}
	}

	public final ShowStatusStatementContext showStatusStatement() throws RecognitionException {
		ShowStatusStatementContext _localctx = new ShowStatusStatementContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_showStatusStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5816);
			match(SHOW_SYMBOL);
			setState(5818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
				{
				setState(5817);
				optionType();
				}
			}

			setState(5820);
			match(STATUS_SYMBOL);
			setState(5822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5821);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowProcessListStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public ShowProcessListStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProcessListStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowProcessListStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowProcessListStatement(this);
			}
		}
	}

	public final ShowProcessListStatementContext showProcessListStatement() throws RecognitionException {
		ShowProcessListStatementContext _localctx = new ShowProcessListStatementContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_showProcessListStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5824);
			match(SHOW_SYMBOL);
			setState(5826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULL_SYMBOL) {
				{
				setState(5825);
				match(FULL_SYMBOL);
				}
			}

			setState(5828);
			match(PROCESSLIST_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowVariablesStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowVariablesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showVariablesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowVariablesStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowVariablesStatement(this);
			}
		}
	}

	public final ShowVariablesStatementContext showVariablesStatement() throws RecognitionException {
		ShowVariablesStatementContext _localctx = new ShowVariablesStatementContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_showVariablesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5830);
			match(SHOW_SYMBOL);
			setState(5832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
				{
				setState(5831);
				optionType();
				}
			}

			setState(5834);
			match(VARIABLES_SYMBOL);
			setState(5836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5835);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCharacterSetStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowCharacterSetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCharacterSetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCharacterSetStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCharacterSetStatement(this);
			}
		}
	}

	public final ShowCharacterSetStatementContext showCharacterSetStatement() throws RecognitionException {
		ShowCharacterSetStatementContext _localctx = new ShowCharacterSetStatementContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_showCharacterSetStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5838);
			match(SHOW_SYMBOL);
			setState(5839);
			charset();
			setState(5841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5840);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCollationStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowCollationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCollationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCollationStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCollationStatement(this);
			}
		}
	}

	public final ShowCollationStatementContext showCollationStatement() throws RecognitionException {
		ShowCollationStatementContext _localctx = new ShowCollationStatementContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_showCollationStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5843);
			match(SHOW_SYMBOL);
			setState(5844);
			match(COLLATION_SYMBOL);
			setState(5846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5845);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowPrivilegesStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public ShowPrivilegesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showPrivilegesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowPrivilegesStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowPrivilegesStatement(this);
			}
		}
	}

	public final ShowPrivilegesStatementContext showPrivilegesStatement() throws RecognitionException {
		ShowPrivilegesStatementContext _localctx = new ShowPrivilegesStatementContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_showPrivilegesStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5848);
			match(SHOW_SYMBOL);
			setState(5849);
			match(PRIVILEGES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowGrantsStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public ShowGrantsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGrantsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowGrantsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowGrantsStatement(this);
			}
		}
	}

	public final ShowGrantsStatementContext showGrantsStatement() throws RecognitionException {
		ShowGrantsStatementContext _localctx = new ShowGrantsStatementContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_showGrantsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5851);
			match(SHOW_SYMBOL);
			setState(5852);
			match(GRANTS_SYMBOL);
			setState(5859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(5853);
				match(FOR_SYMBOL);
				setState(5854);
				user();
				setState(5857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING_SYMBOL) {
					{
					setState(5855);
					match(USING_SYMBOL);
					setState(5856);
					userList();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateDatabaseStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateDatabaseStatement(this);
			}
		}
	}

	public final ShowCreateDatabaseStatementContext showCreateDatabaseStatement() throws RecognitionException {
		ShowCreateDatabaseStatementContext _localctx = new ShowCreateDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_showCreateDatabaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5861);
			match(SHOW_SYMBOL);
			setState(5862);
			match(CREATE_SYMBOL);
			setState(5863);
			match(DATABASE_SYMBOL);
			setState(5865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(5864);
				ifNotExists();
				}
				break;
			}
			setState(5867);
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateTableStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public ShowCreateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateTableStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateTableStatement(this);
			}
		}
	}

	public final ShowCreateTableStatementContext showCreateTableStatement() throws RecognitionException {
		ShowCreateTableStatementContext _localctx = new ShowCreateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_showCreateTableStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5869);
			match(SHOW_SYMBOL);
			setState(5870);
			match(CREATE_SYMBOL);
			setState(5871);
			match(TABLE_SYMBOL);
			setState(5872);
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateViewStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public ShowCreateViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateViewStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateViewStatement(this);
			}
		}
	}

	public final ShowCreateViewStatementContext showCreateViewStatement() throws RecognitionException {
		ShowCreateViewStatementContext _localctx = new ShowCreateViewStatementContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_showCreateViewStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5874);
			match(SHOW_SYMBOL);
			setState(5875);
			match(CREATE_SYMBOL);
			setState(5876);
			match(VIEW_SYMBOL);
			setState(5877);
			viewRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowMasterStatusStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ShowMasterStatusStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showMasterStatusStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowMasterStatusStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowMasterStatusStatement(this);
			}
		}
	}

	public final ShowMasterStatusStatementContext showMasterStatusStatement() throws RecognitionException {
		ShowMasterStatusStatementContext _localctx = new ShowMasterStatusStatementContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_showMasterStatusStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5879);
			match(SHOW_SYMBOL);
			setState(5880);
			match(MASTER_SYMBOL);
			setState(5881);
			match(STATUS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowReplicaStatusStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public ReplicaContext replica() {
			return getRuleContext(ReplicaContext.class,0);
		}
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ShowReplicaStatusStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showReplicaStatusStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowReplicaStatusStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowReplicaStatusStatement(this);
			}
		}
	}

	public final ShowReplicaStatusStatementContext showReplicaStatusStatement() throws RecognitionException {
		ShowReplicaStatusStatementContext _localctx = new ShowReplicaStatusStatementContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_showReplicaStatusStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5883);
			match(SHOW_SYMBOL);
			setState(5884);
			replica();
			setState(5885);
			match(STATUS_SYMBOL);
			setState(5887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(5886);
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateProcedureStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public ShowCreateProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateProcedureStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateProcedureStatement(this);
			}
		}
	}

	public final ShowCreateProcedureStatementContext showCreateProcedureStatement() throws RecognitionException {
		ShowCreateProcedureStatementContext _localctx = new ShowCreateProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_showCreateProcedureStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5889);
			match(SHOW_SYMBOL);
			setState(5890);
			match(CREATE_SYMBOL);
			setState(5891);
			match(PROCEDURE_SYMBOL);
			setState(5892);
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateFunctionStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public ShowCreateFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateFunctionStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateFunctionStatement(this);
			}
		}
	}

	public final ShowCreateFunctionStatementContext showCreateFunctionStatement() throws RecognitionException {
		ShowCreateFunctionStatementContext _localctx = new ShowCreateFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_showCreateFunctionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5894);
			match(SHOW_SYMBOL);
			setState(5895);
			match(CREATE_SYMBOL);
			setState(5896);
			match(FUNCTION_SYMBOL);
			setState(5897);
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateTriggerStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public ShowCreateTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateTriggerStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateTriggerStatement(this);
			}
		}
	}

	public final ShowCreateTriggerStatementContext showCreateTriggerStatement() throws RecognitionException {
		ShowCreateTriggerStatementContext _localctx = new ShowCreateTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_showCreateTriggerStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5899);
			match(SHOW_SYMBOL);
			setState(5900);
			match(CREATE_SYMBOL);
			setState(5901);
			match(TRIGGER_SYMBOL);
			setState(5902);
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateProcedureStatusStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowCreateProcedureStatusStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateProcedureStatusStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateProcedureStatusStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateProcedureStatusStatement(this);
			}
		}
	}

	public final ShowCreateProcedureStatusStatementContext showCreateProcedureStatusStatement() throws RecognitionException {
		ShowCreateProcedureStatusStatementContext _localctx = new ShowCreateProcedureStatusStatementContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_showCreateProcedureStatusStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5904);
			match(SHOW_SYMBOL);
			setState(5905);
			match(CREATE_SYMBOL);
			setState(5906);
			match(PROCEDURE_SYMBOL);
			setState(5907);
			match(STATUS_SYMBOL);
			setState(5909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5908);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateFunctionStatusStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowCreateFunctionStatusStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateFunctionStatusStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateFunctionStatusStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateFunctionStatusStatement(this);
			}
		}
	}

	public final ShowCreateFunctionStatusStatementContext showCreateFunctionStatusStatement() throws RecognitionException {
		ShowCreateFunctionStatusStatementContext _localctx = new ShowCreateFunctionStatusStatementContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_showCreateFunctionStatusStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5911);
			match(SHOW_SYMBOL);
			setState(5912);
			match(CREATE_SYMBOL);
			setState(5913);
			match(FUNCTION_SYMBOL);
			setState(5914);
			match(STATUS_SYMBOL);
			setState(5916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				setState(5915);
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateProcedureCodeStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public ShowCreateProcedureCodeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateProcedureCodeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateProcedureCodeStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateProcedureCodeStatement(this);
			}
		}
	}

	public final ShowCreateProcedureCodeStatementContext showCreateProcedureCodeStatement() throws RecognitionException {
		ShowCreateProcedureCodeStatementContext _localctx = new ShowCreateProcedureCodeStatementContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_showCreateProcedureCodeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5918);
			match(SHOW_SYMBOL);
			setState(5919);
			match(CREATE_SYMBOL);
			setState(5920);
			match(PROCEDURE_SYMBOL);
			setState(5921);
			match(CODE_SYMBOL);
			setState(5922);
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateFunctionCodeStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public ShowCreateFunctionCodeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateFunctionCodeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateFunctionCodeStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateFunctionCodeStatement(this);
			}
		}
	}

	public final ShowCreateFunctionCodeStatementContext showCreateFunctionCodeStatement() throws RecognitionException {
		ShowCreateFunctionCodeStatementContext _localctx = new ShowCreateFunctionCodeStatementContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_showCreateFunctionCodeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5924);
			match(SHOW_SYMBOL);
			setState(5925);
			match(CREATE_SYMBOL);
			setState(5926);
			match(FUNCTION_SYMBOL);
			setState(5927);
			match(CODE_SYMBOL);
			setState(5928);
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateEventStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public ShowCreateEventStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateEventStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateEventStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateEventStatement(this);
			}
		}
	}

	public final ShowCreateEventStatementContext showCreateEventStatement() throws RecognitionException {
		ShowCreateEventStatementContext _localctx = new ShowCreateEventStatementContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_showCreateEventStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5930);
			match(SHOW_SYMBOL);
			setState(5931);
			match(CREATE_SYMBOL);
			setState(5932);
			match(EVENT_SYMBOL);
			setState(5933);
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateUserStatementContext extends ParserRuleContext {
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public ShowCreateUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateUserStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCreateUserStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCreateUserStatement(this);
			}
		}
	}

	public final ShowCreateUserStatementContext showCreateUserStatement() throws RecognitionException {
		ShowCreateUserStatementContext _localctx = new ShowCreateUserStatementContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_showCreateUserStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5935);
			match(SHOW_SYMBOL);
			setState(5936);
			match(CREATE_SYMBOL);
			setState(5937);
			match(USER_SYMBOL);
			setState(5938);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCommandTypeContext extends ParserRuleContext {
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommandType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterShowCommandType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitShowCommandType(this);
			}
		}
	}

	public final ShowCommandTypeContext showCommandType() throws RecognitionException {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_showCommandType);
		int _la;
		try {
			setState(5945);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5940);
				match(FULL_SYMBOL);
				}
				break;
			case EXTENDED_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5941);
				match(EXTENDED_SYMBOL);
				setState(5943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(5942);
					match(FULL_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EngineOrAllContext extends ParserRuleContext {
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public EngineOrAllContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineOrAll; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterEngineOrAll(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitEngineOrAll(this);
			}
		}
	}

	public final EngineOrAllContext engineOrAll() throws RecognitionException {
		EngineOrAllContext _localctx = new EngineOrAllContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_engineOrAll);
		try {
			setState(5949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5947);
				engineRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5948);
				match(ALL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromOrInContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromOrIn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFromOrIn(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFromOrIn(this);
			}
		}
	}

	public final FromOrInContext fromOrIn() throws RecognitionException {
		FromOrInContext _localctx = new FromOrInContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_fromOrIn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5951);
			_la = _input.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InDbContext extends ParserRuleContext {
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inDb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInDb(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInDb(this);
			}
		}
	}

	public final InDbContext inDb() throws RecognitionException {
		InDbContext _localctx = new InDbContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_inDb);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5953);
			fromOrIn();
			setState(5954);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProfileDefinitionsContext extends ParserRuleContext {
		public List<ProfileDefinitionContext> profileDefinition() {
			return getRuleContexts(ProfileDefinitionContext.class);
		}
		public ProfileDefinitionContext profileDefinition(int i) {
			return getRuleContext(ProfileDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ProfileDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profileDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterProfileDefinitions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitProfileDefinitions(this);
			}
		}
	}

	public final ProfileDefinitionsContext profileDefinitions() throws RecognitionException {
		ProfileDefinitionsContext _localctx = new ProfileDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_profileDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5956);
			profileDefinition();
			setState(5961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5957);
				match(COMMA_SYMBOL);
				setState(5958);
				profileDefinition();
				}
				}
				setState(5963);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProfileDefinitionContext extends ParserRuleContext {
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ProfileDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profileDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterProfileDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitProfileDefinition(this);
			}
		}
	}

	public final ProfileDefinitionContext profileDefinition() throws RecognitionException {
		ProfileDefinitionContext _localctx = new ProfileDefinitionContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_profileDefinition);
		int _la;
		try {
			setState(5971);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BLOCK_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5964);
				match(BLOCK_SYMBOL);
				setState(5965);
				match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5966);
				match(CONTEXT_SYMBOL);
				setState(5967);
				match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5968);
				match(PAGE_SYMBOL);
				setState(5969);
				match(FAULTS_SYMBOL);
				}
				break;
			case ALL_SYMBOL:
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5970);
				_la = _input.LA(1);
				if ( !(_la==ALL_SYMBOL || _la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OtherAdministrativeStatementContext extends ParserRuleContext {
		public Token type;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return getRuleContext(KeyCacheListOrPartsContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public FlushTablesContext flushTables() {
			return getRuleContext(FlushTablesContext.class,0);
		}
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode KILL_SYMBOL() { return getToken(MySQLParser.KILL_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public PreloadTailContext preloadTail() {
			return getRuleContext(PreloadTailContext.class,0);
		}
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherAdministrativeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOtherAdministrativeStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOtherAdministrativeStatement(this);
			}
		}
	}

	public final OtherAdministrativeStatementContext otherAdministrativeStatement() throws RecognitionException {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_otherAdministrativeStatement);
		int _la;
		try {
			setState(6009);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINLOG_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5973);
				_localctx.type = match(BINLOG_SYMBOL);
				setState(5974);
				textLiteral();
				}
				break;
			case CACHE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5975);
				_localctx.type = match(CACHE_SYMBOL);
				setState(5976);
				match(INDEX_SYMBOL);
				setState(5977);
				keyCacheListOrParts();
				setState(5978);
				match(IN_SYMBOL);
				setState(5981);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
				case 1:
					{
					setState(5979);
					identifier();
					}
					break;
				case 2:
					{
					setState(5980);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case FLUSH_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5983);
				_localctx.type = match(FLUSH_SYMBOL);
				setState(5985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(5984);
					noWriteToBinLog();
					}
				}

				setState(5996);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TABLES_SYMBOL:
				case TABLE_SYMBOL:
					{
					setState(5987);
					flushTables();
					}
					break;
				case BINARY_SYMBOL:
				case ENGINE_SYMBOL:
				case ERROR_SYMBOL:
				case GENERAL_SYMBOL:
				case HOSTS_SYMBOL:
				case LOGS_SYMBOL:
				case OPTIMIZER_COSTS_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case RELAY_SYMBOL:
				case SLOW_SYMBOL:
				case STATUS_SYMBOL:
				case USER_RESOURCES_SYMBOL:
					{
					setState(5988);
					flushOption();
					setState(5993);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						setState(5989);
						match(COMMA_SYMBOL);
						setState(5990);
						flushOption();
						}
						}
						setState(5995);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KILL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5998);
				_localctx.type = match(KILL_SYMBOL);
				setState(6000);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
				case 1:
					{
					setState(5999);
					_la = _input.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6002);
				expr(0);
				}
				break;
			case LOAD_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(6003);
				_localctx.type = match(LOAD_SYMBOL);
				setState(6004);
				match(INDEX_SYMBOL);
				setState(6005);
				match(INTO_SYMBOL);
				setState(6006);
				match(CACHE_SYMBOL);
				setState(6007);
				preloadTail();
				}
				break;
			case SHUTDOWN_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(6008);
				_localctx.type = match(SHUTDOWN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyCacheListOrPartsContext extends ParserRuleContext {
		public KeyCacheListContext keyCacheList() {
			return getRuleContext(KeyCacheListContext.class,0);
		}
		public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return getRuleContext(AssignToKeycachePartitionContext.class,0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheListOrParts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterKeyCacheListOrParts(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitKeyCacheListOrParts(this);
			}
		}
	}

	public final KeyCacheListOrPartsContext keyCacheListOrParts() throws RecognitionException {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_keyCacheListOrParts);
		try {
			setState(6013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6011);
				keyCacheList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6012);
				assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyCacheListContext extends ParserRuleContext {
		public List<AssignToKeycacheContext> assignToKeycache() {
			return getRuleContexts(AssignToKeycacheContext.class);
		}
		public AssignToKeycacheContext assignToKeycache(int i) {
			return getRuleContext(AssignToKeycacheContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterKeyCacheList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitKeyCacheList(this);
			}
		}
	}

	public final KeyCacheListContext keyCacheList() throws RecognitionException {
		KeyCacheListContext _localctx = new KeyCacheListContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_keyCacheList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6015);
			assignToKeycache();
			setState(6020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6016);
				match(COMMA_SYMBOL);
				setState(6017);
				assignToKeycache();
				}
				}
				setState(6022);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignToKeycacheContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAssignToKeycache(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAssignToKeycache(this);
			}
		}
	}

	public final AssignToKeycacheContext assignToKeycache() throws RecognitionException {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_assignToKeycache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6023);
			tableRef();
			setState(6025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(6024);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignToKeycachePartitionContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycachePartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAssignToKeycachePartition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAssignToKeycachePartition(this);
			}
		}
	}

	public final AssignToKeycachePartitionContext assignToKeycachePartition() throws RecognitionException {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_assignToKeycachePartition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6027);
			tableRef();
			setState(6028);
			match(PARTITION_SYMBOL);
			setState(6029);
			match(OPEN_PAR_SYMBOL);
			setState(6030);
			allOrPartitionNameList();
			setState(6031);
			match(CLOSE_PAR_SYMBOL);
			setState(6033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(6032);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CacheKeyListContext extends ParserRuleContext {
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public KeyUsageListContext keyUsageList() {
			return getRuleContext(KeyUsageListContext.class,0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheKeyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCacheKeyList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCacheKeyList(this);
			}
		}
	}

	public final CacheKeyListContext cacheKeyList() throws RecognitionException {
		CacheKeyListContext _localctx = new CacheKeyListContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_cacheKeyList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6035);
			keyOrIndex();
			setState(6036);
			match(OPEN_PAR_SYMBOL);
			setState(6038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				setState(6037);
				keyUsageList();
				}
				break;
			}
			setState(6040);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyUsageElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterKeyUsageElement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitKeyUsageElement(this);
			}
		}
	}

	public final KeyUsageElementContext keyUsageElement() throws RecognitionException {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_keyUsageElement);
		try {
			setState(6044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6042);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6043);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyUsageListContext extends ParserRuleContext {
		public List<KeyUsageElementContext> keyUsageElement() {
			return getRuleContexts(KeyUsageElementContext.class);
		}
		public KeyUsageElementContext keyUsageElement(int i) {
			return getRuleContext(KeyUsageElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterKeyUsageList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitKeyUsageList(this);
			}
		}
	}

	public final KeyUsageListContext keyUsageList() throws RecognitionException {
		KeyUsageListContext _localctx = new KeyUsageListContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_keyUsageList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6046);
			keyUsageElement();
			setState(6051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6047);
				match(COMMA_SYMBOL);
				setState(6048);
				keyUsageElement();
				}
				}
				setState(6053);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlushOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public LogTypeContext logType() {
			return getRuleContext(LogTypeContext.class,0);
		}
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode OPTIMIZER_COSTS_SYMBOL() { return getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFlushOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFlushOption(this);
			}
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_flushOption);
		int _la;
		try {
			setState(6065);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOSTS_SYMBOL:
			case PRIVILEGES_SYMBOL:
			case STATUS_SYMBOL:
			case USER_RESOURCES_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6054);
				_localctx.option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					_localctx.option = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BINARY_SYMBOL:
			case ENGINE_SYMBOL:
			case ERROR_SYMBOL:
			case GENERAL_SYMBOL:
			case LOGS_SYMBOL:
			case SLOW_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY_SYMBOL || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 4398046511109L) != 0) || _la==SLOW_SYMBOL) {
					{
					setState(6055);
					logType();
					}
				}

				setState(6058);
				_localctx.option = match(LOGS_SYMBOL);
				}
				break;
			case RELAY_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6059);
				_localctx.option = match(RELAY_SYMBOL);
				setState(6060);
				match(LOGS_SYMBOL);
				setState(6062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(6061);
					channel();
					}
				}

				}
				break;
			case OPTIMIZER_COSTS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6064);
				_localctx.option = match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LogTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLogType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLogType(this);
			}
		}
	}

	public final LogTypeContext logType() throws RecognitionException {
		LogTypeContext _localctx = new LogTypeContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_logType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6067);
			_la = _input.LA(1);
			if ( !(_la==BINARY_SYMBOL || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 4398046511109L) != 0) || _la==SLOW_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlushTablesContext extends ParserRuleContext {
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public FlushTablesOptionsContext flushTablesOptions() {
			return getRuleContext(FlushTablesOptionsContext.class,0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFlushTables(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFlushTables(this);
			}
		}
	}

	public final FlushTablesContext flushTables() throws RecognitionException {
		FlushTablesContext _localctx = new FlushTablesContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_flushTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6069);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(6070);
				match(WITH_SYMBOL);
				setState(6071);
				match(READ_SYMBOL);
				setState(6072);
				match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				setState(6073);
				identifierList();
				setState(6075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL || _la==WITH_SYMBOL) {
					{
					setState(6074);
					flushTablesOptions();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlushTablesOptionsContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTablesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFlushTablesOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFlushTablesOptions(this);
			}
		}
	}

	public final FlushTablesOptionsContext flushTablesOptions() throws RecognitionException {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_flushTablesOptions);
		try {
			setState(6084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6079);
				match(FOR_SYMBOL);
				setState(6080);
				match(EXPORT_SYMBOL);
				}
				break;
			case WITH_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6081);
				match(WITH_SYMBOL);
				setState(6082);
				match(READ_SYMBOL);
				setState(6083);
				match(LOCK_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreloadTailContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public AdminPartitionContext adminPartition() {
			return getRuleContext(AdminPartitionContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadListContext preloadList() {
			return getRuleContext(PreloadListContext.class,0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPreloadTail(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPreloadTail(this);
			}
		}
	}

	public final PreloadTailContext preloadTail() throws RecognitionException {
		PreloadTailContext _localctx = new PreloadTailContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_preloadTail);
		int _la;
		try {
			setState(6096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6086);
				tableRef();
				setState(6087);
				adminPartition();
				setState(6089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					setState(6088);
					cacheKeyList();
					}
				}

				setState(6093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL) {
					{
					setState(6091);
					match(IGNORE_SYMBOL);
					setState(6092);
					match(LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6095);
				preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreloadListContext extends ParserRuleContext {
		public List<PreloadKeysContext> preloadKeys() {
			return getRuleContexts(PreloadKeysContext.class);
		}
		public PreloadKeysContext preloadKeys(int i) {
			return getRuleContext(PreloadKeysContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPreloadList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPreloadList(this);
			}
		}
	}

	public final PreloadListContext preloadList() throws RecognitionException {
		PreloadListContext _localctx = new PreloadListContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_preloadList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6098);
			preloadKeys();
			setState(6103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6099);
				match(COMMA_SYMBOL);
				setState(6100);
				preloadKeys();
				}
				}
				setState(6105);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreloadKeysContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadKeys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPreloadKeys(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPreloadKeys(this);
			}
		}
	}

	public final PreloadKeysContext preloadKeys() throws RecognitionException {
		PreloadKeysContext _localctx = new PreloadKeysContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_preloadKeys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6106);
			tableRef();
			setState(6108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(6107);
				cacheKeyList();
				}
			}

			setState(6112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				setState(6110);
				match(IGNORE_SYMBOL);
				setState(6111);
				match(LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AdminPartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_adminPartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAdminPartition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAdminPartition(this);
			}
		}
	}

	public final AdminPartitionContext adminPartition() throws RecognitionException {
		AdminPartitionContext _localctx = new AdminPartitionContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_adminPartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6114);
			match(PARTITION_SYMBOL);
			setState(6115);
			match(OPEN_PAR_SYMBOL);
			setState(6116);
			allOrPartitionNameList();
			setState(6117);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceGroupManagementContext extends ParserRuleContext {
		public CreateResourceGroupContext createResourceGroup() {
			return getRuleContext(CreateResourceGroupContext.class,0);
		}
		public AlterResourceGroupContext alterResourceGroup() {
			return getRuleContext(AlterResourceGroupContext.class,0);
		}
		public SetResourceGroupContext setResourceGroup() {
			return getRuleContext(SetResourceGroupContext.class,0);
		}
		public DropResourceGroupContext dropResourceGroup() {
			return getRuleContext(DropResourceGroupContext.class,0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupManagement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterResourceGroupManagement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitResourceGroupManagement(this);
			}
		}
	}

	public final ResourceGroupManagementContext resourceGroupManagement() throws RecognitionException {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_resourceGroupManagement);
		try {
			setState(6123);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6119);
				createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6120);
				alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6121);
				setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6122);
				dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateResourceGroupContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateResourceGroup(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateResourceGroup(this);
			}
		}
	}

	public final CreateResourceGroupContext createResourceGroup() throws RecognitionException {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_createResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6125);
			match(CREATE_SYMBOL);
			setState(6126);
			match(RESOURCE_SYMBOL);
			setState(6127);
			match(GROUP_SYMBOL);
			setState(6128);
			identifier();
			setState(6129);
			match(TYPE_SYMBOL);
			setState(6131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(6130);
				equal();
				}
			}

			setState(6133);
			_la = _input.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				setState(6134);
				resourceGroupVcpuList();
				}
			}

			setState(6138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				setState(6137);
				resourceGroupPriority();
				}
			}

			setState(6141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				setState(6140);
				resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceGroupVcpuListContext extends ParserRuleContext {
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public List<VcpuNumOrRangeContext> vcpuNumOrRange() {
			return getRuleContexts(VcpuNumOrRangeContext.class);
		}
		public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return getRuleContext(VcpuNumOrRangeContext.class,i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupVcpuList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterResourceGroupVcpuList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitResourceGroupVcpuList(this);
			}
		}
	}

	public final ResourceGroupVcpuListContext resourceGroupVcpuList() throws RecognitionException {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_resourceGroupVcpuList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6143);
			match(VCPU_SYMBOL);
			setState(6145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(6144);
				equal();
				}
			}

			setState(6147);
			vcpuNumOrRange();
			setState(6154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INT_NUMBER || _la==COMMA_SYMBOL) {
				{
				{
				setState(6149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6148);
					match(COMMA_SYMBOL);
					}
				}

				setState(6151);
				vcpuNumOrRange();
				}
				}
				setState(6156);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VcpuNumOrRangeContext extends ParserRuleContext {
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vcpuNumOrRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterVcpuNumOrRange(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitVcpuNumOrRange(this);
			}
		}
	}

	public final VcpuNumOrRangeContext vcpuNumOrRange() throws RecognitionException {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_vcpuNumOrRange);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6157);
			match(INT_NUMBER);
			setState(6160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_OPERATOR) {
				{
				setState(6158);
				match(MINUS_OPERATOR);
				setState(6159);
				match(INT_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceGroupPriorityContext extends ParserRuleContext {
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupPriority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterResourceGroupPriority(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitResourceGroupPriority(this);
			}
		}
	}

	public final ResourceGroupPriorityContext resourceGroupPriority() throws RecognitionException {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_resourceGroupPriority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6162);
			match(THREAD_PRIORITY_SYMBOL);
			setState(6164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(6163);
				equal();
				}
			}

			setState(6166);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceGroupEnableDisableContext extends ParserRuleContext {
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupEnableDisable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterResourceGroupEnableDisable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitResourceGroupEnableDisable(this);
			}
		}
	}

	public final ResourceGroupEnableDisableContext resourceGroupEnableDisable() throws RecognitionException {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6168);
			_la = _input.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterResourceGroupContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAlterResourceGroup(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAlterResourceGroup(this);
			}
		}
	}

	public final AlterResourceGroupContext alterResourceGroup() throws RecognitionException {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_alterResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6170);
			match(ALTER_SYMBOL);
			setState(6171);
			match(RESOURCE_SYMBOL);
			setState(6172);
			match(GROUP_SYMBOL);
			setState(6173);
			resourceGroupRef();
			setState(6175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				setState(6174);
				resourceGroupVcpuList();
				}
			}

			setState(6178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				setState(6177);
				resourceGroupPriority();
				}
			}

			setState(6181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				setState(6180);
				resourceGroupEnableDisable();
				}
			}

			setState(6184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				setState(6183);
				match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetResourceGroupContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public ThreadIdListContext threadIdList() {
			return getRuleContext(ThreadIdListContext.class,0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSetResourceGroup(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSetResourceGroup(this);
			}
		}
	}

	public final SetResourceGroupContext setResourceGroup() throws RecognitionException {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_setResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6186);
			match(SET_SYMBOL);
			setState(6187);
			match(RESOURCE_SYMBOL);
			setState(6188);
			match(GROUP_SYMBOL);
			setState(6189);
			identifier();
			setState(6192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(6190);
				match(FOR_SYMBOL);
				setState(6191);
				threadIdList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ThreadIdListContext extends ParserRuleContext {
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadIdList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterThreadIdList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitThreadIdList(this);
			}
		}
	}

	public final ThreadIdListContext threadIdList() throws RecognitionException {
		ThreadIdListContext _localctx = new ThreadIdListContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_threadIdList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6194);
			real_ulong_number();
			setState(6201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592722915384L) != 0)) {
				{
				{
				setState(6196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6195);
					match(COMMA_SYMBOL);
					}
				}

				setState(6198);
				real_ulong_number();
				}
				}
				setState(6203);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropResourceGroupContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDropResourceGroup(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDropResourceGroup(this);
			}
		}
	}

	public final DropResourceGroupContext dropResourceGroup() throws RecognitionException {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_dropResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6204);
			match(DROP_SYMBOL);
			setState(6205);
			match(RESOURCE_SYMBOL);
			setState(6206);
			match(GROUP_SYMBOL);
			setState(6207);
			resourceGroupRef();
			setState(6209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				setState(6208);
				match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UtilityStatementContext extends ParserRuleContext {
		public DescribeStatementContext describeStatement() {
			return getRuleContext(DescribeStatementContext.class,0);
		}
		public ExplainStatementContext explainStatement() {
			return getRuleContext(ExplainStatementContext.class,0);
		}
		public HelpCommandContext helpCommand() {
			return getRuleContext(HelpCommandContext.class,0);
		}
		public UseCommandContext useCommand() {
			return getRuleContext(UseCommandContext.class,0);
		}
		public RestartServerContext restartServer() {
			return getRuleContext(RestartServerContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUtilityStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUtilityStatement(this);
			}
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_utilityStatement);
		try {
			setState(6217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6211);
				describeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6212);
				explainStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6213);
				helpCommand();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6214);
				useCommand();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6215);
				if (!(this.isServerVersionGe80011())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
				}
				setState(6216);
				restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescribeStatementContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode EXPLAIN_SYMBOL() { return getToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public DescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDescribeStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDescribeStatement(this);
			}
		}
	}

	public final DescribeStatementContext describeStatement() throws RecognitionException {
		DescribeStatementContext _localctx = new DescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_describeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6219);
			_la = _input.LA(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 2199023255555L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6220);
			tableRef();
			setState(6223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				{
				setState(6221);
				textString();
				}
				break;
			case 2:
				{
				setState(6222);
				columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainStatementContext extends ParserRuleContext {
		public ExplainableStatementContext explainableStatement() {
			return getRuleContext(ExplainableStatementContext.class,0);
		}
		public TerminalNode EXPLAIN_SYMBOL() { return getToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public ExplainOptionsContext explainOptions() {
			return getRuleContext(ExplainOptionsContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ExplainStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExplainStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExplainStatement(this);
			}
		}
	}

	public final ExplainStatementContext explainStatement() throws RecognitionException {
		ExplainStatementContext _localctx = new ExplainStatementContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_explainStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6225);
			_la = _input.LA(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 2199023255555L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				setState(6226);
				explainOptions();
				}
				break;
			}
			setState(6233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
			case 1:
				{
				setState(6229);
				if (!(this.isServerVersionGe80032())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				}
				setState(6230);
				match(FOR_SYMBOL);
				setState(6231);
				match(DATABASE_SYMBOL);
				setState(6232);
				textOrIdentifier();
				}
				break;
			}
			setState(6235);
			explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainOptionsContext extends ParserRuleContext {
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ExplainIntoContext explainInto() {
			return getRuleContext(ExplainIntoContext.class,0);
		}
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public ExplainOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExplainOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExplainOptions(this);
			}
		}
	}

	public final ExplainOptionsContext explainOptions() throws RecognitionException {
		ExplainOptionsContext _localctx = new ExplainOptionsContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_explainOptions);
		try {
			setState(6253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6237);
				match(FORMAT_SYMBOL);
				setState(6238);
				match(EQUAL_OPERATOR);
				setState(6239);
				textOrIdentifier();
				setState(6242);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
				case 1:
					{
					setState(6240);
					if (!(this.isServerVersionGe80032())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
					}
					setState(6241);
					explainInto();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6244);
				if (!(this.isServerVersionLt80012())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80012()");
				}
				setState(6245);
				match(EXTENDED_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6246);
				if (!(this.isServerVersionGe80018())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80018()");
				}
				setState(6247);
				match(ANALYZE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6248);
				if (!(this.isServerVersionGe80019())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				}
				setState(6249);
				match(ANALYZE_SYMBOL);
				setState(6250);
				match(FORMAT_SYMBOL);
				setState(6251);
				match(EQUAL_OPERATOR);
				setState(6252);
				textOrIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainableStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExplainableStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExplainableStatement(this);
			}
		}
	}

	public final ExplainableStatementContext explainableStatement() throws RecognitionException {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_explainableStatement);
		try {
			setState(6263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6255);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6256);
				deleteStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6257);
				insertStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6258);
				replaceStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6259);
				updateStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6260);
				match(FOR_SYMBOL);
				setState(6261);
				match(CONNECTION_SYMBOL);
				setState(6262);
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainIntoContext extends ParserRuleContext {
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ExplainIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExplainInto(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExplainInto(this);
			}
		}
	}

	public final ExplainIntoContext explainInto() throws RecognitionException {
		ExplainIntoContext _localctx = new ExplainIntoContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_explainInto);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6265);
			match(INTO_SYMBOL);
			setState(6266);
			match(AT_SIGN_SYMBOL);
			setState(6267);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HelpCommandContext extends ParserRuleContext {
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHelpCommand(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHelpCommand(this);
			}
		}
	}

	public final HelpCommandContext helpCommand() throws RecognitionException {
		HelpCommandContext _localctx = new HelpCommandContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_helpCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6269);
			match(HELP_SYMBOL);
			setState(6270);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UseCommandContext extends ParserRuleContext {
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUseCommand(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUseCommand(this);
			}
		}
	}

	public final UseCommandContext useCommand() throws RecognitionException {
		UseCommandContext _localctx = new UseCommandContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_useCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6272);
			match(USE_SYMBOL);
			setState(6273);
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RestartServerContext extends ParserRuleContext {
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRestartServer(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRestartServer(this);
			}
		}
	}

	public final RestartServerContext restartServer() throws RecognitionException {
		RestartServerContext _localctx = new RestartServerContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_restartServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6275);
			match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprContext extends ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }

		public ExprContext() { }
		public void copyFrom(ExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExprOrContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode LOGICAL_OR_OPERATOR() { return getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExprOr(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExprOr(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExprNotContext extends ExprContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ExprNotContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExprNot(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExprNot(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExprIsContext extends ExprContext {
		public Token type;
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MySQLParser.IS_SYMBOL, 0); }
		public TerminalNode TRUE_SYMBOL() { return getToken(MySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MySQLParser.FALSE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public ExprIsContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExprIs(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExprIs(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExprAndContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode LOGICAL_AND_OPERATOR() { return getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExprAnd(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExprAnd(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExprXorContext extends ExprContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode XOR_SYMBOL() { return getToken(MySQLParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExprXor(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExprXor(this);
			}
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 912;
		enterRecursionRule(_localctx, 912, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6278);
				boolPri(0);
				setState(6284);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
				case 1:
					{
					setState(6279);
					match(IS_SYMBOL);
					setState(6281);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
						{
						setState(6280);
						notRule();
						}
					}

					setState(6283);
					((ExprIsContext)_localctx).type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL || _la==UNKNOWN_SYMBOL) ) {
						((ExprIsContext)_localctx).type = _errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6286);
				match(NOT_SYMBOL);
				setState(6287);
				expr(4);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6301);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,750,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) {
						triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					setState(6299);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6290);
						if (!(precpred(_ctx, 3))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						}
						setState(6291);
						((ExprAndContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LOGICAL_AND_OPERATOR || _la==AND_SYMBOL) ) {
							((ExprAndContext)_localctx).op = _errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) {
								matchedEOF = true;
							}
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6292);
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6293);
						if (!(precpred(_ctx, 2))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						}
						setState(6294);
						match(XOR_SYMBOL);
						setState(6295);
						expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6296);
						if (!(precpred(_ctx, 1))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						}
						setState(6297);
						((ExprOrContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LOGICAL_OR_OPERATOR || _la==OR_SYMBOL) ) {
							((ExprOrContext)_localctx).op = _errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) {
								matchedEOF = true;
							}
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6298);
						expr(2);
						}
						break;
					}
					}
				}
				setState(6303);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,750,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BoolPriContext extends ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolPri; }

		public BoolPriContext() { }
		public void copyFrom(BoolPriContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryExprPredicateContext extends BoolPriContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprPredicateContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPrimaryExprPredicate(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPrimaryExprPredicate(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryExprCompareContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprCompareContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPrimaryExprCompare(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPrimaryExprCompare(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryExprAllAnyContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPrimaryExprAllAny(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPrimaryExprAllAny(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryExprIsNullContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MySQLParser.IS_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public PrimaryExprIsNullContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPrimaryExprIsNull(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPrimaryExprIsNull(this);
			}
		}
	}

	public final BoolPriContext boolPri() throws RecognitionException {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BoolPriContext _localctx = new BoolPriContext(_ctx, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 914;
		enterRecursionRule(_localctx, 914, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(6305);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(6324);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,753,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) {
						triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					setState(6322);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(6307);
						if (!(precpred(_ctx, 3))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						}
						setState(6308);
						match(IS_SYMBOL);
						setState(6310);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
							{
							setState(6309);
							notRule();
							}
						}

						setState(6312);
						match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(6313);
						if (!(precpred(_ctx, 2))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						}
						setState(6314);
						compOp();
						setState(6315);
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(6317);
						if (!(precpred(_ctx, 1))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						}
						setState(6318);
						compOp();
						setState(6319);
						_la = _input.LA(1);
						if ( !(_la==ALL_SYMBOL || _la==ANY_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) {
								matchedEOF = true;
							}
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6320);
						subquery();
						}
						break;
					}
					}
				}
				setState(6326);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,753,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompOpContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NULL_SAFE_EQUAL_OPERATOR() { return getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode NOT_EQUAL_OPERATOR() { return getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCompOp(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCompOp(this);
			}
		}
	}

	public final CompOpContext compOp() throws RecognitionException {
		CompOpContext _localctx = new CompOpContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_compOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6327);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16192L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public PredicateOperationsContext predicateOperations() {
			return getRuleContext(PredicateOperationsContext.class,0);
		}
		public TerminalNode MEMBER_SYMBOL() { return getToken(MySQLParser.MEMBER_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return getRuleContext(SimpleExprWithParenthesesContext.class,0);
		}
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode OF_SYMBOL() { return getToken(MySQLParser.OF_SYMBOL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPredicate(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPredicate(this);
			}
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6329);
			bitExpr(0);
			setState(6343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				setState(6331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					setState(6330);
					notRule();
					}
				}

				setState(6333);
				predicateOperations();
				}
				break;
			case 2:
				{
				setState(6334);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(6335);
				match(MEMBER_SYMBOL);
				setState(6337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF_SYMBOL) {
					{
					setState(6336);
					match(OF_SYMBOL);
					}
				}

				setState(6339);
				simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				setState(6340);
				match(SOUNDS_SYMBOL);
				setState(6341);
				match(LIKE_SYMBOL);
				setState(6342);
				bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateOperationsContext extends ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicateOperations; }

		public PredicateOperationsContext() { }
		public void copyFrom(PredicateOperationsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredicateExprRegexContext extends PredicateOperationsContext {
		public TerminalNode REGEXP_SYMBOL() { return getToken(MySQLParser.REGEXP_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPredicateExprRegex(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPredicateExprRegex(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredicateExprBetweenContext extends PredicateOperationsContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPredicateExprBetween(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPredicateExprBetween(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredicateExprInContext extends PredicateOperationsContext {
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPredicateExprIn(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPredicateExprIn(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredicateExprLikeContext extends PredicateOperationsContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPredicateExprLike(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPredicateExprLike(this);
			}
		}
	}

	public final PredicateOperationsContext predicateOperations() throws RecognitionException {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_predicateOperations);
		try {
			setState(6366);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6345);
				match(IN_SYMBOL);
				setState(6351);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
				case 1:
					{
					setState(6346);
					subquery();
					}
					break;
				case 2:
					{
					setState(6347);
					match(OPEN_PAR_SYMBOL);
					setState(6348);
					exprList();
					setState(6349);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6353);
				match(BETWEEN_SYMBOL);
				setState(6354);
				bitExpr(0);
				setState(6355);
				match(AND_SYMBOL);
				setState(6356);
				predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6358);
				match(LIKE_SYMBOL);
				setState(6359);
				simpleExpr(0);
				setState(6362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
				case 1:
					{
					setState(6360);
					match(ESCAPE_SYMBOL);
					setState(6361);
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6364);
				match(REGEXP_SYMBOL);
				setState(6365);
				bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitExprContext extends ParserRuleContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode BITWISE_XOR_OPERATOR() { return getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode DIV_OPERATOR() { return getToken(MySQLParser.DIV_OPERATOR, 0); }
		public TerminalNode MOD_OPERATOR() { return getToken(MySQLParser.MOD_OPERATOR, 0); }
		public TerminalNode DIV_SYMBOL() { return getToken(MySQLParser.DIV_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MySQLParser.MOD_SYMBOL, 0); }
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode SHIFT_LEFT_OPERATOR() { return getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0); }
		public TerminalNode SHIFT_RIGHT_OPERATOR() { return getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
		public TerminalNode BITWISE_AND_OPERATOR() { return getToken(MySQLParser.BITWISE_AND_OPERATOR, 0); }
		public TerminalNode BITWISE_OR_OPERATOR() { return getToken(MySQLParser.BITWISE_OR_OPERATOR, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterBitExpr(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitBitExpr(this);
			}
		}
	}

	public final BitExprContext bitExpr() throws RecognitionException {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BitExprContext _localctx = new BitExprContext(_ctx, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 922;
		enterRecursionRule(_localctx, 922, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6369);
			simpleExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6397);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,761,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) {
						triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					setState(6395);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(6371);
						if (!(precpred(_ctx, 7))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						}
						setState(6372);
						_localctx.op = match(BITWISE_XOR_OPERATOR);
						setState(6373);
						bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(6374);
						if (!(precpred(_ctx, 6))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						}
						setState(6375);
						_localctx.op = _input.LT(1);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0) || _la==DIV_SYMBOL || _la==MOD_SYMBOL) ) {
							_localctx.op = _errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) {
								matchedEOF = true;
							}
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6376);
						bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(6377);
						if (!(precpred(_ctx, 5))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						}
						setState(6378);
						_localctx.op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = _errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) {
								matchedEOF = true;
							}
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6379);
						bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(6380);
						if (!(precpred(_ctx, 3))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						}
						setState(6381);
						_localctx.op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							_localctx.op = _errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) {
								matchedEOF = true;
							}
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6382);
						bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(6383);
						if (!(precpred(_ctx, 2))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						}
						setState(6384);
						_localctx.op = match(BITWISE_AND_OPERATOR);
						setState(6385);
						bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(6386);
						if (!(precpred(_ctx, 1))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						}
						setState(6387);
						_localctx.op = match(BITWISE_OR_OPERATOR);
						setState(6388);
						bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(6389);
						if (!(precpred(_ctx, 4))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						}
						setState(6390);
						_localctx.op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = _errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) {
								matchedEOF = true;
							}
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6391);
						match(INTERVAL_SYMBOL);
						setState(6392);
						expr(0);
						setState(6393);
						interval();
						}
						break;
					}
					}
				}
				setState(6399);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,761,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprContext extends ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpr; }

		public SimpleExprContext() { }
		public void copyFrom(SimpleExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprConvertContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprConvert(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprConvert(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprCastContext extends SimpleExprContext {
		public TerminalNode CAST_SYMBOL() { return getToken(MySQLParser.CAST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ArrayCastContext arrayCast() {
			return getRuleContext(ArrayCastContext.class,0);
		}
		public SimpleExprCastContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprCast(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprCast(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprUnaryContext extends SimpleExprContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode BITWISE_NOT_OPERATOR() { return getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprUnary(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprUnary(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExpressionRValueContext extends SimpleExprContext {
		public RvalueSystemOrUserVariableContext rvalueSystemOrUserVariable() {
			return getRuleContext(RvalueSystemOrUserVariableContext.class,0);
		}
		public SimpleExpressionRValueContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExpressionRValue(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExpressionRValue(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprOdbcContext extends SimpleExprContext {
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprOdbc(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprOdbc(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
		public RuntimeFunctionCallContext runtimeFunctionCall() {
			return getRuleContext(RuntimeFunctionCallContext.class,0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprRuntimeFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprRuntimeFunction(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprFunctionContext extends SimpleExprContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public SimpleExprFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprFunction(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprCollateContext extends SimpleExprContext {
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public SimpleExprCollateContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprCollate(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprCollate(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprMatchContext extends SimpleExprContext {
		public TerminalNode MATCH_SYMBOL() { return getToken(MySQLParser.MATCH_SYMBOL, 0); }
		public IdentListArgContext identListArg() {
			return getRuleContext(IdentListArgContext.class,0);
		}
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FulltextOptionsContext fulltextOptions() {
			return getRuleContext(FulltextOptionsContext.class,0);
		}
		public SimpleExprMatchContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprMatch(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprMatch(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprWindowingFunctionContext extends SimpleExprContext {
		public WindowFunctionCallContext windowFunctionCall() {
			return getRuleContext(WindowFunctionCallContext.class,0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprWindowingFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprWindowingFunction(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprBinaryContext extends SimpleExprContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprBinaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprBinary(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprBinary(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprColumnRefContext extends SimpleExprContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprColumnRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprColumnRef(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprParamMarkerContext extends SimpleExprContext {
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprParamMarker(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprParamMarker(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprSumContext extends SimpleExprContext {
		public SumExprContext sumExpr() {
			return getRuleContext(SumExprContext.class,0);
		}
		public SimpleExprSumContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprSum(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprSum(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprCastTimeContext extends SimpleExprContext {
		public TerminalNode CAST_SYMBOL() { return getToken(MySQLParser.CAST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode ZONE_SYMBOL() { return getToken(MySQLParser.ZONE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public SimpleExprCastTimeContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprCastTime(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprCastTime(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprConvertUsingContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprConvertUsing(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprConvertUsing(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprSubQueryContext extends SimpleExprContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprSubQuery(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprSubQuery(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprGroupingOperationContext extends SimpleExprContext {
		public GroupingOperationContext groupingOperation() {
			return getRuleContext(GroupingOperationContext.class,0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprGroupingOperation(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprGroupingOperation(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprNotContext extends SimpleExprContext {
		public Not2RuleContext not2Rule() {
			return getRuleContext(Not2RuleContext.class,0);
		}
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprNotContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprNot(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprNot(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprValuesContext extends SimpleExprContext {
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprValues(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprValues(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprUserVariableAssignmentContext extends SimpleExprContext {
		public InExpressionUserVariableAssignmentContext inExpressionUserVariableAssignment() {
			return getRuleContext(InExpressionUserVariableAssignmentContext.class,0);
		}
		public SimpleExprUserVariableAssignmentContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprUserVariableAssignment(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprUserVariableAssignment(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprDefaultContext extends SimpleExprContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprDefault(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprDefault(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprListContext extends SimpleExprContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprList(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprIntervalContext extends SimpleExprContext {
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprInterval(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprInterval(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprCaseContext extends SimpleExprContext {
		public TerminalNode CASE_SYMBOL() { return getToken(MySQLParser.CASE_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenExpressionContext> thenExpression() {
			return getRuleContexts(ThenExpressionContext.class);
		}
		public ThenExpressionContext thenExpression(int i) {
			return getRuleContext(ThenExpressionContext.class,i);
		}
		public ElseExpressionContext elseExpression() {
			return getRuleContext(ElseExpressionContext.class,0);
		}
		public SimpleExprCaseContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprCase(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprCase(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprConcatContext extends SimpleExprContext {
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode CONCAT_PIPES_SYMBOL() { return getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprConcat(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprConcat(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprLiteralContext extends SimpleExprContext {
		public LiteralOrNullContext literalOrNull() {
			return getRuleContext(LiteralOrNullContext.class,0);
		}
		public SimpleExprLiteralContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprLiteral(this);
			}
		}
	}

	public final SimpleExprContext simpleExpr() throws RecognitionException {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 924;
		enterRecursionRule(_localctx, 924, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6401);
				columnRef();
				setState(6403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
				case 1:
					{
					setState(6402);
					jsonOperator();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6405);
				runtimeFunctionCall();
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6406);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6407);
				literalOrNull();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6408);
				match(PARAM_MARKER);
				}
				break;
			case 6:
				{
				_localctx = new SimpleExpressionRValueContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6409);
				rvalueSystemOrUserVariable();
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprUserVariableAssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6410);
				inExpressionUserVariableAssignment();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6411);
				sumExpr();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6412);
				groupingOperation();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6413);
				windowFunctionCall();
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6414);
				((SimpleExprUnaryContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1097728L) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6415);
				simpleExpr(15);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6416);
				not2Rule();
				setState(6417);
				simpleExpr(14);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprListContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					setState(6419);
					match(ROW_SYMBOL);
					}
				}

				setState(6422);
				match(OPEN_PAR_SYMBOL);
				setState(6423);
				exprList();
				setState(6424);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(6426);
					match(EXISTS_SYMBOL);
					}
				}

				setState(6429);
				subquery();
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6430);
				match(OPEN_CURLY_SYMBOL);
				setState(6431);
				identifier();
				setState(6432);
				expr(0);
				setState(6433);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6435);
				match(MATCH_SYMBOL);
				setState(6436);
				identListArg();
				setState(6437);
				match(AGAINST_SYMBOL);
				setState(6438);
				match(OPEN_PAR_SYMBOL);
				setState(6439);
				bitExpr(0);
				setState(6441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN_SYMBOL || _la==WITH_SYMBOL) {
					{
					setState(6440);
					fulltextOptions();
					}
				}

				setState(6443);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6445);
				match(BINARY_SYMBOL);
				setState(6446);
				simpleExpr(9);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6447);
				match(CAST_SYMBOL);
				setState(6448);
				match(OPEN_PAR_SYMBOL);
				setState(6449);
				expr(0);
				setState(6452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SYMBOL) {
					{
					setState(6450);
					match(AT_SYMBOL);
					setState(6451);
					match(LOCAL_SYMBOL);
					}
				}

				setState(6454);
				match(AS_SYMBOL);
				setState(6455);
				castType();
				setState(6457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(6456);
					arrayCast();
					}
					break;
				}
				setState(6459);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprCastTimeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6461);
				match(CAST_SYMBOL);
				setState(6462);
				match(OPEN_PAR_SYMBOL);
				setState(6463);
				expr(0);
				setState(6464);
				match(AT_SYMBOL);
				setState(6465);
				match(TIME_SYMBOL);
				setState(6466);
				match(ZONE_SYMBOL);
				setState(6468);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(6467);
					match(INTERVAL_SYMBOL);
					}
					break;
				}
				setState(6470);
				textStringLiteral();
				setState(6471);
				match(AS_SYMBOL);
				setState(6472);
				match(DATETIME_SYMBOL);
				setState(6473);
				typeDatetimePrecision();
				setState(6474);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6476);
				match(CASE_SYMBOL);
				setState(6478);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
				case 1:
					{
					setState(6477);
					expr(0);
					}
					break;
				}
				setState(6483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6480);
					whenExpression();
					setState(6481);
					thenExpression();
					}
					}
					setState(6485);
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN_SYMBOL );
				setState(6488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					setState(6487);
					elseExpression();
					}
				}

				setState(6490);
				match(END_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6492);
				match(CONVERT_SYMBOL);
				setState(6493);
				match(OPEN_PAR_SYMBOL);
				setState(6494);
				expr(0);
				setState(6495);
				match(COMMA_SYMBOL);
				setState(6496);
				castType();
				setState(6497);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6499);
				match(CONVERT_SYMBOL);
				setState(6500);
				match(OPEN_PAR_SYMBOL);
				setState(6501);
				expr(0);
				setState(6502);
				match(USING_SYMBOL);
				setState(6503);
				charsetName();
				setState(6504);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6506);
				match(DEFAULT_SYMBOL);
				setState(6507);
				match(OPEN_PAR_SYMBOL);
				setState(6508);
				simpleIdentifier();
				setState(6509);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6511);
				match(VALUES_SYMBOL);
				setState(6512);
				match(OPEN_PAR_SYMBOL);
				setState(6513);
				simpleIdentifier();
				setState(6514);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6516);
				match(INTERVAL_SYMBOL);
				setState(6517);
				expr(0);
				setState(6518);
				interval();
				setState(6519);
				match(PLUS_OPERATOR);
				setState(6520);
				expr(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6532);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,774,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) {
						triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					setState(6530);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(6524);
						if (!(precpred(_ctx, 16))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						}
						setState(6525);
						match(CONCAT_PIPES_SYMBOL);
						setState(6526);
						simpleExpr(17);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(6527);
						if (!(precpred(_ctx, 24))) {
							throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						}
						setState(6528);
						match(COLLATE_SYMBOL);
						setState(6529);
						textOrIdentifier();
						}
						break;
					}
					}
				}
				setState(6534);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,774,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArrayCastContext extends ParserRuleContext {
		public TerminalNode ARRAY_SYMBOL() { return getToken(MySQLParser.ARRAY_SYMBOL, 0); }
		public ArrayCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayCast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterArrayCast(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitArrayCast(this);
			}
		}
	}

	public final ArrayCastContext arrayCast() throws RecognitionException {
		ArrayCastContext _localctx = new ArrayCastContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_arrayCast);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6535);
			if (!(this.isServerVersionGe80017())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
			}
			setState(6536);
			match(ARRAY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode JSON_SEPARATOR_SYMBOL() { return getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterJsonOperator(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitJsonOperator(this);
			}
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_jsonOperator);
		try {
			setState(6542);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON_SEPARATOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6538);
				match(JSON_SEPARATOR_SYMBOL);
				setState(6539);
				textStringLiteral();
				}
				break;
			case JSON_UNQUOTED_SEPARATOR_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6540);
				match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				setState(6541);
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SumExprContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public InSumExprContext inSumExpr() {
			return getRuleContext(InSumExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode BIT_AND_SYMBOL() { return getToken(MySQLParser.BIT_AND_SYMBOL, 0); }
		public TerminalNode BIT_OR_SYMBOL() { return getToken(MySQLParser.BIT_OR_SYMBOL, 0); }
		public TerminalNode BIT_XOR_SYMBOL() { return getToken(MySQLParser.BIT_XOR_SYMBOL, 0); }
		public JsonFunctionContext jsonFunction() {
			return getRuleContext(JsonFunctionContext.class,0);
		}
		public TerminalNode ST_COLLECT_SYMBOL() { return getToken(MySQLParser.ST_COLLECT_SYMBOL, 0); }
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode MIN_SYMBOL() { return getToken(MySQLParser.MIN_SYMBOL, 0); }
		public TerminalNode MAX_SYMBOL() { return getToken(MySQLParser.MAX_SYMBOL, 0); }
		public TerminalNode STD_SYMBOL() { return getToken(MySQLParser.STD_SYMBOL, 0); }
		public TerminalNode VARIANCE_SYMBOL() { return getToken(MySQLParser.VARIANCE_SYMBOL, 0); }
		public TerminalNode STDDEV_SAMP_SYMBOL() { return getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0); }
		public TerminalNode VAR_SAMP_SYMBOL() { return getToken(MySQLParser.VAR_SAMP_SYMBOL, 0); }
		public TerminalNode SUM_SYMBOL() { return getToken(MySQLParser.SUM_SYMBOL, 0); }
		public TerminalNode GROUP_CONCAT_SYMBOL() { return getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0); }
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public TerminalNode SEPARATOR_SYMBOL() { return getToken(MySQLParser.SEPARATOR_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sumExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSumExpr(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSumExpr(this);
			}
		}
	}

	public final SumExprContext sumExpr() throws RecognitionException {
		SumExprContext _localctx = new SumExprContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_sumExpr);
		int _la;
		try {
			setState(6629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6544);
				_localctx.name = match(AVG_SYMBOL);
				setState(6545);
				match(OPEN_PAR_SYMBOL);
				setState(6547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(6546);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(6549);
				inSumExpr();
				setState(6550);
				match(CLOSE_PAR_SYMBOL);
				setState(6552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					setState(6551);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6554);
				_localctx.name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 11L) != 0)) ) {
					_localctx.name = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6555);
				match(OPEN_PAR_SYMBOL);
				setState(6556);
				inSumExpr();
				setState(6557);
				match(CLOSE_PAR_SYMBOL);
				setState(6559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
				case 1:
					{
					setState(6558);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6561);
				jsonFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6562);
				_localctx.name = match(ST_COLLECT_SYMBOL);
				setState(6563);
				match(OPEN_PAR_SYMBOL);
				setState(6565);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
				case 1:
					{
					setState(6564);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(6567);
				inSumExpr();
				setState(6568);
				match(CLOSE_PAR_SYMBOL);
				setState(6570);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
				case 1:
					{
					setState(6569);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6572);
				_localctx.name = match(COUNT_SYMBOL);
				setState(6573);
				match(OPEN_PAR_SYMBOL);
				setState(6581);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
				case 1:
					{
					setState(6575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						setState(6574);
						match(ALL_SYMBOL);
						}
					}

					setState(6577);
					match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					setState(6578);
					inSumExpr();
					}
					break;
				case 3:
					{
					setState(6579);
					match(DISTINCT_SYMBOL);
					setState(6580);
					exprList();
					}
					break;
				}
				setState(6583);
				match(CLOSE_PAR_SYMBOL);
				setState(6585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
				case 1:
					{
					setState(6584);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6587);
				_localctx.name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MAX_SYMBOL || _la==MIN_SYMBOL) ) {
					_localctx.name = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6588);
				match(OPEN_PAR_SYMBOL);
				setState(6590);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
				case 1:
					{
					setState(6589);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(6592);
				inSumExpr();
				setState(6593);
				match(CLOSE_PAR_SYMBOL);
				setState(6595);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(6594);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6597);
				_localctx.name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & 65545L) != 0) || _la==VARIANCE_SYMBOL || _la==VAR_SAMP_SYMBOL) ) {
					_localctx.name = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6598);
				match(OPEN_PAR_SYMBOL);
				setState(6599);
				inSumExpr();
				setState(6600);
				match(CLOSE_PAR_SYMBOL);
				setState(6602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(6601);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6604);
				_localctx.name = match(SUM_SYMBOL);
				setState(6605);
				match(OPEN_PAR_SYMBOL);
				setState(6606);
				match(DISTINCT_SYMBOL);
				setState(6607);
				inSumExpr();
				setState(6608);
				match(CLOSE_PAR_SYMBOL);
				setState(6610);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
				case 1:
					{
					setState(6609);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6612);
				_localctx.name = match(GROUP_CONCAT_SYMBOL);
				setState(6613);
				match(OPEN_PAR_SYMBOL);
				setState(6615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
				case 1:
					{
					setState(6614);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(6617);
				exprList();
				setState(6619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					setState(6618);
					orderClause();
					}
				}

				setState(6623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					setState(6621);
					match(SEPARATOR_SYMBOL);
					setState(6622);
					textString();
					}
				}

				setState(6625);
				match(CLOSE_PAR_SYMBOL);
				setState(6627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					setState(6626);
					windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingOperationContext extends ParserRuleContext {
		public TerminalNode GROUPING_SYMBOL() { return getToken(MySQLParser.GROUPING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupingOperation(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupingOperation(this);
			}
		}
	}

	public final GroupingOperationContext groupingOperation() throws RecognitionException {
		GroupingOperationContext _localctx = new GroupingOperationContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_groupingOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6631);
			match(GROUPING_SYMBOL);
			setState(6632);
			match(OPEN_PAR_SYMBOL);
			setState(6633);
			exprList();
			setState(6634);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFunctionCallContext extends ParserRuleContext {
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode ROW_NUMBER_SYMBOL() { return getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0); }
		public TerminalNode RANK_SYMBOL() { return getToken(MySQLParser.RANK_SYMBOL, 0); }
		public TerminalNode DENSE_RANK_SYMBOL() { return getToken(MySQLParser.DENSE_RANK_SYMBOL, 0); }
		public TerminalNode CUME_DIST_SYMBOL() { return getToken(MySQLParser.CUME_DIST_SYMBOL, 0); }
		public TerminalNode PERCENT_RANK_SYMBOL() { return getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0); }
		public TerminalNode NTILE_SYMBOL() { return getToken(MySQLParser.NTILE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public StableIntegerContext stableInteger() {
			return getRuleContext(StableIntegerContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return getRuleContext(SimpleExprWithParenthesesContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LEAD_SYMBOL() { return getToken(MySQLParser.LEAD_SYMBOL, 0); }
		public TerminalNode LAG_SYMBOL() { return getToken(MySQLParser.LAG_SYMBOL, 0); }
		public LeadLagInfoContext leadLagInfo() {
			return getRuleContext(LeadLagInfoContext.class,0);
		}
		public NullTreatmentContext nullTreatment() {
			return getRuleContext(NullTreatmentContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TerminalNode FIRST_VALUE_SYMBOL() { return getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0); }
		public TerminalNode LAST_VALUE_SYMBOL() { return getToken(MySQLParser.LAST_VALUE_SYMBOL, 0); }
		public TerminalNode NTH_VALUE_SYMBOL() { return getToken(MySQLParser.NTH_VALUE_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunctionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowFunctionCall(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowFunctionCall(this);
			}
		}
	}

	public final WindowFunctionCallContext windowFunctionCall() throws RecognitionException {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_windowFunctionCall);
		int _la;
		try {
			setState(6685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6636);
				_la = _input.LA(1);
				if ( !(((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & 344067L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6637);
				parentheses();
				setState(6638);
				windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6640);
				match(NTILE_SYMBOL);
				setState(6647);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
				case 1:
					{
					setState(6641);
					match(OPEN_PAR_SYMBOL);
					setState(6642);
					stableInteger();
					setState(6643);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				case 2:
					{
					setState(6645);
					if (!(this.isServerVersionLt80024())) {
						throw new FailedPredicateException(this, "this.isServerVersionLt80024()");
					}
					setState(6646);
					simpleExprWithParentheses();
					}
					break;
				}
				setState(6649);
				windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6651);
				_la = _input.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6652);
				match(OPEN_PAR_SYMBOL);
				setState(6653);
				expr(0);
				setState(6655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6654);
					leadLagInfo();
					}
				}

				setState(6657);
				match(CLOSE_PAR_SYMBOL);
				setState(6659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(6658);
					nullTreatment();
					}
				}

				setState(6661);
				windowingClause();
				}
				break;
			case FIRST_VALUE_SYMBOL:
			case LAST_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6663);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE_SYMBOL || _la==LAST_VALUE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6664);
				exprWithParentheses();
				setState(6666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(6665);
					nullTreatment();
					}
				}

				setState(6668);
				windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(6670);
				match(NTH_VALUE_SYMBOL);
				setState(6671);
				match(OPEN_PAR_SYMBOL);
				setState(6672);
				expr(0);
				setState(6673);
				match(COMMA_SYMBOL);
				setState(6674);
				simpleExpr(0);
				setState(6675);
				match(CLOSE_PAR_SYMBOL);
				setState(6678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(6676);
					match(FROM_SYMBOL);
					setState(6677);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(6680);
					nullTreatment();
					}
				}

				setState(6683);
				windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SamplingMethodContext extends ParserRuleContext {
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public TerminalNode BERNOULLI_SYMBOL() { return getToken(MySQLParser.BERNOULLI_SYMBOL, 0); }
		public SamplingMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_samplingMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSamplingMethod(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSamplingMethod(this);
			}
		}
	}

	public final SamplingMethodContext samplingMethod() throws RecognitionException {
		SamplingMethodContext _localctx = new SamplingMethodContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_samplingMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6687);
			_la = _input.LA(1);
			if ( !(_la==SYSTEM_SYMBOL || _la==BERNOULLI_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SamplingPercentageContext extends ParserRuleContext {
		public UlonglongNumberContext ulonglongNumber() {
			return getRuleContext(UlonglongNumberContext.class,0);
		}
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public SamplingPercentageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_samplingPercentage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSamplingPercentage(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSamplingPercentage(this);
			}
		}
	}

	public final SamplingPercentageContext samplingPercentage() throws RecognitionException {
		SamplingPercentageContext _localctx = new SamplingPercentageContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_samplingPercentage);
		try {
			setState(6693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6689);
				ulonglongNumber();
				}
				break;
			case AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6690);
				match(AT_SIGN_SYMBOL);
				setState(6691);
				textOrIdentifier();
				}
				break;
			case PARAM_MARKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6692);
				match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablesampleClauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE_SYMBOL() { return getToken(MySQLParser.TABLESAMPLE_SYMBOL, 0); }
		public SamplingMethodContext samplingMethod() {
			return getRuleContext(SamplingMethodContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SamplingPercentageContext samplingPercentage() {
			return getRuleContext(SamplingPercentageContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TablesampleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesampleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTablesampleClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTablesampleClause(this);
			}
		}
	}

	public final TablesampleClauseContext tablesampleClause() throws RecognitionException {
		TablesampleClauseContext _localctx = new TablesampleClauseContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_tablesampleClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6695);
			if (!(this.isServerVersionGe80200())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
			}
			setState(6696);
			match(TABLESAMPLE_SYMBOL);
			setState(6697);
			samplingMethod();
			setState(6698);
			match(OPEN_PAR_SYMBOL);
			setState(6699);
			samplingPercentage();
			setState(6700);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowingClauseContext extends ParserRuleContext {
		public TerminalNode OVER_SYMBOL() { return getToken(MySQLParser.OVER_SYMBOL, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowingClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowingClause(this);
			}
		}
	}

	public final WindowingClauseContext windowingClause() throws RecognitionException {
		WindowingClauseContext _localctx = new WindowingClauseContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_windowingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6702);
			match(OVER_SYMBOL);
			setState(6705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(6703);
				windowName();
				}
				break;
			case 2:
				{
				setState(6704);
				windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LeadLagInfoContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UlonglongNumberContext ulonglongNumber() {
			return getRuleContext(UlonglongNumberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public StableIntegerContext stableInteger() {
			return getRuleContext(StableIntegerContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leadLagInfo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLeadLagInfo(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLeadLagInfo(this);
			}
		}
	}

	public final LeadLagInfoContext leadLagInfo() throws RecognitionException {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_leadLagInfo);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6707);
			match(COMMA_SYMBOL);
			setState(6712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
			case 1:
				{
				setState(6708);
				ulonglongNumber();
				}
				break;
			case 2:
				{
				setState(6709);
				match(PARAM_MARKER);
				}
				break;
			case 3:
				{
				setState(6710);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(6711);
				stableInteger();
				}
				break;
			}
			setState(6716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				setState(6714);
				match(COMMA_SYMBOL);
				setState(6715);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StableIntegerContext extends ParserRuleContext {
		public Int64LiteralContext int64Literal() {
			return getRuleContext(Int64LiteralContext.class,0);
		}
		public ParamOrVarContext paramOrVar() {
			return getRuleContext(ParamOrVarContext.class,0);
		}
		public StableIntegerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stableInteger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStableInteger(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStableInteger(this);
			}
		}
	}

	public final StableIntegerContext stableInteger() throws RecognitionException {
		StableIntegerContext _localctx = new StableIntegerContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_stableInteger);
		try {
			setState(6720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6718);
				int64Literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6719);
				paramOrVar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParamOrVarContext extends ParserRuleContext {
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ParamOrVarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramOrVar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterParamOrVar(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitParamOrVar(this);
			}
		}
	}

	public final ParamOrVarContext paramOrVar() throws RecognitionException {
		ParamOrVarContext _localctx = new ParamOrVarContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_paramOrVar);
		try {
			setState(6726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6722);
				match(PARAM_MARKER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6723);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6724);
				match(AT_SIGN_SYMBOL);
				setState(6725);
				textOrIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullTreatmentContext extends ParserRuleContext {
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullTreatment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNullTreatment(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNullTreatment(this);
			}
		}
	}

	public final NullTreatmentContext nullTreatment() throws RecognitionException {
		NullTreatmentContext _localctx = new NullTreatmentContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_nullTreatment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6728);
			_la = _input.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6729);
			match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_ARRAYAGG_SYMBOL() { return getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<InSumExprContext> inSumExpr() {
			return getRuleContexts(InSumExprContext.class);
		}
		public InSumExprContext inSumExpr(int i) {
			return getRuleContext(InSumExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode JSON_OBJECTAGG_SYMBOL() { return getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterJsonFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitJsonFunction(this);
			}
		}
	}

	public final JsonFunctionContext jsonFunction() throws RecognitionException {
		JsonFunctionContext _localctx = new JsonFunctionContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_jsonFunction);
		try {
			setState(6747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6731);
				match(JSON_ARRAYAGG_SYMBOL);
				setState(6732);
				match(OPEN_PAR_SYMBOL);
				setState(6733);
				inSumExpr();
				setState(6734);
				match(CLOSE_PAR_SYMBOL);
				setState(6736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
				case 1:
					{
					setState(6735);
					windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6738);
				match(JSON_OBJECTAGG_SYMBOL);
				setState(6739);
				match(OPEN_PAR_SYMBOL);
				setState(6740);
				inSumExpr();
				setState(6741);
				match(COMMA_SYMBOL);
				setState(6742);
				inSumExpr();
				setState(6743);
				match(CLOSE_PAR_SYMBOL);
				setState(6745);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(6744);
					windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InSumExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inSumExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInSumExpr(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInSumExpr(this);
			}
		}
	}

	public final InSumExprContext inSumExpr() throws RecognitionException {
		InSumExprContext _localctx = new InSumExprContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_inSumExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6750);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
			case 1:
				{
				setState(6749);
				match(ALL_SYMBOL);
				}
				break;
			}
			setState(6752);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentListArgContext extends ParserRuleContext {
		public IdentListContext identList() {
			return getRuleContext(IdentListContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identListArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentListArg(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentListArg(this);
			}
		}
	}

	public final IdentListArgContext identListArg() throws RecognitionException {
		IdentListArgContext _localctx = new IdentListArgContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_identListArg);
		try {
			setState(6759);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6754);
				identList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6755);
				match(OPEN_PAR_SYMBOL);
				setState(6756);
				identList();
				setState(6757);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentListContext extends ParserRuleContext {
		public List<SimpleIdentifierContext> simpleIdentifier() {
			return getRuleContexts(SimpleIdentifierContext.class);
		}
		public SimpleIdentifierContext simpleIdentifier(int i) {
			return getRuleContext(SimpleIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentList(this);
			}
		}
	}

	public final IdentListContext identList() throws RecognitionException {
		IdentListContext _localctx = new IdentListContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_identList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6761);
			simpleIdentifier();
			setState(6766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6762);
				match(COMMA_SYMBOL);
				setState(6763);
				simpleIdentifier();
				}
				}
				setState(6768);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FulltextOptionsContext extends ParserRuleContext {
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode NATURAL_SYMBOL() { return getToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFulltextOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFulltextOptions(this);
			}
		}
	}

	public final FulltextOptionsContext fulltextOptions() throws RecognitionException {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_fulltextOptions);
		int _la;
		try {
			setState(6784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6769);
				match(IN_SYMBOL);
				setState(6770);
				match(BOOLEAN_SYMBOL);
				setState(6771);
				match(MODE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6772);
				match(IN_SYMBOL);
				setState(6773);
				match(NATURAL_SYMBOL);
				setState(6774);
				match(LANGUAGE_SYMBOL);
				setState(6775);
				match(MODE_SYMBOL);
				setState(6779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(6776);
					match(WITH_SYMBOL);
					setState(6777);
					match(QUERY_SYMBOL);
					setState(6778);
					match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6781);
				match(WITH_SYMBOL);
				setState(6782);
				match(QUERY_SYMBOL);
				setState(6783);
				match(EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuntimeFunctionCallContext extends ParserRuleContext {
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public TerminalNode JSON_VALUE_SYMBOL() { return getToken(MySQLParser.JSON_VALUE_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public OnEmptyOrErrorContext onEmptyOrError() {
			return getRuleContext(OnEmptyOrErrorContext.class,0);
		}
		public ReturningTypeContext returningType() {
			return getRuleContext(ReturningTypeContext.class,0);
		}
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TrimFunctionContext trimFunction() {
			return getRuleContext(TrimFunctionContext.class,0);
		}
		public UserFunctionContext userFunction() {
			return getRuleContext(UserFunctionContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURDATE_SYMBOL() { return getToken(MySQLParser.CURDATE_SYMBOL, 0); }
		public TerminalNode CURTIME_SYMBOL() { return getToken(MySQLParser.CURTIME_SYMBOL, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode DATE_ADD_SYMBOL() { return getToken(MySQLParser.DATE_ADD_SYMBOL, 0); }
		public TerminalNode DATE_SUB_SYMBOL() { return getToken(MySQLParser.DATE_SUB_SYMBOL, 0); }
		public TerminalNode EXTRACT_SYMBOL() { return getToken(MySQLParser.EXTRACT_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public DateTimeTtypeContext dateTimeTtype() {
			return getRuleContext(DateTimeTtypeContext.class,0);
		}
		public TerminalNode LOG_SYMBOL() { return getToken(MySQLParser.LOG_SYMBOL, 0); }
		public TerminalNode NOW_SYMBOL() { return getToken(MySQLParser.NOW_SYMBOL, 0); }
		public TerminalNode POSITION_SYMBOL() { return getToken(MySQLParser.POSITION_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public SubstringFunctionContext substringFunction() {
			return getRuleContext(SubstringFunctionContext.class,0);
		}
		public TerminalNode SYSDATE_SYMBOL() { return getToken(MySQLParser.SYSDATE_SYMBOL, 0); }
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode TIMESTAMPADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMPDIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0); }
		public TerminalNode UTC_DATE_SYMBOL() { return getToken(MySQLParser.UTC_DATE_SYMBOL, 0); }
		public TerminalNode UTC_TIME_SYMBOL() { return getToken(MySQLParser.UTC_TIME_SYMBOL, 0); }
		public TerminalNode UTC_TIMESTAMP_SYMBOL() { return getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MySQLParser.MOD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode REPEAT_SYMBOL() { return getToken(MySQLParser.REPEAT_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public WsNumCodepointsContext wsNumCodepoints() {
			return getRuleContext(WsNumCodepointsContext.class,0);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public GeometryFunctionContext geometryFunction() {
			return getRuleContext(GeometryFunctionContext.class,0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runtimeFunctionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRuntimeFunctionCall(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRuntimeFunctionCall(this);
			}
		}
	}

	public final RuntimeFunctionCallContext runtimeFunctionCall() throws RecognitionException {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_runtimeFunctionCall);
		int _la;
		try {
			setState(7069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6786);
				match(CHAR_SYMBOL);
				setState(6787);
				match(OPEN_PAR_SYMBOL);
				setState(6788);
				exprList();
				setState(6791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING_SYMBOL) {
					{
					setState(6789);
					match(USING_SYMBOL);
					setState(6790);
					charsetName();
					}
				}

				setState(6793);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6795);
				match(CURRENT_USER_SYMBOL);
				setState(6797);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(6796);
					parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6799);
				match(DATE_SYMBOL);
				setState(6800);
				exprWithParentheses();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6801);
				match(DAY_SYMBOL);
				setState(6802);
				exprWithParentheses();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6803);
				match(HOUR_SYMBOL);
				setState(6804);
				exprWithParentheses();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6805);
				match(INSERT_SYMBOL);
				setState(6806);
				match(OPEN_PAR_SYMBOL);
				setState(6807);
				expr(0);
				setState(6808);
				match(COMMA_SYMBOL);
				setState(6809);
				expr(0);
				setState(6810);
				match(COMMA_SYMBOL);
				setState(6811);
				expr(0);
				setState(6812);
				match(COMMA_SYMBOL);
				setState(6813);
				expr(0);
				setState(6814);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6816);
				match(INTERVAL_SYMBOL);
				setState(6817);
				match(OPEN_PAR_SYMBOL);
				setState(6818);
				expr(0);
				setState(6821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6819);
					match(COMMA_SYMBOL);
					setState(6820);
					expr(0);
					}
					}
					setState(6823);
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA_SYMBOL );
				setState(6825);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6827);
				match(JSON_VALUE_SYMBOL);
				setState(6828);
				match(OPEN_PAR_SYMBOL);
				setState(6829);
				simpleExpr(0);
				setState(6830);
				match(COMMA_SYMBOL);
				setState(6831);
				textLiteral();
				setState(6833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING_SYMBOL) {
					{
					setState(6832);
					returningType();
					}
				}

				setState(6835);
				onEmptyOrError();
				setState(6836);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6838);
				match(LEFT_SYMBOL);
				setState(6839);
				match(OPEN_PAR_SYMBOL);
				setState(6840);
				expr(0);
				setState(6841);
				match(COMMA_SYMBOL);
				setState(6842);
				expr(0);
				setState(6843);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6845);
				match(MINUTE_SYMBOL);
				setState(6846);
				exprWithParentheses();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6847);
				match(MONTH_SYMBOL);
				setState(6848);
				exprWithParentheses();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6849);
				match(RIGHT_SYMBOL);
				setState(6850);
				match(OPEN_PAR_SYMBOL);
				setState(6851);
				expr(0);
				setState(6852);
				match(COMMA_SYMBOL);
				setState(6853);
				expr(0);
				setState(6854);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6856);
				match(SECOND_SYMBOL);
				setState(6857);
				exprWithParentheses();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6858);
				match(TIME_SYMBOL);
				setState(6859);
				exprWithParentheses();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6860);
				match(TIMESTAMP_SYMBOL);
				setState(6861);
				match(OPEN_PAR_SYMBOL);
				setState(6862);
				expr(0);
				setState(6865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6863);
					match(COMMA_SYMBOL);
					setState(6864);
					expr(0);
					}
				}

				setState(6867);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6869);
				trimFunction();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6870);
				userFunction();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6871);
				match(VALUES_SYMBOL);
				setState(6872);
				exprWithParentheses();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6873);
				match(YEAR_SYMBOL);
				setState(6874);
				exprWithParentheses();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6875);
				_la = _input.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6876);
				match(OPEN_PAR_SYMBOL);
				setState(6877);
				expr(0);
				setState(6878);
				match(COMMA_SYMBOL);
				setState(6884);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
				case 1:
					{
					setState(6879);
					expr(0);
					}
					break;
				case 2:
					{
					setState(6880);
					match(INTERVAL_SYMBOL);
					setState(6881);
					expr(0);
					setState(6882);
					interval();
					}
					break;
				}
				setState(6886);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6888);
				match(CURDATE_SYMBOL);
				setState(6890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
				case 1:
					{
					setState(6889);
					parentheses();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6892);
				match(CURTIME_SYMBOL);
				setState(6894);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
				case 1:
					{
					setState(6893);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6896);
				_la = _input.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6897);
				match(OPEN_PAR_SYMBOL);
				setState(6898);
				expr(0);
				setState(6899);
				match(COMMA_SYMBOL);
				setState(6900);
				match(INTERVAL_SYMBOL);
				setState(6901);
				expr(0);
				setState(6902);
				interval();
				setState(6903);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6905);
				match(EXTRACT_SYMBOL);
				setState(6906);
				match(OPEN_PAR_SYMBOL);
				setState(6907);
				interval();
				setState(6908);
				match(FROM_SYMBOL);
				setState(6909);
				expr(0);
				setState(6910);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6912);
				match(GET_FORMAT_SYMBOL);
				setState(6913);
				match(OPEN_PAR_SYMBOL);
				setState(6914);
				dateTimeTtype();
				setState(6915);
				match(COMMA_SYMBOL);
				setState(6916);
				expr(0);
				setState(6917);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6919);
				if (!(this.isServerVersionGe80032())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				}
				setState(6920);
				match(LOG_SYMBOL);
				setState(6921);
				match(OPEN_PAR_SYMBOL);
				setState(6922);
				expr(0);
				setState(6925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6923);
					match(COMMA_SYMBOL);
					setState(6924);
					expr(0);
					}
				}

				setState(6927);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6929);
				match(NOW_SYMBOL);
				setState(6931);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
				case 1:
					{
					setState(6930);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6933);
				match(POSITION_SYMBOL);
				setState(6934);
				match(OPEN_PAR_SYMBOL);
				setState(6935);
				bitExpr(0);
				setState(6936);
				match(IN_SYMBOL);
				setState(6937);
				expr(0);
				setState(6938);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6940);
				substringFunction();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6941);
				match(SYSDATE_SYMBOL);
				setState(6943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
				case 1:
					{
					setState(6942);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6945);
				_la = _input.LA(1);
				if ( !(_la==TIMESTAMPADD_SYMBOL || _la==TIMESTAMPDIFF_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6946);
				match(OPEN_PAR_SYMBOL);
				setState(6947);
				intervalTimeStamp();
				setState(6948);
				match(COMMA_SYMBOL);
				setState(6949);
				expr(0);
				setState(6950);
				match(COMMA_SYMBOL);
				setState(6951);
				expr(0);
				setState(6952);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6954);
				match(UTC_DATE_SYMBOL);
				setState(6956);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
				case 1:
					{
					setState(6955);
					parentheses();
					}
					break;
				}
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6958);
				match(UTC_TIME_SYMBOL);
				setState(6960);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
				case 1:
					{
					setState(6959);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6962);
				match(UTC_TIMESTAMP_SYMBOL);
				setState(6964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
				case 1:
					{
					setState(6963);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6966);
				match(ASCII_SYMBOL);
				setState(6967);
				exprWithParentheses();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6968);
				match(CHARSET_SYMBOL);
				setState(6969);
				exprWithParentheses();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6970);
				match(COALESCE_SYMBOL);
				setState(6971);
				exprListWithParentheses();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6972);
				match(COLLATION_SYMBOL);
				setState(6973);
				exprWithParentheses();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6974);
				match(DATABASE_SYMBOL);
				setState(6975);
				parentheses();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6976);
				match(IF_SYMBOL);
				setState(6977);
				match(OPEN_PAR_SYMBOL);
				setState(6978);
				expr(0);
				setState(6979);
				match(COMMA_SYMBOL);
				setState(6980);
				expr(0);
				setState(6981);
				match(COMMA_SYMBOL);
				setState(6982);
				expr(0);
				setState(6983);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6985);
				match(FORMAT_SYMBOL);
				setState(6986);
				match(OPEN_PAR_SYMBOL);
				setState(6987);
				expr(0);
				setState(6988);
				match(COMMA_SYMBOL);
				setState(6989);
				expr(0);
				setState(6992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6990);
					match(COMMA_SYMBOL);
					setState(6991);
					expr(0);
					}
				}

				setState(6994);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6996);
				match(MICROSECOND_SYMBOL);
				setState(6997);
				exprWithParentheses();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6998);
				match(MOD_SYMBOL);
				setState(6999);
				match(OPEN_PAR_SYMBOL);
				setState(7000);
				expr(0);
				setState(7001);
				match(COMMA_SYMBOL);
				setState(7002);
				expr(0);
				setState(7003);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(7005);
				if (!(this.isServerVersionLt80011())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				}
				setState(7006);
				match(PASSWORD_SYMBOL);
				setState(7007);
				exprWithParentheses();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(7008);
				match(QUARTER_SYMBOL);
				setState(7009);
				exprWithParentheses();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(7010);
				match(REPEAT_SYMBOL);
				setState(7011);
				match(OPEN_PAR_SYMBOL);
				setState(7012);
				expr(0);
				setState(7013);
				match(COMMA_SYMBOL);
				setState(7014);
				expr(0);
				setState(7015);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(7017);
				match(REPLACE_SYMBOL);
				setState(7018);
				match(OPEN_PAR_SYMBOL);
				setState(7019);
				expr(0);
				setState(7020);
				match(COMMA_SYMBOL);
				setState(7021);
				expr(0);
				setState(7022);
				match(COMMA_SYMBOL);
				setState(7023);
				expr(0);
				setState(7024);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(7026);
				match(REVERSE_SYMBOL);
				setState(7027);
				exprWithParentheses();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(7028);
				match(ROW_COUNT_SYMBOL);
				setState(7029);
				parentheses();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(7030);
				match(TRUNCATE_SYMBOL);
				setState(7031);
				match(OPEN_PAR_SYMBOL);
				setState(7032);
				expr(0);
				setState(7033);
				match(COMMA_SYMBOL);
				setState(7034);
				expr(0);
				setState(7035);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(7037);
				match(WEEK_SYMBOL);
				setState(7038);
				match(OPEN_PAR_SYMBOL);
				setState(7039);
				expr(0);
				setState(7042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(7040);
					match(COMMA_SYMBOL);
					setState(7041);
					expr(0);
					}
				}

				setState(7044);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(7046);
				match(WEIGHT_STRING_SYMBOL);
				setState(7047);
				match(OPEN_PAR_SYMBOL);
				setState(7048);
				expr(0);
				setState(7064);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					setState(7052);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS_SYMBOL) {
						{
						setState(7049);
						match(AS_SYMBOL);
						setState(7050);
						match(CHAR_SYMBOL);
						setState(7051);
						wsNumCodepoints();
						}
					}

					}
					break;
				case 2:
					{
					setState(7054);
					match(AS_SYMBOL);
					setState(7055);
					match(BINARY_SYMBOL);
					setState(7056);
					wsNumCodepoints();
					}
					break;
				case 3:
					{
					setState(7057);
					match(COMMA_SYMBOL);
					setState(7058);
					ulong_number();
					setState(7059);
					match(COMMA_SYMBOL);
					setState(7060);
					ulong_number();
					setState(7061);
					match(COMMA_SYMBOL);
					setState(7062);
					ulong_number();
					}
					break;
				}
				setState(7066);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(7068);
				geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturningTypeContext extends ParserRuleContext {
		public TerminalNode RETURNING_SYMBOL() { return getToken(MySQLParser.RETURNING_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public ReturningTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returningType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReturningType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReturningType(this);
			}
		}
	}

	public final ReturningTypeContext returningType() throws RecognitionException {
		ReturningTypeContext _localctx = new ReturningTypeContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_returningType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7071);
			match(RETURNING_SYMBOL);
			setState(7072);
			castType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeometryFunctionContext extends ParserRuleContext {
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_geometryFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGeometryFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGeometryFunction(this);
			}
		}
	}

	public final GeometryFunctionContext geometryFunction() throws RecognitionException {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_geometryFunction);
		try {
			setState(7097);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GEOMETRYCOLLECTION_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7074);
				match(GEOMETRYCOLLECTION_SYMBOL);
				setState(7075);
				match(OPEN_PAR_SYMBOL);
				setState(7077);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
				case 1:
					{
					setState(7076);
					exprList();
					}
					break;
				}
				setState(7079);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case LINESTRING_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7080);
				match(LINESTRING_SYMBOL);
				setState(7081);
				exprListWithParentheses();
				}
				break;
			case MULTILINESTRING_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7082);
				match(MULTILINESTRING_SYMBOL);
				setState(7083);
				exprListWithParentheses();
				}
				break;
			case MULTIPOINT_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7084);
				match(MULTIPOINT_SYMBOL);
				setState(7085);
				exprListWithParentheses();
				}
				break;
			case MULTIPOLYGON_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(7086);
				match(MULTIPOLYGON_SYMBOL);
				setState(7087);
				exprListWithParentheses();
				}
				break;
			case POINT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7088);
				match(POINT_SYMBOL);
				setState(7089);
				match(OPEN_PAR_SYMBOL);
				setState(7090);
				expr(0);
				setState(7091);
				match(COMMA_SYMBOL);
				setState(7092);
				expr(0);
				setState(7093);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case POLYGON_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(7095);
				match(POLYGON_SYMBOL);
				setState(7096);
				exprListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeFunctionParametersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FractionalPrecisionContext fractionalPrecision() {
			return getRuleContext(FractionalPrecisionContext.class,0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTimeFunctionParameters(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTimeFunctionParameters(this);
			}
		}
	}

	public final TimeFunctionParametersContext timeFunctionParameters() throws RecognitionException {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_timeFunctionParameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7099);
			match(OPEN_PAR_SYMBOL);
			setState(7101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INT_NUMBER) {
				{
				setState(7100);
				fractionalPrecision();
				}
			}

			setState(7103);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FractionalPrecisionContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fractionalPrecision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFractionalPrecision(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFractionalPrecision(this);
			}
		}
	}

	public final FractionalPrecisionContext fractionalPrecision() throws RecognitionException {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_fractionalPrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7105);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WeightStringLevelsContext extends ParserRuleContext {
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public List<WeightStringLevelListItemContext> weightStringLevelListItem() {
			return getRuleContexts(WeightStringLevelListItemContext.class);
		}
		public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return getRuleContext(WeightStringLevelListItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWeightStringLevels(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWeightStringLevels(this);
			}
		}
	}

	public final WeightStringLevelsContext weightStringLevels() throws RecognitionException {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_weightStringLevels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7107);
			match(LEVEL_SYMBOL);
			setState(7120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,837,_ctx) ) {
			case 1:
				{
				setState(7108);
				real_ulong_number();
				setState(7109);
				match(MINUS_OPERATOR);
				setState(7110);
				real_ulong_number();
				}
				break;
			case 2:
				{
				setState(7112);
				weightStringLevelListItem();
				setState(7117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7113);
					match(COMMA_SYMBOL);
					setState(7114);
					weightStringLevelListItem();
					}
					}
					setState(7119);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WeightStringLevelListItemContext extends ParserRuleContext {
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ASC_SYMBOL() { return getToken(MySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevelListItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWeightStringLevelListItem(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWeightStringLevelListItem(this);
			}
		}
	}

	public final WeightStringLevelListItemContext weightStringLevelListItem() throws RecognitionException {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_weightStringLevelListItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7122);
			real_ulong_number();
			setState(7128);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				setState(7123);
				_la = _input.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					setState(7124);
					match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				setState(7127);
				match(REVERSE_SYMBOL);
				}
				break;
			case EOF:
			case COMMA_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateTimeTtypeContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeTtype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDateTimeTtype(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDateTimeTtype(this);
			}
		}
	}

	public final DateTimeTtypeContext dateTimeTtype() throws RecognitionException {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_dateTimeTtype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7130);
			_la = _input.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimFunctionContext extends ParserRuleContext {
		public TerminalNode TRIM_SYMBOL() { return getToken(MySQLParser.TRIM_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEADING_SYMBOL() { return getToken(MySQLParser.LEADING_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode TRAILING_SYMBOL() { return getToken(MySQLParser.TRAILING_SYMBOL, 0); }
		public TerminalNode BOTH_SYMBOL() { return getToken(MySQLParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTrimFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTrimFunction(this);
			}
		}
	}

	public final TrimFunctionContext trimFunction() throws RecognitionException {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_trimFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7132);
			match(TRIM_SYMBOL);
			setState(7133);
			match(OPEN_PAR_SYMBOL);
			setState(7157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				setState(7134);
				expr(0);
				setState(7137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(7135);
					match(FROM_SYMBOL);
					setState(7136);
					expr(0);
					}
				}

				}
				break;
			case 2:
				{
				setState(7139);
				match(LEADING_SYMBOL);
				setState(7141);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
				case 1:
					{
					setState(7140);
					expr(0);
					}
					break;
				}
				setState(7143);
				match(FROM_SYMBOL);
				setState(7144);
				expr(0);
				}
				break;
			case 3:
				{
				setState(7145);
				match(TRAILING_SYMBOL);
				setState(7147);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
				case 1:
					{
					setState(7146);
					expr(0);
					}
					break;
				}
				setState(7149);
				match(FROM_SYMBOL);
				setState(7150);
				expr(0);
				}
				break;
			case 4:
				{
				setState(7151);
				match(BOTH_SYMBOL);
				setState(7153);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
				case 1:
					{
					setState(7152);
					expr(0);
					}
					break;
				}
				setState(7155);
				match(FROM_SYMBOL);
				setState(7156);
				expr(0);
				}
				break;
			}
			setState(7159);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubstringFunctionContext extends ParserRuleContext {
		public TerminalNode SUBSTRING_SYMBOL() { return getToken(MySQLParser.SUBSTRING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substringFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSubstringFunction(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSubstringFunction(this);
			}
		}
	}

	public final SubstringFunctionContext substringFunction() throws RecognitionException {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_substringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7161);
			match(SUBSTRING_SYMBOL);
			setState(7162);
			match(OPEN_PAR_SYMBOL);
			setState(7163);
			expr(0);
			setState(7176);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMA_SYMBOL:
				{
				setState(7164);
				match(COMMA_SYMBOL);
				setState(7165);
				expr(0);
				setState(7168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(7166);
					match(COMMA_SYMBOL);
					setState(7167);
					expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				setState(7170);
				match(FROM_SYMBOL);
				setState(7171);
				expr(0);
				setState(7174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(7172);
					match(FOR_SYMBOL);
					setState(7173);
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7178);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionCallContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public UdfExprListContext udfExprList() {
			return getRuleContext(UdfExprListContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFunctionCall(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFunctionCall(this);
			}
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_functionCall);
		try {
			setState(7194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7180);
				pureIdentifier();
				setState(7181);
				match(OPEN_PAR_SYMBOL);
				setState(7183);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
				case 1:
					{
					setState(7182);
					udfExprList();
					}
					break;
				}
				setState(7185);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7187);
				qualifiedIdentifier();
				setState(7188);
				match(OPEN_PAR_SYMBOL);
				setState(7190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
				case 1:
					{
					setState(7189);
					exprList();
					}
					break;
				}
				setState(7192);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UdfExprListContext extends ParserRuleContext {
		public List<UdfExprContext> udfExpr() {
			return getRuleContexts(UdfExprContext.class);
		}
		public UdfExprContext udfExpr(int i) {
			return getRuleContext(UdfExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUdfExprList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUdfExprList(this);
			}
		}
	}

	public final UdfExprListContext udfExprList() throws RecognitionException {
		UdfExprListContext _localctx = new UdfExprListContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_udfExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7196);
			udfExpr();
			setState(7201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7197);
				match(COMMA_SYMBOL);
				setState(7198);
				udfExpr();
				}
				}
				setState(7203);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UdfExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUdfExpr(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUdfExpr(this);
			}
		}
	}

	public final UdfExprContext udfExpr() throws RecognitionException {
		UdfExprContext _localctx = new UdfExprContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_udfExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7204);
			expr(0);
			setState(7206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
			case 1:
				{
				setState(7205);
				selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserVariableContext extends ParserRuleContext {
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUserVariable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUserVariable(this);
			}
		}
	}

	public final UserVariableContext userVariable() throws RecognitionException {
		UserVariableContext _localctx = new UserVariableContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_userVariable);
		try {
			setState(7211);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7208);
				match(AT_SIGN_SYMBOL);
				setState(7209);
				textOrIdentifier();
				}
				break;
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 2);
				{
				setState(7210);
				match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InExpressionUserVariableAssignmentContext extends ParserRuleContext {
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public TerminalNode ASSIGN_OPERATOR() { return getToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public InExpressionUserVariableAssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inExpressionUserVariableAssignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInExpressionUserVariableAssignment(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInExpressionUserVariableAssignment(this);
			}
		}
	}

	public final InExpressionUserVariableAssignmentContext inExpressionUserVariableAssignment() throws RecognitionException {
		InExpressionUserVariableAssignmentContext _localctx = new InExpressionUserVariableAssignmentContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_inExpressionUserVariableAssignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7213);
			userVariable();
			setState(7214);
			match(ASSIGN_OPERATOR);
			setState(7215);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RvalueSystemOrUserVariableContext extends ParserRuleContext {
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public RvalueSystemVariableContext rvalueSystemVariable() {
			return getRuleContext(RvalueSystemVariableContext.class,0);
		}
		public RvalueSystemVariableTypeContext rvalueSystemVariableType() {
			return getRuleContext(RvalueSystemVariableTypeContext.class,0);
		}
		public RvalueSystemOrUserVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rvalueSystemOrUserVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRvalueSystemOrUserVariable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRvalueSystemOrUserVariable(this);
			}
		}
	}

	public final RvalueSystemOrUserVariableContext rvalueSystemOrUserVariable() throws RecognitionException {
		RvalueSystemOrUserVariableContext _localctx = new RvalueSystemOrUserVariableContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_rvalueSystemOrUserVariable);
		try {
			setState(7223);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 1);
				{
				setState(7217);
				userVariable();
				}
				break;
			case AT_AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7218);
				match(AT_AT_SIGN_SYMBOL);
				setState(7220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
				case 1:
					{
					setState(7219);
					rvalueSystemVariableType();
					}
					break;
				}
				setState(7222);
				rvalueSystemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LvalueVariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LValueIdentifierContext lValueIdentifier() {
			return getRuleContext(LValueIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public LvalueVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lvalueVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLvalueVariable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLvalueVariable(this);
			}
		}
	}

	public final LvalueVariableContext lvalueVariable() throws RecognitionException {
		LvalueVariableContext _localctx = new LvalueVariableContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_lvalueVariable);
		int _la;
		try {
			setState(7238);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(7225);
					identifier();
					setState(7227);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(7226);
						dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					setState(7229);
					if (!(this.isServerVersionGe80017())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
					}
					setState(7230);
					lValueIdentifier();
					setState(7232);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(7231);
						dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7236);
				match(DEFAULT_SYMBOL);
				setState(7237);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RvalueSystemVariableContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public RvalueSystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rvalueSystemVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRvalueSystemVariable(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRvalueSystemVariable(this);
			}
		}
	}

	public final RvalueSystemVariableContext rvalueSystemVariable() throws RecognitionException {
		RvalueSystemVariableContext _localctx = new RvalueSystemVariableContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_rvalueSystemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7240);
			textOrIdentifier();
			setState(7242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				setState(7241);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenExpressionContext extends ParserRuleContext {
		public TerminalNode WHEN_SYMBOL() { return getToken(MySQLParser.WHEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWhenExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWhenExpression(this);
			}
		}
	}

	public final WhenExpressionContext whenExpression() throws RecognitionException {
		WhenExpressionContext _localctx = new WhenExpressionContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_whenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7244);
			match(WHEN_SYMBOL);
			setState(7245);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ThenExpressionContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MySQLParser.THEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterThenExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitThenExpression(this);
			}
		}
	}

	public final ThenExpressionContext thenExpression() throws RecognitionException {
		ThenExpressionContext _localctx = new ThenExpressionContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_thenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7247);
			match(THEN_SYMBOL);
			setState(7248);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElseExpressionContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterElseExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitElseExpression(this);
			}
		}
	}

	public final ElseExpressionContext elseExpression() throws RecognitionException {
		ElseExpressionContext _localctx = new ElseExpressionContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_elseExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7250);
			match(ELSE_SYMBOL);
			setState(7251);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode UNSIGNED_SYMBOL() { return getToken(MySQLParser.UNSIGNED_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public RealTypeContext realType() {
			return getRuleContext(RealTypeContext.class,0);
		}
		public TerminalNode FLOAT_SYMBOL() { return getToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public StandardFloatOptionsContext standardFloatOptions() {
			return getRuleContext(StandardFloatOptionsContext.class,0);
		}
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public CastTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCastType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCastType(this);
			}
		}
	}

	public final CastTypeContext castType() throws RecognitionException {
		CastTypeContext _localctx = new CastTypeContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_castType);
		int _la;
		try {
			setState(7301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7253);
				match(BINARY_SYMBOL);
				setState(7255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
				case 1:
					{
					setState(7254);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7257);
				match(CHAR_SYMBOL);
				setState(7259);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
				case 1:
					{
					setState(7258);
					fieldLength();
					}
					break;
				}
				setState(7262);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
				case 1:
					{
					setState(7261);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7264);
				nchar();
				setState(7266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
				case 1:
					{
					setState(7265);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7268);
				match(SIGNED_SYMBOL);
				setState(7270);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
				case 1:
					{
					setState(7269);
					match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7272);
				match(UNSIGNED_SYMBOL);
				setState(7274);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
				case 1:
					{
					setState(7273);
					match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7276);
				match(DATE_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7277);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(7278);
				match(YEAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7279);
				match(TIME_SYMBOL);
				setState(7281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					setState(7280);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7283);
				match(DATETIME_SYMBOL);
				setState(7285);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
				case 1:
					{
					setState(7284);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7287);
				match(DECIMAL_SYMBOL);
				setState(7289);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					setState(7288);
					floatOptions();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7291);
				match(JSON_SYMBOL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7292);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(7293);
				realType();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7294);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(7295);
				match(FLOAT_SYMBOL);
				setState(7297);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					setState(7296);
					standardFloatOptions();
					}
					break;
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7299);
				if (!(this.isServerVersionGe80027())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80027()");
				}
				setState(7300);
				_la = _input.LA(1);
				if ( !(_la==GEOMETRYCOLLECTION_SYMBOL || _la==LINESTRING_SYMBOL || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & 108086391056891911L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprListContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExprList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExprList(this);
			}
		}
	}

	public final ExprListContext exprList() throws RecognitionException {
		ExprListContext _localctx = new ExprListContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_exprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7303);
			expr(0);
			setState(7308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7304);
				match(COMMA_SYMBOL);
				setState(7305);
				expr(0);
				}
				}
				setState(7310);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharsetContext extends ParserRuleContext {
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCharset(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCharset(this);
			}
		}
	}

	public final CharsetContext charset() throws RecognitionException {
		CharsetContext _localctx = new CharsetContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_charset);
		try {
			setState(7314);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7311);
				match(CHAR_SYMBOL);
				setState(7312);
				match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7313);
				match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotRuleContext extends ParserRuleContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MySQLParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNotRule(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNotRule(this);
			}
		}
	}

	public final NotRuleContext notRule() throws RecognitionException {
		NotRuleContext _localctx = new NotRuleContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_notRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7316);
			_la = _input.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==NOT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Not2RuleContext extends ParserRuleContext {
		public TerminalNode LOGICAL_NOT_OPERATOR() { return getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MySQLParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not2Rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNot2Rule(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNot2Rule(this);
			}
		}
	}

	public final Not2RuleContext not2Rule() throws RecognitionException {
		Not2RuleContext _localctx = new Not2RuleContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_not2Rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7318);
			_la = _input.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalContext extends ParserRuleContext {
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode SECOND_MICROSECOND_SYMBOL() { return getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_MICROSECOND_SYMBOL() { return getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SECOND_SYMBOL() { return getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MICROSECOND_SYMBOL() { return getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
		public TerminalNode HOUR_SECOND_SYMBOL() { return getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MINUTE_SYMBOL() { return getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_MICROSECOND_SYMBOL() { return getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
		public TerminalNode DAY_SECOND_SYMBOL() { return getToken(MySQLParser.DAY_SECOND_SYMBOL, 0); }
		public TerminalNode DAY_MINUTE_SYMBOL() { return getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_HOUR_SYMBOL() { return getToken(MySQLParser.DAY_HOUR_SYMBOL, 0); }
		public TerminalNode YEAR_MONTH_SYMBOL() { return getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInterval(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInterval(this);
			}
		}
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_interval);
		int _la;
		try {
			setState(7322);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7320);
				intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7321);
				_la = _input.LA(1);
				if ( !(((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & 15L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & 7L) != 0) || _la==MINUTE_MICROSECOND_SYMBOL || _la==MINUTE_SECOND_SYMBOL || _la==SECOND_MICROSECOND_SYMBOL || _la==YEAR_MONTH_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalTimeStampContext extends ParserRuleContext {
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTimeStamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIntervalTimeStamp(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIntervalTimeStamp(this);
			}
		}
	}

	public final IntervalTimeStampContext intervalTimeStamp() throws RecognitionException {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_intervalTimeStamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7324);
			_la = _input.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & 4129L) != 0) || _la==QUARTER_SYMBOL || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprListWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExprListWithParentheses(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExprListWithParentheses(this);
			}
		}
	}

	public final ExprListWithParenthesesContext exprListWithParentheses() throws RecognitionException {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_exprListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7326);
			match(OPEN_PAR_SYMBOL);
			setState(7327);
			exprList();
			setState(7328);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterExprWithParentheses(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitExprWithParentheses(this);
			}
		}
	}

	public final ExprWithParenthesesContext exprWithParentheses() throws RecognitionException {
		ExprWithParenthesesContext _localctx = new ExprWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_exprWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7330);
			match(OPEN_PAR_SYMBOL);
			setState(7331);
			expr(0);
			setState(7332);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleExprWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExprWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleExprWithParentheses(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleExprWithParentheses(this);
			}
		}
	}

	public final SimpleExprWithParenthesesContext simpleExprWithParentheses() throws RecognitionException {
		SimpleExprWithParenthesesContext _localctx = new SimpleExprWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_simpleExprWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7334);
			match(OPEN_PAR_SYMBOL);
			setState(7335);
			simpleExpr(0);
			setState(7336);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderListContext extends ParserRuleContext {
		public List<OrderExpressionContext> orderExpression() {
			return getRuleContexts(OrderExpressionContext.class);
		}
		public OrderExpressionContext orderExpression(int i) {
			return getRuleContext(OrderExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOrderList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOrderList(this);
			}
		}
	}

	public final OrderListContext orderList() throws RecognitionException {
		OrderListContext _localctx = new OrderListContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_orderList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7338);
			orderExpression();
			setState(7343);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,875,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7339);
					match(COMMA_SYMBOL);
					setState(7340);
					orderExpression();
					}
					}
				}
				setState(7345);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,875,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOrderExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOrderExpression(this);
			}
		}
	}

	public final OrderExpressionContext orderExpression() throws RecognitionException {
		OrderExpressionContext _localctx = new OrderExpressionContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_orderExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7346);
			expr(0);
			setState(7348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
			case 1:
				{
				setState(7347);
				direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupListContext extends ParserRuleContext {
		public List<GroupingExpressionContext> groupingExpression() {
			return getRuleContexts(GroupingExpressionContext.class);
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return getRuleContext(GroupingExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GroupListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupList(this);
			}
		}
	}

	public final GroupListContext groupList() throws RecognitionException {
		GroupListContext _localctx = new GroupListContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_groupList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7350);
			groupingExpression();
			setState(7355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7351);
				match(COMMA_SYMBOL);
				setState(7352);
				groupingExpression();
				}
				}
				setState(7357);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGroupingExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGroupingExpression(this);
			}
		}
	}

	public final GroupingExpressionContext groupingExpression() throws RecognitionException {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_groupingExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7358);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChannelContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterChannel(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitChannel(this);
			}
		}
	}

	public final ChannelContext channel() throws RecognitionException {
		ChannelContext _localctx = new ChannelContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_channel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7360);
			match(FOR_SYMBOL);
			setState(7361);
			match(CHANNEL_SYMBOL);
			setState(7362);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompoundStatementContext extends ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public LabeledBlockContext labeledBlock() {
			return getRuleContext(LabeledBlockContext.class,0);
		}
		public UnlabeledBlockContext unlabeledBlock() {
			return getRuleContext(UnlabeledBlockContext.class,0);
		}
		public LabeledControlContext labeledControl() {
			return getRuleContext(LabeledControlContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public CursorOpenContext cursorOpen() {
			return getRuleContext(CursorOpenContext.class,0);
		}
		public CursorFetchContext cursorFetch() {
			return getRuleContext(CursorFetchContext.class,0);
		}
		public CursorCloseContext cursorClose() {
			return getRuleContext(CursorCloseContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCompoundStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCompoundStatement(this);
			}
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_compoundStatement);
		try {
			setState(7377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7364);
				simpleStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7365);
				returnStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7366);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7367);
				caseStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7368);
				labeledBlock();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7369);
				unlabeledBlock();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7370);
				labeledControl();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7371);
				unlabeledControl();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7372);
				leaveStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7373);
				iterateStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7374);
				cursorOpen();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7375);
				cursorFetch();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7376);
				cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN_SYMBOL() { return getToken(MySQLParser.RETURN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReturnStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReturnStatement(this);
			}
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7379);
			match(RETURN_SYMBOL);
			setState(7380);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfStatementContext extends ParserRuleContext {
		public List<TerminalNode> IF_SYMBOL() { return getTokens(MySQLParser.IF_SYMBOL); }
		public TerminalNode IF_SYMBOL(int i) {
			return getToken(MySQLParser.IF_SYMBOL, i);
		}
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIfStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIfStatement(this);
			}
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_ifStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7382);
			match(IF_SYMBOL);
			setState(7383);
			ifBody();
			setState(7384);
			match(END_SYMBOL);
			setState(7385);
			match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfBodyContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenStatementContext thenStatement() {
			return getRuleContext(ThenStatementContext.class,0);
		}
		public TerminalNode ELSEIF_SYMBOL() { return getToken(MySQLParser.ELSEIF_SYMBOL, 0); }
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIfBody(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIfBody(this);
			}
		}
	}

	public final IfBodyContext ifBody() throws RecognitionException {
		IfBodyContext _localctx = new IfBodyContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_ifBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7387);
			expr(0);
			setState(7388);
			thenStatement();
			setState(7393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				setState(7389);
				match(ELSEIF_SYMBOL);
				setState(7390);
				ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				setState(7391);
				match(ELSE_SYMBOL);
				setState(7392);
				compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ThenStatementContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MySQLParser.THEN_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterThenStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitThenStatement(this);
			}
		}
	}

	public final ThenStatementContext thenStatement() throws RecognitionException {
		ThenStatementContext _localctx = new ThenStatementContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_thenStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7395);
			match(THEN_SYMBOL);
			setState(7396);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompoundStatementListContext extends ParserRuleContext {
		public List<CompoundStatementContext> compoundStatement() {
			return getRuleContexts(CompoundStatementContext.class);
		}
		public CompoundStatementContext compoundStatement(int i) {
			return getRuleContext(CompoundStatementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCompoundStatementList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCompoundStatementList(this);
			}
		}
	}

	public final CompoundStatementListContext compoundStatementList() throws RecognitionException {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_compoundStatementList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7401);
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7398);
					compoundStatement();
					setState(7399);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7403);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,880,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE_SYMBOL() { return getTokens(MySQLParser.CASE_SYMBOL); }
		public TerminalNode CASE_SYMBOL(int i) {
			return getToken(MySQLParser.CASE_SYMBOL, i);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenStatementContext> thenStatement() {
			return getRuleContexts(ThenStatementContext.class);
		}
		public ThenStatementContext thenStatement(int i) {
			return getRuleContext(ThenStatementContext.class,i);
		}
		public ElseStatementContext elseStatement() {
			return getRuleContext(ElseStatementContext.class,0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCaseStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCaseStatement(this);
			}
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_caseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7405);
			match(CASE_SYMBOL);
			setState(7407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				setState(7406);
				expr(0);
				}
				break;
			}
			setState(7412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7409);
				whenExpression();
				setState(7410);
				thenStatement();
				}
				}
				setState(7414);
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN_SYMBOL );
			setState(7417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				setState(7416);
				elseStatement();
				}
			}

			setState(7419);
			match(END_SYMBOL);
			setState(7420);
			match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElseStatementContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterElseStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitElseStatement(this);
			}
		}
	}

	public final ElseStatementContext elseStatement() throws RecognitionException {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_elseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7422);
			match(ELSE_SYMBOL);
			setState(7423);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabeledBlockContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLabeledBlock(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLabeledBlock(this);
			}
		}
	}

	public final LabeledBlockContext labeledBlock() throws RecognitionException {
		LabeledBlockContext _localctx = new LabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_labeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7425);
			label();
			setState(7426);
			beginEndBlock();
			setState(7428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,884,_ctx) ) {
			case 1:
				{
				setState(7427);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnlabeledBlockContext extends ParserRuleContext {
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUnlabeledBlock(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUnlabeledBlock(this);
			}
		}
	}

	public final UnlabeledBlockContext unlabeledBlock() throws RecognitionException {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_unlabeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7430);
			beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public TerminalNode COLON_SYMBOL() { return getToken(MySQLParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLabel(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLabel(this);
			}
		}
	}

	public final LabelContext label() throws RecognitionException {
		LabelContext _localctx = new LabelContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_label);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7432);
			labelIdentifier();
			setState(7433);
			match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BeginEndBlockContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public SpDeclarationsContext spDeclarations() {
			return getRuleContext(SpDeclarationsContext.class,0);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginEndBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterBeginEndBlock(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitBeginEndBlock(this);
			}
		}
	}

	public final BeginEndBlockContext beginEndBlock() throws RecognitionException {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_beginEndBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7435);
			match(BEGIN_SYMBOL);
			setState(7437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
			case 1:
				{
				setState(7436);
				spDeclarations();
				}
				break;
			}
			setState(7440);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,886,_ctx) ) {
			case 1:
				{
				setState(7439);
				compoundStatementList();
				}
				break;
			}
			setState(7442);
			match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabeledControlContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledControl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLabeledControl(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLabeledControl(this);
			}
		}
	}

	public final LabeledControlContext labeledControl() throws RecognitionException {
		LabeledControlContext _localctx = new LabeledControlContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_labeledControl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7444);
			label();
			setState(7445);
			unlabeledControl();
			setState(7447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				{
				setState(7446);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnlabeledControlContext extends ParserRuleContext {
		public LoopBlockContext loopBlock() {
			return getRuleContext(LoopBlockContext.class,0);
		}
		public WhileDoBlockContext whileDoBlock() {
			return getRuleContext(WhileDoBlockContext.class,0);
		}
		public RepeatUntilBlockContext repeatUntilBlock() {
			return getRuleContext(RepeatUntilBlockContext.class,0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledControl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUnlabeledControl(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUnlabeledControl(this);
			}
		}
	}

	public final UnlabeledControlContext unlabeledControl() throws RecognitionException {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_unlabeledControl);
		try {
			setState(7452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7449);
				loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7450);
				whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7451);
				repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoopBlockContext extends ParserRuleContext {
		public List<TerminalNode> LOOP_SYMBOL() { return getTokens(MySQLParser.LOOP_SYMBOL); }
		public TerminalNode LOOP_SYMBOL(int i) {
			return getToken(MySQLParser.LOOP_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLoopBlock(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLoopBlock(this);
			}
		}
	}

	public final LoopBlockContext loopBlock() throws RecognitionException {
		LoopBlockContext _localctx = new LoopBlockContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_loopBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7454);
			match(LOOP_SYMBOL);
			setState(7455);
			compoundStatementList();
			setState(7456);
			match(END_SYMBOL);
			setState(7457);
			match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhileDoBlockContext extends ParserRuleContext {
		public List<TerminalNode> WHILE_SYMBOL() { return getTokens(MySQLParser.WHILE_SYMBOL); }
		public TerminalNode WHILE_SYMBOL(int i) {
			return getToken(MySQLParser.WHILE_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileDoBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWhileDoBlock(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWhileDoBlock(this);
			}
		}
	}

	public final WhileDoBlockContext whileDoBlock() throws RecognitionException {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_whileDoBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7459);
			match(WHILE_SYMBOL);
			setState(7460);
			expr(0);
			setState(7461);
			match(DO_SYMBOL);
			setState(7462);
			compoundStatementList();
			setState(7463);
			match(END_SYMBOL);
			setState(7464);
			match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RepeatUntilBlockContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT_SYMBOL() { return getTokens(MySQLParser.REPEAT_SYMBOL); }
		public TerminalNode REPEAT_SYMBOL(int i) {
			return getToken(MySQLParser.REPEAT_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatUntilBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRepeatUntilBlock(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRepeatUntilBlock(this);
			}
		}
	}

	public final RepeatUntilBlockContext repeatUntilBlock() throws RecognitionException {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_repeatUntilBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7466);
			match(REPEAT_SYMBOL);
			setState(7467);
			compoundStatementList();
			setState(7468);
			match(UNTIL_SYMBOL);
			setState(7469);
			expr(0);
			setState(7470);
			match(END_SYMBOL);
			setState(7471);
			match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SpDeclarationsContext extends ParserRuleContext {
		public List<SpDeclarationContext> spDeclaration() {
			return getRuleContexts(SpDeclarationContext.class);
		}
		public SpDeclarationContext spDeclaration(int i) {
			return getRuleContext(SpDeclarationContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSpDeclarations(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSpDeclarations(this);
			}
		}
	}

	public final SpDeclarationsContext spDeclarations() throws RecognitionException {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_spDeclarations);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7476);
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7473);
					spDeclaration();
					setState(7474);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7478);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,889,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SpDeclarationContext extends ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return getRuleContext(VariableDeclarationContext.class,0);
		}
		public ConditionDeclarationContext conditionDeclaration() {
			return getRuleContext(ConditionDeclarationContext.class,0);
		}
		public HandlerDeclarationContext handlerDeclaration() {
			return getRuleContext(HandlerDeclarationContext.class,0);
		}
		public CursorDeclarationContext cursorDeclaration() {
			return getRuleContext(CursorDeclarationContext.class,0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSpDeclaration(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSpDeclaration(this);
			}
		}
	}

	public final SpDeclarationContext spDeclaration() throws RecognitionException {
		SpDeclarationContext _localctx = new SpDeclarationContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_spDeclaration);
		try {
			setState(7484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7480);
				variableDeclaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7481);
				conditionDeclaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7482);
				handlerDeclaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7483);
				cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterVariableDeclaration(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitVariableDeclaration(this);
			}
		}
	}

	public final VariableDeclarationContext variableDeclaration() throws RecognitionException {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_variableDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7486);
			match(DECLARE_SYMBOL);
			setState(7487);
			identifierList();
			setState(7488);
			dataType();
			setState(7490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				setState(7489);
				collate();
				}
			}

			setState(7494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7492);
				match(DEFAULT_SYMBOL);
				setState(7493);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConditionDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterConditionDeclaration(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitConditionDeclaration(this);
			}
		}
	}

	public final ConditionDeclarationContext conditionDeclaration() throws RecognitionException {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_conditionDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7496);
			match(DECLARE_SYMBOL);
			setState(7497);
			identifier();
			setState(7498);
			match(CONDITION_SYMBOL);
			setState(7499);
			match(FOR_SYMBOL);
			setState(7500);
			spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SpConditionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSpCondition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSpCondition(this);
			}
		}
	}

	public final SpConditionContext spCondition() throws RecognitionException {
		SpConditionContext _localctx = new SpConditionContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_spCondition);
		try {
			setState(7504);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7502);
				ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7503);
				sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlstateContext extends ParserRuleContext {
		public TerminalNode SQLSTATE_SYMBOL() { return getToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlstate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSqlstate(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSqlstate(this);
			}
		}
	}

	public final SqlstateContext sqlstate() throws RecognitionException {
		SqlstateContext _localctx = new SqlstateContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_sqlstate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7506);
			match(SQLSTATE_SYMBOL);
			setState(7508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
			case 1:
				{
				setState(7507);
				match(VALUE_SYMBOL);
				}
				break;
			}
			setState(7510);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public List<HandlerConditionContext> handlerCondition() {
			return getRuleContexts(HandlerConditionContext.class);
		}
		public HandlerConditionContext handlerCondition(int i) {
			return getRuleContext(HandlerConditionContext.class,i);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode CONTINUE_SYMBOL() { return getToken(MySQLParser.CONTINUE_SYMBOL, 0); }
		public TerminalNode EXIT_SYMBOL() { return getToken(MySQLParser.EXIT_SYMBOL, 0); }
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHandlerDeclaration(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHandlerDeclaration(this);
			}
		}
	}

	public final HandlerDeclarationContext handlerDeclaration() throws RecognitionException {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7512);
			match(DECLARE_SYMBOL);
			setState(7513);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7514);
			match(HANDLER_SYMBOL);
			setState(7515);
			match(FOR_SYMBOL);
			setState(7516);
			handlerCondition();
			setState(7521);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,895,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7517);
					match(COMMA_SYMBOL);
					setState(7518);
					handlerCondition();
					}
					}
				}
				setState(7523);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,895,_ctx);
			}
			setState(7524);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerConditionContext extends ParserRuleContext {
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLWARNING_SYMBOL() { return getToken(MySQLParser.SQLWARNING_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode SQLEXCEPTION_SYMBOL() { return getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterHandlerCondition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitHandlerCondition(this);
			}
		}
	}

	public final HandlerConditionContext handlerCondition() throws RecognitionException {
		HandlerConditionContext _localctx = new HandlerConditionContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_handlerCondition);
		try {
			setState(7533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7526);
				spCondition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7527);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7528);
				match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7529);
				notRule();
				setState(7530);
				match(FOUND_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7532);
				match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURSOR_SYMBOL() { return getToken(MySQLParser.CURSOR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCursorDeclaration(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCursorDeclaration(this);
			}
		}
	}

	public final CursorDeclarationContext cursorDeclaration() throws RecognitionException {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_cursorDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7535);
			match(DECLARE_SYMBOL);
			setState(7536);
			identifier();
			setState(7537);
			match(CURSOR_SYMBOL);
			setState(7538);
			match(FOR_SYMBOL);
			setState(7539);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE_SYMBOL() { return getToken(MySQLParser.ITERATE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIterateStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIterateStatement(this);
			}
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7541);
			match(ITERATE_SYMBOL);
			setState(7542);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE_SYMBOL() { return getToken(MySQLParser.LEAVE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLeaveStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLeaveStatement(this);
			}
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7544);
			match(LEAVE_SYMBOL);
			setState(7545);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GetDiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET_SYMBOL() { return getToken(MySQLParser.GET_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public List<StatementInformationItemContext> statementInformationItem() {
			return getRuleContexts(StatementInformationItemContext.class);
		}
		public StatementInformationItemContext statementInformationItem(int i) {
			return getRuleContext(StatementInformationItemContext.class,i);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public List<ConditionInformationItemContext> conditionInformationItem() {
			return getRuleContexts(ConditionInformationItemContext.class);
		}
		public ConditionInformationItemContext conditionInformationItem(int i) {
			return getRuleContext(ConditionInformationItemContext.class,i);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getDiagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGetDiagnosticsStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGetDiagnosticsStatement(this);
			}
		}
	}

	public final GetDiagnosticsStatementContext getDiagnosticsStatement() throws RecognitionException {
		GetDiagnosticsStatementContext _localctx = new GetDiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_getDiagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7547);
			match(GET_SYMBOL);
			setState(7549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT_SYMBOL || _la==STACKED_SYMBOL) {
				{
				setState(7548);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_SYMBOL || _la==STACKED_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7551);
			match(DIAGNOSTICS_SYMBOL);
			setState(7570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
			case 1:
				{
				setState(7552);
				statementInformationItem();
				setState(7557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7553);
					match(COMMA_SYMBOL);
					setState(7554);
					statementInformationItem();
					}
					}
					setState(7559);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(7560);
				match(CONDITION_SYMBOL);
				setState(7561);
				signalAllowedExpr();
				setState(7562);
				conditionInformationItem();
				setState(7567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7563);
					match(COMMA_SYMBOL);
					setState(7564);
					conditionInformationItem();
					}
					}
					setState(7569);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignalAllowedExprContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public RvalueSystemOrUserVariableContext rvalueSystemOrUserVariable() {
			return getRuleContext(RvalueSystemOrUserVariableContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalAllowedExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSignalAllowedExpr(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSignalAllowedExpr(this);
			}
		}
	}

	public final SignalAllowedExprContext signalAllowedExpr() throws RecognitionException {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_signalAllowedExpr);
		try {
			setState(7575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7572);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7573);
				rvalueSystemOrUserVariable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7574);
				qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementInformationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStatementInformationItem(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStatementInformationItem(this);
			}
		}
	}

	public final StatementInformationItemContext statementInformationItem() throws RecognitionException {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_statementInformationItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,902,_ctx) ) {
			case 1:
				{
				setState(7577);
				userVariable();
				}
				break;
			case 2:
				{
				setState(7578);
				identifier();
				}
				break;
			}
			setState(7581);
			match(EQUAL_OPERATOR);
			setState(7582);
			_la = _input.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConditionInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionInformationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterConditionInformationItem(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitConditionInformationItem(this);
			}
		}
	}

	public final ConditionInformationItemContext conditionInformationItem() throws RecognitionException {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_conditionInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
			case 1:
				{
				setState(7584);
				userVariable();
				}
				break;
			case 2:
				{
				setState(7585);
				identifier();
				}
				break;
			}
			setState(7588);
			match(EQUAL_OPERATOR);
			setState(7591);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				setState(7589);
				signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				setState(7590);
				match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignalInformationItemNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItemName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSignalInformationItemName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSignalInformationItemName(this);
			}
		}
	}

	public final SignalInformationItemNameContext signalInformationItemName() throws RecognitionException {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_signalInformationItemName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7593);
			_la = _input.LA(1);
			if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 2251859943752705L) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MYSQL_ERRNO_SYMBOL || _la==SCHEMA_NAME_SYMBOL || _la==SUBCLASS_ORIGIN_SYMBOL || _la==TABLE_NAME_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL_SYMBOL() { return getToken(MySQLParser.SIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSignalStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSignalStatement(this);
			}
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7595);
			match(SIGNAL_SYMBOL);
			setState(7598);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
			case 1:
				{
				setState(7596);
				identifier();
				}
				break;
			case 2:
				{
				setState(7597);
				sqlstate();
				}
				break;
			}
			setState(7609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(7600);
				match(SET_SYMBOL);
				setState(7601);
				signalInformationItem();
				setState(7606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7602);
					match(COMMA_SYMBOL);
					setState(7603);
					signalInformationItem();
					}
					}
					setState(7608);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL_SYMBOL() { return getToken(MySQLParser.RESIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterResignalStatement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitResignalStatement(this);
			}
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7611);
			match(RESIGNAL_SYMBOL);
			setState(7614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,908,_ctx) ) {
			case 1:
				{
				setState(7612);
				identifier();
				}
				break;
			case 2:
				{
				setState(7613);
				sqlstate();
				}
				break;
			}
			setState(7625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(7616);
				match(SET_SYMBOL);
				setState(7617);
				signalInformationItem();
				setState(7622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7618);
					match(COMMA_SYMBOL);
					setState(7619);
					signalInformationItem();
					}
					}
					setState(7624);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignalInformationItemContext extends ParserRuleContext {
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSignalInformationItem(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSignalInformationItem(this);
			}
		}
	}

	public final SignalInformationItemContext signalInformationItem() throws RecognitionException {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_signalInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7627);
			signalInformationItemName();
			setState(7628);
			match(EQUAL_OPERATOR);
			setState(7629);
			signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorOpenContext extends ParserRuleContext {
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOpen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCursorOpen(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCursorOpen(this);
			}
		}
	}

	public final CursorOpenContext cursorOpen() throws RecognitionException {
		CursorOpenContext _localctx = new CursorOpenContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_cursorOpen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7631);
			match(OPEN_SYMBOL);
			setState(7632);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorCloseContext extends ParserRuleContext {
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorClose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCursorClose(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCursorClose(this);
			}
		}
	}

	public final CursorCloseContext cursorClose() throws RecognitionException {
		CursorCloseContext _localctx = new CursorCloseContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_cursorClose);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7634);
			match(CLOSE_SYMBOL);
			setState(7635);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorFetchContext extends ParserRuleContext {
		public TerminalNode FETCH_SYMBOL() { return getToken(MySQLParser.FETCH_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorFetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCursorFetch(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCursorFetch(this);
			}
		}
	}

	public final CursorFetchContext cursorFetch() throws RecognitionException {
		CursorFetchContext _localctx = new CursorFetchContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_cursorFetch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7637);
			match(FETCH_SYMBOL);
			setState(7642);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
			case 1:
				{
				setState(7639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NEXT_SYMBOL) {
					{
					setState(7638);
					match(NEXT_SYMBOL);
					}
				}

				setState(7641);
				match(FROM_SYMBOL);
				}
				break;
			}
			setState(7644);
			identifier();
			setState(7645);
			match(INTO_SYMBOL);
			setState(7646);
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ScheduleContext extends ParserRuleContext {
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schedule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSchedule(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSchedule(this);
			}
		}
	}

	public final ScheduleContext schedule() throws RecognitionException {
		ScheduleContext _localctx = new ScheduleContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_schedule);
		int _la;
		try {
			setState(7661);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7648);
				match(AT_SYMBOL);
				setState(7649);
				expr(0);
				}
				break;
			case EVERY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7650);
				match(EVERY_SYMBOL);
				setState(7651);
				expr(0);
				setState(7652);
				interval();
				setState(7655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS_SYMBOL) {
					{
					setState(7653);
					match(STARTS_SYMBOL);
					setState(7654);
					expr(0);
					}
				}

				setState(7659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS_SYMBOL) {
					{
					setState(7657);
					match(ENDS_SYMBOL);
					setState(7658);
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterColumnDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitColumnDefinition(this);
			}
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_columnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7663);
			columnName();
			setState(7664);
			fieldDefinition();
			setState(7666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				{
				setState(7665);
				checkOrReferences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckOrReferencesContext extends ParserRuleContext {
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOrReferences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCheckOrReferences(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCheckOrReferences(this);
			}
		}
	}

	public final CheckOrReferencesContext checkOrReferences() throws RecognitionException {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_checkOrReferences);
		try {
			setState(7671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7668);
				if (!(this.isServerVersionLt80016())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80016()");
				}
				setState(7669);
				checkConstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7670);
				references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCheckConstraint(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCheckConstraint(this);
			}
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_checkConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7673);
			match(CHECK_SYMBOL);
			setState(7674);
			exprWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintEnforcementContext extends ParserRuleContext {
		public TerminalNode ENFORCED_SYMBOL() { return getToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public ConstraintEnforcementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintEnforcement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterConstraintEnforcement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitConstraintEnforcement(this);
			}
		}
	}

	public final ConstraintEnforcementContext constraintEnforcement() throws RecognitionException {
		ConstraintEnforcementContext _localctx = new ConstraintEnforcementContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_constraintEnforcement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7676);
			if (!(this.isServerVersionGe80017())) {
				throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
			}
			setState(7678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT_SYMBOL) {
				{
				setState(7677);
				match(NOT_SYMBOL);
				}
			}

			setState(7680);
			match(ENFORCED_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableConstraintDefContext extends ParserRuleContext {
		public Token type;
		public KeyListWithExpressionContext keyListWithExpression() {
			return getRuleContext(KeyListWithExpressionContext.class,0);
		}
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameAndTypeContext indexNameAndType() {
			return getRuleContext(IndexNameAndTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public KeyListContext keyList() {
			return getRuleContext(KeyListContext.class,0);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableConstraintDef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableConstraintDef(this);
			}
		}
	}

	public final TableConstraintDefContext tableConstraintDef() throws RecognitionException {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			setState(7756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7682);
				_localctx.type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					_localctx.type = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7684);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,919,_ctx) ) {
				case 1:
					{
					setState(7683);
					indexNameAndType();
					}
					break;
				}
				setState(7686);
				keyListWithExpression();
				setState(7690);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,920,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7687);
						indexOption();
						}
						}
					}
					setState(7692);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,920,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7693);
				_localctx.type = match(FULLTEXT_SYMBOL);
				setState(7695);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
				case 1:
					{
					setState(7694);
					keyOrIndex();
					}
					break;
				}
				setState(7698);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,922,_ctx) ) {
				case 1:
					{
					setState(7697);
					indexName();
					}
					break;
				}
				setState(7700);
				keyListWithExpression();
				setState(7704);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,923,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7701);
						fulltextIndexOption();
						}
						}
					}
					setState(7706);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,923,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7707);
				_localctx.type = match(SPATIAL_SYMBOL);
				setState(7709);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					setState(7708);
					keyOrIndex();
					}
					break;
				}
				setState(7712);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
				case 1:
					{
					setState(7711);
					indexName();
					}
					break;
				}
				setState(7714);
				keyListWithExpression();
				setState(7718);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,926,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7715);
						spatialIndexOption();
						}
						}
					}
					setState(7720);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,926,_ctx);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					setState(7721);
					constraintName();
					}
				}

				setState(7754);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY_SYMBOL:
				case UNIQUE_SYMBOL:
					{
					setState(7730);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIMARY_SYMBOL:
						{
						setState(7724);
						_localctx.type = match(PRIMARY_SYMBOL);
						setState(7725);
						match(KEY_SYMBOL);
						}
						break;
					case UNIQUE_SYMBOL:
						{
						setState(7726);
						_localctx.type = match(UNIQUE_SYMBOL);
						setState(7728);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
						case 1:
							{
							setState(7727);
							keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7733);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
					case 1:
						{
						setState(7732);
						indexNameAndType();
						}
						break;
					}
					setState(7735);
					keyListWithExpression();
					setState(7739);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,931,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(7736);
							indexOption();
							}
							}
						}
						setState(7741);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,931,_ctx);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					setState(7742);
					_localctx.type = match(FOREIGN_SYMBOL);
					setState(7743);
					match(KEY_SYMBOL);
					setState(7745);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
					case 1:
						{
						setState(7744);
						indexName();
						}
						break;
					}
					setState(7747);
					keyList();
					setState(7748);
					references();
					}
					break;
				case CHECK_SYMBOL:
					{
					setState(7750);
					checkConstraint();
					setState(7752);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
					case 1:
						{
						setState(7751);
						constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintNameContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterConstraintName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitConstraintName(this);
			}
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7758);
			match(CONSTRAINT_SYMBOL);
			setState(7760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
			case 1:
				{
				setState(7759);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public List<ColumnAttributeContext> columnAttribute() {
			return getRuleContexts(ColumnAttributeContext.class);
		}
		public ColumnAttributeContext columnAttribute(int i) {
			return getRuleContext(ColumnAttributeContext.class,i);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode GENERATED_SYMBOL() { return getToken(MySQLParser.GENERATED_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode VIRTUAL_SYMBOL() { return getToken(MySQLParser.VIRTUAL_SYMBOL, 0); }
		public TerminalNode STORED_SYMBOL() { return getToken(MySQLParser.STORED_SYMBOL, 0); }
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFieldDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFieldDefinition(this);
			}
		}
	}

	public final FieldDefinitionContext fieldDefinition() throws RecognitionException {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7762);
			dataType();
			setState(7787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
			case 1:
				{
				setState(7766);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,937,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7763);
						columnAttribute();
						}
						}
					}
					setState(7768);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,937,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(7770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					setState(7769);
					collate();
					}
				}

				setState(7774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					setState(7772);
					match(GENERATED_SYMBOL);
					setState(7773);
					match(ALWAYS_SYMBOL);
					}
				}

				setState(7776);
				match(AS_SYMBOL);
				setState(7777);
				exprWithParentheses();
				setState(7779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					setState(7778);
					_la = _input.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7784);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,941,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7781);
						columnAttribute();
						}
						}
					}
					setState(7786);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,941,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnAttributeContext extends ParserRuleContext {
		public Token value;
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public NowOrSignedLiteralContext nowOrSignedLiteral() {
			return getRuleContext(NowOrSignedLiteralContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode NOW_SYMBOL() { return getToken(MySQLParser.NOW_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public ColumnFormatContext columnFormat() {
			return getRuleContext(ColumnFormatContext.class,0);
		}
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public StorageMediaContext storageMedia() {
			return getRuleContext(StorageMediaContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public JsonAttributeContext jsonAttribute() {
			return getRuleContext(JsonAttributeContext.class,0);
		}
		public TerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterColumnAttribute(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitColumnAttribute(this);
			}
		}
	}

	public final ColumnAttributeContext columnAttribute() throws RecognitionException {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_columnAttribute);
		int _la;
		try {
			setState(7850);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(7789);
					match(NOT_SYMBOL);
					}
				}

				setState(7792);
				nullLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7793);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(7794);
				match(NOT_SYMBOL);
				setState(7795);
				match(SECONDARY_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7796);
				_localctx.value = match(DEFAULT_SYMBOL);
				setState(7800);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
				case 1:
					{
					setState(7797);
					nowOrSignedLiteral();
					}
					break;
				case 2:
					{
					setState(7798);
					if (!(this.isServerVersionGe80013())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80013()");
					}
					setState(7799);
					exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7802);
				_localctx.value = match(ON_SYMBOL);
				setState(7803);
				match(UPDATE_SYMBOL);
				setState(7804);
				match(NOW_SYMBOL);
				setState(7806);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,945,_ctx) ) {
				case 1:
					{
					setState(7805);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7808);
				_localctx.value = match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7809);
				_localctx.value = match(SERIAL_SYMBOL);
				setState(7810);
				match(DEFAULT_SYMBOL);
				setState(7811);
				match(VALUE_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(7812);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(7815);
				_localctx.value = match(KEY_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7816);
				_localctx.value = match(UNIQUE_SYMBOL);
				setState(7818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,947,_ctx) ) {
				case 1:
					{
					setState(7817);
					match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7820);
				_localctx.value = match(COMMENT_SYMBOL);
				setState(7821);
				textLiteral();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7822);
				collate();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7823);
				_localctx.value = match(COLUMN_FORMAT_SYMBOL);
				setState(7824);
				columnFormat();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7825);
				_localctx.value = match(STORAGE_SYMBOL);
				setState(7826);
				storageMedia();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7827);
				_localctx.value = match(SRID_SYMBOL);
				setState(7828);
				real_ulonglong_number();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7829);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(7831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					setState(7830);
					constraintName();
					}
				}

				setState(7833);
				checkConstraint();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7834);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(7835);
				constraintEnforcement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7836);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(7837);
				_localctx.value = match(ENGINE_ATTRIBUTE_SYMBOL);
				setState(7839);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
				case 1:
					{
					setState(7838);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7841);
				jsonAttribute();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7842);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(7843);
				_localctx.value = match(SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
				setState(7845);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
				case 1:
					{
					setState(7844);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7847);
				jsonAttribute();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7848);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(7849);
				visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnFormatContext extends ParserRuleContext {
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ColumnFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterColumnFormat(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitColumnFormat(this);
			}
		}
	}

	public final ColumnFormatContext columnFormat() throws RecognitionException {
		ColumnFormatContext _localctx = new ColumnFormatContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_columnFormat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7852);
			_la = _input.LA(1);
			if ( !(((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 1152921504611041281L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StorageMediaContext extends ParserRuleContext {
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public StorageMediaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageMedia; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStorageMedia(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStorageMedia(this);
			}
		}
	}

	public final StorageMediaContext storageMedia() throws RecognitionException {
		StorageMediaContext _localctx = new StorageMediaContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_storageMedia);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7854);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT_SYMBOL || _la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NowContext extends ParserRuleContext {
		public TerminalNode NOW_SYMBOL() { return getToken(MySQLParser.NOW_SYMBOL, 0); }
		public FunctionDatetimePrecisionContext functionDatetimePrecision() {
			return getRuleContext(FunctionDatetimePrecisionContext.class,0);
		}
		public NowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_now; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNow(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNow(this);
			}
		}
	}

	public final NowContext now() throws RecognitionException {
		NowContext _localctx = new NowContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_now);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7856);
			match(NOW_SYMBOL);
			setState(7857);
			functionDatetimePrecision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NowOrSignedLiteralContext extends ParserRuleContext {
		public NowContext now() {
			return getRuleContext(NowContext.class,0);
		}
		public SignedLiteralOrNullContext signedLiteralOrNull() {
			return getRuleContext(SignedLiteralOrNullContext.class,0);
		}
		public NowOrSignedLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nowOrSignedLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNowOrSignedLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNowOrSignedLiteral(this);
			}
		}
	}

	public final NowOrSignedLiteralContext nowOrSignedLiteral() throws RecognitionException {
		NowOrSignedLiteralContext _localctx = new NowOrSignedLiteralContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_nowOrSignedLiteral);
		try {
			setState(7861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7859);
				now();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7860);
				signedLiteralOrNull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GcolAttributeContext extends ParserRuleContext {
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gcolAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterGcolAttribute(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitGcolAttribute(this);
			}
		}
	}

	public final GcolAttributeContext gcolAttribute() throws RecognitionException {
		GcolAttributeContext _localctx = new GcolAttributeContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_gcolAttribute);
		int _la;
		try {
			setState(7877);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7863);
				match(UNIQUE_SYMBOL);
				setState(7865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY_SYMBOL) {
					{
					setState(7864);
					match(KEY_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7867);
				match(COMMENT_SYMBOL);
				setState(7868);
				textString();
				}
				break;
			case NOT2_SYMBOL:
			case NOT_SYMBOL:
			case NULL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					setState(7869);
					notRule();
					}
				}

				setState(7872);
				match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(7873);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(7876);
				match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReferencesContext extends ParserRuleContext {
		public Token match;
		public Token option;
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode MATCH_SYMBOL() { return getToken(MySQLParser.MATCH_SYMBOL, 0); }
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public List<DeleteOptionContext> deleteOption() {
			return getRuleContexts(DeleteOptionContext.class);
		}
		public DeleteOptionContext deleteOption(int i) {
			return getRuleContext(DeleteOptionContext.class,i);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReferences(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReferences(this);
			}
		}
	}

	public final ReferencesContext references() throws RecognitionException {
		ReferencesContext _localctx = new ReferencesContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_references);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7879);
			match(REFERENCES_SYMBOL);
			setState(7880);
			tableRef();
			setState(7882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7881);
				identifierListWithParentheses();
				}
			}

			setState(7886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH_SYMBOL) {
				{
				setState(7884);
				match(MATCH_SYMBOL);
				setState(7885);
				_localctx.match = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					_localctx.match = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
			case 1:
				{
				setState(7888);
				match(ON_SYMBOL);
				setState(7889);
				_localctx.option = match(UPDATE_SYMBOL);
				setState(7890);
				deleteOption();
				setState(7894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(7891);
					match(ON_SYMBOL);
					setState(7892);
					match(DELETE_SYMBOL);
					setState(7893);
					deleteOption();
					}
				}

				}
				break;
			case 2:
				{
				setState(7896);
				match(ON_SYMBOL);
				setState(7897);
				_localctx.option = match(DELETE_SYMBOL);
				setState(7898);
				deleteOption();
				setState(7902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(7899);
					match(ON_SYMBOL);
					setState(7900);
					match(UPDATE_SYMBOL);
					setState(7901);
					deleteOption();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteOptionContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDeleteOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDeleteOption(this);
			}
		}
	}

	public final DeleteOptionContext deleteOption() throws RecognitionException {
		DeleteOptionContext _localctx = new DeleteOptionContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_deleteOption);
		int _la;
		try {
			setState(7913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7906);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7907);
				match(SET_SYMBOL);
				setState(7908);
				nullLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7909);
				match(SET_SYMBOL);
				setState(7910);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7911);
				match(NO_SYMBOL);
				setState(7912);
				match(ACTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<KeyPartContext> keyPart() {
			return getRuleContexts(KeyPartContext.class);
		}
		public KeyPartContext keyPart(int i) {
			return getRuleContext(KeyPartContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterKeyList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitKeyList(this);
			}
		}
	}

	public final KeyListContext keyList() throws RecognitionException {
		KeyListContext _localctx = new KeyListContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_keyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7915);
			match(OPEN_PAR_SYMBOL);
			setState(7916);
			keyPart();
			setState(7921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7917);
				match(COMMA_SYMBOL);
				setState(7918);
				keyPart();
				}
				}
				setState(7923);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7924);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyPartContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterKeyPart(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitKeyPart(this);
			}
		}
	}

	public final KeyPartContext keyPart() throws RecognitionException {
		KeyPartContext _localctx = new KeyPartContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_keyPart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7926);
			identifier();
			setState(7928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7927);
				fieldLength();
				}
			}

			setState(7931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				setState(7930);
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyListWithExpressionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<KeyPartOrExpressionContext> keyPartOrExpression() {
			return getRuleContexts(KeyPartOrExpressionContext.class);
		}
		public KeyPartOrExpressionContext keyPartOrExpression(int i) {
			return getRuleContext(KeyPartOrExpressionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListWithExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyListWithExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterKeyListWithExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitKeyListWithExpression(this);
			}
		}
	}

	public final KeyListWithExpressionContext keyListWithExpression() throws RecognitionException {
		KeyListWithExpressionContext _localctx = new KeyListWithExpressionContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_keyListWithExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7933);
			match(OPEN_PAR_SYMBOL);
			setState(7934);
			keyPartOrExpression();
			setState(7939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7935);
				match(COMMA_SYMBOL);
				setState(7936);
				keyPartOrExpression();
				}
				}
				setState(7941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7942);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyPartOrExpressionContext extends ParserRuleContext {
		public KeyPartContext keyPart() {
			return getRuleContext(KeyPartContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public KeyPartOrExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPartOrExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterKeyPartOrExpression(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitKeyPartOrExpression(this);
			}
		}
	}

	public final KeyPartOrExpressionContext keyPartOrExpression() throws RecognitionException {
		KeyPartOrExpressionContext _localctx = new KeyPartOrExpressionContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_keyPartOrExpression);
		int _la;
		try {
			setState(7950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,968,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7944);
				keyPart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7945);
				if (!(this.isServerVersionGe80013())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80013()");
				}
				setState(7946);
				exprWithParentheses();
				setState(7948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
					{
					setState(7947);
					direction();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexTypeContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexType(this);
			}
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7952);
			_localctx.algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				_localctx.algorithm = _errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return getRuleContext(IndexTypeClauseContext.class,0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexOption(this);
			}
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_indexOption);
		try {
			setState(7956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7954);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7955);
				indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommonIndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public TerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public JsonAttributeContext jsonAttribute() {
			return getRuleContext(JsonAttributeContext.class,0);
		}
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCommonIndexOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCommonIndexOption(this);
			}
		}
	}

	public final CommonIndexOptionContext commonIndexOption() throws RecognitionException {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_commonIndexOption);
		int _la;
		try {
			setState(7978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7958);
				match(KEY_BLOCK_SIZE_SYMBOL);
				setState(7960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7959);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7962);
				ulong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7963);
				match(COMMENT_SYMBOL);
				setState(7964);
				textLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7965);
				visibility();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7966);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(7967);
				match(ENGINE_ATTRIBUTE_SYMBOL);
				setState(7969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
				case 1:
					{
					setState(7968);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7971);
				jsonAttribute();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7972);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(7973);
				match(SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
				setState(7975);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,972,_ctx) ) {
				case 1:
					{
					setState(7974);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7977);
				jsonAttribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VisibilityContext extends ParserRuleContext {
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visibility; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterVisibility(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitVisibility(this);
			}
		}
	}

	public final VisibilityContext visibility() throws RecognitionException {
		VisibilityContext _localctx = new VisibilityContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_visibility);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7980);
			_la = _input.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexTypeClauseContext extends ParserRuleContext {
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexTypeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexTypeClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexTypeClause(this);
			}
		}
	}

	public final IndexTypeClauseContext indexTypeClause() throws RecognitionException {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_indexTypeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7982);
			_la = _input.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7983);
			indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FulltextIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFulltextIndexOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFulltextIndexOption(this);
			}
		}
	}

	public final FulltextIndexOptionContext fulltextIndexOption() throws RecognitionException {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_fulltextIndexOption);
		try {
			setState(7989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7985);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7986);
				match(WITH_SYMBOL);
				setState(7987);
				match(PARSER_SYMBOL);
				setState(7988);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SpatialIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSpatialIndexOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSpatialIndexOption(this);
			}
		}
	}

	public final SpatialIndexOptionContext spatialIndexOption() throws RecognitionException {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_spatialIndexOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7991);
			commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EOF() { return getToken(Recognizer.EOF, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDataTypeDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDataTypeDefinition(this);
			}
		}
	}

	public final DataTypeDefinitionContext dataTypeDefinition() throws RecognitionException {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_dataTypeDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7993);
			dataType();
			setState(7994);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode TINYINT_SYMBOL() { return getToken(MySQLParser.TINYINT_SYMBOL, 0); }
		public TerminalNode SMALLINT_SYMBOL() { return getToken(MySQLParser.SMALLINT_SYMBOL, 0); }
		public TerminalNode MEDIUMINT_SYMBOL() { return getToken(MySQLParser.MEDIUMINT_SYMBOL, 0); }
		public TerminalNode BIGINT_SYMBOL() { return getToken(MySQLParser.BIGINT_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public FieldOptionsContext fieldOptions() {
			return getRuleContext(FieldOptionsContext.class,0);
		}
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DOUBLE_SYMBOL() { return getToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode PRECISION_SYMBOL() { return getToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public TerminalNode FLOAT_SYMBOL() { return getToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode NUMERIC_SYMBOL() { return getToken(MySQLParser.NUMERIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode VARYING_SYMBOL() { return getToken(MySQLParser.VARYING_SYMBOL, 0); }
		public TerminalNode VARCHAR_SYMBOL() { return getToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode VARBINARY_SYMBOL() { return getToken(MySQLParser.VARBINARY_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TINYBLOB_SYMBOL() { return getToken(MySQLParser.TINYBLOB_SYMBOL, 0); }
		public TerminalNode BLOB_SYMBOL() { return getToken(MySQLParser.BLOB_SYMBOL, 0); }
		public TerminalNode MEDIUMBLOB_SYMBOL() { return getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0); }
		public TerminalNode LONGBLOB_SYMBOL() { return getToken(MySQLParser.LONGBLOB_SYMBOL, 0); }
		public TerminalNode LONG_SYMBOL() { return getToken(MySQLParser.LONG_SYMBOL, 0); }
		public TerminalNode TINYTEXT_SYMBOL() { return getToken(MySQLParser.TINYTEXT_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode MEDIUMTEXT_SYMBOL() { return getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0); }
		public TerminalNode LONGTEXT_SYMBOL() { return getToken(MySQLParser.LONGTEXT_SYMBOL, 0); }
		public StringListContext stringList() {
			return getRuleContext(StringListContext.class,0);
		}
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDataType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDataType(this);
			}
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_dataType);
		int _la;
		try {
			setState(8142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7996);
				_localctx.type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					_localctx.type = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7998);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,975,_ctx) ) {
				case 1:
					{
					setState(7997);
					fieldLength();
					}
					break;
				}
				setState(8001);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
				case 1:
					{
					setState(8000);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8008);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case REAL_SYMBOL:
					{
					setState(8003);
					_localctx.type = match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					setState(8004);
					_localctx.type = match(DOUBLE_SYMBOL);
					setState(8006);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
					case 1:
						{
						setState(8005);
						match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8011);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					setState(8010);
					precision();
					}
					break;
				}
				setState(8014);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
				case 1:
					{
					setState(8013);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8016);
				_localctx.type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 164)) & ~0x3f) == 0 && ((1L << (_la - 164)) & -4611686018427387903L) != 0) || _la==NUMERIC_SYMBOL) ) {
					_localctx.type = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8018);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
				case 1:
					{
					setState(8017);
					floatOptions();
					}
					break;
				}
				setState(8021);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,982,_ctx) ) {
				case 1:
					{
					setState(8020);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8023);
				_localctx.type = match(BIT_SYMBOL);
				setState(8025);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,983,_ctx) ) {
				case 1:
					{
					setState(8024);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8027);
				_localctx.type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOOLEAN_SYMBOL || _la==BOOL_SYMBOL) ) {
					_localctx.type = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8028);
				_localctx.type = match(CHAR_SYMBOL);
				setState(8030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
				case 1:
					{
					setState(8029);
					fieldLength();
					}
					break;
				}
				setState(8033);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,985,_ctx) ) {
				case 1:
					{
					setState(8032);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8035);
				nchar();
				setState(8037);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
				case 1:
					{
					setState(8036);
					fieldLength();
					}
					break;
				}
				setState(8040);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,987,_ctx) ) {
				case 1:
					{
					setState(8039);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8042);
				_localctx.type = match(BINARY_SYMBOL);
				setState(8044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
				case 1:
					{
					setState(8043);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8049);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR_SYMBOL:
					{
					setState(8046);
					_localctx.type = match(CHAR_SYMBOL);
					setState(8047);
					match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					setState(8048);
					_localctx.type = match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8051);
				fieldLength();
				setState(8053);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
				case 1:
					{
					setState(8052);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8065);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
				case 1:
					{
					setState(8055);
					_localctx.type = match(NATIONAL_SYMBOL);
					setState(8056);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					setState(8057);
					_localctx.type = match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					setState(8058);
					_localctx.type = match(NCHAR_SYMBOL);
					setState(8059);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					setState(8060);
					_localctx.type = match(NATIONAL_SYMBOL);
					setState(8061);
					match(CHAR_SYMBOL);
					setState(8062);
					match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					setState(8063);
					_localctx.type = match(NCHAR_SYMBOL);
					setState(8064);
					match(VARYING_SYMBOL);
					}
					break;
				}
				setState(8067);
				fieldLength();
				setState(8069);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
				case 1:
					{
					setState(8068);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8071);
				_localctx.type = match(VARBINARY_SYMBOL);
				setState(8072);
				fieldLength();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8073);
				_localctx.type = match(YEAR_SYMBOL);
				setState(8075);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
				case 1:
					{
					setState(8074);
					fieldLength();
					}
					break;
				}
				setState(8078);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
				case 1:
					{
					setState(8077);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8080);
				_localctx.type = match(DATE_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8081);
				_localctx.type = match(TIME_SYMBOL);
				setState(8083);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
				case 1:
					{
					setState(8082);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8085);
				_localctx.type = match(TIMESTAMP_SYMBOL);
				setState(8087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,996,_ctx) ) {
				case 1:
					{
					setState(8086);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8089);
				_localctx.type = match(DATETIME_SYMBOL);
				setState(8091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
				case 1:
					{
					setState(8090);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8093);
				_localctx.type = match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8094);
				_localctx.type = match(BLOB_SYMBOL);
				setState(8096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,998,_ctx) ) {
				case 1:
					{
					setState(8095);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(8098);
				_localctx.type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					_localctx.type = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(8099);
				_localctx.type = match(LONG_SYMBOL);
				setState(8100);
				match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(8101);
				_localctx.type = match(LONG_SYMBOL);
				setState(8105);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,999,_ctx) ) {
				case 1:
					{
					setState(8102);
					match(CHAR_SYMBOL);
					setState(8103);
					match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					setState(8104);
					match(VARCHAR_SYMBOL);
					}
					break;
				}
				setState(8108);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1000,_ctx) ) {
				case 1:
					{
					setState(8107);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(8110);
				_localctx.type = match(TINYTEXT_SYMBOL);
				setState(8112);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
				case 1:
					{
					setState(8111);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(8114);
				_localctx.type = match(TEXT_SYMBOL);
				setState(8116);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1002,_ctx) ) {
				case 1:
					{
					setState(8115);
					fieldLength();
					}
					break;
				}
				setState(8119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
				case 1:
					{
					setState(8118);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(8121);
				_localctx.type = match(MEDIUMTEXT_SYMBOL);
				setState(8123);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1004,_ctx) ) {
				case 1:
					{
					setState(8122);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(8125);
				_localctx.type = match(LONGTEXT_SYMBOL);
				setState(8127);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
				case 1:
					{
					setState(8126);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(8129);
				_localctx.type = match(ENUM_SYMBOL);
				setState(8130);
				stringList();
				setState(8132);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
				case 1:
					{
					setState(8131);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(8134);
				_localctx.type = match(SET_SYMBOL);
				setState(8135);
				stringList();
				setState(8137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
				case 1:
					{
					setState(8136);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(8139);
				_localctx.type = match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(8140);
				_localctx.type = match(JSON_SYMBOL);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(8141);
				_localctx.type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GEOMETRYCOLLECTION_SYMBOL || _la==GEOMETRY_SYMBOL || _la==LINESTRING_SYMBOL || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & 108086391056891911L) != 0)) ) {
					_localctx.type = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NcharContext extends ParserRuleContext {
		public Token type;
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nchar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNchar(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNchar(this);
			}
		}
	}

	public final NcharContext nchar() throws RecognitionException {
		NcharContext _localctx = new NcharContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_nchar);
		try {
			setState(8147);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NCHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8144);
				_localctx.type = match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8145);
				_localctx.type = match(NATIONAL_SYMBOL);
				setState(8146);
				match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RealTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DOUBLE_SYMBOL() { return getToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public TerminalNode PRECISION_SYMBOL() { return getToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public RealTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_realType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRealType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRealType(this);
			}
		}
	}

	public final RealTypeContext realType() throws RecognitionException {
		RealTypeContext _localctx = new RealTypeContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_realType);
		try {
			setState(8154);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REAL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8149);
				_localctx.type = match(REAL_SYMBOL);
				}
				break;
			case DOUBLE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8150);
				_localctx.type = match(DOUBLE_SYMBOL);
				setState(8152);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
				case 1:
					{
					setState(8151);
					match(PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldLengthContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFieldLength(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFieldLength(this);
			}
		}
	}

	public final FieldLengthContext fieldLength() throws RecognitionException {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_fieldLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8156);
			match(OPEN_PAR_SYMBOL);
			setState(8159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1012,_ctx) ) {
			case 1:
				{
				setState(8157);
				real_ulonglong_number();
				}
				break;
			case 2:
				{
				setState(8158);
				match(DECIMAL_NUMBER);
				}
				break;
			}
			setState(8161);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldOptionsContext extends ParserRuleContext {
		public List<TerminalNode> SIGNED_SYMBOL() { return getTokens(MySQLParser.SIGNED_SYMBOL); }
		public TerminalNode SIGNED_SYMBOL(int i) {
			return getToken(MySQLParser.SIGNED_SYMBOL, i);
		}
		public List<TerminalNode> UNSIGNED_SYMBOL() { return getTokens(MySQLParser.UNSIGNED_SYMBOL); }
		public TerminalNode UNSIGNED_SYMBOL(int i) {
			return getToken(MySQLParser.UNSIGNED_SYMBOL, i);
		}
		public List<TerminalNode> ZEROFILL_SYMBOL() { return getTokens(MySQLParser.ZEROFILL_SYMBOL); }
		public TerminalNode ZEROFILL_SYMBOL(int i) {
			return getToken(MySQLParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFieldOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFieldOptions(this);
			}
		}
	}

	public final FieldOptionsContext fieldOptions() throws RecognitionException {
		FieldOptionsContext _localctx = new FieldOptionsContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8164);
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(8163);
					_la = _input.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) {
							matchedEOF = true;
						}
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8166);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1013,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharsetWithOptBinaryContext extends ParserRuleContext {
		public AsciiContext ascii() {
			return getRuleContext(AsciiContext.class,0);
		}
		public UnicodeContext unicode() {
			return getRuleContext(UnicodeContext.class,0);
		}
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetWithOptBinary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCharsetWithOptBinary(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCharsetWithOptBinary(this);
			}
		}
	}

	public final CharsetWithOptBinaryContext charsetWithOptBinary() throws RecognitionException {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_charsetWithOptBinary);
		try {
			setState(8182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1016,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8168);
				ascii();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8169);
				unicode();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8170);
				match(BYTE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8171);
				charset();
				setState(8172);
				charsetName();
				setState(8174);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
				case 1:
					{
					setState(8173);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8176);
				match(BINARY_SYMBOL);
				setState(8180);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
				case 1:
					{
					setState(8177);
					charset();
					setState(8178);
					charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AsciiContext extends ParserRuleContext {
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascii; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterAscii(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitAscii(this);
			}
		}
	}

	public final AsciiContext ascii() throws RecognitionException {
		AsciiContext _localctx = new AsciiContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_ascii);
		try {
			setState(8190);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASCII_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8184);
				match(ASCII_SYMBOL);
				setState(8186);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
				case 1:
					{
					setState(8185);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8188);
				match(BINARY_SYMBOL);
				setState(8189);
				match(ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnicodeContext extends ParserRuleContext {
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUnicode(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUnicode(this);
			}
		}
	}

	public final UnicodeContext unicode() throws RecognitionException {
		UnicodeContext _localctx = new UnicodeContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_unicode);
		try {
			setState(8198);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8192);
				match(UNICODE_SYMBOL);
				setState(8194);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1019,_ctx) ) {
				case 1:
					{
					setState(8193);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8196);
				match(BINARY_SYMBOL);
				setState(8197);
				match(UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WsNumCodepointsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wsNumCodepoints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWsNumCodepoints(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWsNumCodepoints(this);
			}
		}
	}

	public final WsNumCodepointsContext wsNumCodepoints() throws RecognitionException {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_wsNumCodepoints);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8200);
			match(OPEN_PAR_SYMBOL);
			setState(8201);
			real_ulong_number();
			setState(8202);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeDatetimePrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDatetimePrecision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTypeDatetimePrecision(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTypeDatetimePrecision(this);
			}
		}
	}

	public final TypeDatetimePrecisionContext typeDatetimePrecision() throws RecognitionException {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_typeDatetimePrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8204);
			match(OPEN_PAR_SYMBOL);
			setState(8205);
			match(INT_NUMBER);
			setState(8206);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionDatetimePrecisionContext extends ParserRuleContext {
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FunctionDatetimePrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDatetimePrecision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFunctionDatetimePrecision(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFunctionDatetimePrecision(this);
			}
		}
	}

	public final FunctionDatetimePrecisionContext functionDatetimePrecision() throws RecognitionException {
		FunctionDatetimePrecisionContext _localctx = new FunctionDatetimePrecisionContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_functionDatetimePrecision);
		try {
			setState(8213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1021,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8209);
				parentheses();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8210);
				match(OPEN_PAR_SYMBOL);
				setState(8211);
				match(INT_NUMBER);
				setState(8212);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharsetNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCharsetName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCharsetName(this);
			}
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_charsetName);
		try {
			setState(8219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1022,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8215);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8216);
				match(BINARY_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8217);
				if (!(this.isServerVersionLt80011())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				}
				setState(8218);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollationNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCollationName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCollationName(this);
			}
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_collationName);
		try {
			setState(8226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1023,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8221);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8222);
				if (!(this.isServerVersionLt80011())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80011()");
				}
				setState(8223);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8224);
				if (!(this.isServerVersionGe80018())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80018()");
				}
				setState(8225);
				match(BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableOptionsContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateTableOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateTableOptions(this);
			}
		}
	}

	public final CreateTableOptionsContext createTableOptions() throws RecognitionException {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_createTableOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8228);
			createTableOption();
			setState(8235);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1025,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8230);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1024,_ctx) ) {
					case 1:
						{
						setState(8229);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(8232);
					createTableOption();
					}
					}
				}
				setState(8237);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1025,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableOptionsEtcContext extends ParserRuleContext {
		public CreateTableOptionsContext createTableOptions() {
			return getRuleContext(CreateTableOptionsContext.class,0);
		}
		public CreatePartitioningEtcContext createPartitioningEtc() {
			return getRuleContext(CreatePartitioningEtcContext.class,0);
		}
		public CreateTableOptionsEtcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptionsEtc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateTableOptionsEtc(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateTableOptionsEtc(this);
			}
		}
	}

	public final CreateTableOptionsEtcContext createTableOptionsEtc() throws RecognitionException {
		CreateTableOptionsEtcContext _localctx = new CreateTableOptionsEtcContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_createTableOptionsEtc);
		try {
			setState(8243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8238);
				createTableOptions();
				setState(8240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1026,_ctx) ) {
				case 1:
					{
					setState(8239);
					createPartitioningEtc();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8242);
				createPartitioningEtc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatePartitioningEtcContext extends ParserRuleContext {
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public DuplicateAsQeContext duplicateAsQe() {
			return getRuleContext(DuplicateAsQeContext.class,0);
		}
		public CreatePartitioningEtcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPartitioningEtc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreatePartitioningEtc(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreatePartitioningEtc(this);
			}
		}
	}

	public final CreatePartitioningEtcContext createPartitioningEtc() throws RecognitionException {
		CreatePartitioningEtcContext _localctx = new CreatePartitioningEtcContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_createPartitioningEtc);
		try {
			setState(8250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8245);
				partitionClause();
				setState(8247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1028,_ctx) ) {
				case 1:
					{
					setState(8246);
					duplicateAsQe();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8249);
				duplicateAsQe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptionsSpaceSeparated; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateTableOptionsSpaceSeparated(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateTableOptionsSpaceSeparated(this);
			}
		}
	}

	public final CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() throws RecognitionException {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8253);
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(8252);
					createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8255);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1030,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableOptionContext extends ParserRuleContext {
		public Token option;
		public Token format;
		public Token method;
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public UlonglongNumberContext ulonglongNumber() {
			return getRuleContext(UlonglongNumberContext.class,0);
		}
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TernaryOptionContext ternaryOption() {
			return getRuleContext(TernaryOptionContext.class,0);
		}
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode UNION_SYMBOL() { return getToken(MySQLParser.UNION_SYMBOL, 0); }
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public JsonAttributeContext jsonAttribute() {
			return getRuleContext(JsonAttributeContext.class,0);
		}
		public TerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateTableOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateTableOption(this);
			}
		}
	}

	public final CreateTableOptionContext createTableOption() throws RecognitionException {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_createTableOption);
		int _la;
		try {
			setState(8397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1056,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8257);
				_localctx.option = match(ENGINE_SYMBOL);
				setState(8259);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1031,_ctx) ) {
				case 1:
					{
					setState(8258);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8261);
				engineRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8262);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(8263);
				_localctx.option = match(SECONDARY_ENGINE_SYMBOL);
				setState(8265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1032,_ctx) ) {
				case 1:
					{
					setState(8264);
					equal();
					}
					break;
				}
				setState(8269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1033,_ctx) ) {
				case 1:
					{
					setState(8267);
					match(NULL_SYMBOL);
					}
					break;
				case 2:
					{
					setState(8268);
					textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8271);
				_localctx.option = match(MAX_ROWS_SYMBOL);
				setState(8273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8272);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8275);
				ulonglongNumber();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8276);
				_localctx.option = match(MIN_ROWS_SYMBOL);
				setState(8278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8277);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8280);
				ulonglongNumber();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8281);
				_localctx.option = match(AVG_ROW_LENGTH_SYMBOL);
				setState(8283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8282);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8285);
				ulonglongNumber();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8286);
				_localctx.option = match(PASSWORD_SYMBOL);
				setState(8288);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
				case 1:
					{
					setState(8287);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8290);
				textStringLiteral();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8291);
				_localctx.option = match(COMMENT_SYMBOL);
				setState(8293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1038,_ctx) ) {
				case 1:
					{
					setState(8292);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8295);
				textStringLiteral();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8296);
				_localctx.option = match(COMPRESSION_SYMBOL);
				setState(8298);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
				case 1:
					{
					setState(8297);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8300);
				textString();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8301);
				_localctx.option = match(ENCRYPTION_SYMBOL);
				setState(8303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1040,_ctx) ) {
				case 1:
					{
					setState(8302);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8305);
				textString();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8306);
				_localctx.option = match(AUTO_INCREMENT_SYMBOL);
				setState(8308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8307);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8310);
				ulonglongNumber();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8311);
				_localctx.option = match(PACK_KEYS_SYMBOL);
				setState(8313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8312);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8315);
				ternaryOption();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8316);
				_localctx.option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 7L) != 0)) ) {
					_localctx.option = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8317);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8320);
				ternaryOption();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8321);
				_localctx.option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					_localctx.option = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8322);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8325);
				ulong_number();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8326);
				_localctx.option = match(DELAY_KEY_WRITE_SYMBOL);
				setState(8328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8327);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8330);
				ulong_number();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8331);
				_localctx.option = match(ROW_FORMAT_SYMBOL);
				setState(8333);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8332);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8335);
				_localctx.format = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & 35184372088837L) != 0) || _la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==REDUNDANT_SYMBOL) ) {
					_localctx.format = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8336);
				_localctx.option = match(UNION_SYMBOL);
				setState(8338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8337);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8340);
				match(OPEN_PAR_SYMBOL);
				setState(8341);
				tableRefList();
				setState(8342);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8344);
				defaultCharset();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8345);
				defaultCollation();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(8346);
				_localctx.option = match(INSERT_METHOD_SYMBOL);
				setState(8348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8347);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8350);
				_localctx.method = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NO_SYMBOL) ) {
					_localctx.method = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(8351);
				_localctx.option = match(DATA_SYMBOL);
				setState(8352);
				match(DIRECTORY_SYMBOL);
				setState(8354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1049,_ctx) ) {
				case 1:
					{
					setState(8353);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8356);
				textString();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(8357);
				_localctx.option = match(INDEX_SYMBOL);
				setState(8358);
				match(DIRECTORY_SYMBOL);
				setState(8360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1050,_ctx) ) {
				case 1:
					{
					setState(8359);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8362);
				textString();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(8363);
				_localctx.option = match(TABLESPACE_SYMBOL);
				setState(8365);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
				case 1:
					{
					setState(8364);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8367);
				identifier();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(8368);
				_localctx.option = match(STORAGE_SYMBOL);
				setState(8369);
				_la = _input.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(8370);
				_localctx.option = match(CONNECTION_SYMBOL);
				setState(8372);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1052,_ctx) ) {
				case 1:
					{
					setState(8371);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8374);
				textString();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(8375);
				_localctx.option = match(KEY_BLOCK_SIZE_SYMBOL);
				setState(8377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8376);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8379);
				ulonglongNumber();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(8380);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(8381);
				_localctx.option = match(START_SYMBOL);
				setState(8382);
				match(TRANSACTION_SYMBOL);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(8383);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(8384);
				_localctx.option = match(ENGINE_ATTRIBUTE_SYMBOL);
				setState(8386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
				case 1:
					{
					setState(8385);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8388);
				jsonAttribute();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(8389);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(8390);
				_localctx.option = match(SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
				setState(8392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1055,_ctx) ) {
				case 1:
					{
					setState(8391);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8394);
				jsonAttribute();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(8395);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(8396);
				tsOptionAutoextendSize();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TernaryOptionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ternaryOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTernaryOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTernaryOption(this);
			}
		}
	}

	public final TernaryOptionContext ternaryOption() throws RecognitionException {
		TernaryOptionContext _localctx = new TernaryOptionContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_ternaryOption);
		try {
			setState(8401);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8399);
				ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8400);
				match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultCollationContext extends ParserRuleContext {
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDefaultCollation(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDefaultCollation(this);
			}
		}
	}

	public final DefaultCollationContext defaultCollation() throws RecognitionException {
		DefaultCollationContext _localctx = new DefaultCollationContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_defaultCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(8403);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(8406);
			match(COLLATE_SYMBOL);
			setState(8408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1059,_ctx) ) {
			case 1:
				{
				setState(8407);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(8410);
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultEncryptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultEncryptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultEncryption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDefaultEncryption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDefaultEncryption(this);
			}
		}
	}

	public final DefaultEncryptionContext defaultEncryption() throws RecognitionException {
		DefaultEncryptionContext _localctx = new DefaultEncryptionContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_defaultEncryption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(8412);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(8415);
			match(ENCRYPTION_SYMBOL);
			setState(8417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1061,_ctx) ) {
			case 1:
				{
				setState(8416);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(8419);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultCharsetContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCharset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDefaultCharset(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDefaultCharset(this);
			}
		}
	}

	public final DefaultCharsetContext defaultCharset() throws RecognitionException {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_defaultCharset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(8421);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(8424);
			charset();
			setState(8426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1063,_ctx) ) {
			case 1:
				{
				setState(8425);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(8428);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public PartitionTypeDefContext partitionTypeDef() {
			return getRuleContext(PartitionTypeDefContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public SubPartitionsContext subPartitions() {
			return getRuleContext(SubPartitionsContext.class,0);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionClause(this);
			}
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8430);
			match(PARTITION_SYMBOL);
			setState(8431);
			match(BY_SYMBOL);
			setState(8432);
			partitionTypeDef();
			setState(8435);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1064,_ctx) ) {
			case 1:
				{
				setState(8433);
				match(PARTITIONS_SYMBOL);
				setState(8434);
				real_ulong_number();
				}
				break;
			}
			setState(8438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1065,_ctx) ) {
			case 1:
				{
				setState(8437);
				subPartitions();
				}
				break;
			}
			setState(8441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1066,_ctx) ) {
			case 1:
				{
				setState(8440);
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionTypeDefContext extends ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTypeDef; }

		public PartitionTypeDefContext() { }
		public void copyFrom(PartitionTypeDefContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDefRangeListContext extends PartitionTypeDefContext {
		public TerminalNode RANGE_SYMBOL() { return getToken(MySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionDefRangeList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionDefRangeList(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDefKeyContext extends PartitionTypeDefContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionDefKey(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionDefKey(this);
			}
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDefHashContext extends PartitionTypeDefContext {
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionDefHash(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionDefHash(this);
			}
		}
	}

	public final PartitionTypeDefContext partitionTypeDef() throws RecognitionException {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_partitionTypeDef);
		int _la;
		try {
			setState(8476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1073,_ctx) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(8444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(8443);
					match(LINEAR_SYMBOL);
					}
				}

				setState(8446);
				match(KEY_SYMBOL);
				setState(8448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(8447);
					partitionKeyAlgorithm();
					}
				}

				setState(8450);
				match(OPEN_PAR_SYMBOL);
				setState(8452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1069,_ctx) ) {
				case 1:
					{
					setState(8451);
					identifierList();
					}
					break;
				}
				setState(8454);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(8456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(8455);
					match(LINEAR_SYMBOL);
					}
				}

				setState(8458);
				match(HASH_SYMBOL);
				setState(8459);
				match(OPEN_PAR_SYMBOL);
				setState(8460);
				bitExpr(0);
				setState(8461);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(8463);
				_la = _input.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8474);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(8464);
					match(OPEN_PAR_SYMBOL);
					setState(8465);
					bitExpr(0);
					setState(8466);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				case COLUMNS_SYMBOL:
					{
					setState(8468);
					match(COLUMNS_SYMBOL);
					setState(8469);
					match(OPEN_PAR_SYMBOL);
					setState(8471);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1071,_ctx) ) {
					case 1:
						{
						setState(8470);
						identifierList();
						}
						break;
					}
					setState(8473);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubPartitionsContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subPartitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSubPartitions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSubPartitions(this);
			}
		}
	}

	public final SubPartitionsContext subPartitions() throws RecognitionException {
		SubPartitionsContext _localctx = new SubPartitionsContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_subPartitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8478);
			match(SUBPARTITION_SYMBOL);
			setState(8479);
			match(BY_SYMBOL);
			setState(8481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				setState(8480);
				match(LINEAR_SYMBOL);
				}
			}

			setState(8493);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HASH_SYMBOL:
				{
				setState(8483);
				match(HASH_SYMBOL);
				setState(8484);
				match(OPEN_PAR_SYMBOL);
				setState(8485);
				bitExpr(0);
				setState(8486);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				setState(8488);
				match(KEY_SYMBOL);
				setState(8490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(8489);
					partitionKeyAlgorithm();
					}
				}

				setState(8492);
				identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1077,_ctx) ) {
			case 1:
				{
				setState(8495);
				match(SUBPARTITIONS_SYMBOL);
				setState(8496);
				real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionKeyAlgorithmContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionKeyAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionKeyAlgorithm(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionKeyAlgorithm(this);
			}
		}
	}

	public final PartitionKeyAlgorithmContext partitionKeyAlgorithm() throws RecognitionException {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_partitionKeyAlgorithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8499);
			match(ALGORITHM_SYMBOL);
			setState(8500);
			match(EQUAL_OPERATOR);
			setState(8501);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionDefinitions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionDefinitions(this);
			}
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8503);
			match(OPEN_PAR_SYMBOL);
			setState(8504);
			partitionDefinition();
			setState(8509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8505);
				match(COMMA_SYMBOL);
				setState(8506);
				partitionDefinition();
				}
				}
				setState(8511);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8512);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public PartitionValuesInContext partitionValuesIn() {
			return getRuleContext(PartitionValuesInContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionValueItemListParenContext partitionValueItemListParen() {
			return getRuleContext(PartitionValueItemListParenContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionDefinition(this);
			}
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_partitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8514);
			match(PARTITION_SYMBOL);
			setState(8515);
			identifier();
			setState(8526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1080,_ctx) ) {
			case 1:
				{
				setState(8516);
				match(VALUES_SYMBOL);
				setState(8517);
				match(LESS_SYMBOL);
				setState(8518);
				match(THAN_SYMBOL);
				setState(8521);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(8519);
					partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					setState(8520);
					match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(8523);
				match(VALUES_SYMBOL);
				setState(8524);
				match(IN_SYMBOL);
				setState(8525);
				partitionValuesIn();
				}
				break;
			}
			setState(8531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & 1099512152065L) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				setState(8528);
				partitionOption();
				}
				}
				setState(8533);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(8534);
				match(OPEN_PAR_SYMBOL);
				setState(8535);
				subpartitionDefinition();
				setState(8540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(8536);
					match(COMMA_SYMBOL);
					setState(8537);
					subpartitionDefinition();
					}
					}
					setState(8542);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8543);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionValuesInContext extends ParserRuleContext {
		public List<PartitionValueItemListParenContext> partitionValueItemListParen() {
			return getRuleContexts(PartitionValueItemListParenContext.class);
		}
		public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return getRuleContext(PartitionValueItemListParenContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValuesIn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionValuesIn(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionValuesIn(this);
			}
		}
	}

	public final PartitionValuesInContext partitionValuesIn() throws RecognitionException {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_partitionValuesIn);
		int _la;
		try {
			setState(8559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1085,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8547);
				partitionValueItemListParen();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8548);
				match(OPEN_PAR_SYMBOL);
				setState(8549);
				partitionValueItemListParen();
				setState(8554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(8550);
					match(COMMA_SYMBOL);
					setState(8551);
					partitionValueItemListParen();
					}
					}
					setState(8556);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8557);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionContext extends ParserRuleContext {
		public Token option;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionOption(this);
			}
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_partitionOption);
		int _la;
		try {
			setState(8595);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8561);
				_localctx.option = match(TABLESPACE_SYMBOL);
				setState(8563);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1086,_ctx) ) {
				case 1:
					{
					setState(8562);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8565);
				identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(8566);
					match(STORAGE_SYMBOL);
					}
				}

				setState(8569);
				_localctx.option = match(ENGINE_SYMBOL);
				setState(8571);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
				case 1:
					{
					setState(8570);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8573);
				engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8574);
				_localctx.option = match(NODEGROUP_SYMBOL);
				setState(8576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8575);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8578);
				real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8579);
				_localctx.option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					_localctx.option = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(8580);
					match(EQUAL_OPERATOR);
					}
				}

				setState(8583);
				real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8584);
				_localctx.option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					_localctx.option = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8585);
				match(DIRECTORY_SYMBOL);
				setState(8587);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1091,_ctx) ) {
				case 1:
					{
					setState(8586);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8589);
				textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(8590);
				_localctx.option = match(COMMENT_SYMBOL);
				setState(8592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
				case 1:
					{
					setState(8591);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(8594);
				textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSubpartitionDefinition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSubpartitionDefinition(this);
			}
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8597);
			match(SUBPARTITION_SYMBOL);
			setState(8598);
			textOrIdentifier();
			setState(8602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & 1099512152065L) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				setState(8599);
				partitionOption();
				}
				}
				setState(8604);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionValueItemListParenContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionValueItemContext> partitionValueItem() {
			return getRuleContexts(PartitionValueItemContext.class);
		}
		public PartitionValueItemContext partitionValueItem(int i) {
			return getRuleContext(PartitionValueItemContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItemListParen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionValueItemListParen(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionValueItemListParen(this);
			}
		}
	}

	public final PartitionValueItemListParenContext partitionValueItemListParen() throws RecognitionException {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_partitionValueItemListParen);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8605);
			match(OPEN_PAR_SYMBOL);
			setState(8606);
			partitionValueItem();
			setState(8611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8607);
				match(COMMA_SYMBOL);
				setState(8608);
				partitionValueItem();
				}
				}
				setState(8613);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8614);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionValueItemContext extends ParserRuleContext {
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPartitionValueItem(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPartitionValueItem(this);
			}
		}
	}

	public final PartitionValueItemContext partitionValueItem() throws RecognitionException {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_partitionValueItem);
		try {
			setState(8618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1096,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8616);
				bitExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8617);
				match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefinerClauseContext extends ParserRuleContext {
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definerClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDefinerClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDefinerClause(this);
			}
		}
	}

	public final DefinerClauseContext definerClause() throws RecognitionException {
		DefinerClauseContext _localctx = new DefinerClauseContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_definerClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8620);
			match(DEFINER_SYMBOL);
			setState(8621);
			match(EQUAL_OPERATOR);
			setState(8622);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIfExists(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIfExists(this);
			}
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8624);
			match(IF_SYMBOL);
			setState(8625);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfExistsIdentifierContext extends ParserRuleContext {
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public PersistedVariableIdentifierContext persistedVariableIdentifier() {
			return getRuleContext(PersistedVariableIdentifierContext.class,0);
		}
		public IfExistsIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExistsIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIfExistsIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIfExistsIdentifier(this);
			}
		}
	}

	public final IfExistsIdentifierContext ifExistsIdentifier() throws RecognitionException {
		IfExistsIdentifierContext _localctx = new IfExistsIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_ifExistsIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8627);
			ifExists();
			setState(8628);
			persistedVariableIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PersistedVariableIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public PersistedVariableIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_persistedVariableIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPersistedVariableIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPersistedVariableIdentifier(this);
			}
		}
	}

	public final PersistedVariableIdentifierContext persistedVariableIdentifier() throws RecognitionException {
		PersistedVariableIdentifierContext _localctx = new PersistedVariableIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_persistedVariableIdentifier);
		try {
			setState(8637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1098,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8630);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8631);
				if (!(this.isServerVersionGe80032())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80032()");
				}
				setState(8635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1097,_ctx) ) {
				case 1:
					{
					setState(8632);
					qualifiedIdentifier();
					}
					break;
				case 2:
					{
					setState(8633);
					match(DEFAULT_SYMBOL);
					setState(8634);
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIfNotExists(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIfNotExists(this);
			}
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8639);
			match(IF_SYMBOL);
			setState(8640);
			notRule();
			setState(8641);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IgnoreUnknownUserContext extends ParserRuleContext {
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public IgnoreUnknownUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoreUnknownUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIgnoreUnknownUser(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIgnoreUnknownUser(this);
			}
		}
	}

	public final IgnoreUnknownUserContext ignoreUnknownUser() throws RecognitionException {
		IgnoreUnknownUserContext _localctx = new IgnoreUnknownUserContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_ignoreUnknownUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8643);
			match(IGNORE_SYMBOL);
			setState(8644);
			match(UNKNOWN_SYMBOL);
			setState(8645);
			match(USER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token type;
		public FunctionParameterContext functionParameter() {
			return getRuleContext(FunctionParameterContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode OUT_SYMBOL() { return getToken(MySQLParser.OUT_SYMBOL, 0); }
		public TerminalNode INOUT_SYMBOL() { return getToken(MySQLParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterProcedureParameter(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitProcedureParameter(this);
			}
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1099,_ctx) ) {
			case 1:
				{
				setState(8647);
				_localctx.type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					_localctx.type = _errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(8650);
			functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionParameterContext extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFunctionParameter(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFunctionParameter(this);
			}
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8652);
			parameterName();
			setState(8653);
			typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCollate(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCollate(this);
			}
		}
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8655);
			match(COLLATE_SYMBOL);
			setState(8656);
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeWithOptCollateContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeWithOptCollate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTypeWithOptCollate(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTypeWithOptCollate(this);
			}
		}
	}

	public final TypeWithOptCollateContext typeWithOptCollate() throws RecognitionException {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_typeWithOptCollate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8658);
			dataType();
			setState(8660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1100,_ctx) ) {
			case 1:
				{
				setState(8659);
				collate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaIdentifierPairContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaIdentifierPair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSchemaIdentifierPair(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSchemaIdentifierPair(this);
			}
		}
	}

	public final SchemaIdentifierPairContext schemaIdentifierPair() throws RecognitionException {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_schemaIdentifierPair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8662);
			match(OPEN_PAR_SYMBOL);
			setState(8663);
			schemaRef();
			setState(8664);
			match(COMMA_SYMBOL);
			setState(8665);
			schemaRef();
			setState(8666);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewRefListContext extends ParserRuleContext {
		public List<ViewRefContext> viewRef() {
			return getRuleContexts(ViewRefContext.class);
		}
		public ViewRefContext viewRef(int i) {
			return getRuleContext(ViewRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterViewRefList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitViewRefList(this);
			}
		}
	}

	public final ViewRefListContext viewRefList() throws RecognitionException {
		ViewRefListContext _localctx = new ViewRefListContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_viewRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8668);
			viewRef();
			setState(8673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8669);
				match(COMMA_SYMBOL);
				setState(8670);
				viewRef();
				}
				}
				setState(8675);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdateListContext extends ParserRuleContext {
		public List<UpdateElementContext> updateElement() {
			return getRuleContexts(UpdateElementContext.class);
		}
		public UpdateElementContext updateElement(int i) {
			return getRuleContext(UpdateElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUpdateList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUpdateList(this);
			}
		}
	}

	public final UpdateListContext updateList() throws RecognitionException {
		UpdateListContext _localctx = new UpdateListContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_updateList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8676);
			updateElement();
			setState(8681);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1102,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8677);
					match(COMMA_SYMBOL);
					setState(8678);
					updateElement();
					}
					}
				}
				setState(8683);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1102,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdateElementContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUpdateElement(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUpdateElement(this);
			}
		}
	}

	public final UpdateElementContext updateElement() throws RecognitionException {
		UpdateElementContext _localctx = new UpdateElementContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_updateElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8684);
			columnRef();
			setState(8685);
			match(EQUAL_OPERATOR);
			setState(8688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1103,_ctx) ) {
			case 1:
				{
				setState(8686);
				expr(0);
				}
				break;
			case 2:
				{
				setState(8687);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharsetClauseContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCharsetClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCharsetClause(this);
			}
		}
	}

	public final CharsetClauseContext charsetClause() throws RecognitionException {
		CharsetClauseContext _localctx = new CharsetClauseContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_charsetClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8690);
			charset();
			setState(8691);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public List<FieldTermContext> fieldTerm() {
			return getRuleContexts(FieldTermContext.class);
		}
		public FieldTermContext fieldTerm(int i) {
			return getRuleContext(FieldTermContext.class,i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFieldsClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFieldsClause(this);
			}
		}
	}

	public final FieldsClauseContext fieldsClause() throws RecognitionException {
		FieldsClauseContext _localctx = new FieldsClauseContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_fieldsClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8693);
			match(COLUMNS_SYMBOL);
			setState(8695);
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(8694);
					fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8697);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1104,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldTermContext extends ParserRuleContext {
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode ENCLOSED_SYMBOL() { return getToken(MySQLParser.ENCLOSED_SYMBOL, 0); }
		public TerminalNode OPTIONALLY_SYMBOL() { return getToken(MySQLParser.OPTIONALLY_SYMBOL, 0); }
		public TerminalNode ESCAPED_SYMBOL() { return getToken(MySQLParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFieldTerm(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFieldTerm(this);
			}
		}
	}

	public final FieldTermContext fieldTerm() throws RecognitionException {
		FieldTermContext _localctx = new FieldTermContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_fieldTerm);
		int _la;
		try {
			setState(8711);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8699);
				match(TERMINATED_SYMBOL);
				setState(8700);
				match(BY_SYMBOL);
				setState(8701);
				textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					setState(8702);
					match(OPTIONALLY_SYMBOL);
					}
				}

				setState(8705);
				match(ENCLOSED_SYMBOL);
				setState(8706);
				match(BY_SYMBOL);
				setState(8707);
				textString();
				}
				break;
			case ESCAPED_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8708);
				match(ESCAPED_SYMBOL);
				setState(8709);
				match(BY_SYMBOL);
				setState(8710);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LinesClauseContext extends ParserRuleContext {
		public TerminalNode LINES_SYMBOL() { return getToken(MySQLParser.LINES_SYMBOL, 0); }
		public List<LineTermContext> lineTerm() {
			return getRuleContexts(LineTermContext.class);
		}
		public LineTermContext lineTerm(int i) {
			return getRuleContext(LineTermContext.class,i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLinesClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLinesClause(this);
			}
		}
	}

	public final LinesClauseContext linesClause() throws RecognitionException {
		LinesClauseContext _localctx = new LinesClauseContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_linesClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8713);
			match(LINES_SYMBOL);
			setState(8715);
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(8714);
					lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8717);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1107,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LineTermContext extends ParserRuleContext {
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode STARTING_SYMBOL() { return getToken(MySQLParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lineTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLineTerm(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLineTerm(this);
			}
		}
	}

	public final LineTermContext lineTerm() throws RecognitionException {
		LineTermContext _localctx = new LineTermContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_lineTerm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8719);
			_la = _input.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8720);
			match(BY_SYMBOL);
			setState(8721);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserListContext extends ParserRuleContext {
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUserList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUserList(this);
			}
		}
	}

	public final UserListContext userList() throws RecognitionException {
		UserListContext _localctx = new UserListContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_userList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8723);
			user();
			setState(8728);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1108,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8724);
					match(COMMA_SYMBOL);
					setState(8725);
					user();
					}
					}
				}
				setState(8730);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1108,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserListContext extends ParserRuleContext {
		public List<CreateUserContext> createUser() {
			return getRuleContexts(CreateUserContext.class);
		}
		public CreateUserContext createUser(int i) {
			return getRuleContext(CreateUserContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateUserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateUserList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateUserList(this);
			}
		}
	}

	public final CreateUserListContext createUserList() throws RecognitionException {
		CreateUserListContext _localctx = new CreateUserListContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_createUserList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8731);
			createUser();
			setState(8736);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1109,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8732);
					match(COMMA_SYMBOL);
					setState(8733);
					createUser();
					}
					}
				}
				setState(8738);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1109,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public IdentificationContext identification() {
			return getRuleContext(IdentificationContext.class,0);
		}
		public IdentifiedWithPluginContext identifiedWithPlugin() {
			return getRuleContext(IdentifiedWithPluginContext.class,0);
		}
		public CreateUserWithMfaContext createUserWithMfa() {
			return getRuleContext(CreateUserWithMfaContext.class,0);
		}
		public InitialAuthContext initialAuth() {
			return getRuleContext(InitialAuthContext.class,0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateUser(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateUser(this);
			}
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_createUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8739);
			user();
			setState(8749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1112,_ctx) ) {
			case 1:
				{
				setState(8740);
				identification();
				setState(8742);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1110,_ctx) ) {
				case 1:
					{
					setState(8741);
					createUserWithMfa();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8744);
				identifiedWithPlugin();
				setState(8746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1111,_ctx) ) {
				case 1:
					{
					setState(8745);
					initialAuth();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(8748);
				createUserWithMfa();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserWithMfaContext extends ParserRuleContext {
		public List<TerminalNode> AND_SYMBOL() { return getTokens(MySQLParser.AND_SYMBOL); }
		public TerminalNode AND_SYMBOL(int i) {
			return getToken(MySQLParser.AND_SYMBOL, i);
		}
		public List<IdentificationContext> identification() {
			return getRuleContexts(IdentificationContext.class);
		}
		public IdentificationContext identification(int i) {
			return getRuleContext(IdentificationContext.class,i);
		}
		public CreateUserWithMfaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserWithMfa; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterCreateUserWithMfa(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitCreateUserWithMfa(this);
			}
		}
	}

	public final CreateUserWithMfaContext createUserWithMfa() throws RecognitionException {
		CreateUserWithMfaContext _localctx = new CreateUserWithMfaContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_createUserWithMfa);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8751);
			match(AND_SYMBOL);
			setState(8752);
			identification();
			setState(8755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1113,_ctx) ) {
			case 1:
				{
				setState(8753);
				match(AND_SYMBOL);
				setState(8754);
				identification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentificationContext extends ParserRuleContext {
		public IdentifiedByPasswordContext identifiedByPassword() {
			return getRuleContext(IdentifiedByPasswordContext.class,0);
		}
		public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return getRuleContext(IdentifiedByRandomPasswordContext.class,0);
		}
		public IdentifiedWithPluginContext identifiedWithPlugin() {
			return getRuleContext(IdentifiedWithPluginContext.class,0);
		}
		public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
			return getRuleContext(IdentifiedWithPluginAsAuthContext.class,0);
		}
		public IdentifiedWithPluginByPasswordContext identifiedWithPluginByPassword() {
			return getRuleContext(IdentifiedWithPluginByPasswordContext.class,0);
		}
		public IdentifiedWithPluginByRandomPasswordContext identifiedWithPluginByRandomPassword() {
			return getRuleContext(IdentifiedWithPluginByRandomPasswordContext.class,0);
		}
		public IdentificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentification(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentification(this);
			}
		}
	}

	public final IdentificationContext identification() throws RecognitionException {
		IdentificationContext _localctx = new IdentificationContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_identification);
		try {
			setState(8763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1114,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8757);
				identifiedByPassword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8758);
				identifiedByRandomPassword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8759);
				identifiedWithPlugin();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8760);
				identifiedWithPluginAsAuth();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8761);
				identifiedWithPluginByPassword();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8762);
				identifiedWithPluginByRandomPassword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifiedByPasswordContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public IdentifiedByPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifiedByPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifiedByPassword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifiedByPassword(this);
			}
		}
	}

	public final IdentifiedByPasswordContext identifiedByPassword() throws RecognitionException {
		IdentifiedByPasswordContext _localctx = new IdentifiedByPasswordContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_identifiedByPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8765);
			match(IDENTIFIED_SYMBOL);
			setState(8766);
			match(BY_SYMBOL);
			setState(8767);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifiedByRandomPasswordContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public IdentifiedByRandomPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifiedByRandomPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifiedByRandomPassword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifiedByRandomPassword(this);
			}
		}
	}

	public final IdentifiedByRandomPasswordContext identifiedByRandomPassword() throws RecognitionException {
		IdentifiedByRandomPasswordContext _localctx = new IdentifiedByRandomPasswordContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_identifiedByRandomPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8769);
			match(IDENTIFIED_SYMBOL);
			setState(8770);
			match(BY_SYMBOL);
			setState(8771);
			match(RANDOM_SYMBOL);
			setState(8772);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifiedWithPluginContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public IdentifiedWithPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifiedWithPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifiedWithPlugin(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifiedWithPlugin(this);
			}
		}
	}

	public final IdentifiedWithPluginContext identifiedWithPlugin() throws RecognitionException {
		IdentifiedWithPluginContext _localctx = new IdentifiedWithPluginContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_identifiedWithPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8774);
			match(IDENTIFIED_SYMBOL);
			setState(8775);
			match(WITH_SYMBOL);
			setState(8776);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifiedWithPluginAsAuthContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return getRuleContext(TextStringHashContext.class,0);
		}
		public IdentifiedWithPluginAsAuthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifiedWithPluginAsAuth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifiedWithPluginAsAuth(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifiedWithPluginAsAuth(this);
			}
		}
	}

	public final IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() throws RecognitionException {
		IdentifiedWithPluginAsAuthContext _localctx = new IdentifiedWithPluginAsAuthContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_identifiedWithPluginAsAuth);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8778);
			match(IDENTIFIED_SYMBOL);
			setState(8779);
			match(WITH_SYMBOL);
			setState(8780);
			textOrIdentifier();
			setState(8781);
			match(AS_SYMBOL);
			setState(8782);
			textStringHash();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifiedWithPluginByPasswordContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public IdentifiedWithPluginByPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifiedWithPluginByPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifiedWithPluginByPassword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifiedWithPluginByPassword(this);
			}
		}
	}

	public final IdentifiedWithPluginByPasswordContext identifiedWithPluginByPassword() throws RecognitionException {
		IdentifiedWithPluginByPasswordContext _localctx = new IdentifiedWithPluginByPasswordContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_identifiedWithPluginByPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8784);
			match(IDENTIFIED_SYMBOL);
			setState(8785);
			match(WITH_SYMBOL);
			setState(8786);
			textOrIdentifier();
			setState(8787);
			match(BY_SYMBOL);
			setState(8788);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifiedWithPluginByRandomPasswordContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public IdentifiedWithPluginByRandomPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifiedWithPluginByRandomPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifiedWithPluginByRandomPassword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifiedWithPluginByRandomPassword(this);
			}
		}
	}

	public final IdentifiedWithPluginByRandomPasswordContext identifiedWithPluginByRandomPassword() throws RecognitionException {
		IdentifiedWithPluginByRandomPasswordContext _localctx = new IdentifiedWithPluginByRandomPasswordContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_identifiedWithPluginByRandomPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8790);
			match(IDENTIFIED_SYMBOL);
			setState(8791);
			match(WITH_SYMBOL);
			setState(8792);
			textOrIdentifier();
			setState(8793);
			match(BY_SYMBOL);
			setState(8794);
			match(RANDOM_SYMBOL);
			setState(8795);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InitialAuthContext extends ParserRuleContext {
		public TerminalNode INITIAL_SYMBOL() { return getToken(MySQLParser.INITIAL_SYMBOL, 0); }
		public TerminalNode AUTHENTICATION_SYMBOL() { return getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0); }
		public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return getRuleContext(IdentifiedByRandomPasswordContext.class,0);
		}
		public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
			return getRuleContext(IdentifiedWithPluginAsAuthContext.class,0);
		}
		public IdentifiedByPasswordContext identifiedByPassword() {
			return getRuleContext(IdentifiedByPasswordContext.class,0);
		}
		public InitialAuthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_initialAuth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInitialAuth(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInitialAuth(this);
			}
		}
	}

	public final InitialAuthContext initialAuth() throws RecognitionException {
		InitialAuthContext _localctx = new InitialAuthContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_initialAuth);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8797);
			match(INITIAL_SYMBOL);
			setState(8798);
			match(AUTHENTICATION_SYMBOL);
			setState(8802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1115,_ctx) ) {
			case 1:
				{
				setState(8799);
				identifiedByRandomPassword();
				}
				break;
			case 2:
				{
				setState(8800);
				identifiedWithPluginAsAuth();
				}
				break;
			case 3:
				{
				setState(8801);
				identifiedByPassword();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RetainCurrentPasswordContext extends ParserRuleContext {
		public TerminalNode RETAIN_SYMBOL() { return getToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_retainCurrentPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRetainCurrentPassword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRetainCurrentPassword(this);
			}
		}
	}

	public final RetainCurrentPasswordContext retainCurrentPassword() throws RecognitionException {
		RetainCurrentPasswordContext _localctx = new RetainCurrentPasswordContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_retainCurrentPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8804);
			match(RETAIN_SYMBOL);
			setState(8805);
			match(CURRENT_SYMBOL);
			setState(8806);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DiscardOldPasswordContext extends ParserRuleContext {
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public DiscardOldPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardOldPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDiscardOldPassword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDiscardOldPassword(this);
			}
		}
	}

	public final DiscardOldPasswordContext discardOldPassword() throws RecognitionException {
		DiscardOldPasswordContext _localctx = new DiscardOldPasswordContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_discardOldPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8808);
			match(DISCARD_SYMBOL);
			setState(8809);
			match(OLD_SYMBOL);
			setState(8810);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserRegistrationContext extends ParserRuleContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public TerminalNode INITIATE_SYMBOL() { return getToken(MySQLParser.INITIATE_SYMBOL, 0); }
		public TerminalNode REGISTRATION_SYMBOL() { return getToken(MySQLParser.REGISTRATION_SYMBOL, 0); }
		public TerminalNode UNREGISTER_SYMBOL() { return getToken(MySQLParser.UNREGISTER_SYMBOL, 0); }
		public TerminalNode FINISH_SYMBOL() { return getToken(MySQLParser.FINISH_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode CHALLENGE_RESPONSE_SYMBOL() { return getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return getRuleContext(TextStringHashContext.class,0);
		}
		public UserRegistrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userRegistration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUserRegistration(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUserRegistration(this);
			}
		}
	}

	public final UserRegistrationContext userRegistration() throws RecognitionException {
		UserRegistrationContext _localctx = new UserRegistrationContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_userRegistration);
		try {
			setState(8827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8812);
				factor();
				setState(8813);
				match(INITIATE_SYMBOL);
				setState(8814);
				match(REGISTRATION_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8816);
				factor();
				setState(8817);
				match(UNREGISTER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8819);
				factor();
				setState(8820);
				match(FINISH_SYMBOL);
				setState(8821);
				match(REGISTRATION_SYMBOL);
				setState(8822);
				match(SET_SYMBOL);
				setState(8823);
				match(CHALLENGE_RESPONSE_SYMBOL);
				setState(8824);
				match(AS_SYMBOL);
				setState(8825);
				textStringHash();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FactorContext extends ParserRuleContext {
		public NumLiteralContext numLiteral() {
			return getRuleContext(NumLiteralContext.class,0);
		}
		public TerminalNode FACTOR_SYMBOL() { return getToken(MySQLParser.FACTOR_SYMBOL, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFactor(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFactor(this);
			}
		}
	}

	public final FactorContext factor() throws RecognitionException {
		FactorContext _localctx = new FactorContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8829);
			numLiteral();
			setState(8830);
			match(FACTOR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplacePasswordContext extends ParserRuleContext {
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ReplacePasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacePassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReplacePassword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReplacePassword(this);
			}
		}
	}

	public final ReplacePasswordContext replacePassword() throws RecognitionException {
		ReplacePasswordContext _localctx = new ReplacePasswordContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_replacePassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8832);
			match(REPLACE_SYMBOL);
			setState(8833);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserIdentifierOrTextContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public UserIdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userIdentifierOrText; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUserIdentifierOrText(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUserIdentifierOrText(this);
			}
		}
	}

	public final UserIdentifierOrTextContext userIdentifierOrText() throws RecognitionException {
		UserIdentifierOrTextContext _localctx = new UserIdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_userIdentifierOrText);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8835);
			textOrIdentifier();
			setState(8837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1117,_ctx) ) {
			case 1:
				{
				setState(8836);
				userVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserContext extends ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return getRuleContext(UserIdentifierOrTextContext.class,0);
		}
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUser(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUser(this);
			}
		}
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_user);
		try {
			setState(8844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8839);
				userIdentifierOrText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8840);
				match(CURRENT_USER_SYMBOL);
				setState(8842);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1118,_ctx) ) {
				case 1:
					{
					setState(8841);
					parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLikeClause(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLikeClause(this);
			}
		}
	}

	public final LikeClauseContext likeClause() throws RecognitionException {
		LikeClauseContext _localctx = new LikeClauseContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_likeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8846);
			match(LIKE_SYMBOL);
			setState(8847);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LikeOrWhereContext extends ParserRuleContext {
		public LikeClauseContext likeClause() {
			return getRuleContext(LikeClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOrWhere; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLikeOrWhere(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLikeOrWhere(this);
			}
		}
	}

	public final LikeOrWhereContext likeOrWhere() throws RecognitionException {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_likeOrWhere);
		try {
			setState(8851);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8849);
				likeClause();
				}
				break;
			case WHERE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8850);
				whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OnlineOptionContext extends ParserRuleContext {
		public TerminalNode ONLINE_SYMBOL() { return getToken(MySQLParser.ONLINE_SYMBOL, 0); }
		public TerminalNode OFFLINE_SYMBOL() { return getToken(MySQLParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlineOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOnlineOption(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOnlineOption(this);
			}
		}
	}

	public final OnlineOptionContext onlineOption() throws RecognitionException {
		OnlineOptionContext _localctx = new OnlineOptionContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_onlineOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8853);
			_la = _input.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NoWriteToBinLogContext extends ParserRuleContext {
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noWriteToBinLog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNoWriteToBinLog(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNoWriteToBinLog(this);
			}
		}
	}

	public final NoWriteToBinLogContext noWriteToBinLog() throws RecognitionException {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_noWriteToBinLog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8855);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UsePartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usePartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUsePartition(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUsePartition(this);
			}
		}
	}

	public final UsePartitionContext usePartition() throws RecognitionException {
		UsePartitionContext _localctx = new UsePartitionContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_usePartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8857);
			match(PARTITION_SYMBOL);
			setState(8858);
			identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldIdentifierContext extends ParserRuleContext {
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFieldIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFieldIdentifier(this);
			}
		}
	}

	public final FieldIdentifierContext fieldIdentifier() throws RecognitionException {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_fieldIdentifier);
		try {
			setState(8865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8860);
				dotIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8861);
				qualifiedIdentifier();
				setState(8863);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1121,_ctx) ) {
				case 1:
					{
					setState(8862);
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterColumnName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitColumnName(this);
			}
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8867);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnInternalRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterColumnInternalRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitColumnInternalRef(this);
			}
		}
	}

	public final ColumnInternalRefContext columnInternalRef() throws RecognitionException {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_columnInternalRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8869);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnInternalRefListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ColumnInternalRefContext> columnInternalRef() {
			return getRuleContexts(ColumnInternalRefContext.class);
		}
		public ColumnInternalRefContext columnInternalRef(int i) {
			return getRuleContext(ColumnInternalRefContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterColumnInternalRefList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitColumnInternalRefList(this);
			}
		}
	}

	public final ColumnInternalRefListContext columnInternalRefList() throws RecognitionException {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_columnInternalRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8871);
			match(OPEN_PAR_SYMBOL);
			setState(8872);
			columnInternalRef();
			setState(8877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8873);
				match(COMMA_SYMBOL);
				setState(8874);
				columnInternalRef();
				}
				}
				setState(8879);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8880);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterColumnRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitColumnRef(this);
			}
		}
	}

	public final ColumnRefContext columnRef() throws RecognitionException {
		ColumnRefContext _localctx = new ColumnRefContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_columnRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8882);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertIdentifierContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInsertIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInsertIdentifier(this);
			}
		}
	}

	public final InsertIdentifierContext insertIdentifier() throws RecognitionException {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_insertIdentifier);
		try {
			setState(8886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1124,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8884);
				columnRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8885);
				tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexName(this);
			}
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8888);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIndexRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIndexRef(this);
			}
		}
	}

	public final IndexRefContext indexRef() throws RecognitionException {
		IndexRefContext _localctx = new IndexRefContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_indexRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8890);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableWildContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT_SYMBOL() { return getTokens(MySQLParser.DOT_SYMBOL); }
		public TerminalNode DOT_SYMBOL(int i) {
			return getToken(MySQLParser.DOT_SYMBOL, i);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TableWildContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableWild; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableWild(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableWild(this);
			}
		}
	}

	public final TableWildContext tableWild() throws RecognitionException {
		TableWildContext _localctx = new TableWildContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_tableWild);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8892);
			identifier();
			setState(8893);
			match(DOT_SYMBOL);
			setState(8897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1125,_ctx) ) {
			case 1:
				{
				setState(8894);
				identifier();
				setState(8895);
				match(DOT_SYMBOL);
				}
				break;
			}
			setState(8899);
			match(MULT_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSchemaName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSchemaName(this);
			}
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8901);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSchemaRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSchemaRef(this);
			}
		}
	}

	public final SchemaRefContext schemaRef() throws RecognitionException {
		SchemaRefContext _localctx = new SchemaRefContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_schemaRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8903);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterProcedureName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitProcedureName(this);
			}
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8905);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterProcedureRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitProcedureRef(this);
			}
		}
	}

	public final ProcedureRefContext procedureRef() throws RecognitionException {
		ProcedureRefContext _localctx = new ProcedureRefContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_procedureRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8907);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFunctionName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFunctionName(this);
			}
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8909);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFunctionRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFunctionRef(this);
			}
		}
	}

	public final FunctionRefContext functionRef() throws RecognitionException {
		FunctionRefContext _localctx = new FunctionRefContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_functionRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8911);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTriggerName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTriggerName(this);
			}
		}
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 1350, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8913);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTriggerRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTriggerRef(this);
			}
		}
	}

	public final TriggerRefContext triggerRef() throws RecognitionException {
		TriggerRefContext _localctx = new TriggerRefContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_triggerRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8915);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterViewName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitViewName(this);
			}
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_viewName);
		try {
			setState(8919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8917);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8918);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterViewRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitViewRef(this);
			}
		}
	}

	public final ViewRefContext viewRef() throws RecognitionException {
		ViewRefContext _localctx = new ViewRefContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_viewRef);
		try {
			setState(8923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1127,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8921);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8922);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablespaceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTablespaceName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTablespaceName(this);
			}
		}
	}

	public final TablespaceNameContext tablespaceName() throws RecognitionException {
		TablespaceNameContext _localctx = new TablespaceNameContext(_ctx, getState());
		enterRule(_localctx, 1358, RULE_tablespaceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8925);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablespaceRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTablespaceRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTablespaceRef(this);
			}
		}
	}

	public final TablespaceRefContext tablespaceRef() throws RecognitionException {
		TablespaceRefContext _localctx = new TablespaceRefContext(_ctx, getState());
		enterRule(_localctx, 1360, RULE_tablespaceRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8927);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LogfileGroupNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLogfileGroupName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLogfileGroupName(this);
			}
		}
	}

	public final LogfileGroupNameContext logfileGroupName() throws RecognitionException {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(_ctx, getState());
		enterRule(_localctx, 1362, RULE_logfileGroupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8929);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LogfileGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLogfileGroupRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLogfileGroupRef(this);
			}
		}
	}

	public final LogfileGroupRefContext logfileGroupRef() throws RecognitionException {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(_ctx, getState());
		enterRule(_localctx, 1364, RULE_logfileGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8931);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EventNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterEventName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitEventName(this);
			}
		}
	}

	public final EventNameContext eventName() throws RecognitionException {
		EventNameContext _localctx = new EventNameContext(_ctx, getState());
		enterRule(_localctx, 1366, RULE_eventName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8933);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EventRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterEventRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitEventRef(this);
			}
		}
	}

	public final EventRefContext eventRef() throws RecognitionException {
		EventRefContext _localctx = new EventRefContext(_ctx, getState());
		enterRule(_localctx, 1368, RULE_eventRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8935);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UdfNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUdfName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUdfName(this);
			}
		}
	}

	public final UdfNameContext udfName() throws RecognitionException {
		UdfNameContext _localctx = new UdfNameContext(_ctx, getState());
		enterRule(_localctx, 1370, RULE_udfName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8937);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServerNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterServerName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitServerName(this);
			}
		}
	}

	public final ServerNameContext serverName() throws RecognitionException {
		ServerNameContext _localctx = new ServerNameContext(_ctx, getState());
		enterRule(_localctx, 1372, RULE_serverName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8939);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServerRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterServerRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitServerRef(this);
			}
		}
	}

	public final ServerRefContext serverRef() throws RecognitionException {
		ServerRefContext _localctx = new ServerRefContext(_ctx, getState());
		enterRule(_localctx, 1374, RULE_serverRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8941);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EngineRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterEngineRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitEngineRef(this);
			}
		}
	}

	public final EngineRefContext engineRef() throws RecognitionException {
		EngineRefContext _localctx = new EngineRefContext(_ctx, getState());
		enterRule(_localctx, 1376, RULE_engineRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8943);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableName(this);
			}
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 1378, RULE_tableName);
		try {
			setState(8947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1128,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8945);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8946);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterTableRefContext extends ParserRuleContext {
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFilterTableRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFilterTableRef(this);
			}
		}
	}

	public final FilterTableRefContext filterTableRef() throws RecognitionException {
		FilterTableRefContext _localctx = new FilterTableRefContext(_ctx, getState());
		enterRule(_localctx, 1380, RULE_filterTableRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8949);
			schemaRef();
			setState(8950);
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableRefWithWildcardContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefWithWildcard; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableRefWithWildcard(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableRefWithWildcard(this);
			}
		}
	}

	public final TableRefWithWildcardContext tableRefWithWildcard() throws RecognitionException {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(_ctx, getState());
		enterRule(_localctx, 1382, RULE_tableRefWithWildcard);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8952);
			identifier();
			setState(8960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1130,_ctx) ) {
			case 1:
				{
				setState(8953);
				match(DOT_SYMBOL);
				setState(8954);
				match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				setState(8955);
				dotIdentifier();
				setState(8958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(8956);
					match(DOT_SYMBOL);
					setState(8957);
					match(MULT_OPERATOR);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableRef(this);
			}
		}
	}

	public final TableRefContext tableRef() throws RecognitionException {
		TableRefContext _localctx = new TableRefContext(_ctx, getState());
		enterRule(_localctx, 1384, RULE_tableRef);
		try {
			setState(8964);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8962);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8963);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableRefListContext extends ParserRuleContext {
		public List<TableRefContext> tableRef() {
			return getRuleContexts(TableRefContext.class);
		}
		public TableRefContext tableRef(int i) {
			return getRuleContext(TableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableRefList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableRefList(this);
			}
		}
	}

	public final TableRefListContext tableRefList() throws RecognitionException {
		TableRefListContext _localctx = new TableRefListContext(_ctx, getState());
		enterRule(_localctx, 1386, RULE_tableRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8966);
			tableRef();
			setState(8971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8967);
				match(COMMA_SYMBOL);
				setState(8968);
				tableRef();
				}
				}
				setState(8973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableAliasRefListContext extends ParserRuleContext {
		public List<TableRefWithWildcardContext> tableRefWithWildcard() {
			return getRuleContexts(TableRefWithWildcardContext.class);
		}
		public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return getRuleContext(TableRefWithWildcardContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAliasRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTableAliasRefList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTableAliasRefList(this);
			}
		}
	}

	public final TableAliasRefListContext tableAliasRefList() throws RecognitionException {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(_ctx, getState());
		enterRule(_localctx, 1388, RULE_tableAliasRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8974);
			tableRefWithWildcard();
			setState(8979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8975);
				match(COMMA_SYMBOL);
				setState(8976);
				tableRefWithWildcard();
				}
				}
				setState(8981);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterParameterName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitParameterName(this);
			}
		}
	}

	public final ParameterNameContext parameterName() throws RecognitionException {
		ParameterNameContext _localctx = new ParameterNameContext(_ctx, getState());
		enterRule(_localctx, 1390, RULE_parameterName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8982);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLabelIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLabelIdentifier(this);
			}
		}
	}

	public final LabelIdentifierContext labelIdentifier() throws RecognitionException {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1392, RULE_labelIdentifier);
		try {
			setState(8986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8984);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8985);
				labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelRefContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLabelRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLabelRef(this);
			}
		}
	}

	public final LabelRefContext labelRef() throws RecognitionException {
		LabelRefContext _localctx = new LabelRefContext(_ctx, getState());
		enterRule(_localctx, 1394, RULE_labelRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8988);
			labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public RoleKeywordContext roleKeyword() {
			return getRuleContext(RoleKeywordContext.class,0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoleIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoleIdentifier(this);
			}
		}
	}

	public final RoleIdentifierContext roleIdentifier() throws RecognitionException {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1396, RULE_roleIdentifier);
		try {
			setState(8992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1135,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8990);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8991);
				roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PluginRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pluginRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPluginRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPluginRef(this);
			}
		}
	}

	public final PluginRefContext pluginRef() throws RecognitionException {
		PluginRefContext _localctx = new PluginRefContext(_ctx, getState());
		enterRule(_localctx, 1398, RULE_pluginRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8994);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComponentRefContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_componentRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterComponentRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitComponentRef(this);
			}
		}
	}

	public final ComponentRefContext componentRef() throws RecognitionException {
		ComponentRefContext _localctx = new ComponentRefContext(_ctx, getState());
		enterRule(_localctx, 1400, RULE_componentRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8996);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterResourceGroupRef(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitResourceGroupRef(this);
			}
		}
	}

	public final ResourceGroupRefContext resourceGroupRef() throws RecognitionException {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(_ctx, getState());
		enterRule(_localctx, 1402, RULE_resourceGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8998);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterWindowName(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitWindowName(this);
			}
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 1404, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9000);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PureIdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(MySQLParser.IDENTIFIER, 0); }
		public TerminalNode BACK_TICK_QUOTED_ID() { return getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pureIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPureIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPureIdentifier(this);
			}
		}
	}

	public final PureIdentifierContext pureIdentifier() throws RecognitionException {
		PureIdentifierContext _localctx = new PureIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1406, RULE_pureIdentifier);
		int _la;
		try {
			setState(9005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9002);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9003);
				if (!(this.isPureIdentifier())) {
					throw new FailedPredicateException(this, "this.isPureIdentifier()");
				}
				setState(9004);
				match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public IdentifierKeywordContext identifierKeyword() {
			return getRuleContext(IdentifierKeywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifier(this);
			}
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1408, RULE_identifier);
		try {
			setState(9009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9007);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9008);
				identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifierList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifierList(this);
			}
		}
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 1410, RULE_identifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9011);
			identifier();
			setState(9016);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1138,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9012);
					match(COMMA_SYMBOL);
					setState(9013);
					identifier();
					}
					}
				}
				setState(9018);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1138,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierListWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifierListWithParentheses(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifierListWithParentheses(this);
			}
		}
	}

	public final IdentifierListWithParenthesesContext identifierListWithParentheses() throws RecognitionException {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1412, RULE_identifierListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9019);
			match(OPEN_PAR_SYMBOL);
			setState(9020);
			identifierList();
			setState(9021);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterQualifiedIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitQualifiedIdentifier(this);
			}
		}
	}

	public final QualifiedIdentifierContext qualifiedIdentifier() throws RecognitionException {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1414, RULE_qualifiedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9023);
			identifier();
			setState(9025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1139,_ctx) ) {
			case 1:
				{
				setState(9024);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<DotIdentifierContext> dotIdentifier() {
			return getRuleContexts(DotIdentifierContext.class);
		}
		public DotIdentifierContext dotIdentifier(int i) {
			return getRuleContext(DotIdentifierContext.class,i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSimpleIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSimpleIdentifier(this);
			}
		}
	}

	public final SimpleIdentifierContext simpleIdentifier() throws RecognitionException {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1416, RULE_simpleIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9027);
			identifier();
			setState(9032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_SYMBOL) {
				{
				setState(9028);
				dotIdentifier();
				setState(9030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(9029);
					dotIdentifier();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DotIdentifierContext extends ParserRuleContext {
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dotIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterDotIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitDotIdentifier(this);
			}
		}
	}

	public final DotIdentifierContext dotIdentifier() throws RecognitionException {
		DotIdentifierContext _localctx = new DotIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1418, RULE_dotIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9034);
			match(DOT_SYMBOL);
			setState(9035);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUlong_number(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUlong_number(this);
			}
		}
	}

	public final Ulong_numberContext ulong_number() throws RecognitionException {
		Ulong_numberContext _localctx = new Ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1420, RULE_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9037);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 228698418577464L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Real_ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReal_ulong_number(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReal_ulong_number(this);
			}
		}
	}

	public final Real_ulong_numberContext real_ulong_number() throws RecognitionException {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1422, RULE_real_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9039);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186044472L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UlonglongNumberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public UlonglongNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulonglongNumber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterUlonglongNumber(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitUlonglongNumber(this);
			}
		}
	}

	public final UlonglongNumberContext ulonglongNumber() throws RecognitionException {
		UlonglongNumberContext _localctx = new UlonglongNumberContext(_ctx, getState());
		enterRule(_localctx, 1424, RULE_ulonglongNumber);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9041);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 211106232533048L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Real_ulonglong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulonglong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterReal_ulonglong_number(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitReal_ulonglong_number(this);
			}
		}
	}

	public final Real_ulonglong_numberContext real_ulonglong_number() throws RecognitionException {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(_ctx, getState());
		enterRule(_localctx, 1426, RULE_real_ulonglong_number);
		try {
			setState(9048);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1142,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9043);
				match(INT_NUMBER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9044);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(9045);
				match(HEX_NUMBER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9046);
				match(ULONGLONG_NUMBER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9047);
				match(LONG_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignedLiteralContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSignedLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSignedLiteral(this);
			}
		}
	}

	public final SignedLiteralContext signedLiteral() throws RecognitionException {
		SignedLiteralContext _localctx = new SignedLiteralContext(_ctx, getState());
		enterRule(_localctx, 1428, RULE_signedLiteral);
		try {
			setState(9055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9050);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9051);
				match(PLUS_OPERATOR);
				setState(9052);
				ulong_number();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9053);
				match(MINUS_OPERATOR);
				setState(9054);
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignedLiteralOrNullContext extends ParserRuleContext {
		public SignedLiteralContext signedLiteral() {
			return getRuleContext(SignedLiteralContext.class,0);
		}
		public NullAsLiteralContext nullAsLiteral() {
			return getRuleContext(NullAsLiteralContext.class,0);
		}
		public SignedLiteralOrNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedLiteralOrNull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSignedLiteralOrNull(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSignedLiteralOrNull(this);
			}
		}
	}

	public final SignedLiteralOrNullContext signedLiteralOrNull() throws RecognitionException {
		SignedLiteralOrNullContext _localctx = new SignedLiteralOrNullContext(_ctx, getState());
		enterRule(_localctx, 1430, RULE_signedLiteralOrNull);
		try {
			setState(9060);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1144,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9057);
				signedLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9058);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(9059);
				nullAsLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LiteralContext extends ParserRuleContext {
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public NumLiteralContext numLiteral() {
			return getRuleContext(NumLiteralContext.class,0);
		}
		public TemporalLiteralContext temporalLiteral() {
			return getRuleContext(TemporalLiteralContext.class,0);
		}
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public BoolLiteralContext boolLiteral() {
			return getRuleContext(BoolLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MySQLParser.BIN_NUMBER, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLiteral(this);
			}
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 1432, RULE_literal);
		int _la;
		try {
			setState(9071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9062);
				textLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9063);
				numLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9064);
				temporalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9065);
				nullLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9066);
				boolLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					setState(9067);
					match(UNDERSCORE_CHARSET);
					}
				}

				setState(9070);
				_la = _input.LA(1);
				if ( !(_la==HEX_NUMBER || _la==BIN_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LiteralOrNullContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public NullAsLiteralContext nullAsLiteral() {
			return getRuleContext(NullAsLiteralContext.class,0);
		}
		public LiteralOrNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalOrNull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLiteralOrNull(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLiteralOrNull(this);
			}
		}
	}

	public final LiteralOrNullContext literalOrNull() throws RecognitionException {
		LiteralOrNullContext _localctx = new LiteralOrNullContext(_ctx, getState());
		enterRule(_localctx, 1434, RULE_literalOrNull);
		try {
			setState(9076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9073);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9074);
				if (!(this.isServerVersionGe80024())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80024()");
				}
				setState(9075);
				nullAsLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullAsLiteralContext extends ParserRuleContext {
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public NullAsLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullAsLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNullAsLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNullAsLiteral(this);
			}
		}
	}

	public final NullAsLiteralContext nullAsLiteral() throws RecognitionException {
		NullAsLiteralContext _localctx = new NullAsLiteralContext(_ctx, getState());
		enterRule(_localctx, 1436, RULE_nullAsLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9078);
			match(NULL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStringList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStringList(this);
			}
		}
	}

	public final StringListContext stringList() throws RecognitionException {
		StringListContext _localctx = new StringListContext(_ctx, getState());
		enterRule(_localctx, 1438, RULE_stringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9080);
			match(OPEN_PAR_SYMBOL);
			setState(9081);
			textString();
			setState(9086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(9082);
				match(COMMA_SYMBOL);
				setState(9083);
				textString();
				}
				}
				setState(9088);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9089);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TextStringLiteralContext extends ParserRuleContext {
		public Token value;
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTextStringLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTextStringLiteral(this);
			}
		}
	}

	public final TextStringLiteralContext textStringLiteral() throws RecognitionException {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 1440, RULE_textStringLiteral);
		try {
			setState(9094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1149,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9091);
				_localctx.value = match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9092);
				if (!(this.isTextStringLiteral())) {
					throw new FailedPredicateException(this, "this.isTextStringLiteral()");
				}
				setState(9093);
				_localctx.value = match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TextStringContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MySQLParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTextString(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTextString(this);
			}
		}
	}

	public final TextStringContext textString() throws RecognitionException {
		TextStringContext _localctx = new TextStringContext(_ctx, getState());
		enterRule(_localctx, 1442, RULE_textString);
		try {
			setState(9099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1150,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9096);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9097);
				match(HEX_NUMBER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9098);
				match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TextStringHashContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TextStringHashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringHash; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTextStringHash(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTextStringHash(this);
			}
		}
	}

	public final TextStringHashContext textStringHash() throws RecognitionException {
		TextStringHashContext _localctx = new TextStringHashContext(_ctx, getState());
		enterRule(_localctx, 1444, RULE_textStringHash);
		try {
			setState(9104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1151,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9101);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9102);
				if (!(this.isServerVersionGe80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80017()");
				}
				setState(9103);
				match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TextLiteralContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public TerminalNode NCHAR_TEXT() { return getToken(MySQLParser.NCHAR_TEXT, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTextLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTextLiteral(this);
			}
		}
	}

	public final TextLiteralContext textLiteral() throws RecognitionException {
		TextLiteralContext _localctx = new TextLiteralContext(_ctx, getState());
		enterRule(_localctx, 1446, RULE_textLiteral);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1153,_ctx) ) {
			case 1:
				{
				setState(9107);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1152,_ctx) ) {
				case 1:
					{
					setState(9106);
					match(UNDERSCORE_CHARSET);
					}
					break;
				}
				setState(9109);
				textStringLiteral();
				}
				break;
			case 2:
				{
				setState(9110);
				match(NCHAR_TEXT);
				}
				break;
			}
			setState(9116);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1154,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9113);
					textStringLiteral();
					}
					}
				}
				setState(9118);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1154,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TextStringNoLinebreakContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringNoLinebreak; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTextStringNoLinebreak(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTextStringNoLinebreak(this);
			}
		}
	}

	public final TextStringNoLinebreakContext textStringNoLinebreak() throws RecognitionException {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(_ctx, getState());
		enterRule(_localctx, 1448, RULE_textStringNoLinebreak);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9119);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TextStringLiteralListContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteralList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTextStringLiteralList(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTextStringLiteralList(this);
			}
		}
	}

	public final TextStringLiteralListContext textStringLiteralList() throws RecognitionException {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(_ctx, getState());
		enterRule(_localctx, 1450, RULE_textStringLiteralList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9121);
			textStringLiteral();
			setState(9126);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1155,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9122);
					match(COMMA_SYMBOL);
					setState(9123);
					textStringLiteral();
					}
					}
				}
				setState(9128);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1155,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumLiteralContext extends ParserRuleContext {
		public Int64LiteralContext int64Literal() {
			return getRuleContext(Int64LiteralContext.class,0);
		}
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNumLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNumLiteral(this);
			}
		}
	}

	public final NumLiteralContext numLiteral() throws RecognitionException {
		NumLiteralContext _localctx = new NumLiteralContext(_ctx, getState());
		enterRule(_localctx, 1452, RULE_numLiteral);
		try {
			setState(9132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9129);
				int64Literal();
				}
				break;
			case DECIMAL_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(9130);
				match(DECIMAL_NUMBER);
				}
				break;
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(9131);
				match(FLOAT_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BoolLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE_SYMBOL() { return getToken(MySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MySQLParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterBoolLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitBoolLiteral(this);
			}
		}
	}

	public final BoolLiteralContext boolLiteral() throws RecognitionException {
		BoolLiteralContext _localctx = new BoolLiteralContext(_ctx, getState());
		enterRule(_localctx, 1454, RULE_boolLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9134);
			_la = _input.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullLiteralContext extends ParserRuleContext {
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode NULL2_SYMBOL() { return getToken(MySQLParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterNullLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitNullLiteral(this);
			}
		}
	}

	public final NullLiteralContext nullLiteral() throws RecognitionException {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, getState());
		enterRule(_localctx, 1456, RULE_nullLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9136);
			_la = _input.LA(1);
			if ( !(_la==NULL2_SYMBOL || _la==NULL_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Int64LiteralContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public Int64LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int64Literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterInt64Literal(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitInt64Literal(this);
			}
		}
	}

	public final Int64LiteralContext int64Literal() throws RecognitionException {
		Int64LiteralContext _localctx = new Int64LiteralContext(_ctx, getState());
		enterRule(_localctx, 1458, RULE_int64Literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9138);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 56L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalLiteralContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTemporalLiteral(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTemporalLiteral(this);
			}
		}
	}

	public final TemporalLiteralContext temporalLiteral() throws RecognitionException {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(_ctx, getState());
		enterRule(_localctx, 1460, RULE_temporalLiteral);
		try {
			setState(9146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9140);
				match(DATE_SYMBOL);
				setState(9141);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9142);
				match(TIME_SYMBOL);
				setState(9143);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(9144);
				match(TIMESTAMP_SYMBOL);
				setState(9145);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FloatOptionsContext extends ParserRuleContext {
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterFloatOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitFloatOptions(this);
			}
		}
	}

	public final FloatOptionsContext floatOptions() throws RecognitionException {
		FloatOptionsContext _localctx = new FloatOptionsContext(_ctx, getState());
		enterRule(_localctx, 1462, RULE_floatOptions);
		try {
			setState(9150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9148);
				fieldLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9149);
				precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StandardFloatOptionsContext extends ParserRuleContext {
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public StandardFloatOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standardFloatOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterStandardFloatOptions(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitStandardFloatOptions(this);
			}
		}
	}

	public final StandardFloatOptionsContext standardFloatOptions() throws RecognitionException {
		StandardFloatOptionsContext _localctx = new StandardFloatOptionsContext(_ctx, getState());
		enterRule(_localctx, 1464, RULE_standardFloatOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9152);
			precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterPrecision(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitPrecision(this);
			}
		}
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 1466, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9154);
			match(OPEN_PAR_SYMBOL);
			setState(9155);
			match(INT_NUMBER);
			setState(9156);
			match(COMMA_SYMBOL);
			setState(9157);
			match(INT_NUMBER);
			setState(9158);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TextOrIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textOrIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterTextOrIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitTextOrIdentifier(this);
			}
		}
	}

	public final TextOrIdentifierContext textOrIdentifier() throws RecognitionException {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1468, RULE_textOrIdentifier);
		try {
			setState(9162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9160);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9161);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LValueIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public LValueKeywordContext lValueKeyword() {
			return getRuleContext(LValueKeywordContext.class,0);
		}
		public LValueIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lValueIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLValueIdentifier(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLValueIdentifier(this);
			}
		}
	}

	public final LValueIdentifierContext lValueIdentifier() throws RecognitionException {
		LValueIdentifierContext _localctx = new LValueIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1470, RULE_lValueIdentifier);
		try {
			setState(9166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9164);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9165);
				lValueKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleIdentifierOrTextContext extends ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return getRuleContext(RoleIdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifierOrText; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoleIdentifierOrText(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoleIdentifierOrText(this);
			}
		}
	}

	public final RoleIdentifierOrTextContext roleIdentifierOrText() throws RecognitionException {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 1472, RULE_roleIdentifierOrText);
		try {
			setState(9170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9168);
				roleIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9169);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SizeNumberContext extends ParserRuleContext {
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sizeNumber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSizeNumber(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSizeNumber(this);
			}
		}
	}

	public final SizeNumberContext sizeNumber() throws RecognitionException {
		SizeNumberContext _localctx = new SizeNumberContext(_ctx, getState());
		enterRule(_localctx, 1474, RULE_sizeNumber);
		try {
			setState(9174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1162,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9172);
				real_ulonglong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9173);
				pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterParentheses(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitParentheses(this);
			}
		}
	}

	public final ParenthesesContext parentheses() throws RecognitionException {
		ParenthesesContext _localctx = new ParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1476, RULE_parentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9176);
			match(OPEN_PAR_SYMBOL);
			setState(9177);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EqualContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode ASSIGN_OPERATOR() { return getToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterEqual(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitEqual(this);
			}
		}
	}

	public final EqualContext equal() throws RecognitionException {
		EqualContext _localctx = new EqualContext(_ctx, getState());
		enterRule(_localctx, 1478, RULE_equal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9179);
			_la = _input.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionTypeContext extends ParserRuleContext {
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterOptionType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitOptionType(this);
			}
		}
	}

	public final OptionTypeContext optionType() throws RecognitionException {
		OptionTypeContext _localctx = new OptionTypeContext(_ctx, getState());
		enterRule(_localctx, 1480, RULE_optionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9181);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RvalueSystemVariableTypeContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public RvalueSystemVariableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rvalueSystemVariableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRvalueSystemVariableType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRvalueSystemVariableType(this);
			}
		}
	}

	public final RvalueSystemVariableTypeContext rvalueSystemVariableType() throws RecognitionException {
		RvalueSystemVariableTypeContext _localctx = new RvalueSystemVariableTypeContext(_ctx, getState());
		enterRule(_localctx, 1482, RULE_rvalueSystemVariableType);
		try {
			setState(9189);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9183);
				match(GLOBAL_SYMBOL);
				setState(9184);
				match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9185);
				match(LOCAL_SYMBOL);
				setState(9186);
				match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(9187);
				match(SESSION_SYMBOL);
				setState(9188);
				match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetVarIdentTypeContext extends ParserRuleContext {
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setVarIdentType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterSetVarIdentType(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitSetVarIdentType(this);
			}
		}
	}

	public final SetVarIdentTypeContext setVarIdentType() throws RecognitionException {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(_ctx, getState());
		enterRule(_localctx, 1484, RULE_setVarIdentType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9191);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9192);
			match(DOT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonAttributeContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public JsonAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterJsonAttribute(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitJsonAttribute(this);
			}
		}
	}

	public final JsonAttributeContext jsonAttribute() throws RecognitionException {
		JsonAttributeContext _localctx = new JsonAttributeContext(_ctx, getState());
		enterRule(_localctx, 1486, RULE_jsonAttribute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9194);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierKeywordContext extends ParserRuleContext {
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return getRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifierKeyword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifierKeyword(this);
			}
		}
	}

	public final IdentifierKeywordContext identifierKeyword() throws RecognitionException {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1488, RULE_identifierKeyword);
		try {
			setState(9212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1166,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9196);
				if (!(this.isServerVersionLt80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80017()");
				}
				setState(9203);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1164,_ctx) ) {
				case 1:
					{
					setState(9197);
					labelKeyword();
					}
					break;
				case 2:
					{
					setState(9198);
					roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					setState(9199);
					match(EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					setState(9200);
					match(SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					setState(9201);
					if (!(this.isServerVersionGe80011())) {
						throw new FailedPredicateException(this, "this.isServerVersionGe80011()");
					}
					setState(9202);
					match(RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9210);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1165,_ctx) ) {
				case 1:
					{
					setState(9205);
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					setState(9206);
					identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case 3:
					{
					setState(9207);
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 4:
					{
					setState(9208);
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 5:
					{
					setState(9209);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext {
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous1RolesAndLabels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
			}
		}
	}

	public final IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() throws RecognitionException {
		IdentifierKeywordsAmbiguous1RolesAndLabelsContext _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(_ctx, getState());
		enterRule(_localctx, 1490, RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9214);
			_la = _input.LA(1);
			if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==RESTART_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext {
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous2Labels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifierKeywordsAmbiguous2Labels(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifierKeywordsAmbiguous2Labels(this);
			}
		}
	}

	public final IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() throws RecognitionException {
		IdentifierKeywordsAmbiguous2LabelsContext _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(_ctx, getState());
		enterRule(_localctx, 1492, RULE_identifierKeywordsAmbiguous2Labels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9216);
			_la = _input.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 45036683569136129L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 4612811919407972353L) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & 563224906825731L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & 10995116277761L) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & 22518006743572481L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & -4602678819172646399L) != 0) || _la==XA_SYMBOL || _la==CLONE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public LabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLabelKeyword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLabelKeyword(this);
			}
		}
	}

	public final LabelKeywordContext labelKeyword() throws RecognitionException {
		LabelKeywordContext _localctx = new LabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1494, RULE_labelKeyword);
		try {
			setState(9236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9218);
				if (!(this.isServerVersionLt80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80017()");
				}
				setState(9229);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1167,_ctx) ) {
				case 1:
					{
					setState(9219);
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					setState(9220);
					match(EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					setState(9221);
					match(FILE_SYMBOL);
					}
					break;
				case 4:
					{
					setState(9222);
					match(NONE_SYMBOL);
					}
					break;
				case 5:
					{
					setState(9223);
					match(PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					setState(9224);
					match(PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					setState(9225);
					match(RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					setState(9226);
					match(REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					setState(9227);
					match(RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					setState(9228);
					match(SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1168,_ctx) ) {
				case 1:
					{
					setState(9231);
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					setState(9232);
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 3:
					{
					setState(9233);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous3Roles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifierKeywordsAmbiguous3Roles(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifierKeywordsAmbiguous3Roles(this);
			}
		}
	}

	public final IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() throws RecognitionException {
		IdentifierKeywordsAmbiguous3RolesContext _localctx = new IdentifierKeywordsAmbiguous3RolesContext(_ctx, getState());
		enterRule(_localctx, 1496, RULE_identifierKeywordsAmbiguous3Roles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9238);
			_la = _input.LA(1);
			if ( !(_la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 76561193665298433L) != 0) || _la==RELOAD_SYMBOL || _la==REPLICATION_SYMBOL || _la==SUPER_SYMBOL || _la==RESOURCE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierKeywordsUnambiguousContext extends ParserRuleContext {
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TerminalNode ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0); }
		public TerminalNode AUTHENTICATION_SYMBOL() { return getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode CHALLENGE_RESPONSE_SYMBOL() { return getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode DEFINITION_SYMBOL() { return getToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public TerminalNode ENFORCED_SYMBOL() { return getToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public TerminalNode FACTOR_SYMBOL() { return getToken(MySQLParser.FACTOR_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public TerminalNode FINISH_SYMBOL() { return getToken(MySQLParser.FINISH_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public TerminalNode GET_SOURCE_PUBLIC_KEY_SYMBOL() { return getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode GTID_ONLY_SYMBOL() { return getToken(MySQLParser.GTID_ONLY_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode INITIAL_SYMBOL() { return getToken(MySQLParser.INITIAL_SYMBOL, 0); }
		public TerminalNode INITIATE_SYMBOL() { return getToken(MySQLParser.INITIATE_SYMBOL, 0); }
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode JSON_VALUE_SYMBOL() { return getToken(MySQLParser.JSON_VALUE_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode KEYRING_SYMBOL() { return getToken(MySQLParser.KEYRING_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode LOCKS_SYMBOL() { return getToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode NETWORK_NAMESPACE_SYMBOL() { return getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode NDBCLUSTER_SYMBOL() { return getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode NEW_SYMBOL() { return getToken(MySQLParser.NEW_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public TerminalNode OJ_SYMBOL() { return getToken(MySQLParser.OJ_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode REGISTRATION_SYMBOL() { return getToken(MySQLParser.REGISTRATION_SYMBOL, 0); }
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL() { return getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode REPLICAS_SYMBOL() { return getToken(MySQLParser.REPLICAS_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICA_SYMBOL() { return getToken(MySQLParser.REPLICA_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode RETAIN_SYMBOL() { return getToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public TerminalNode RETURNING_SYMBOL() { return getToken(MySQLParser.RETURNING_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode SOURCE_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode SOURCE_BIND_SYMBOL() { return getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0); }
		public TerminalNode SOURCE_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TerminalNode SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL() { return getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0); }
		public TerminalNode SOURCE_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode SOURCE_DELAY_SYMBOL() { return getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0); }
		public TerminalNode SOURCE_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode SOURCE_HOST_SYMBOL() { return getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0); }
		public TerminalNode SOURCE_LOG_FILE_SYMBOL() { return getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0); }
		public TerminalNode SOURCE_LOG_POS_SYMBOL() { return getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0); }
		public TerminalNode SOURCE_PASSWORD_SYMBOL() { return getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0); }
		public TerminalNode SOURCE_PORT_SYMBOL() { return getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0); }
		public TerminalNode SOURCE_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode SOURCE_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CA_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CERT_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_CRL_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_KEY_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0); }
		public TerminalNode SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL() { return getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SOURCE_TLS_CIPHERSUITES_SYMBOL() { return getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0); }
		public TerminalNode SOURCE_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode SOURCE_USER_SYMBOL() { return getToken(MySQLParser.SOURCE_USER_SYMBOL, 0); }
		public TerminalNode SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode ST_COLLECT_SYMBOL() { return getToken(MySQLParser.ST_COLLECT_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode TIMESTAMPADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMPDIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TLS_SYMBOL() { return getToken(MySQLParser.TLS_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TYPES_SYMBOL() { return getToken(MySQLParser.TYPES_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode UNREGISTER_SYMBOL() { return getToken(MySQLParser.UNREGISTER_SYMBOL, 0); }
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode ZONE_SYMBOL() { return getToken(MySQLParser.ZONE_SYMBOL, 0); }
		public TerminalNode ARRAY_SYMBOL() { return getToken(MySQLParser.ARRAY_SYMBOL, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		public TerminalNode MEMBER_SYMBOL() { return getToken(MySQLParser.MEMBER_SYMBOL, 0); }
		public TerminalNode OFF_SYMBOL() { return getToken(MySQLParser.OFF_SYMBOL, 0); }
		public TerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		public TerminalNode STREAM_SYMBOL() { return getToken(MySQLParser.STREAM_SYMBOL, 0); }
		public TerminalNode BULK_SYMBOL() { return getToken(MySQLParser.BULK_SYMBOL, 0); }
		public TerminalNode GENERATE_SYMBOL() { return getToken(MySQLParser.GENERATE_SYMBOL, 0); }
		public TerminalNode GTIDS_SYMBOL() { return getToken(MySQLParser.GTIDS_SYMBOL, 0); }
		public TerminalNode LOG_SYMBOL() { return getToken(MySQLParser.LOG_SYMBOL, 0); }
		public TerminalNode PARSE_TREE_SYMBOL() { return getToken(MySQLParser.PARSE_TREE_SYMBOL, 0); }
		public TerminalNode S3_SYMBOL() { return getToken(MySQLParser.S3_SYMBOL, 0); }
		public TerminalNode BERNOULLI_SYMBOL() { return getToken(MySQLParser.BERNOULLI_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsUnambiguous; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifierKeywordsUnambiguous(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifierKeywordsUnambiguous(this);
			}
		}
	}

	public final IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() throws RecognitionException {
		IdentifierKeywordsUnambiguousContext _localctx = new IdentifierKeywordsUnambiguousContext(_ctx, getState());
		enterRule(_localctx, 1498, RULE_identifierKeywordsUnambiguous);
		int _la;
		try {
			setState(9245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9240);
				_la = _input.LA(1);
				if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & 9086892652644541691L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & -4412943208922816677L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & -8429668761677951481L) != 0) || ((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & 7283684567714153551L) != 0) || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & 6223708532345118931L) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & -8648045939034882561L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 8175298952803425509L) != 0) || ((((_la - 501)) & ~0x3f) == 0 && ((1L << (_la - 501)) & 4749773417287869291L) != 0) || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & 8440016285667793983L) != 0) || ((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & -9132393641699904475L) != 0) || ((((_la - 698)) & ~0x3f) == 0 && ((1L << (_la - 698)) & 8611416781445657001L) != 0) || ((((_la - 762)) & ~0x3f) == 0 && ((1L << (_la - 762)) & 2199023255551L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9241);
				if (!(this.isServerVersionGe80019())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80019()");
				}
				setState(9242);
				_la = _input.LA(1);
				if ( !(_la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL || ((((_la - 739)) & ~0x3f) == 0 && ((1L << (_la - 739)) & 16381L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9243);
				if (!(this.isServerVersionGe80200())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80200()");
				}
				setState(9244);
				_la = _input.LA(1);
				if ( !(((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & 2237L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoleKeyword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoleKeyword(this);
			}
		}
	}

	public final RoleKeywordContext roleKeyword() throws RecognitionException {
		RoleKeywordContext _localctx = new RoleKeywordContext(_ctx, getState());
		enterRule(_localctx, 1500, RULE_roleKeyword);
		try {
			setState(9257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1173,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9247);
				if (!(this.isServerVersionLt80017())) {
					throw new FailedPredicateException(this, "this.isServerVersionLt80017()");
				}
				setState(9250);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1171,_ctx) ) {
				case 1:
					{
					setState(9248);
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					setState(9249);
					roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1172,_ctx) ) {
				case 1:
					{
					setState(9252);
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					setState(9253);
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 3:
					{
					setState(9254);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LValueKeywordContext extends ParserRuleContext {
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return getRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public LValueKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lValueKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterLValueKeyword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitLValueKeyword(this);
			}
		}
	}

	public final LValueKeywordContext lValueKeyword() throws RecognitionException {
		LValueKeywordContext _localctx = new LValueKeywordContext(_ctx, getState());
		enterRule(_localctx, 1502, RULE_lValueKeyword);
		try {
			setState(9263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9259);
				identifierKeywordsUnambiguous();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9260);
				identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9261);
				identifierKeywordsAmbiguous2Labels();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9262);
				identifierKeywordsAmbiguous3Roles();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous4SystemVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterIdentifierKeywordsAmbiguous4SystemVariables(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitIdentifierKeywordsAmbiguous4SystemVariables(this);
			}
		}
	}

	public final IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() throws RecognitionException {
		IdentifierKeywordsAmbiguous4SystemVariablesContext _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(_ctx, getState());
		enterRule(_localctx, 1504, RULE_identifierKeywordsAmbiguous4SystemVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9265);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleOrIdentifierKeywordContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrIdentifierKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoleOrIdentifierKeyword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoleOrIdentifierKeyword(this);
			}
		}
	}

	public final RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() throws RecognitionException {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1506, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9267);
			_la = _input.LA(1);
			if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & 1197964097992328193L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 35184372121605L) != 0) || ((((_la - 183)) & ~0x3f) == 0 && ((1L << (_la - 183)) & 577692205326536705L) != 0) || ((((_la - 251)) & ~0x3f) == 0 && ((1L << (_la - 251)) & 70368811286569L) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & 11547170643969L) != 0) || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & 7097956755589890057L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & -4602678819172646399L) != 0) || ((((_la - 624)) & ~0x3f) == 0 && ((1L << (_la - 624)) & 2305957397077688321L) != 0) || ((((_la - 728)) & ~0x3f) == 0 && ((1L << (_la - 728)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) {
					matchedEOF = true;
				}
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleOrLabelKeywordContext extends ParserRuleContext {
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode LOCKS_SYMBOL() { return getToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode NDBCLUSTER_SYMBOL() { return getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public TerminalNode NEW_SYMBOL() { return getToken(MySQLParser.NEW_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode REMOTE_SYMBOL() { return getToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode RETAIN_SYMBOL() { return getToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode TIMESTAMPADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMPDIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TYPES_SYMBOL() { return getToken(MySQLParser.TYPES_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode UDF_RETURNS_SYMBOL() { return getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrLabelKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).enterRoleOrLabelKeyword(this);
			}
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) {
				((MySQLParserListener)listener).exitRoleOrLabelKeyword(this);
			}
		}
	}

	public final RoleOrLabelKeywordContext roleOrLabelKeyword() throws RecognitionException {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1508, RULE_roleOrLabelKeyword);
		int _la;
		try {
			setState(9272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1175,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9269);
				_la = _input.LA(1);
				if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & -5256386462840123267L) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & -2206471604461408339L) != 0) || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & 4972508841280096003L) != 0) || ((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & 3641842283857068591L) != 0) || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & 6223708532345118939L) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & -8936355520825983489L) != 0) || ((((_la - 437)) & ~0x3f) == 0 && ((1L << (_la - 437)) & 8174173048601615589L) != 0) || ((((_la - 501)) & ~0x3f) == 0 && ((1L << (_la - 501)) & 4749773415677223275L) != 0) || ((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & 8151794705609104959L) != 0) || ((((_la - 636)) & ~0x3f) == 0 && ((1L << (_la - 636)) & 6940555069192944905L) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & 72057652113112629L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) {
						matchedEOF = true;
					}
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9270);
				if (!(this.isServerVersionGe80014())) {
					throw new FailedPredicateException(this, "this.isServerVersionGe80014()");
				}
				setState(9271);
				match(ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@Override
	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3:
			return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 15:
			return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 19:
			return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 29:
			return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 34:
			return alterTablespaceOption_sempred((AlterTablespaceOptionContext)_localctx, predIndex);
		case 40:
			return alterInstanceStatement_sempred((AlterInstanceStatementContext)_localctx, predIndex);
		case 41:
			return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 43:
			return createDatabaseOption_sempred((CreateDatabaseOptionContext)_localctx, predIndex);
		case 54:
			return storedRoutineBody_sempred((StoredRoutineBodyContext)_localctx, predIndex);
		case 59:
			return routineOption_sempred((RoutineOptionContext)_localctx, predIndex);
		case 71:
			return tsDataFileName_sempred((TsDataFileNameContext)_localctx, predIndex);
		case 74:
			return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 97:
			return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 118:
			return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 132:
			return valuesReference_sempred((ValuesReferenceContext)_localctx, predIndex);
		case 137:
			return loadFrom_sempred((LoadFromContext)_localctx, predIndex);
		case 138:
			return loadSourceType_sempred((LoadSourceTypeContext)_localctx, predIndex);
		case 139:
			return sourceCount_sempred((SourceCountContext)_localctx, predIndex);
		case 140:
			return sourceOrder_sempred((SourceOrderContext)_localctx, predIndex);
		case 145:
			return loadAlgorithm_sempred((LoadAlgorithmContext)_localctx, predIndex);
		case 146:
			return loadParallel_sempred((LoadParallelContext)_localctx, predIndex);
		case 147:
			return loadMemory_sempred((LoadMemoryContext)_localctx, predIndex);
		case 150:
			return selectStatementWithInto_sempred((SelectStatementWithIntoContext)_localctx, predIndex);
		case 152:
			return queryExpressionBody_sempred((QueryExpressionBodyContext)_localctx, predIndex);
		case 154:
			return queryPrimary_sempred((QueryPrimaryContext)_localctx, predIndex);
		case 165:
			return qualifyClause_sempred((QualifyClauseContext)_localctx, predIndex);
		case 179:
			return groupByClause_sempred((GroupByClauseContext)_localctx, predIndex);
		case 189:
			return lockingClauseList_sempred((LockingClauseListContext)_localctx, predIndex);
		case 197:
			return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 203:
			return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 206:
			return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 210:
			return jtColumn_sempred((JtColumnContext)_localctx, predIndex);
		case 217:
			return tableAlias_sempred((TableAliasContext)_localctx, predIndex);
		case 241:
			return masterOrBinaryLogsAndGtids_sempred((MasterOrBinaryLogsAndGtidsContext)_localctx, predIndex);
		case 244:
			return changeReplicationSource_sempred((ChangeReplicationSourceContext)_localctx, predIndex);
		case 247:
			return sourceDefinition_sempred((SourceDefinitionContext)_localctx, predIndex);
		case 307:
			return cloneStatement_sempred((CloneStatementContext)_localctx, predIndex);
		case 311:
			return alterUserStatement_sempred((AlterUserStatementContext)_localctx, predIndex);
		case 313:
			return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 317:
			return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 322:
			return accountLockPasswordExpireOptions_sempred((AccountLockPasswordExpireOptionsContext)_localctx, predIndex);
		case 326:
			return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 331:
			return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 333:
			return revokeStatement_sempred((RevokeStatementContext)_localctx, predIndex);
		case 337:
			return grantIdentifier_sempred((GrantIdentifierContext)_localctx, predIndex);
		case 340:
			return grantOption_sempred((GrantOptionContext)_localctx, predIndex);
		case 345:
			return histogramAutoUpdate_sempred((HistogramAutoUpdateContext)_localctx, predIndex);
		case 346:
			return histogramUpdateParam_sempred((HistogramUpdateParamContext)_localctx, predIndex);
		case 347:
			return histogramNumBuckets_sempred((HistogramNumBucketsContext)_localctx, predIndex);
		case 356:
			return installSetValueList_sempred((InstallSetValueListContext)_localctx, predIndex);
		case 358:
			return startOptionValueList_sempred((StartOptionValueListContext)_localctx, predIndex);
		case 363:
			return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 375:
			return showParseTreeStatement_sempred((ShowParseTreeStatementContext)_localctx, predIndex);
		case 447:
			return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 449:
			return explainStatement_sempred((ExplainStatementContext)_localctx, predIndex);
		case 450:
			return explainOptions_sempred((ExplainOptionsContext)_localctx, predIndex);
		case 456:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 457:
			return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 459:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 461:
			return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 462:
			return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 463:
			return arrayCast_sempred((ArrayCastContext)_localctx, predIndex);
		case 467:
			return windowFunctionCall_sempred((WindowFunctionCallContext)_localctx, predIndex);
		case 470:
			return tablesampleClause_sempred((TablesampleClauseContext)_localctx, predIndex);
		case 472:
			return leadLagInfo_sempred((LeadLagInfoContext)_localctx, predIndex);
		case 481:
			return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 497:
			return lvalueVariable_sempred((LvalueVariableContext)_localctx, predIndex);
		case 502:
			return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 558:
			return checkOrReferences_sempred((CheckOrReferencesContext)_localctx, predIndex);
		case 560:
			return constraintEnforcement_sempred((ConstraintEnforcementContext)_localctx, predIndex);
		case 564:
			return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 575:
			return keyPartOrExpression_sempred((KeyPartOrExpressionContext)_localctx, predIndex);
		case 578:
			return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 595:
			return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 596:
			return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 601:
			return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 620:
			return persistedVariableIdentifier_sempred((PersistedVariableIdentifierContext)_localctx, predIndex);
		case 703:
			return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 713:
			return real_ulonglong_number_sempred((Real_ulonglong_numberContext)_localctx, predIndex);
		case 715:
			return signedLiteralOrNull_sempred((SignedLiteralOrNullContext)_localctx, predIndex);
		case 717:
			return literalOrNull_sempred((LiteralOrNullContext)_localctx, predIndex);
		case 720:
			return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 722:
			return textStringHash_sempred((TextStringHashContext)_localctx, predIndex);
		case 744:
			return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 747:
			return labelKeyword_sempred((LabelKeywordContext)_localctx, predIndex);
		case 749:
			return identifierKeywordsUnambiguous_sempred((IdentifierKeywordsUnambiguousContext)_localctx, predIndex);
		case 750:
			return roleKeyword_sempred((RoleKeywordContext)_localctx, predIndex);
		case 754:
			return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return this.isServerVersionGe80017();
		case 3:
			return this.isServerVersionGe80019();
		case 4:
			return this.isServerVersionGe80014();
		case 5:
			return this.isServerVersionGe80024();
		case 6:
			return this.isServerVersionGe80017();
		case 7:
			return this.isServerVersionGe80019();
		case 8:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean alterTablespaceOption_sempred(AlterTablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean alterInstanceStatement_sempred(AlterInstanceStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return this.isServerVersionGe80011();
		case 13:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean createDatabaseOption_sempred(CreateDatabaseOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return this.isServerVersionGe80016();
		}
		return true;
	}
	private boolean storedRoutineBody_sempred(StoredRoutineBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return this.isStoredRoutineBody();
		}
		return true;
	}
	private boolean routineOption_sempred(RoutineOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return this.isServerVersionGe80032();
		}
		return true;
	}
	private boolean tsDataFileName_sempred(TsDataFileNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return this.isServerVersionGe80011();
		case 20:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean valuesReference_sempred(ValuesReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return this.isServerVersionGe80018();
		}
		return true;
	}
	private boolean loadFrom_sempred(LoadFromContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean loadSourceType_sempred(LoadSourceTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean sourceCount_sempred(SourceCountContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean sourceOrder_sempred(SourceOrderContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean loadAlgorithm_sempred(LoadAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean loadParallel_sempred(LoadParallelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean loadMemory_sempred(LoadMemoryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean selectStatementWithInto_sempred(SelectStatementWithIntoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30:
			return this.isSelectStatementWithInto();
		}
		return true;
	}
	private boolean queryExpressionBody_sempred(QueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return this.isServerVersionGe80031();
		}
		return true;
	}
	private boolean queryPrimary_sempred(QueryPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return this.isServerVersionGe80019();
		case 33:
			return this.isServerVersionGe80019();
		}
		return true;
	}
	private boolean qualifyClause_sempred(QualifyClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean groupByClause_sempred(GroupByClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return this.isServerVersionGe80032();
		}
		return true;
	}
	private boolean lockingClauseList_sempred(LockingClauseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36:
			return this.isServerVersionGe80031();
		}
		return true;
	}
	private boolean tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return this.isServerVersionGe80004();
		}
		return true;
	}
	private boolean derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean jtColumn_sempred(JtColumnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean tableAlias_sempred(TableAliasContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean masterOrBinaryLogsAndGtids_sempred(MasterOrBinaryLogsAndGtidsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return this.isServerVersionGe80032();
		}
		return true;
	}
	private boolean changeReplicationSource_sempred(ChangeReplicationSourceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean sourceDefinition_sempred(SourceDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44:
			return this.isServerVersionGe80024();
		case 45:
			return this.isServerVersionGe80024();
		case 46:
			return this.isServerVersionGe80027();
		}
		return true;
	}
	private boolean cloneStatement_sempred(CloneStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean alterUserStatement_sempred(AlterUserStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48:
			return this.isServerVersionGe80014();
		case 49:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return this.isServerVersionLt80025();
		case 51:
			return this.isServerVersionGe80025();
		}
		return true;
	}
	private boolean createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean accountLockPasswordExpireOptions_sempred(AccountLockPasswordExpireOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return this.isServerVersionGe80014();
		}
		return true;
	}
	private boolean grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return this.isServerVersionLt80011();
		case 55:
			return this.isServerVersionGe80011();
		}
		return true;
	}
	private boolean versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56:
			return this.isServerVersionLt80011();
		}
		return true;
	}
	private boolean revokeStatement_sempred(RevokeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return this.isServerVersionGe80031();
		case 58:
			return this.isServerVersionGe80031();
		}
		return true;
	}
	private boolean grantIdentifier_sempred(GrantIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean grantOption_sempred(GrantOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60:
			return this.isServerVersionLt80011();
		}
		return true;
	}
	private boolean histogramAutoUpdate_sempred(HistogramAutoUpdateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean histogramUpdateParam_sempred(HistogramUpdateParamContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62:
			return this.isServerVersionGe80031();
		}
		return true;
	}
	private boolean histogramNumBuckets_sempred(HistogramNumBucketsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean installSetValueList_sempred(InstallSetValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return this.isServerVersionGe80032();
		}
		return true;
	}
	private boolean startOptionValueList_sempred(StartOptionValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65:
			return this.isServerVersionLt80014();
		case 66:
			return this.isServerVersionGe80018();
		}
		return true;
	}
	private boolean optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return this.isServerVersionGe80011();
		}
		return true;
	}
	private boolean showParseTreeStatement_sempred(ShowParseTreeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return this.isServerVersionGe80100();
		}
		return true;
	}
	private boolean utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69:
			return this.isServerVersionGe80011();
		}
		return true;
	}
	private boolean explainStatement_sempred(ExplainStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70:
			return this.isServerVersionGe80032();
		}
		return true;
	}
	private boolean explainOptions_sempred(ExplainOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return this.isServerVersionGe80032();
		case 72:
			return this.isServerVersionLt80012();
		case 73:
			return this.isServerVersionGe80018();
		case 74:
			return this.isServerVersionGe80019();
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return precpred(_ctx, 3);
		case 76:
			return precpred(_ctx, 2);
		case 77:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return precpred(_ctx, 3);
		case 79:
			return precpred(_ctx, 2);
		case 80:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82:
			return precpred(_ctx, 7);
		case 83:
			return precpred(_ctx, 6);
		case 84:
			return precpred(_ctx, 5);
		case 85:
			return precpred(_ctx, 3);
		case 86:
			return precpred(_ctx, 2);
		case 87:
			return precpred(_ctx, 1);
		case 88:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89:
			return precpred(_ctx, 16);
		case 90:
			return precpred(_ctx, 24);
		}
		return true;
	}
	private boolean arrayCast_sempred(ArrayCastContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean windowFunctionCall_sempred(WindowFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92:
			return this.isServerVersionLt80024();
		}
		return true;
	}
	private boolean tablesampleClause_sempred(TablesampleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean leadLagInfo_sempred(LeadLagInfoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 94:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95:
			return this.isServerVersionGe80032();
		case 96:
			return this.isServerVersionLt80011();
		}
		return true;
	}
	private boolean lvalueVariable_sempred(LvalueVariableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 97:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98:
			return this.isServerVersionGe80024();
		case 99:
			return this.isServerVersionGe80017();
		case 100:
			return this.isServerVersionGe80017();
		case 101:
			return this.isServerVersionGe80027();
		}
		return true;
	}
	private boolean checkOrReferences_sempred(CheckOrReferencesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 102:
			return this.isServerVersionLt80016();
		}
		return true;
	}
	private boolean constraintEnforcement_sempred(ConstraintEnforcementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 103:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 104:
			return this.isServerVersionGe80014();
		case 105:
			return this.isServerVersionGe80013();
		case 106:
			return this.isServerVersionGe80017();
		case 107:
			return this.isServerVersionGe80017();
		case 108:
			return this.isServerVersionGe80024();
		case 109:
			return this.isServerVersionGe80024();
		case 110:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean keyPartOrExpression_sempred(KeyPartOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 111:
			return this.isServerVersionGe80013();
		}
		return true;
	}
	private boolean commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 112:
			return this.isServerVersionGe80024();
		case 113:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 114:
			return this.isServerVersionLt80011();
		}
		return true;
	}
	private boolean collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 115:
			return this.isServerVersionLt80011();
		case 116:
			return this.isServerVersionGe80018();
		}
		return true;
	}
	private boolean createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 117:
			return this.isServerVersionGe80014();
		case 118:
			return this.isServerVersionGe80024();
		case 119:
			return this.isServerVersionGe80024();
		case 120:
			return this.isServerVersionGe80024();
		case 121:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean persistedVariableIdentifier_sempred(PersistedVariableIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 122:
			return this.isServerVersionGe80032();
		}
		return true;
	}
	private boolean pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 123:
			return this.isPureIdentifier();
		}
		return true;
	}
	private boolean real_ulonglong_number_sempred(Real_ulonglong_numberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 124:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean signedLiteralOrNull_sempred(SignedLiteralOrNullContext _localctx, int predIndex) {
		switch (predIndex) {
		case 125:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean literalOrNull_sempred(LiteralOrNullContext _localctx, int predIndex) {
		switch (predIndex) {
		case 126:
			return this.isServerVersionGe80024();
		}
		return true;
	}
	private boolean textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 127:
			return this.isTextStringLiteral();
		}
		return true;
	}
	private boolean textStringHash_sempred(TextStringHashContext _localctx, int predIndex) {
		switch (predIndex) {
		case 128:
			return this.isServerVersionGe80017();
		}
		return true;
	}
	private boolean identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 129:
			return this.isServerVersionLt80017();
		case 130:
			return this.isServerVersionGe80011();
		}
		return true;
	}
	private boolean labelKeyword_sempred(LabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 131:
			return this.isServerVersionLt80017();
		}
		return true;
	}
	private boolean identifierKeywordsUnambiguous_sempred(IdentifierKeywordsUnambiguousContext _localctx, int predIndex) {
		switch (predIndex) {
		case 132:
			return this.isServerVersionGe80019();
		case 133:
			return this.isServerVersionGe80200();
		}
		return true;
	}
	private boolean roleKeyword_sempred(RoleKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 134:
			return this.isServerVersionLt80017();
		}
		return true;
	}
	private boolean roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135:
			return this.isServerVersionGe80014();
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0341\u243b\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0002\u01f2\u0007\u01f2\u0002\u01f3\u0007\u01f3\u0002\u01f4\u0007"+
		"\u01f4\u0002\u01f5\u0007\u01f5\u0002\u01f6\u0007\u01f6\u0002\u01f7\u0007"+
		"\u01f7\u0002\u01f8\u0007\u01f8\u0002\u01f9\u0007\u01f9\u0002\u01fa\u0007"+
		"\u01fa\u0002\u01fb\u0007\u01fb\u0002\u01fc\u0007\u01fc\u0002\u01fd\u0007"+
		"\u01fd\u0002\u01fe\u0007\u01fe\u0002\u01ff\u0007\u01ff\u0002\u0200\u0007"+
		"\u0200\u0002\u0201\u0007\u0201\u0002\u0202\u0007\u0202\u0002\u0203\u0007"+
		"\u0203\u0002\u0204\u0007\u0204\u0002\u0205\u0007\u0205\u0002\u0206\u0007"+
		"\u0206\u0002\u0207\u0007\u0207\u0002\u0208\u0007\u0208\u0002\u0209\u0007"+
		"\u0209\u0002\u020a\u0007\u020a\u0002\u020b\u0007\u020b\u0002\u020c\u0007"+
		"\u020c\u0002\u020d\u0007\u020d\u0002\u020e\u0007\u020e\u0002\u020f\u0007"+
		"\u020f\u0002\u0210\u0007\u0210\u0002\u0211\u0007\u0211\u0002\u0212\u0007"+
		"\u0212\u0002\u0213\u0007\u0213\u0002\u0214\u0007\u0214\u0002\u0215\u0007"+
		"\u0215\u0002\u0216\u0007\u0216\u0002\u0217\u0007\u0217\u0002\u0218\u0007"+
		"\u0218\u0002\u0219\u0007\u0219\u0002\u021a\u0007\u021a\u0002\u021b\u0007"+
		"\u021b\u0002\u021c\u0007\u021c\u0002\u021d\u0007\u021d\u0002\u021e\u0007"+
		"\u021e\u0002\u021f\u0007\u021f\u0002\u0220\u0007\u0220\u0002\u0221\u0007"+
		"\u0221\u0002\u0222\u0007\u0222\u0002\u0223\u0007\u0223\u0002\u0224\u0007"+
		"\u0224\u0002\u0225\u0007\u0225\u0002\u0226\u0007\u0226\u0002\u0227\u0007"+
		"\u0227\u0002\u0228\u0007\u0228\u0002\u0229\u0007\u0229\u0002\u022a\u0007"+
		"\u022a\u0002\u022b\u0007\u022b\u0002\u022c\u0007\u022c\u0002\u022d\u0007"+
		"\u022d\u0002\u022e\u0007\u022e\u0002\u022f\u0007\u022f\u0002\u0230\u0007"+
		"\u0230\u0002\u0231\u0007\u0231\u0002\u0232\u0007\u0232\u0002\u0233\u0007"+
		"\u0233\u0002\u0234\u0007\u0234\u0002\u0235\u0007\u0235\u0002\u0236\u0007"+
		"\u0236\u0002\u0237\u0007\u0237\u0002\u0238\u0007\u0238\u0002\u0239\u0007"+
		"\u0239\u0002\u023a\u0007\u023a\u0002\u023b\u0007\u023b\u0002\u023c\u0007"+
		"\u023c\u0002\u023d\u0007\u023d\u0002\u023e\u0007\u023e\u0002\u023f\u0007"+
		"\u023f\u0002\u0240\u0007\u0240\u0002\u0241\u0007\u0241\u0002\u0242\u0007"+
		"\u0242\u0002\u0243\u0007\u0243\u0002\u0244\u0007\u0244\u0002\u0245\u0007"+
		"\u0245\u0002\u0246\u0007\u0246\u0002\u0247\u0007\u0247\u0002\u0248\u0007"+
		"\u0248\u0002\u0249\u0007\u0249\u0002\u024a\u0007\u024a\u0002\u024b\u0007"+
		"\u024b\u0002\u024c\u0007\u024c\u0002\u024d\u0007\u024d\u0002\u024e\u0007"+
		"\u024e\u0002\u024f\u0007\u024f\u0002\u0250\u0007\u0250\u0002\u0251\u0007"+
		"\u0251\u0002\u0252\u0007\u0252\u0002\u0253\u0007\u0253\u0002\u0254\u0007"+
		"\u0254\u0002\u0255\u0007\u0255\u0002\u0256\u0007\u0256\u0002\u0257\u0007"+
		"\u0257\u0002\u0258\u0007\u0258\u0002\u0259\u0007\u0259\u0002\u025a\u0007"+
		"\u025a\u0002\u025b\u0007\u025b\u0002\u025c\u0007\u025c\u0002\u025d\u0007"+
		"\u025d\u0002\u025e\u0007\u025e\u0002\u025f\u0007\u025f\u0002\u0260\u0007"+
		"\u0260\u0002\u0261\u0007\u0261\u0002\u0262\u0007\u0262\u0002\u0263\u0007"+
		"\u0263\u0002\u0264\u0007\u0264\u0002\u0265\u0007\u0265\u0002\u0266\u0007"+
		"\u0266\u0002\u0267\u0007\u0267\u0002\u0268\u0007\u0268\u0002\u0269\u0007"+
		"\u0269\u0002\u026a\u0007\u026a\u0002\u026b\u0007\u026b\u0002\u026c\u0007"+
		"\u026c\u0002\u026d\u0007\u026d\u0002\u026e\u0007\u026e\u0002\u026f\u0007"+
		"\u026f\u0002\u0270\u0007\u0270\u0002\u0271\u0007\u0271\u0002\u0272\u0007"+
		"\u0272\u0002\u0273\u0007\u0273\u0002\u0274\u0007\u0274\u0002\u0275\u0007"+
		"\u0275\u0002\u0276\u0007\u0276\u0002\u0277\u0007\u0277\u0002\u0278\u0007"+
		"\u0278\u0002\u0279\u0007\u0279\u0002\u027a\u0007\u027a\u0002\u027b\u0007"+
		"\u027b\u0002\u027c\u0007\u027c\u0002\u027d\u0007\u027d\u0002\u027e\u0007"+
		"\u027e\u0002\u027f\u0007\u027f\u0002\u0280\u0007\u0280\u0002\u0281\u0007"+
		"\u0281\u0002\u0282\u0007\u0282\u0002\u0283\u0007\u0283\u0002\u0284\u0007"+
		"\u0284\u0002\u0285\u0007\u0285\u0002\u0286\u0007\u0286\u0002\u0287\u0007"+
		"\u0287\u0002\u0288\u0007\u0288\u0002\u0289\u0007\u0289\u0002\u028a\u0007"+
		"\u028a\u0002\u028b\u0007\u028b\u0002\u028c\u0007\u028c\u0002\u028d\u0007"+
		"\u028d\u0002\u028e\u0007\u028e\u0002\u028f\u0007\u028f\u0002\u0290\u0007"+
		"\u0290\u0002\u0291\u0007\u0291\u0002\u0292\u0007\u0292\u0002\u0293\u0007"+
		"\u0293\u0002\u0294\u0007\u0294\u0002\u0295\u0007\u0295\u0002\u0296\u0007"+
		"\u0296\u0002\u0297\u0007\u0297\u0002\u0298\u0007\u0298\u0002\u0299\u0007"+
		"\u0299\u0002\u029a\u0007\u029a\u0002\u029b\u0007\u029b\u0002\u029c\u0007"+
		"\u029c\u0002\u029d\u0007\u029d\u0002\u029e\u0007\u029e\u0002\u029f\u0007"+
		"\u029f\u0002\u02a0\u0007\u02a0\u0002\u02a1\u0007\u02a1\u0002\u02a2\u0007"+
		"\u02a2\u0002\u02a3\u0007\u02a3\u0002\u02a4\u0007\u02a4\u0002\u02a5\u0007"+
		"\u02a5\u0002\u02a6\u0007\u02a6\u0002\u02a7\u0007\u02a7\u0002\u02a8\u0007"+
		"\u02a8\u0002\u02a9\u0007\u02a9\u0002\u02aa\u0007\u02aa\u0002\u02ab\u0007"+
		"\u02ab\u0002\u02ac\u0007\u02ac\u0002\u02ad\u0007\u02ad\u0002\u02ae\u0007"+
		"\u02ae\u0002\u02af\u0007\u02af\u0002\u02b0\u0007\u02b0\u0002\u02b1\u0007"+
		"\u02b1\u0002\u02b2\u0007\u02b2\u0002\u02b3\u0007\u02b3\u0002\u02b4\u0007"+
		"\u02b4\u0002\u02b5\u0007\u02b5\u0002\u02b6\u0007\u02b6\u0002\u02b7\u0007"+
		"\u02b7\u0002\u02b8\u0007\u02b8\u0002\u02b9\u0007\u02b9\u0002\u02ba\u0007"+
		"\u02ba\u0002\u02bb\u0007\u02bb\u0002\u02bc\u0007\u02bc\u0002\u02bd\u0007"+
		"\u02bd\u0002\u02be\u0007\u02be\u0002\u02bf\u0007\u02bf\u0002\u02c0\u0007"+
		"\u02c0\u0002\u02c1\u0007\u02c1\u0002\u02c2\u0007\u02c2\u0002\u02c3\u0007"+
		"\u02c3\u0002\u02c4\u0007\u02c4\u0002\u02c5\u0007\u02c5\u0002\u02c6\u0007"+
		"\u02c6\u0002\u02c7\u0007\u02c7\u0002\u02c8\u0007\u02c8\u0002\u02c9\u0007"+
		"\u02c9\u0002\u02ca\u0007\u02ca\u0002\u02cb\u0007\u02cb\u0002\u02cc\u0007"+
		"\u02cc\u0002\u02cd\u0007\u02cd\u0002\u02ce\u0007\u02ce\u0002\u02cf\u0007"+
		"\u02cf\u0002\u02d0\u0007\u02d0\u0002\u02d1\u0007\u02d1\u0002\u02d2\u0007"+
		"\u02d2\u0002\u02d3\u0007\u02d3\u0002\u02d4\u0007\u02d4\u0002\u02d5\u0007"+
		"\u02d5\u0002\u02d6\u0007\u02d6\u0002\u02d7\u0007\u02d7\u0002\u02d8\u0007"+
		"\u02d8\u0002\u02d9\u0007\u02d9\u0002\u02da\u0007\u02da\u0002\u02db\u0007"+
		"\u02db\u0002\u02dc\u0007\u02dc\u0002\u02dd\u0007\u02dd\u0002\u02de\u0007"+
		"\u02de\u0002\u02df\u0007\u02df\u0002\u02e0\u0007\u02e0\u0002\u02e1\u0007"+
		"\u02e1\u0002\u02e2\u0007\u02e2\u0002\u02e3\u0007\u02e3\u0002\u02e4\u0007"+
		"\u02e4\u0002\u02e5\u0007\u02e5\u0002\u02e6\u0007\u02e6\u0002\u02e7\u0007"+
		"\u02e7\u0002\u02e8\u0007\u02e8\u0002\u02e9\u0007\u02e9\u0002\u02ea\u0007"+
		"\u02ea\u0002\u02eb\u0007\u02eb\u0002\u02ec\u0007\u02ec\u0002\u02ed\u0007"+
		"\u02ed\u0002\u02ee\u0007\u02ee\u0002\u02ef\u0007\u02ef\u0002\u02f0\u0007"+
		"\u02f0\u0002\u02f1\u0007\u02f1\u0002\u02f2\u0007\u02f2\u0001\u0000\u0005"+
		"\u0000\u05e8\b\u0000\n\u0000\f\u0000\u05eb\t\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0001\u0001\u0001\u0003\u0001\u05f1\b\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002\u0641\b\u0002"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0003\u0003\u0649\b\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003"+
		"\u064e\b\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u0658\b\u0003\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0004\u0004\u065d\b\u0004\u000b\u0004\f\u0004"+
		"\u065e\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u0665"+
		"\b\u0005\u0001\u0005\u0003\u0005\u0668\b\u0005\u0001\u0006\u0003\u0006"+
		"\u066b\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0003\u0006\u0672\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006"+
		"\u0677\b\u0006\u0001\u0006\u0003\u0006\u067a\b\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0003\u0006\u067f\b\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0003\u0006\u0685\b\u0006\u0003\u0006\u0687\b\u0006"+
		"\u0001\u0006\u0001\u0006\u0003\u0006\u068b\b\u0006\u0001\u0006\u0001\u0006"+
		"\u0003\u0006\u068f\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0698\b\u0007\u0001\b"+
		"\u0001\b\u0003\b\u069c\b\b\u0001\b\u0005\b\u069f\b\b\n\b\f\b\u06a2\t\b"+
		"\u0001\t\u0001\t\u0001\t\u0003\t\u06a7\b\t\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\u000b\u0003\u000b\u06ae\b\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0003\u000b\u06b3\b\u000b\u0001\f\u0001\f\u0001\f\u0003\f\u06b8"+
		"\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u06bf\b\f\u0001\f"+
		"\u0003\f\u06c2\b\f\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u06c8\b\r\u0001"+
		"\r\u0003\r\u06cb\b\r\u0001\u000e\u0001\u000e\u0001\u000e\u0005\u000e\u06d0"+
		"\b\u000e\n\u000e\f\u000e\u06d3\t\u000e\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u06dc\b\u000f"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u06e1\b\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0003\u0010\u06e6\b\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u06ee\b\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u06f4\b\u0010"+
		"\u0001\u0010\u0001\u0010\u0003\u0010\u06f8\b\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0003\u0010\u06fd\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0005\u0010\u0704\b\u0010\n\u0010\f\u0010\u0707"+
		"\t\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u070c\b\u0010"+
		"\u0001\u0010\u0001\u0010\u0005\u0010\u0710\b\u0010\n\u0010\f\u0010\u0713"+
		"\t\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u0718\b\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0003\u0010\u0721\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0003\u0010\u0727\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u0730\b\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u073c\b\u0010"+
		"\u0001\u0011\u0001\u0011\u0003\u0011\u0740\b\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0003\u0011\u0746\b\u0011\u0005\u0011\u0748\b"+
		"\u0011\n\u0011\f\u0011\u074b\t\u0011\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0003\u0012\u0750\b\u0012\u0001\u0013\u0001\u0013\u0003\u0013\u0754\b"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u0759\b\u0013\u0001"+
		"\u0013\u0003\u0013\u075c\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0003\u0013\u0762\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0003\u0013\u0768\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0003\u0013\u076e\b\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u0772"+
		"\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u0777\b\u0013"+
		"\u0001\u0013\u0001\u0013\u0003\u0013\u077b\b\u0013\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u077f\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u078f\b\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u0797\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0003\u0013\u079f\b\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u07a6\b\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u07c1\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u07d0\b\u0013\u0001\u0013"+
		"\u0003\u0013\u07d3\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u07d9\b\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014"+
		"\u07de\b\u0014\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0003\u0016"+
		"\u07e4\b\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u07e9\b"+
		"\u0016\u0005\u0016\u07eb\b\u0016\n\u0016\f\u0016\u07ee\t\u0016\u0001\u0017"+
		"\u0001\u0017\u0003\u0017\u07f2\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017"+
		"\u07f6\b\u0017\u0001\u0018\u0001\u0018\u0003\u0018\u07fa\b\u0018\u0001"+
		"\u0018\u0001\u0018\u0003\u0018\u07fe\b\u0018\u0001\u0019\u0001\u0019\u0003"+
		"\u0019\u0802\b\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0806\b\u0019"+
		"\u0003\u0019\u0808\b\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0003\u001c\u0812\b\u001c"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0003\u001d\u081a\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0003\u001d\u0821\b\u001d\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u0829\b\u001e\u0001\u001f"+
		"\u0001\u001f\u0003\u001f\u082d\b\u001f\u0001\u001f\u0005\u001f\u0830\b"+
		"\u001f\n\u001f\f\u001f\u0833\t\u001f\u0001 \u0001 \u0001!\u0001!\u0003"+
		"!\u0839\b!\u0001!\u0005!\u083c\b!\n!\f!\u083f\t!\u0001\"\u0001\"\u0003"+
		"\"\u0843\b\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001"+
		"\"\u0003\"\u084d\b\"\u0001#\u0001#\u0003#\u0851\b#\u0001#\u0001#\u0001"+
		"#\u0003#\u0856\b#\u0001$\u0003$\u0859\b$\u0001$\u0003$\u085c\b$\u0001"+
		"$\u0003$\u085f\b$\u0001$\u0001$\u0001$\u0001$\u0001%\u0003%\u0866\b%\u0001"+
		"%\u0001%\u0001%\u0001&\u0001&\u0003&\u086d\b&\u0001\'\u0001\'\u0003\'"+
		"\u0871\b\'\u0001\'\u0001\'\u0001\'\u0001(\u0001(\u0001(\u0001(\u0001("+
		"\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001"+
		"(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u088a\b(\u0003(\u088c\b(\u0001"+
		"(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u0894\b(\u0003(\u0896\b(\u0001"+
		")\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001"+
		")\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0003)\u08aa\b)\u0001"+
		"*\u0001*\u0003*\u08ae\b*\u0001*\u0001*\u0005*\u08b2\b*\n*\f*\u08b5\t*"+
		"\u0001+\u0001+\u0001+\u0001+\u0003+\u08bb\b+\u0001,\u0003,\u08be\b,\u0001"+
		",\u0001,\u0003,\u08c2\b,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,\u08c9"+
		"\b,\u0001,\u0003,\u08cc\b,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001"+
		",\u0003,\u08d5\b,\u0001-\u0001-\u0001-\u0005-\u08da\b-\n-\f-\u08dd\t-"+
		"\u0001.\u0001.\u0003.\u08e1\b.\u0001/\u0003/\u08e4\b/\u0001/\u0001/\u0001"+
		"0\u00030\u08e9\b0\u00010\u00010\u00011\u00011\u00031\u08ef\b1\u00011\u0003"+
		"1\u08f2\b1\u00012\u00012\u00032\u08f6\b2\u00013\u00013\u00013\u00013\u0003"+
		"3\u08fc\b3\u00013\u00033\u08ff\b3\u00013\u00013\u00014\u00034\u0904\b"+
		"4\u00014\u00014\u00034\u0908\b4\u00014\u00014\u00014\u00014\u00014\u0005"+
		"4\u090f\b4\n4\f4\u0912\t4\u00034\u0914\b4\u00014\u00014\u00054\u0918\b"+
		"4\n4\f4\u091b\t4\u00014\u00014\u00015\u00015\u00035\u0921\b5\u00016\u0001"+
		"6\u00016\u00016\u00036\u0927\b6\u00017\u00037\u092a\b7\u00017\u00017\u0003"+
		"7\u092e\b7\u00017\u00017\u00017\u00017\u00017\u00057\u0935\b7\n7\f7\u0938"+
		"\t7\u00037\u093a\b7\u00017\u00017\u00017\u00017\u00057\u0940\b7\n7\f7"+
		"\u0943\t7\u00017\u00017\u00018\u00038\u0948\b8\u00018\u00018\u00038\u094c"+
		"\b8\u00018\u00018\u00018\u00018\u00018\u00018\u00019\u00019\u00039\u0956"+
		"\b9\u00019\u00039\u0959\b9\u0001:\u0004:\u095c\b:\u000b:\f:\u095d\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u0966\b;\u0001;\u0001;\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001"+
		";\u0003;\u0975\b;\u0001<\u0003<\u0978\b<\u0001<\u0003<\u097b\b<\u0001"+
		"<\u0001<\u0001<\u0003<\u0980\b<\u0001<\u0001<\u0005<\u0984\b<\n<\f<\u0987"+
		"\t<\u0001<\u0001<\u0001<\u0001<\u0001<\u0005<\u098e\b<\n<\f<\u0991\t<"+
		"\u0001<\u0001<\u0001<\u0001<\u0001<\u0005<\u0998\b<\n<\f<\u099b\t<\u0003"+
		"<\u099d\b<\u0001<\u0003<\u09a0\b<\u0001=\u0001=\u0003=\u09a4\b=\u0001"+
		"=\u0001=\u0001=\u0001=\u0001=\u0001=\u0003=\u09ac\b=\u0001>\u0001>\u0001"+
		">\u0001>\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0003?\u09b9"+
		"\b?\u0001@\u0001@\u0003@\u09bd\b@\u0001@\u0005@\u09c0\b@\n@\f@\u09c3\t"+
		"@\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0003A\u09cb\bA\u0001B\u0001"+
		"B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0005C\u09da\bC\nC\fC\u09dd\tC\u0001C\u0001C\u0001D\u0001D\u0001"+
		"D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0003D\u09ef\bD\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001"+
		"E\u0003E\u09f8\bE\u0001E\u0003E\u09fb\bE\u0001F\u0001F\u0001F\u0001F\u0001"+
		"F\u0001F\u0003F\u0a03\bF\u0001G\u0001G\u0001G\u0001G\u0001G\u0003G\u0a0a"+
		"\bG\u0003G\u0a0c\bG\u0001H\u0001H\u0001H\u0001I\u0001I\u0003I\u0a13\b"+
		"I\u0001I\u0005I\u0a16\bI\nI\fI\u0a19\tI\u0001J\u0001J\u0001J\u0001J\u0001"+
		"J\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0003J\u0a26\bJ\u0001K\u0001"+
		"K\u0003K\u0a2a\bK\u0001K\u0001K\u0001L\u0001L\u0003L\u0a30\bL\u0001L\u0001"+
		"L\u0001M\u0001M\u0003M\u0a36\bM\u0001M\u0001M\u0001N\u0001N\u0003N\u0a3c"+
		"\bN\u0001N\u0001N\u0001O\u0001O\u0003O\u0a42\bO\u0001O\u0001O\u0001P\u0001"+
		"P\u0003P\u0a48\bP\u0001P\u0001P\u0001Q\u0003Q\u0a4d\bQ\u0001Q\u0001Q\u0003"+
		"Q\u0a51\bQ\u0001Q\u0001Q\u0001R\u0001R\u0001S\u0001S\u0003S\u0a59\bS\u0001"+
		"S\u0001S\u0001T\u0001T\u0003T\u0a5f\bT\u0001T\u0001T\u0001U\u0001U\u0003"+
		"U\u0a65\bU\u0001U\u0001U\u0001V\u0001V\u0003V\u0a6b\bV\u0001V\u0001V\u0001"+
		"W\u0003W\u0a70\bW\u0001W\u0003W\u0a73\bW\u0001W\u0003W\u0a76\bW\u0001"+
		"W\u0001W\u0001W\u0001W\u0001X\u0001X\u0001X\u0003X\u0a7f\bX\u0001X\u0003"+
		"X\u0a82\bX\u0001Y\u0001Y\u0001Y\u0001Y\u0001Z\u0001Z\u0001Z\u0001Z\u0001"+
		"[\u0003[\u0a8d\b[\u0001[\u0001[\u0003[\u0a91\b[\u0001[\u0001[\u0001[\u0001"+
		"[\u0001[\u0001[\u0001[\u0001[\u0001[\u0003[\u0a9c\b[\u0001[\u0001[\u0001"+
		"\\\u0001\\\u0001\\\u0001]\u0003]\u0aa4\b]\u0001]\u0001]\u0003]\u0aa8\b"+
		"]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u0ab1\b]\u0001"+
		"]\u0003]\u0ab4\b]\u0001]\u0001]\u0001]\u0001]\u0003]\u0aba\b]\u0003]\u0abc"+
		"\b]\u0001]\u0001]\u0003]\u0ac0\b]\u0001]\u0001]\u0001]\u0001^\u0001^\u0003"+
		"^\u0ac7\b^\u0001^\u0001^\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001"+
		"_\u0005_\u0ad2\b_\n_\f_\u0ad5\t_\u0001_\u0001_\u0001_\u0001_\u0003_\u0adb"+
		"\b_\u0001_\u0001_\u0005_\u0adf\b_\n_\f_\u0ae2\t_\u0003_\u0ae4\b_\u0001"+
		"`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001"+
		"`\u0001`\u0001`\u0001`\u0001`\u0003`\u0af5\b`\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0003a\u0b08\ba\u0001b\u0001b\u0003b\u0b0c\bb\u0001"+
		"b\u0001b\u0001c\u0001c\u0003c\u0b12\bc\u0001c\u0001c\u0001d\u0001d\u0003"+
		"d\u0b18\bd\u0001d\u0001d\u0001e\u0001e\u0003e\u0b1e\be\u0001e\u0001e\u0001"+
		"f\u0003f\u0b23\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0003f\u0b2a\bf\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0003g\u0b31\bg\u0001g\u0005g\u0b34\bg\n"+
		"g\fg\u0b37\tg\u0003g\u0b39\bg\u0001h\u0001h\u0003h\u0b3d\bh\u0001i\u0001"+
		"i\u0003i\u0b41\bi\u0001i\u0001i\u0001j\u0003j\u0b46\bj\u0001j\u0001j\u0003"+
		"j\u0b4a\bj\u0001j\u0001j\u0003j\u0b4e\bj\u0001k\u0001k\u0001k\u0001k\u0003"+
		"k\u0b54\bk\u0001k\u0005k\u0b57\bk\nk\fk\u0b5a\tk\u0003k\u0b5c\bk\u0001"+
		"l\u0001l\u0003l\u0b60\bl\u0001l\u0001l\u0001m\u0001m\u0003m\u0b66\bm\u0001"+
		"m\u0001m\u0003m\u0b6a\bm\u0001n\u0001n\u0003n\u0b6e\bn\u0001n\u0001n\u0001"+
		"o\u0001o\u0001o\u0001o\u0003o\u0b76\bo\u0001o\u0001o\u0001p\u0001p\u0001"+
		"p\u0001p\u0003p\u0b7e\bp\u0001q\u0001q\u0001q\u0001q\u0001q\u0005q\u0b85"+
		"\bq\nq\fq\u0b88\tq\u0001r\u0001r\u0001r\u0001r\u0001s\u0001s\u0003s\u0b90"+
		"\bs\u0001s\u0001s\u0001t\u0001t\u0001t\u0001t\u0001t\u0001u\u0001u\u0001"+
		"u\u0001u\u0003u\u0b9d\bu\u0001u\u0003u\u0ba0\bu\u0001v\u0003v\u0ba3\b"+
		"v\u0001v\u0001v\u0005v\u0ba7\bv\nv\fv\u0baa\tv\u0001v\u0001v\u0001v\u0001"+
		"v\u0001v\u0003v\u0bb1\bv\u0001v\u0001v\u0001v\u0003v\u0bb6\bv\u0001v\u0003"+
		"v\u0bb9\bv\u0001v\u0003v\u0bbc\bv\u0001v\u0003v\u0bbf\bv\u0001v\u0003"+
		"v\u0bc2\bv\u0003v\u0bc4\bv\u0001v\u0001v\u0001v\u0001v\u0003v\u0bca\b"+
		"v\u0003v\u0bcc\bv\u0001w\u0001w\u0001w\u0001w\u0001w\u0001x\u0001x\u0001"+
		"y\u0001y\u0001y\u0001z\u0001z\u0001z\u0001z\u0003z\u0bdc\bz\u0001z\u0001"+
		"z\u0001z\u0001z\u0001z\u0003z\u0be3\bz\u0001z\u0003z\u0be6\bz\u0003z\u0be8"+
		"\bz\u0003z\u0bea\bz\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001"+
		"{\u0003{\u0bf4\b{\u0003{\u0bf6\b{\u0001|\u0001|\u0003|\u0bfa\b|\u0001"+
		"|\u0003|\u0bfd\b|\u0001|\u0003|\u0c00\b|\u0001|\u0001|\u0003|\u0c04\b"+
		"|\u0001|\u0001|\u0003|\u0c08\b|\u0001|\u0001|\u0001|\u0003|\u0c0d\b|\u0001"+
		"|\u0003|\u0c10\b|\u0001|\u0003|\u0c13\b|\u0001}\u0001}\u0001~\u0001~\u0003"+
		"~\u0c19\b~\u0001~\u0003~\u0c1c\b~\u0001~\u0001~\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0005\u007f\u0c23\b\u007f\n\u007f\f\u007f\u0c26\t\u007f\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001"+
		"\u0081\u0003\u0081\u0c2f\b\u0081\u0001\u0081\u0003\u0081\u0c32\b\u0081"+
		"\u0001\u0081\u0003\u0081\u0c35\b\u0081\u0001\u0082\u0001\u0082\u0003\u0082"+
		"\u0c39\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082"+
		"\u0c3f\b\u0082\u0001\u0082\u0005\u0082\u0c42\b\u0082\n\u0082\f\u0082\u0c45"+
		"\t\u0082\u0001\u0083\u0001\u0083\u0003\u0083\u0c49\b\u0083\u0001\u0083"+
		"\u0001\u0083\u0001\u0083\u0003\u0083\u0c4e\b\u0083\u0005\u0083\u0c50\b"+
		"\u0083\n\u0083\f\u0083\u0c53\t\u0083\u0001\u0084\u0001\u0084\u0001\u0084"+
		"\u0001\u0084\u0003\u0084\u0c59\b\u0084\u0001\u0085\u0001\u0085\u0001\u0085"+
		"\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0003\u0086\u0c64\b\u0086\u0001\u0086\u0003\u0086\u0c67\b\u0086\u0001"+
		"\u0086\u0003\u0086\u0c6a\b\u0086\u0001\u0086\u0003\u0086\u0c6d\b\u0086"+
		"\u0001\u0086\u0001\u0086\u0003\u0086\u0c71\b\u0086\u0001\u0086\u0003\u0086"+
		"\u0c74\b\u0086\u0001\u0086\u0003\u0086\u0c77\b\u0086\u0001\u0086\u0001"+
		"\u0086\u0001\u0086\u0001\u0086\u0003\u0086\u0c7d\b\u0086\u0001\u0086\u0003"+
		"\u0086\u0c80\b\u0086\u0001\u0086\u0003\u0086\u0c83\b\u0086\u0001\u0086"+
		"\u0003\u0086\u0c86\b\u0086\u0001\u0086\u0003\u0086\u0c89\b\u0086\u0001"+
		"\u0086\u0001\u0086\u0003\u0086\u0c8d\b\u0086\u0001\u0086\u0003\u0086\u0c90"+
		"\b\u0086\u0001\u0086\u0003\u0086\u0c93\b\u0086\u0001\u0087\u0001\u0087"+
		"\u0001\u0088\u0001\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u008a"+
		"\u0001\u008a\u0001\u008a\u0003\u008a\u0c9f\b\u008a\u0001\u008b\u0001\u008b"+
		"\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u0ca7\b\u008b"+
		"\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c"+
		"\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0003\u008e\u0cb7\b\u008e\u0001\u008e\u0003\u008e"+
		"\u0cba\b\u008e\u0001\u008e\u0001\u008e\u0003\u008e\u0cbe\b\u008e\u0001"+
		"\u008f\u0001\u008f\u0003\u008f\u0cc2\b\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0003\u0090\u0cca\b\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0003"+
		"\u0090\u0cd2\b\u0090\u0005\u0090\u0cd4\b\u0090\n\u0090\f\u0090\u0cd7\t"+
		"\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0003"+
		"\u0094\u0cea\b\u0094\u0001\u0094\u0003\u0094\u0ced\b\u0094\u0001\u0094"+
		"\u0001\u0094\u0003\u0094\u0cf1\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094"+
		"\u0001\u0094\u0003\u0094\u0cf7\b\u0094\u0001\u0095\u0001\u0095\u0003\u0095"+
		"\u0cfb\b\u0095\u0001\u0095\u0003\u0095\u0cfe\b\u0095\u0001\u0096\u0001"+
		"\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0003"+
		"\u0096\u0d07\b\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001"+
		"\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0003\u0096\u0d11\b\u0096\u0001"+
		"\u0097\u0003\u0097\u0d14\b\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0d18"+
		"\b\u0097\u0001\u0097\u0003\u0097\u0d1b\b\u0097\u0001\u0098\u0001\u0098"+
		"\u0003\u0098\u0d1f\b\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098"+
		"\u0d24\b\u0098\u0001\u0098\u0003\u0098\u0d27\b\u0098\u0001\u0098\u0005"+
		"\u0098\u0d2a\b\u0098\n\u0098\f\u0098\u0d2d\t\u0098\u0001\u0099\u0001\u0099"+
		"\u0001\u0099\u0003\u0099\u0d32\b\u0099\u0001\u0099\u0001\u0099\u0001\u009a"+
		"\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a\u0d3b\b\u009a"+
		"\u0001\u009b\u0001\u009b\u0005\u009b\u0d3f\b\u009b\n\u009b\f\u009b\u0d42"+
		"\t\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u0d46\b\u009b\u0001\u009b"+
		"\u0003\u009b\u0d49\b\u009b\u0001\u009b\u0003\u009b\u0d4c\b\u009b\u0001"+
		"\u009b\u0003\u009b\u0d4f\b\u009b\u0001\u009b\u0003\u009b\u0d52\b\u009b"+
		"\u0001\u009b\u0003\u009b\u0d55\b\u009b\u0001\u009b\u0003\u009b\u0d58\b"+
		"\u009b\u0001\u009c\u0001\u009c\u0001\u009d\u0001\u009d\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0003\u00a0\u0d67\b\u00a0\u0001\u00a1\u0001\u00a1\u0003"+
		"\u00a1\u0d6b\b\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0003"+
		"\u00a2\u0d71\b\u00a2\u0001\u00a2\u0003\u00a2\u0d74\b\u00a2\u0001\u00a2"+
		"\u0003\u00a2\u0d77\b\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2"+
		"\u0003\u00a2\u0d7d\b\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0003\u00a2"+
		"\u0d82\b\u00a2\u0005\u00a2\u0d84\b\u00a2\n\u00a2\f\u00a2\u0d87\t\u00a2"+
		"\u0003\u00a2\u0d89\b\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3"+
		"\u0001\u00a3\u0003\u00a3\u0d90\b\u00a3\u0003\u00a3\u0d92\b\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a5\u0001"+
		"\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001"+
		"\u00a6\u0005\u00a6\u0da1\b\u00a6\n\u00a6\f\u00a6\u0da4\t\u00a6\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a8\u0001\u00a9\u0003\u00a9\u0daf\b\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0003\u00a9\u0db4\b\u00a9\u0001\u00a9\u0003\u00a9\u0db7\b"+
		"\u00a9\u0001\u00a9\u0003\u00a9\u0dba\b\u00a9\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0003\u00aa\u0dbf\b\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ac\u0001"+
		"\u00ac\u0003\u00ac\u0dc5\b\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0dd5"+
		"\b\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001"+
		"\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001"+
		"\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001"+
		"\u00af\u0003\u00af\u0de9\b\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0\u0df2\b\u00b0\u0001"+
		"\u00b1\u0001\u00b1\u0003\u00b1\u0df6\b\u00b1\u0001\u00b1\u0001\u00b1\u0001"+
		"\u00b1\u0005\u00b1\u0dfb\b\u00b1\n\u00b1\f\u00b1\u0dfe\t\u00b1\u0001\u00b2"+
		"\u0001\u00b2\u0003\u00b2\u0e02\b\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2"+
		"\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0003\u00b3\u0e0b\b\u00b3"+
		"\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3"+
		"\u0001\u00b3\u0001\u00b3\u0003\u00b3\u0e15\b\u00b3\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b6"+
		"\u0001\u00b6\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0003\u00b7\u0e23\b\u00b7"+
		"\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0005\u00b8\u0e28\b\u00b8\n\u00b8"+
		"\f\u00b8\u0e2b\t\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9"+
		"\u0005\u00b9\u0e31\b\u00b9\n\u00b9\f\u00b9\u0e34\t\u00b9\u0001\u00ba\u0001"+
		"\u00ba\u0001\u00ba\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0003\u00bb\u0e3c"+
		"\b\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bc\u0001\u00bc\u0003\u00bc\u0e42"+
		"\b\u00bc\u0001\u00bd\u0001\u00bd\u0004\u00bd\u0e46\b\u00bd\u000b\u00bd"+
		"\f\u00bd\u0e47\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0003\u00be"+
		"\u0e4e\b\u00be\u0001\u00be\u0003\u00be\u0e51\b\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0e57\b\u00be\u0001\u00bf\u0001"+
		"\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0003\u00c0\u0e5e\b\u00c0\u0001"+
		"\u00c1\u0001\u00c1\u0003\u00c1\u0e62\b\u00c1\u0001\u00c1\u0001\u00c1\u0005"+
		"\u00c1\u0e66\b\u00c1\n\u00c1\f\u00c1\u0e69\t\u00c1\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0003\u00c2\u0e6e\b\u00c2\u0003\u00c2\u0e70\b\u00c2\u0001"+
		"\u00c3\u0003\u00c3\u0e73\b\u00c3\u0001\u00c3\u0001\u00c3\u0003\u00c3\u0e77"+
		"\b\u00c3\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u0e81\b\u00c5\u0001\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0003\u00c5\u0e86\b\u00c5\u0001\u00c5\u0005\u00c5\u0e89"+
		"\b\u00c5\n\u00c5\f\u00c5\u0e8c\t\u00c5\u0001\u00c6\u0001\u00c6\u0005\u00c6"+
		"\u0e90\b\u00c6\n\u00c6\f\u00c6\u0e93\t\u00c6\u0001\u00c7\u0001\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7\u0e9b\b\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0003"+
		"\u00c7\u0ea3\b\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7\u0ea8"+
		"\b\u00c7\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0eac\b\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0eb2\b\u00c8\u0001\u00c8"+
		"\u0003\u00c8\u0eb5\b\u00c8\u0001\u00c9\u0003\u00c9\u0eb8\b\u00c9\u0001"+
		"\u00c9\u0001\u00c9\u0003\u00c9\u0ebc\b\u00c9\u0001\u00ca\u0001\u00ca\u0003"+
		"\u00ca\u0ec0\b\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0003\u00cb\u0eca\b\u00cb\u0001"+
		"\u00cc\u0001\u00cc\u0003\u00cc\u0ece\b\u00cc\u0001\u00cc\u0003\u00cc\u0ed1"+
		"\b\u00cc\u0001\u00cc\u0003\u00cc\u0ed4\b\u00cc\u0001\u00cc\u0003\u00cc"+
		"\u0ed7\b\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0003\u00cd\u0edc\b"+
		"\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00ce\u0001\u00ce\u0003\u00ce\u0ee2"+
		"\b\u00ce\u0001\u00ce\u0003\u00ce\u0ee5\b\u00ce\u0001\u00ce\u0001\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0003\u00ce\u0eeb\b\u00ce\u0001\u00ce\u0003\u00ce"+
		"\u0eee\b\u00ce\u0003\u00ce\u0ef0\b\u00ce\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0003\u00cf\u0ef5\b\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00d0\u0001"+
		"\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001"+
		"\u00d0\u0003\u00d0\u0f01\b\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001"+
		"\u00d1\u0001\u00d1\u0005\u00d1\u0f08\b\u00d1\n\u00d1\f\u00d1\u0f0b\t\u00d1"+
		"\u0001\u00d1\u0001\u00d1\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2\u0f17\b\u00d2"+
		"\u0001\u00d2\u0003\u00d2\u0f1a\b\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0003\u00d2\u0f1f\b\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0003\u00d2\u0f26\b\u00d2\u0001\u00d3\u0001\u00d3\u0003\u00d3"+
		"\u0f2a\b\u00d3\u0001\u00d3\u0003\u00d3\u0f2d\b\u00d3\u0001\u00d4\u0001"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0003\u00d4\u0f33\b\u00d4\u0001\u00d5\u0001"+
		"\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001"+
		"\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0003\u00d7\u0f41"+
		"\b\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003"+
		"\u00d9\u0f48\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00da\u0001\u00da\u0001"+
		"\u00da\u0005\u00da\u0f4f\b\u00da\n\u00da\f\u00da\u0f52\t\u00da\u0001\u00db"+
		"\u0001\u00db\u0001\u00db\u0003\u00db\u0f57\b\u00db\u0001\u00db\u0001\u00db"+
		"\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0003\u00db"+
		"\u0f60\b\u00db\u0001\u00db\u0001\u00db\u0003\u00db\u0f64\b\u00db\u0001"+
		"\u00db\u0001\u00db\u0003\u00db\u0f68\b\u00db\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0003"+
		"\u00de\u0f72\b\u00de\u0003\u00de\u0f74\b\u00de\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0003\u00df\u0f7c\b\u00df"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0005\u00e0\u0f81\b\u00e0\n\u00e0"+
		"\f\u00e0\u0f84\t\u00e0\u0001\u00e1\u0001\u00e1\u0003\u00e1\u0f88\b\u00e1"+
		"\u0001\u00e2\u0003\u00e2\u0f8b\b\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2"+
		"\u0f8f\b\u00e2\u0001\u00e2\u0003\u00e2\u0f92\b\u00e2\u0001\u00e2\u0001"+
		"\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2\u0f98\b\u00e2\u0001\u00e2\u0003"+
		"\u00e2\u0f9b\b\u00e2\u0001\u00e2\u0003\u00e2\u0f9e\b\u00e2\u0001\u00e3"+
		"\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u0fa4\b\u00e3\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0005\u00e4\u0fa9\b\u00e4\n\u00e4\f\u00e4\u0fac"+
		"\t\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u0fb0\b\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0003\u00e4\u0fb4\b\u00e4\u0001\u00e4\u0003\u00e4\u0fb7\b"+
		"\u00e4\u0001\u00e4\u0003\u00e4\u0fba\b\u00e4\u0001\u00e4\u0003\u00e4\u0fbd"+
		"\b\u00e4\u0003\u00e4\u0fbf\b\u00e4\u0001\u00e5\u0001\u00e5\u0003\u00e5"+
		"\u0fc3\b\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0003\u00e6\u0fca\b\u00e6\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7"+
		"\u0003\u00e7\u0fd0\b\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u0fd4\b"+
		"\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u0fd9\b\u00e7\u0001"+
		"\u00e7\u0003\u00e7\u0fdc\b\u00e7\u0001\u00e7\u0003\u00e7\u0fdf\b\u00e7"+
		"\u0001\u00e7\u0003\u00e7\u0fe2\b\u00e7\u0003\u00e7\u0fe4\b\u00e7\u0001"+
		"\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u0fe9\b\u00e7\u0001\u00e8\u0001"+
		"\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0005\u00e8\u0ff0\b\u00e8\n"+
		"\u00e8\f\u00e8\u0ff3\t\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0001\u00e8\u0001\u00e8\u0003\u00e8\u0ffb\b\u00e8\u0001\u00e9\u0001"+
		"\u00e9\u0003\u00e9\u0fff\b\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00ea\u0001"+
		"\u00ea\u0003\u00ea\u1005\b\u00ea\u0001\u00ea\u0003\u00ea\u1008\b\u00ea"+
		"\u0001\u00ea\u0003\u00ea\u100b\b\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0001\u00eb\u0003\u00eb\u1011\b\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0001\u00eb\u0001\u00eb\u0003\u00eb\u1018\b\u00eb\u0003\u00eb\u101a\b"+
		"\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001"+
		"\u00eb\u0003\u00eb\u1022\b\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001"+
		"\u00eb\u0003\u00eb\u1028\b\u00eb\u0003\u00eb\u102a\b\u00eb\u0001\u00ec"+
		"\u0001\u00ec\u0001\u00ec\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0003\u00ed\u1034\b\u00ed\u0003\u00ed\u1036\b\u00ed\u0001"+
		"\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001"+
		"\u00ee\u0005\u00ee\u103f\b\u00ee\n\u00ee\f\u00ee\u1042\t\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0003\u00ee\u1047\b\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0003\u00ee\u104e\b\u00ee\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0003\u00ef"+
		"\u1056\b\u00ef\u0001\u00f0\u0001\u00f0\u0003\u00f0\u105a\b\u00f0\u0001"+
		"\u00f0\u0001\u00f0\u0003\u00f0\u105e\b\u00f0\u0001\u00f0\u0003\u00f0\u1061"+
		"\b\u00f0\u0003\u00f0\u1063\b\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u106b\b\u00f1\u0001\u00f2"+
		"\u0001\u00f2\u0001\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0003\u00f3\u1074\b\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f4"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u107d\b\u00f4\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0003\u00f5\u1084\b\u00f5"+
		"\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0005\u00f6\u1089\b\u00f6\n\u00f6"+
		"\f\u00f6\u108c\t\u00f6\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u110e\b\u00f7"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00fa\u0001\u00fa"+
		"\u0001\u00fb\u0001\u00fb\u0001\u00fc\u0001\u00fc\u0001\u00fd\u0001\u00fd"+
		"\u0001\u00fe\u0001\u00fe\u0001\u00ff\u0001\u00ff\u0001\u0100\u0001\u0100"+
		"\u0001\u0101\u0001\u0101\u0001\u0102\u0001\u0102\u0001\u0103\u0001\u0103"+
		"\u0001\u0104\u0001\u0104\u0001\u0105\u0001\u0105\u0001\u0106\u0001\u0106"+
		"\u0001\u0107\u0001\u0107\u0001\u0108\u0001\u0108\u0001\u0109\u0001\u0109"+
		"\u0001\u010a\u0001\u010a\u0001\u010b\u0001\u010b\u0001\u010c\u0001\u010c"+
		"\u0001\u010d\u0001\u010d\u0001\u010e\u0001\u010e\u0001\u010f\u0001\u010f"+
		"\u0001\u0110\u0001\u0110\u0001\u0111\u0001\u0111\u0003\u0111\u1144\b\u0111"+
		"\u0001\u0112\u0001\u0112\u0001\u0113\u0001\u0113\u0001\u0113\u0003\u0113"+
		"\u114b\b\u0113\u0001\u0114\u0001\u0114\u0003\u0114\u114f\b\u0114\u0001"+
		"\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001"+
		"\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001"+
		"\u0115\u0001\u0115\u0003\u0115\u115f\b\u0115\u0001\u0116\u0001\u0116\u0001"+
		"\u0117\u0001\u0117\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0005"+
		"\u0118\u1169\b\u0118\n\u0118\f\u0118\u116c\t\u0118\u0003\u0118\u116e\b"+
		"\u0118\u0001\u0118\u0001\u0118\u0001\u0119\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0005\u0119\u1178\b\u0119\n\u0119\f\u0119"+
		"\u117b\t\u0119\u0001\u0119\u0003\u0119\u117e\b\u0119\u0001\u011a\u0001"+
		"\u011a\u0001\u011a\u0001\u011a\u0003\u011a\u1184\b\u011a\u0001\u011a\u0001"+
		"\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0003\u011a\u118b\b\u011a\u0001"+
		"\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0003\u011a\u1192"+
		"\b\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0003"+
		"\u011a\u1199\b\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001"+
		"\u011a\u0003\u011a\u11a0\b\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001"+
		"\u011a\u0001\u011a\u0003\u011a\u11a7\b\u011a\u0001\u011a\u0001\u011a\u0001"+
		"\u011a\u0001\u011a\u0001\u011a\u0003\u011a\u11ae\b\u011a\u0001\u011a\u0003"+
		"\u011a\u11b1\b\u011a\u0001\u011b\u0001\u011b\u0001\u011b\u0005\u011b\u11b6"+
		"\b\u011b\n\u011b\f\u011b\u11b9\t\u011b\u0001\u011c\u0001\u011c\u0001\u011c"+
		"\u0005\u011c\u11be\b\u011c\n\u011c\f\u011c\u11c1\t\u011c\u0001\u011d\u0001"+
		"\u011d\u0001\u011d\u0005\u011d\u11c6\b\u011d\n\u011d\f\u011d\u11c9\t\u011d"+
		"\u0001\u011e\u0001\u011e\u0001\u011f\u0001\u011f\u0001\u011f\u0005\u011f"+
		"\u11d0\b\u011f\n\u011f\f\u011f\u11d3\t\u011f\u0001\u0120\u0001\u0120\u0001"+
		"\u0120\u0003\u0120\u11d8\b\u0120\u0001\u0120\u0001\u0120\u0003\u0120\u11dc"+
		"\b\u0120\u0001\u0120\u0003\u0120\u11df\b\u0120\u0001\u0120\u0003\u0120"+
		"\u11e2\b\u0120\u0001\u0120\u0003\u0120\u11e5\b\u0120\u0001\u0120\u0003"+
		"\u0120\u11e8\b\u0120\u0001\u0120\u0003\u0120\u11eb\b\u0120\u0001\u0121"+
		"\u0001\u0121\u0001\u0121\u0003\u0121\u11f0\b\u0121\u0001\u0121\u0003\u0121"+
		"\u11f3\b\u0121\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122"+
		"\u0003\u0122\u11fa\b\u0122\u0001\u0122\u0001\u0122\u0005\u0122\u11fe\b"+
		"\u0122\n\u0122\f\u0122\u1201\t\u0122\u0001\u0123\u0001\u0123\u0001\u0123"+
		"\u0001\u0123\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0125"+
		"\u0001\u0125\u0001\u0125\u0001\u0125\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0127\u0001\u0127\u0001\u0127\u0005\u0127\u1216\b\u0127"+
		"\n\u0127\f\u0127\u1219\t\u0127\u0001\u0128\u0001\u0128\u0001\u0129\u0001"+
		"\u0129\u0003\u0129\u121f\b\u0129\u0001\u0129\u0003\u0129\u1222\b\u0129"+
		"\u0001\u0129\u0001\u0129\u0001\u012a\u0001\u012a\u0001\u012a\u0005\u012a"+
		"\u1229\b\u012a\n\u012a\f\u012a\u122c\t\u012a\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0003\u012b\u1231\b\u012b\u0001\u012c\u0001\u012c\u0001\u012c\u0001"+
		"\u012c\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012e\u0001"+
		"\u012e\u0001\u012e\u0001\u012e\u0001\u012f\u0001\u012f\u0001\u0130\u0001"+
		"\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0003\u0130\u1246\b\u0130\u0001"+
		"\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0003\u0130\u124c\b\u0130\u0001"+
		"\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u1252\b\u0131\u0001"+
		"\u0132\u0001\u0132\u0001\u0132\u0005\u0132\u1257\b\u0132\n\u0132\f\u0132"+
		"\u125a\t\u0132\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133"+
		"\u0003\u0133\u1261\b\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133"+
		"\u0003\u0133\u1267\b\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133"+
		"\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133"+
		"\u0003\u0133\u1273\b\u0133\u0003\u0133\u1275\b\u0133\u0001\u0134\u0001"+
		"\u0134\u0001\u0134\u0001\u0134\u0003\u0134\u127b\b\u0134\u0001\u0134\u0001"+
		"\u0134\u0003\u0134\u127f\b\u0134\u0003\u0134\u1281\b\u0134\u0001\u0135"+
		"\u0001\u0135\u0003\u0135\u1285\b\u0135\u0001\u0135\u0001\u0135\u0001\u0136"+
		"\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136"+
		"\u0003\u0136\u1290\b\u0136\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137"+
		"\u1295\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137"+
		"\u129b\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0003\u0137\u12a2\b\u0137\u0001\u0137\u0003\u0137\u12a5\b\u0137\u0001"+
		"\u0137\u0003\u0137\u12a8\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001"+
		"\u0137\u0003\u0137\u12ae\b\u0137\u0003\u0137\u12b0\b\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137"+
		"\u12b8\b\u0137\u0001\u0137\u0003\u0137\u12bb\b\u0137\u0003\u0137\u12bd"+
		"\b\u0137\u0003\u0137\u12bf\b\u0137\u0001\u0138\u0001\u0138\u0001\u0138"+
		"\u0005\u0138\u12c4\b\u0138\n\u0138\f\u0138\u12c7\t\u0138\u0001\u0139\u0001"+
		"\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001"+
		"\u0139\u0003\u0139\u12d1\b\u0139\u0001\u0139\u0003\u0139\u12d4\b\u0139"+
		"\u0003\u0139\u12d6\b\u0139\u0001\u0139\u0001\u0139\u0003\u0139\u12da\b"+
		"\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0003\u0139\u12df\b\u0139\u0003"+
		"\u0139\u12e1\b\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0003\u0139\u12e6"+
		"\b\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0003\u0139\u12ec"+
		"\b\u0139\u0001\u0139\u0003\u0139\u12ef\b\u0139\u0003\u0139\u12f1\b\u0139"+
		"\u0001\u0139\u0001\u0139\u0003\u0139\u12f5\b\u0139\u0001\u0139\u0003\u0139"+
		"\u12f8\b\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139"+
		"\u0001\u0139\u0001\u0139\u0003\u0139\u1301\b\u0139\u0001\u0139\u0001\u0139"+
		"\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0003\u0139"+
		"\u130a\b\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0003\u0139"+
		"\u1310\b\u0139\u0003\u0139\u1312\b\u0139\u0003\u0139\u1314\b\u0139\u0001"+
		"\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001"+
		"\u013a\u0003\u013a\u131d\b\u013a\u0001\u013a\u0001\u013a\u0003\u013a\u1321"+
		"\b\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0003\u013a\u1327"+
		"\b\u013a\u0001\u013a\u0003\u013a\u132a\b\u013a\u0003\u013a\u132c\b\u013a"+
		"\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a"+
		"\u0001\u013a\u0001\u013a\u0001\u013a\u0003\u013a\u1337\b\u013a\u0001\u013a"+
		"\u0001\u013a\u0001\u013a\u0003\u013a\u133c\b\u013a\u0001\u013a\u0001\u013a"+
		"\u0001\u013a\u0003\u013a\u1341\b\u013a\u0001\u013a\u0001\u013a\u0001\u013a"+
		"\u0001\u013a\u0003\u013a\u1347\b\u013a\u0003\u013a\u1349\b\u013a\u0001"+
		"\u013a\u0001\u013a\u0003\u013a\u134d\b\u013a\u0003\u013a\u134f\b\u013a"+
		"\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013c\u0001\u013c\u0001\u013c"+
		"\u0003\u013c\u1357\b\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u135b\b"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013d\u0003\u013d\u1360\b\u013d\u0001"+
		"\u013d\u0003\u013d\u1363\b\u013d\u0001\u013d\u0005\u013d\u1366\b\u013d"+
		"\n\u013d\f\u013d\u1369\t\u013d\u0001\u013d\u0001\u013d\u0003\u013d\u136d"+
		"\b\u013d\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0003\u013e\u1373"+
		"\b\u013e\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u0140\u0001"+
		"\u0140\u0001\u0140\u0003\u0140\u137c\b\u0140\u0001\u0141\u0001\u0141\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001"+
		"\u0141\u0004\u0141\u1387\b\u0141\u000b\u0141\f\u0141\u1388\u0001\u0142"+
		"\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142"+
		"\u0001\u0142\u0001\u0142\u0001\u0142\u0003\u0142\u1395\b\u0142\u0001\u0142"+
		"\u0001\u0142\u0001\u0142\u0003\u0142\u139a\b\u0142\u0001\u0142\u0001\u0142"+
		"\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0003\u0142\u13a2\b\u0142"+
		"\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0003\u0142\u13a8\b\u0142"+
		"\u0003\u0142\u13aa\b\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142"+
		"\u0001\u0142\u0003\u0142\u13b1\b\u0142\u0003\u0142\u13b3\b\u0142\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0003\u0143\u13ba"+
		"\b\u0143\u0001\u0144\u0001\u0144\u0001\u0144\u0003\u0144\u13bf\b\u0144"+
		"\u0001\u0144\u0001\u0144\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0003\u0145\u13ca\b\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0003\u0145\u13cf\b\u0145\u0003\u0145\u13d1\b"+
		"\u0145\u0001\u0145\u0001\u0145\u0003\u0145\u13d5\b\u0145\u0001\u0145\u0001"+
		"\u0145\u0001\u0145\u0001\u0145\u0003\u0145\u13db\b\u0145\u0001\u0145\u0003"+
		"\u0145\u13de\b\u0145\u0001\u0145\u0003\u0145\u13e1\b\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0003\u0145\u13eb\b\u0145\u0003\u0145\u13ed\b\u0145\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0003\u0146\u13f3\b\u0146\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0148\u0001\u0148\u0001\u0148\u0001"+
		"\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0003\u0149\u1400"+
		"\b\u0149\u0001\u0149\u0001\u0149\u0003\u0149\u1404\b\u0149\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0003\u014a\u1409\b\u014a\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c"+
		"\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0005\u014c"+
		"\u1418\b\u014c\n\u014c\f\u014c\u141b\t\u014c\u0001\u014d\u0001\u014d\u0001"+
		"\u014d\u0003\u014d\u1420\b\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001"+
		"\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0003\u014d\u1429\b\u014d\u0001"+
		"\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0003"+
		"\u014d\u1431\b\u014d\u0001\u014d\u0001\u014d\u0003\u014d\u1435\b\u014d"+
		"\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0003\u014d\u143b\b\u014d"+
		"\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d"+
		"\u0001\u014d\u0001\u014d\u0003\u014d\u1445\b\u014d\u0001\u014d\u0001\u014d"+
		"\u0003\u014d\u1449\b\u014d\u0001\u014e\u0001\u014e\u0001\u014f\u0001\u014f"+
		"\u0001\u014f\u0005\u014f\u1450\b\u014f\n\u014f\f\u014f\u1453\t\u014f\u0001"+
		"\u0150\u0001\u0150\u0003\u0150\u1457\b\u0150\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0001\u0150\u0003\u0150\u145d\b\u0150\u0003\u0150\u145f\b\u0150"+
		"\u0001\u0150\u0001\u0150\u0003\u0150\u1463\b\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0003\u0150\u146e\b\u0150\u0001\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0001\u0150\u0003\u0150\u1475\b\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0001\u0150\u0003\u0150\u147b\b\u0150\u0001\u0150\u0001\u0150"+
		"\u0003\u0150\u147f\b\u0150\u0001\u0151\u0001\u0151\u0001\u0151\u0003\u0151"+
		"\u1484\b\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0003\u0151\u1489\b"+
		"\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001"+
		"\u0151\u0003\u0151\u1491\b\u0151\u0001\u0152\u0001\u0152\u0003\u0152\u1495"+
		"\b\u0152\u0001\u0152\u0005\u0152\u1498\b\u0152\n\u0152\f\u0152\u149b\t"+
		"\u0152\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001"+
		"\u0153\u0003\u0153\u14a3\b\u0153\u0001\u0154\u0001\u0154\u0001\u0154\u0001"+
		"\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001"+
		"\u0154\u0001\u0154\u0003\u0154\u14b0\b\u0154\u0003\u0154\u14b2\b\u0154"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0003\u0155\u14c0\b\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0003\u0155\u14c9\b\u0155\u0003\u0155"+
		"\u14cb\b\u0155\u0001\u0156\u0001\u0156\u0001\u0156\u0005\u0156\u14d0\b"+
		"\u0156\n\u0156\f\u0156\u14d3\t\u0156\u0001\u0157\u0001\u0157\u0003\u0157"+
		"\u14d7\b\u0157\u0001\u0158\u0001\u0158\u0003\u0158\u14db\b\u0158\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0003\u0158\u14e0\b\u0158\u0001\u0158\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0005\u0158\u14e6\b\u0158\n\u0158\f\u0158"+
		"\u14e9\t\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0003\u0158"+
		"\u14ef\b\u0158\u0001\u0158\u0001\u0158\u0003\u0158\u14f3\b\u0158\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0003\u0158\u14f9\b\u0158\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0005\u0158\u14fe\b\u0158\n\u0158\f\u0158"+
		"\u1501\t\u0158\u0003\u0158\u1503\b\u0158\u0001\u0159\u0001\u0159\u0001"+
		"\u0159\u0001\u0159\u0001\u015a\u0003\u015a\u150a\b\u015a\u0001\u015a\u0003"+
		"\u015a\u150d\b\u015a\u0001\u015a\u0001\u015a\u0001\u015a\u0001\u015a\u0003"+
		"\u015a\u1513\b\u015a\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001"+
		"\u015b\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001"+
		"\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0003\u015c\u1524"+
		"\b\u015c\u0001\u015d\u0001\u015d\u0001\u015d\u0003\u015d\u1529\b\u015d"+
		"\u0001\u015e\u0001\u015e\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f"+
		"\u0001\u015f\u0001\u015f\u0001\u015f\u0005\u015f\u1534\b\u015f\n\u015f"+
		"\f\u015f\u1537\t\u015f\u0003\u015f\u1539\b\u015f\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0003\u0160\u1544\b\u0160\u0003\u0160\u1546\b\u0160\u0001"+
		"\u0161\u0001\u0161\u0001\u0162\u0001\u0162\u0003\u0162\u154c\b\u0162\u0001"+
		"\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0164\u0001"+
		"\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0005\u0164\u1558\b\u0164\n"+
		"\u0164\f\u0164\u155b\t\u0164\u0001\u0165\u0001\u0165\u0001\u0165\u0001"+
		"\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001"+
		"\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0003\u0166\u156b"+
		"\b\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0003\u0166\u1570\b\u0166"+
		"\u0001\u0166\u0003\u0166\u1573\b\u0166\u0001\u0166\u0001\u0166\u0003\u0166"+
		"\u1577\b\u0166\u0001\u0166\u0003\u0166\u157a\b\u0166\u0001\u0166\u0001"+
		"\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0003\u0166\u1582"+
		"\b\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0003\u0166\u1588"+
		"\b\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0003\u0166\u158d\b\u0166"+
		"\u0001\u0166\u0003\u0166\u1590\b\u0166\u0003\u0166\u1592\b\u0166\u0001"+
		"\u0167\u0001\u0167\u0003\u0167\u1596\b\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0003\u0167\u159b\b\u0167\u0003\u0167\u159d\b\u0167\u0001\u0168"+
		"\u0001\u0168\u0001\u0168\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0003\u0169\u15a9\b\u0169\u0001\u016a"+
		"\u0001\u016a\u0005\u016a\u15ad\b\u016a\n\u016a\f\u016a\u15b0\t\u016a\u0001"+
		"\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001"+
		"\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0003\u016b\u15bd"+
		"\b\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001"+
		"\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0003\u016b\u15c9"+
		"\b\u016b\u0001\u016b\u0001\u016b\u0003\u016b\u15cd\b\u016b\u0003\u016b"+
		"\u15cf\b\u016b\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c"+
		"\u0001\u016c\u0003\u016c\u15d7\b\u016c\u0001\u016d\u0001\u016d\u0003\u016d"+
		"\u15db\b\u016d\u0001\u016d\u0001\u016d\u0001\u016e\u0001\u016e\u0001\u016e"+
		"\u0001\u016e\u0001\u016e\u0003\u016e\u15e4\b\u016e\u0001\u016f\u0001\u016f"+
		"\u0001\u016f\u0001\u016f\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0170"+
		"\u0001\u0170\u0001\u0170\u0001\u0170\u0003\u0170\u15f1\b\u0170\u0001\u0171"+
		"\u0001\u0171\u0001\u0171\u0003\u0171\u15f6\b\u0171\u0001\u0172\u0001\u0172"+
		"\u0003\u0172\u15fa\b\u0172\u0001\u0172\u0001\u0172\u0003\u0172\u15fe\b"+
		"\u0172\u0001\u0172\u0003\u0172\u1601\b\u0172\u0001\u0173\u0001\u0173\u0003"+
		"\u0173\u1605\b\u0173\u0001\u0173\u0001\u0173\u0003\u0173\u1609\b\u0173"+
		"\u0001\u0173\u0003\u0173\u160c\b\u0173\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0003\u0174\u1611\b\u0174\u0001\u0174\u0003\u0174\u1614\b\u0174\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0003\u0175\u161a\b\u0175\u0001"+
		"\u0175\u0003\u0175\u161d\b\u0175\u0001\u0176\u0001\u0176\u0001\u0176\u0001"+
		"\u0176\u0003\u0176\u1623\b\u0176\u0001\u0176\u0003\u0176\u1626\b\u0176"+
		"\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u0179"+
		"\u0001\u0179\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a"+
		"\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017c"+
		"\u0001\u017c\u0003\u017c\u1641\b\u017c\u0001\u017c\u0001\u017c\u0001\u017c"+
		"\u0001\u017c\u0003\u017c\u1647\b\u017c\u0001\u017c\u0003\u017c\u164a\b"+
		"\u017c\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017e\u0001"+
		"\u017e\u0001\u017e\u0001\u017e\u0001\u017e\u0001\u017f\u0001\u017f\u0001"+
		"\u017f\u0001\u017f\u0001\u017f\u0003\u017f\u165a\b\u017f\u0001\u0180\u0001"+
		"\u0180\u0001\u0180\u0001\u0180\u0001\u0180\u0003\u0180\u1661\b\u0180\u0001"+
		"\u0180\u0001\u0180\u0003\u0180\u1665\b\u0180\u0001\u0180\u0003\u0180\u1668"+
		"\b\u0180\u0001\u0180\u0003\u0180\u166b\b\u0180\u0001\u0181\u0001\u0181"+
		"\u0001\u0181\u0001\u0181\u0001\u0181\u0003\u0181\u1672\b\u0181\u0001\u0181"+
		"\u0001\u0181\u0003\u0181\u1676\b\u0181\u0001\u0181\u0003\u0181\u1679\b"+
		"\u0181\u0001\u0181\u0003\u0181\u167c\b\u0181\u0001\u0182\u0001\u0182\u0003"+
		"\u0182\u1680\b\u0182\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182\u0003"+
		"\u0182\u1686\b\u0182\u0001\u0182\u0003\u0182\u1689\b\u0182\u0001\u0183"+
		"\u0001\u0183\u0003\u0183\u168d\b\u0183\u0001\u0183\u0001\u0183\u0001\u0184"+
		"\u0001\u0184\u0001\u0184\u0001\u0184\u0001\u0184\u0001\u0184\u0001\u0184"+
		"\u0001\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0001\u0185"+
		"\u0001\u0185\u0001\u0186\u0001\u0186\u0001\u0186\u0003\u0186\u16a2\b\u0186"+
		"\u0001\u0187\u0001\u0187\u0001\u0187\u0003\u0187\u16a7\b\u0187\u0001\u0188"+
		"\u0001\u0188\u0001\u0188\u0001\u0189\u0001\u0189\u0001\u0189\u0003\u0189"+
		"\u16af\b\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0003\u0189\u16b4\b"+
		"\u0189\u0001\u0189\u0003\u0189\u16b7\b\u0189\u0001\u018a\u0001\u018a\u0003"+
		"\u018a\u16bb\b\u018a\u0001\u018a\u0001\u018a\u0003\u018a\u16bf\b\u018a"+
		"\u0001\u018b\u0001\u018b\u0003\u018b\u16c3\b\u018b\u0001\u018b\u0001\u018b"+
		"\u0001\u018c\u0001\u018c\u0003\u018c\u16c9\b\u018c\u0001\u018c\u0001\u018c"+
		"\u0003\u018c\u16cd\b\u018c\u0001\u018d\u0001\u018d\u0001\u018d\u0003\u018d"+
		"\u16d2\b\u018d\u0001\u018e\u0001\u018e\u0001\u018e\u0003\u018e\u16d7\b"+
		"\u018e\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u0190\u0001\u0190\u0001"+
		"\u0190\u0001\u0190\u0001\u0190\u0001\u0190\u0003\u0190\u16e2\b\u0190\u0003"+
		"\u0190\u16e4\b\u0190\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0191\u0003"+
		"\u0191\u16ea\b\u0191\u0001\u0191\u0001\u0191\u0001\u0192\u0001\u0192\u0001"+
		"\u0192\u0001\u0192\u0001\u0192\u0001\u0193\u0001\u0193\u0001\u0193\u0001"+
		"\u0193\u0001\u0193\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001"+
		"\u0195\u0001\u0195\u0001\u0195\u0001\u0195\u0003\u0195\u1700\b\u0195\u0001"+
		"\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0197\u0001"+
		"\u0197\u0001\u0197\u0001\u0197\u0001\u0197\u0001\u0198\u0001\u0198\u0001"+
		"\u0198\u0001\u0198\u0001\u0198\u0001\u0199\u0001\u0199\u0001\u0199\u0001"+
		"\u0199\u0001\u0199\u0003\u0199\u1716\b\u0199\u0001\u019a\u0001\u019a\u0001"+
		"\u019a\u0001\u019a\u0001\u019a\u0003\u019a\u171d\b\u019a\u0001\u019b\u0001"+
		"\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019c\u0001"+
		"\u019c\u0001\u019c\u0001\u019c\u0001\u019c\u0001\u019c\u0001\u019d\u0001"+
		"\u019d\u0001\u019d\u0001\u019d\u0001\u019d\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019f\u0001\u019f\u0001\u019f\u0003"+
		"\u019f\u1738\b\u019f\u0003\u019f\u173a\b\u019f\u0001\u01a0\u0001\u01a0"+
		"\u0003\u01a0\u173e\b\u01a0\u0001\u01a1\u0001\u01a1\u0001\u01a2\u0001\u01a2"+
		"\u0001\u01a2\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0005\u01a3\u1748\b\u01a3"+
		"\n\u01a3\f\u01a3\u174b\t\u01a3\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001"+
		"\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0003\u01a4\u1754\b\u01a4\u0001"+
		"\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a5\u0003\u01a5\u175e\b\u01a5\u0001\u01a5\u0001\u01a5\u0003"+
		"\u01a5\u1762\b\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0005"+
		"\u01a5\u1768\b\u01a5\n\u01a5\f\u01a5\u176b\t\u01a5\u0003\u01a5\u176d\b"+
		"\u01a5\u0001\u01a5\u0001\u01a5\u0003\u01a5\u1771\b\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0003"+
		"\u01a5\u177a\b\u01a5\u0001\u01a6\u0001\u01a6\u0003\u01a6\u177e\b\u01a6"+
		"\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0005\u01a7\u1783\b\u01a7\n\u01a7"+
		"\f\u01a7\u1786\t\u01a7\u0001\u01a8\u0001\u01a8\u0003\u01a8\u178a\b\u01a8"+
		"\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9"+
		"\u0003\u01a9\u1792\b\u01a9\u0001\u01aa\u0001\u01aa\u0001\u01aa\u0003\u01aa"+
		"\u1797\b\u01aa\u0001\u01aa\u0001\u01aa\u0001\u01ab\u0001\u01ab\u0003\u01ab"+
		"\u179d\b\u01ab\u0001\u01ac\u0001\u01ac\u0001\u01ac\u0005\u01ac\u17a2\b"+
		"\u01ac\n\u01ac\f\u01ac\u17a5\t\u01ac\u0001\u01ad\u0001\u01ad\u0003\u01ad"+
		"\u17a9\b\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0003\u01ad"+
		"\u17af\b\u01ad\u0001\u01ad\u0003\u01ad\u17b2\b\u01ad\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001"+
		"\u01af\u0003\u01af\u17bc\b\u01af\u0003\u01af\u17be\b\u01af\u0001\u01b0"+
		"\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0003\u01b0\u17c5\b\u01b0"+
		"\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0003\u01b1\u17ca\b\u01b1\u0001\u01b1"+
		"\u0001\u01b1\u0003\u01b1\u17ce\b\u01b1\u0001\u01b1\u0003\u01b1\u17d1\b"+
		"\u01b1\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0005\u01b2\u17d6\b\u01b2\n"+
		"\u01b2\f\u01b2\u17d9\t\u01b2\u0001\u01b3\u0001\u01b3\u0003\u01b3\u17dd"+
		"\b\u01b3\u0001\u01b3\u0001\u01b3\u0003\u01b3\u17e1\b\u01b3\u0001\u01b4"+
		"\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001\u01b5\u0001\u01b5"+
		"\u0001\u01b5\u0001\u01b5\u0003\u01b5\u17ec\b\u01b5\u0001\u01b6\u0001\u01b6"+
		"\u0001\u01b6\u0001\u01b6\u0001\u01b6\u0001\u01b6\u0003\u01b6\u17f4\b\u01b6"+
		"\u0001\u01b6\u0001\u01b6\u0003\u01b6\u17f8\b\u01b6\u0001\u01b6\u0003\u01b6"+
		"\u17fb\b\u01b6\u0001\u01b6\u0003\u01b6\u17fe\b\u01b6\u0001\u01b7\u0001"+
		"\u01b7\u0003\u01b7\u1802\b\u01b7\u0001\u01b7\u0001\u01b7\u0003\u01b7\u1806"+
		"\b\u01b7\u0001\u01b7\u0005\u01b7\u1809\b\u01b7\n\u01b7\f\u01b7\u180c\t"+
		"\u01b7\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0003\u01b8\u1811\b\u01b8\u0001"+
		"\u01b9\u0001\u01b9\u0003\u01b9\u1815\b\u01b9\u0001\u01b9\u0001\u01b9\u0001"+
		"\u01ba\u0001\u01ba\u0001\u01bb\u0001\u01bb\u0001\u01bb\u0001\u01bb\u0001"+
		"\u01bb\u0003\u01bb\u1820\b\u01bb\u0001\u01bb\u0003\u01bb\u1823\b\u01bb"+
		"\u0001\u01bb\u0003\u01bb\u1826\b\u01bb\u0001\u01bb\u0003\u01bb\u1829\b"+
		"\u01bb\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001"+
		"\u01bc\u0003\u01bc\u1831\b\u01bc\u0001\u01bd\u0001\u01bd\u0003\u01bd\u1835"+
		"\b\u01bd\u0001\u01bd\u0005\u01bd\u1838\b\u01bd\n\u01bd\f\u01bd\u183b\t"+
		"\u01bd\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u1842\b\u01be\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001"+
		"\u01bf\u0001\u01bf\u0003\u01bf\u184a\b\u01bf\u0001\u01c0\u0001\u01c0\u0001"+
		"\u01c0\u0001\u01c0\u0003\u01c0\u1850\b\u01c0\u0001\u01c1\u0001\u01c1\u0003"+
		"\u01c1\u1854\b\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0003"+
		"\u01c1\u185a\b\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c2\u0001\u01c2\u0001"+
		"\u01c2\u0001\u01c2\u0001\u01c2\u0003\u01c2\u1863\b\u01c2\u0001\u01c2\u0001"+
		"\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001"+
		"\u01c2\u0001\u01c2\u0003\u01c2\u186e\b\u01c2\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003"+
		"\u01c3\u1878\b\u01c3\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001"+
		"\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0001"+
		"\u01c7\u0001\u01c7\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0003"+
		"\u01c8\u188a\b\u01c8\u0001\u01c8\u0003\u01c8\u188d\b\u01c8\u0001\u01c8"+
		"\u0001\u01c8\u0003\u01c8\u1891\b\u01c8\u0001\u01c8\u0001\u01c8\u0001\u01c8"+
		"\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0001\u01c8"+
		"\u0005\u01c8\u189c\b\u01c8\n\u01c8\f\u01c8\u189f\t\u01c8\u0001\u01c9\u0001"+
		"\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0003\u01c9\u18a7"+
		"\b\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001"+
		"\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0005\u01c9\u18b3"+
		"\b\u01c9\n\u01c9\f\u01c9\u18b6\t\u01c9\u0001\u01ca\u0001\u01ca\u0001\u01cb"+
		"\u0001\u01cb\u0003\u01cb\u18bc\b\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb"+
		"\u0001\u01cb\u0003\u01cb\u18c2\b\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb"+
		"\u0001\u01cb\u0003\u01cb\u18c8\b\u01cb\u0001\u01cc\u0001\u01cc\u0001\u01cc"+
		"\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0003\u01cc\u18d0\b\u01cc\u0001\u01cc"+
		"\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc"+
		"\u0001\u01cc\u0001\u01cc\u0003\u01cc\u18db\b\u01cc\u0001\u01cc\u0001\u01cc"+
		"\u0003\u01cc\u18df\b\u01cc\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd"+
		"\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd"+
		"\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd"+
		"\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd"+
		"\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0005\u01cd"+
		"\u18fc\b\u01cd\n\u01cd\f\u01cd\u18ff\t\u01cd\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0003\u01ce\u1904\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0003"+
		"\u01ce\u1915\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0003\u01ce\u191c\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u192a\b\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0003\u01ce\u1935\b\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0003\u01ce\u193a\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0003"+
		"\u01ce\u1945\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u194f\b\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0004\u01ce\u1954\b\u01ce\u000b\u01ce\f"+
		"\u01ce\u1955\u0001\u01ce\u0003\u01ce\u1959\b\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0003\u01ce\u197b\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0005\u01ce\u1983\b\u01ce\n\u01ce\f\u01ce\u1986"+
		"\t\u01ce\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01d0\u0001\u01d0\u0001"+
		"\u01d0\u0001\u01d0\u0003\u01d0\u198f\b\u01d0\u0001\u01d1\u0001\u01d1\u0001"+
		"\u01d1\u0003\u01d1\u1994\b\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0003"+
		"\u01d1\u1999\b\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001"+
		"\u01d1\u0003\u01d1\u19a0\b\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001"+
		"\u01d1\u0003\u01d1\u19a6\b\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0003"+
		"\u01d1\u19ab\b\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0003\u01d1\u19b0"+
		"\b\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0003\u01d1\u19b6"+
		"\b\u01d1\u0001\u01d1\u0001\u01d1\u0003\u01d1\u19ba\b\u01d1\u0001\u01d1"+
		"\u0001\u01d1\u0001\u01d1\u0003\u01d1\u19bf\b\u01d1\u0001\u01d1\u0001\u01d1"+
		"\u0001\u01d1\u0003\u01d1\u19c4\b\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1"+
		"\u0001\u01d1\u0001\u01d1\u0003\u01d1\u19cb\b\u01d1\u0001\u01d1\u0001\u01d1"+
		"\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0003\u01d1\u19d3\b\u01d1"+
		"\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0003\u01d1\u19d8\b\u01d1\u0001\u01d1"+
		"\u0001\u01d1\u0003\u01d1\u19dc\b\u01d1\u0001\u01d1\u0001\u01d1\u0003\u01d1"+
		"\u19e0\b\u01d1\u0001\u01d1\u0001\u01d1\u0003\u01d1\u19e4\b\u01d1\u0003"+
		"\u01d1\u19e6\b\u01d1\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001"+
		"\u01d2\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001"+
		"\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0003"+
		"\u01d3\u19f8\b\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001"+
		"\u01d3\u0001\u01d3\u0003\u01d3\u1a00\b\u01d3\u0001\u01d3\u0001\u01d3\u0003"+
		"\u01d3\u1a04\b\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001"+
		"\u01d3\u0003\u01d3\u1a0b\b\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001"+
		"\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001"+
		"\u01d3\u0003\u01d3\u1a17\b\u01d3\u0001\u01d3\u0003\u01d3\u1a1a\b\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0003\u01d3\u1a1e\b\u01d3\u0001\u01d4\u0001\u01d4"+
		"\u0001\u01d5\u0001\u01d5\u0001\u01d5\u0001\u01d5\u0003\u01d5\u1a26\b\u01d5"+
		"\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6"+
		"\u0001\u01d6\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0003\u01d7\u1a32\b\u01d7"+
		"\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0003\u01d8"+
		"\u1a39\b\u01d8\u0001\u01d8\u0001\u01d8\u0003\u01d8\u1a3d\b\u01d8\u0001"+
		"\u01d9\u0001\u01d9\u0003\u01d9\u1a41\b\u01d9\u0001\u01da\u0001\u01da\u0001"+
		"\u01da\u0001\u01da\u0003\u01da\u1a47\b\u01da\u0001\u01db\u0001\u01db\u0001"+
		"\u01db\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0003"+
		"\u01dc\u1a51\b\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001"+
		"\u01dc\u0001\u01dc\u0001\u01dc\u0003\u01dc\u1a5a\b\u01dc\u0003\u01dc\u1a5c"+
		"\b\u01dc\u0001\u01dd\u0003\u01dd\u1a5f\b\u01dd\u0001\u01dd\u0001\u01dd"+
		"\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0003\u01de"+
		"\u1a68\b\u01de\u0001\u01df\u0001\u01df\u0001\u01df\u0005\u01df\u1a6d\b"+
		"\u01df\n\u01df\f\u01df\u1a70\t\u01df\u0001\u01e0\u0001\u01e0\u0001\u01e0"+
		"\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0001\u01e0"+
		"\u0001\u01e0\u0003\u01e0\u1a7c\b\u01e0\u0001\u01e0\u0001\u01e0\u0001\u01e0"+
		"\u0003\u01e0\u1a81\b\u01e0\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0003\u01e1\u1a88\b\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0003\u01e1\u1a8e\b\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0004\u01e1\u1aa6\b\u01e1\u000b\u01e1\f\u01e1\u1aa7\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0003\u01e1\u1ab2\b\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1ad2\b\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1ae5"+
		"\b\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1aeb"+
		"\b\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1aef\b\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1b0e\b\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1b14\b\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1b20\b\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1"+
		"\u1b2d\b\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1b31\b\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0003\u01e1\u1b35\b\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003"+
		"\u01e1\u1b51\b\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0003\u01e1\u1b83\b\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003"+
		"\u01e1\u1b8d\b\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003"+
		"\u01e1\u1b99\b\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1b9e"+
		"\b\u01e1\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e3\u0001\u01e3\u0001"+
		"\u01e3\u0003\u01e3\u1ba6\b\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001"+
		"\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001"+
		"\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001"+
		"\u01e3\u0001\u01e3\u0001\u01e3\u0003\u01e3\u1bba\b\u01e3\u0001\u01e4\u0001"+
		"\u01e4\u0003\u01e4\u1bbe\b\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e5\u0001"+
		"\u01e5\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0001"+
		"\u01e6\u0001\u01e6\u0001\u01e6\u0005\u01e6\u1bcc\b\u01e6\n\u01e6\f\u01e6"+
		"\u1bcf\t\u01e6\u0003\u01e6\u1bd1\b\u01e6\u0001\u01e7\u0001\u01e7\u0001"+
		"\u01e7\u0003\u01e7\u1bd6\b\u01e7\u0001\u01e7\u0003\u01e7\u1bd9\b\u01e7"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9"+
		"\u0001\u01e9\u0003\u01e9\u1be2\b\u01e9\u0001\u01e9\u0001\u01e9\u0003\u01e9"+
		"\u1be6\b\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0003\u01e9"+
		"\u1bec\b\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0003\u01e9"+
		"\u1bf2\b\u01e9\u0001\u01e9\u0001\u01e9\u0003\u01e9\u1bf6\b\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0001"+
		"\u01ea\u0001\u01ea\u0001\u01ea\u0003\u01ea\u1c01\b\u01ea\u0001\u01ea\u0001"+
		"\u01ea\u0001\u01ea\u0001\u01ea\u0003\u01ea\u1c07\b\u01ea\u0003\u01ea\u1c09"+
		"\b\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01eb\u0001\u01eb\u0001\u01eb\u0003"+
		"\u01eb\u1c10\b\u01eb\u0001\u01eb\u0001\u01eb\u0001\u01eb\u0001\u01eb\u0001"+
		"\u01eb\u0003\u01eb\u1c17\b\u01eb\u0001\u01eb\u0001\u01eb\u0003\u01eb\u1c1b"+
		"\b\u01eb\u0001\u01ec\u0001\u01ec\u0001\u01ec\u0005\u01ec\u1c20\b\u01ec"+
		"\n\u01ec\f\u01ec\u1c23\t\u01ec\u0001\u01ed\u0001\u01ed\u0003\u01ed\u1c27"+
		"\b\u01ed\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0003\u01ee\u1c2c\b\u01ee"+
		"\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01f0\u0001\u01f0"+
		"\u0001\u01f0\u0003\u01f0\u1c35\b\u01f0\u0001\u01f0\u0003\u01f0\u1c38\b"+
		"\u01f0\u0001\u01f1\u0001\u01f1\u0003\u01f1\u1c3c\b\u01f1\u0001\u01f1\u0001"+
		"\u01f1\u0001\u01f1\u0003\u01f1\u1c41\b\u01f1\u0003\u01f1\u1c43\b\u01f1"+
		"\u0001\u01f1\u0001\u01f1\u0003\u01f1\u1c47\b\u01f1\u0001\u01f2\u0001\u01f2"+
		"\u0003\u01f2\u1c4b\b\u01f2\u0001\u01f3\u0001\u01f3\u0001\u01f3\u0001\u01f4"+
		"\u0001\u01f4\u0001\u01f4\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f6"+
		"\u0001\u01f6\u0003\u01f6\u1c58\b\u01f6\u0001\u01f6\u0001\u01f6\u0003\u01f6"+
		"\u1c5c\b\u01f6\u0001\u01f6\u0003\u01f6\u1c5f\b\u01f6\u0001\u01f6\u0001"+
		"\u01f6\u0003\u01f6\u1c63\b\u01f6\u0001\u01f6\u0001\u01f6\u0003\u01f6\u1c67"+
		"\b\u01f6\u0001\u01f6\u0001\u01f6\u0003\u01f6\u1c6b\b\u01f6\u0001\u01f6"+
		"\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0003\u01f6\u1c72\b\u01f6"+
		"\u0001\u01f6\u0001\u01f6\u0003\u01f6\u1c76\b\u01f6\u0001\u01f6\u0001\u01f6"+
		"\u0003\u01f6\u1c7a\b\u01f6\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0001\u01f6"+
		"\u0001\u01f6\u0001\u01f6\u0003\u01f6\u1c82\b\u01f6\u0001\u01f6\u0001\u01f6"+
		"\u0003\u01f6\u1c86\b\u01f6\u0001\u01f7\u0001\u01f7\u0001\u01f7\u0005\u01f7"+
		"\u1c8b\b\u01f7\n\u01f7\f\u01f7\u1c8e\t\u01f7\u0001\u01f8\u0001\u01f8\u0001"+
		"\u01f8\u0003\u01f8\u1c93\b\u01f8\u0001\u01f9\u0001\u01f9\u0001\u01fa\u0001"+
		"\u01fa\u0001\u01fb\u0001\u01fb\u0003\u01fb\u1c9b\b\u01fb\u0001\u01fc\u0001"+
		"\u01fc\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0001\u01fe\u0001"+
		"\u01fe\u0001\u01fe\u0001\u01fe\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0001"+
		"\u01ff\u0001\u0200\u0001\u0200\u0001\u0200\u0005\u0200\u1cae\b\u0200\n"+
		"\u0200\f\u0200\u1cb1\t\u0200\u0001\u0201\u0001\u0201\u0003\u0201\u1cb5"+
		"\b\u0201\u0001\u0202\u0001\u0202\u0001\u0202\u0005\u0202\u1cba\b\u0202"+
		"\n\u0202\f\u0202\u1cbd\t\u0202\u0001\u0203\u0001\u0203\u0001\u0204\u0001"+
		"\u0204\u0001\u0204\u0001\u0204\u0001\u0205\u0001\u0205\u0001\u0205\u0001"+
		"\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001"+
		"\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0003\u0205\u1cd2\b\u0205\u0001"+
		"\u0206\u0001\u0206\u0001\u0206\u0001\u0207\u0001\u0207\u0001\u0207\u0001"+
		"\u0207\u0001\u0207\u0001\u0208\u0001\u0208\u0001\u0208\u0001\u0208\u0001"+
		"\u0208\u0001\u0208\u0003\u0208\u1ce2\b\u0208\u0001\u0209\u0001\u0209\u0001"+
		"\u0209\u0001\u020a\u0001\u020a\u0001\u020a\u0004\u020a\u1cea\b\u020a\u000b"+
		"\u020a\f\u020a\u1ceb\u0001\u020b\u0001\u020b\u0003\u020b\u1cf0\b\u020b"+
		"\u0001\u020b\u0001\u020b\u0001\u020b\u0004\u020b\u1cf5\b\u020b\u000b\u020b"+
		"\f\u020b\u1cf6\u0001\u020b\u0003\u020b\u1cfa\b\u020b\u0001\u020b\u0001"+
		"\u020b\u0001\u020b\u0001\u020c\u0001\u020c\u0001\u020c\u0001\u020d\u0001"+
		"\u020d\u0001\u020d\u0003\u020d\u1d05\b\u020d\u0001\u020e\u0001\u020e\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u0210\u0001\u0210\u0003\u0210\u1d0e"+
		"\b\u0210\u0001\u0210\u0003\u0210\u1d11\b\u0210\u0001\u0210\u0001\u0210"+
		"\u0001\u0211\u0001\u0211\u0001\u0211\u0003\u0211\u1d18\b\u0211\u0001\u0212"+
		"\u0001\u0212\u0001\u0212\u0003\u0212\u1d1d\b\u0212\u0001\u0213\u0001\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0214\u0001\u0214\u0001\u0214"+
		"\u0001\u0214\u0001\u0214\u0001\u0214\u0001\u0214\u0001\u0215\u0001\u0215"+
		"\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0216"+
		"\u0001\u0216\u0001\u0216\u0004\u0216\u1d35\b\u0216\u000b\u0216\f\u0216"+
		"\u1d36\u0001\u0217\u0001\u0217\u0001\u0217\u0001\u0217\u0003\u0217\u1d3d"+
		"\b\u0217\u0001\u0218\u0001\u0218\u0001\u0218\u0001\u0218\u0003\u0218\u1d43"+
		"\b\u0218\u0001\u0218\u0001\u0218\u0003\u0218\u1d47\b\u0218\u0001\u0219"+
		"\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u021a"+
		"\u0001\u021a\u0003\u021a\u1d51\b\u021a\u0001\u021b\u0001\u021b\u0003\u021b"+
		"\u1d55\b\u021b\u0001\u021b\u0001\u021b\u0001\u021c\u0001\u021c\u0001\u021c"+
		"\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0005\u021c\u1d60\b\u021c"+
		"\n\u021c\f\u021c\u1d63\t\u021c\u0001\u021c\u0001\u021c\u0001\u021d\u0001"+
		"\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0003"+
		"\u021d\u1d6e\b\u021d\u0001\u021e\u0001\u021e\u0001\u021e\u0001\u021e\u0001"+
		"\u021e\u0001\u021e\u0001\u021f\u0001\u021f\u0001\u021f\u0001\u0220\u0001"+
		"\u0220\u0001\u0220\u0001\u0221\u0001\u0221\u0003\u0221\u1d7e\b\u0221\u0001"+
		"\u0221\u0001\u0221\u0001\u0221\u0001\u0221\u0005\u0221\u1d84\b\u0221\n"+
		"\u0221\f\u0221\u1d87\t\u0221\u0001\u0221\u0001\u0221\u0001\u0221\u0001"+
		"\u0221\u0001\u0221\u0005\u0221\u1d8e\b\u0221\n\u0221\f\u0221\u1d91\t\u0221"+
		"\u0003\u0221\u1d93\b\u0221\u0001\u0222\u0001\u0222\u0001\u0222\u0003\u0222"+
		"\u1d98\b\u0222\u0001\u0223\u0001\u0223\u0003\u0223\u1d9c\b\u0223\u0001"+
		"\u0223\u0001\u0223\u0001\u0223\u0001\u0224\u0001\u0224\u0003\u0224\u1da3"+
		"\b\u0224\u0001\u0224\u0001\u0224\u0001\u0224\u0003\u0224\u1da8\b\u0224"+
		"\u0001\u0225\u0001\u0225\u0001\u0226\u0001\u0226\u0001\u0226\u0003\u0226"+
		"\u1daf\b\u0226\u0001\u0226\u0001\u0226\u0001\u0226\u0001\u0226\u0005\u0226"+
		"\u1db5\b\u0226\n\u0226\f\u0226\u1db8\t\u0226\u0003\u0226\u1dba\b\u0226"+
		"\u0001\u0227\u0001\u0227\u0001\u0227\u0003\u0227\u1dbf\b\u0227\u0001\u0227"+
		"\u0001\u0227\u0001\u0227\u0001\u0227\u0005\u0227\u1dc5\b\u0227\n\u0227"+
		"\f\u0227\u1dc8\t\u0227\u0003\u0227\u1dca\b\u0227\u0001\u0228\u0001\u0228"+
		"\u0001\u0228\u0001\u0228\u0001\u0229\u0001\u0229\u0001\u0229\u0001\u022a"+
		"\u0001\u022a\u0001\u022a\u0001\u022b\u0001\u022b\u0003\u022b\u1dd8\b\u022b"+
		"\u0001\u022b\u0003\u022b\u1ddb\b\u022b\u0001\u022b\u0001\u022b\u0001\u022b"+
		"\u0001\u022b\u0001\u022c\u0001\u022c\u0001\u022c\u0001\u022c\u0001\u022c"+
		"\u0001\u022c\u0001\u022c\u0003\u022c\u1de8\b\u022c\u0001\u022c\u0001\u022c"+
		"\u0003\u022c\u1dec\b\u022c\u0003\u022c\u1dee\b\u022c\u0001\u022d\u0001"+
		"\u022d\u0001\u022d\u0003\u022d\u1df3\b\u022d\u0001\u022e\u0001\u022e\u0001"+
		"\u022e\u0003\u022e\u1df8\b\u022e\u0001\u022f\u0001\u022f\u0001\u022f\u0001"+
		"\u0230\u0001\u0230\u0003\u0230\u1dff\b\u0230\u0001\u0230\u0001\u0230\u0001"+
		"\u0231\u0001\u0231\u0003\u0231\u1e05\b\u0231\u0001\u0231\u0001\u0231\u0005"+
		"\u0231\u1e09\b\u0231\n\u0231\f\u0231\u1e0c\t\u0231\u0001\u0231\u0001\u0231"+
		"\u0003\u0231\u1e10\b\u0231\u0001\u0231\u0003\u0231\u1e13\b\u0231\u0001"+
		"\u0231\u0001\u0231\u0005\u0231\u1e17\b\u0231\n\u0231\f\u0231\u1e1a\t\u0231"+
		"\u0001\u0231\u0001\u0231\u0003\u0231\u1e1e\b\u0231\u0001\u0231\u0003\u0231"+
		"\u1e21\b\u0231\u0001\u0231\u0001\u0231\u0005\u0231\u1e25\b\u0231\n\u0231"+
		"\f\u0231\u1e28\t\u0231\u0001\u0231\u0003\u0231\u1e2b\b\u0231\u0001\u0231"+
		"\u0001\u0231\u0001\u0231\u0001\u0231\u0003\u0231\u1e31\b\u0231\u0003\u0231"+
		"\u1e33\b\u0231\u0001\u0231\u0003\u0231\u1e36\b\u0231\u0001\u0231\u0001"+
		"\u0231\u0005\u0231\u1e3a\b\u0231\n\u0231\f\u0231\u1e3d\t\u0231\u0001\u0231"+
		"\u0001\u0231\u0001\u0231\u0003\u0231\u1e42\b\u0231\u0001\u0231\u0001\u0231"+
		"\u0001\u0231\u0001\u0231\u0001\u0231\u0003\u0231\u1e49\b\u0231\u0003\u0231"+
		"\u1e4b\b\u0231\u0003\u0231\u1e4d\b\u0231\u0001\u0232\u0001\u0232\u0003"+
		"\u0232\u1e51\b\u0232\u0001\u0233\u0001\u0233\u0005\u0233\u1e55\b\u0233"+
		"\n\u0233\f\u0233\u1e58\t\u0233\u0001\u0233\u0003\u0233\u1e5b\b\u0233\u0001"+
		"\u0233\u0001\u0233\u0003\u0233\u1e5f\b\u0233\u0001\u0233\u0001\u0233\u0001"+
		"\u0233\u0003\u0233\u1e64\b\u0233\u0001\u0233\u0005\u0233\u1e67\b\u0233"+
		"\n\u0233\f\u0233\u1e6a\t\u0233\u0003\u0233\u1e6c\b\u0233\u0001\u0234\u0003"+
		"\u0234\u1e6f\b\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001"+
		"\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u1e79\b\u0234\u0001"+
		"\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u1e7f\b\u0234\u0001"+
		"\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u1e86"+
		"\b\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u1e8b\b\u0234"+
		"\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234"+
		"\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234"+
		"\u1e98\b\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234"+
		"\u0001\u0234\u0003\u0234\u1ea0\b\u0234\u0001\u0234\u0001\u0234\u0001\u0234"+
		"\u0001\u0234\u0003\u0234\u1ea6\b\u0234\u0001\u0234\u0001\u0234\u0001\u0234"+
		"\u0003\u0234\u1eab\b\u0234\u0001\u0235\u0001\u0235\u0001\u0236\u0001\u0236"+
		"\u0001\u0237\u0001\u0237\u0001\u0237\u0001\u0238\u0001\u0238\u0003\u0238"+
		"\u1eb6\b\u0238\u0001\u0239\u0001\u0239\u0003\u0239\u1eba\b\u0239\u0001"+
		"\u0239\u0001\u0239\u0001\u0239\u0003\u0239\u1ebf\b\u0239\u0001\u0239\u0001"+
		"\u0239\u0003\u0239\u1ec3\b\u0239\u0001\u0239\u0003\u0239\u1ec6\b\u0239"+
		"\u0001\u023a\u0001\u023a\u0001\u023a\u0003\u023a\u1ecb\b\u023a\u0001\u023a"+
		"\u0001\u023a\u0003\u023a\u1ecf\b\u023a\u0001\u023a\u0001\u023a\u0001\u023a"+
		"\u0001\u023a\u0001\u023a\u0001\u023a\u0003\u023a\u1ed7\b\u023a\u0001\u023a"+
		"\u0001\u023a\u0001\u023a\u0001\u023a\u0001\u023a\u0001\u023a\u0003\u023a"+
		"\u1edf\b\u023a\u0003\u023a\u1ee1\b\u023a\u0001\u023b\u0001\u023b\u0001"+
		"\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0003\u023b\u1eea"+
		"\b\u023b\u0001\u023c\u0001\u023c\u0001\u023c\u0001\u023c\u0005\u023c\u1ef0"+
		"\b\u023c\n\u023c\f\u023c\u1ef3\t\u023c\u0001\u023c\u0001\u023c\u0001\u023d"+
		"\u0001\u023d\u0003\u023d\u1ef9\b\u023d\u0001\u023d\u0003\u023d\u1efc\b"+
		"\u023d\u0001\u023e\u0001\u023e\u0001\u023e\u0001\u023e\u0005\u023e\u1f02"+
		"\b\u023e\n\u023e\f\u023e\u1f05\t\u023e\u0001\u023e\u0001\u023e\u0001\u023f"+
		"\u0001\u023f\u0001\u023f\u0001\u023f\u0003\u023f\u1f0d\b\u023f\u0003\u023f"+
		"\u1f0f\b\u023f\u0001\u0240\u0001\u0240\u0001\u0241\u0001\u0241\u0003\u0241"+
		"\u1f15\b\u0241\u0001\u0242\u0001\u0242\u0003\u0242\u1f19\b\u0242\u0001"+
		"\u0242\u0001\u0242\u0001\u0242\u0001\u0242\u0001\u0242\u0001\u0242\u0001"+
		"\u0242\u0003\u0242\u1f22\b\u0242\u0001\u0242\u0001\u0242\u0001\u0242\u0001"+
		"\u0242\u0003\u0242\u1f28\b\u0242\u0001\u0242\u0003\u0242\u1f2b\b\u0242"+
		"\u0001\u0243\u0001\u0243\u0001\u0244\u0001\u0244\u0001\u0244\u0001\u0245"+
		"\u0001\u0245\u0001\u0245\u0001\u0245\u0003\u0245\u1f36\b\u0245\u0001\u0246"+
		"\u0001\u0246\u0001\u0247\u0001\u0247\u0001\u0247\u0001\u0248\u0001\u0248"+
		"\u0003\u0248\u1f3f\b\u0248\u0001\u0248\u0003\u0248\u1f42\b\u0248\u0001"+
		"\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1f47\b\u0248\u0003\u0248\u1f49"+
		"\b\u0248\u0001\u0248\u0003\u0248\u1f4c\b\u0248\u0001\u0248\u0003\u0248"+
		"\u1f4f\b\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1f53\b\u0248\u0001"+
		"\u0248\u0003\u0248\u1f56\b\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1f5a"+
		"\b\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1f5f\b\u0248"+
		"\u0001\u0248\u0003\u0248\u1f62\b\u0248\u0001\u0248\u0001\u0248\u0003\u0248"+
		"\u1f66\b\u0248\u0001\u0248\u0003\u0248\u1f69\b\u0248\u0001\u0248\u0001"+
		"\u0248\u0003\u0248\u1f6d\b\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0003"+
		"\u0248\u1f72\b\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1f76\b\u0248"+
		"\u0001\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0001\u0248"+
		"\u0001\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1f82\b\u0248"+
		"\u0001\u0248\u0001\u0248\u0003\u0248\u1f86\b\u0248\u0001\u0248\u0001\u0248"+
		"\u0001\u0248\u0001\u0248\u0003\u0248\u1f8c\b\u0248\u0001\u0248\u0003\u0248"+
		"\u1f8f\b\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1f94\b"+
		"\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1f98\b\u0248\u0001\u0248\u0001"+
		"\u0248\u0003\u0248\u1f9c\b\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0003"+
		"\u0248\u1fa1\b\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0001"+
		"\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1faa\b\u0248\u0001\u0248\u0003"+
		"\u0248\u1fad\b\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1fb1\b\u0248"+
		"\u0001\u0248\u0001\u0248\u0003\u0248\u1fb5\b\u0248\u0001\u0248\u0003\u0248"+
		"\u1fb8\b\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1fbc\b\u0248\u0001"+
		"\u0248\u0001\u0248\u0003\u0248\u1fc0\b\u0248\u0001\u0248\u0001\u0248\u0001"+
		"\u0248\u0003\u0248\u1fc5\b\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0003"+
		"\u0248\u1fca\b\u0248\u0001\u0248\u0001\u0248\u0001\u0248\u0003\u0248\u1fcf"+
		"\b\u0248\u0001\u0249\u0001\u0249\u0001\u0249\u0003\u0249\u1fd4\b\u0249"+
		"\u0001\u024a\u0001\u024a\u0001\u024a\u0003\u024a\u1fd9\b\u024a\u0003\u024a"+
		"\u1fdb\b\u024a\u0001\u024b\u0001\u024b\u0001\u024b\u0003\u024b\u1fe0\b"+
		"\u024b\u0001\u024b\u0001\u024b\u0001\u024c\u0004\u024c\u1fe5\b\u024c\u000b"+
		"\u024c\f\u024c\u1fe6\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001"+
		"\u024d\u0001\u024d\u0003\u024d\u1fef\b\u024d\u0001\u024d\u0001\u024d\u0001"+
		"\u024d\u0001\u024d\u0003\u024d\u1ff5\b\u024d\u0003\u024d\u1ff7\b\u024d"+
		"\u0001\u024e\u0001\u024e\u0003\u024e\u1ffb\b\u024e\u0001\u024e\u0001\u024e"+
		"\u0003\u024e\u1fff\b\u024e\u0001\u024f\u0001\u024f\u0003\u024f\u2003\b"+
		"\u024f\u0001\u024f\u0001\u024f\u0003\u024f\u2007\b\u024f\u0001\u0250\u0001"+
		"\u0250\u0001\u0250\u0001\u0250\u0001\u0251\u0001\u0251\u0001\u0251\u0001"+
		"\u0251\u0001\u0252\u0001\u0252\u0001\u0252\u0001\u0252\u0001\u0252\u0003"+
		"\u0252\u2016\b\u0252\u0001\u0253\u0001\u0253\u0001\u0253\u0001\u0253\u0003"+
		"\u0253\u201c\b\u0253\u0001\u0254\u0001\u0254\u0001\u0254\u0001\u0254\u0001"+
		"\u0254\u0003\u0254\u2023\b\u0254\u0001\u0255\u0001\u0255\u0003\u0255\u2027"+
		"\b\u0255\u0001\u0255\u0005\u0255\u202a\b\u0255\n\u0255\f\u0255\u202d\t"+
		"\u0255\u0001\u0256\u0001\u0256\u0003\u0256\u2031\b\u0256\u0001\u0256\u0003"+
		"\u0256\u2034\b\u0256\u0001\u0257\u0001\u0257\u0003\u0257\u2038\b\u0257"+
		"\u0001\u0257\u0003\u0257\u203b\b\u0257\u0001\u0258\u0004\u0258\u203e\b"+
		"\u0258\u000b\u0258\f\u0258\u203f\u0001\u0259\u0001\u0259\u0003\u0259\u2044"+
		"\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u204a"+
		"\b\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u204e\b\u0259\u0001\u0259"+
		"\u0001\u0259\u0003\u0259\u2052\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259"+
		"\u0003\u0259\u2057\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259"+
		"\u205c\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u2061\b"+
		"\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u2066\b\u0259\u0001"+
		"\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u206b\b\u0259\u0001\u0259\u0001"+
		"\u0259\u0001\u0259\u0003\u0259\u2070\b\u0259\u0001\u0259\u0001\u0259\u0001"+
		"\u0259\u0003\u0259\u2075\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003"+
		"\u0259\u207a\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u207f"+
		"\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u2084\b\u0259"+
		"\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u2089\b\u0259\u0001\u0259"+
		"\u0001\u0259\u0001\u0259\u0003\u0259\u208e\b\u0259\u0001\u0259\u0001\u0259"+
		"\u0001\u0259\u0003\u0259\u2093\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259"+
		"\u0001\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259"+
		"\u209d\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259"+
		"\u20a3\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259"+
		"\u20a9\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u20ae\b"+
		"\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003"+
		"\u0259\u20b5\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0003\u0259\u20ba"+
		"\b\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0001\u0259\u0001"+
		"\u0259\u0001\u0259\u0003\u0259\u20c3\b\u0259\u0001\u0259\u0001\u0259\u0001"+
		"\u0259\u0001\u0259\u0003\u0259\u20c9\b\u0259\u0001\u0259\u0001\u0259\u0001"+
		"\u0259\u0003\u0259\u20ce\b\u0259\u0001\u025a\u0001\u025a\u0003\u025a\u20d2"+
		"\b\u025a\u0001\u025b\u0003\u025b\u20d5\b\u025b\u0001\u025b\u0001\u025b"+
		"\u0003\u025b\u20d9\b\u025b\u0001\u025b\u0001\u025b\u0001\u025c\u0003\u025c"+
		"\u20de\b\u025c\u0001\u025c\u0001\u025c\u0003\u025c\u20e2\b\u025c\u0001"+
		"\u025c\u0001\u025c\u0001\u025d\u0003\u025d\u20e7\b\u025d\u0001\u025d\u0001"+
		"\u025d\u0003\u025d\u20eb\b\u025d\u0001\u025d\u0001\u025d\u0001\u025e\u0001"+
		"\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0003\u025e\u20f4\b\u025e\u0001"+
		"\u025e\u0003\u025e\u20f7\b\u025e\u0001\u025e\u0003\u025e\u20fa\b\u025e"+
		"\u0001\u025f\u0003\u025f\u20fd\b\u025f\u0001\u025f\u0001\u025f\u0003\u025f"+
		"\u2101\b\u025f\u0001\u025f\u0001\u025f\u0003\u025f\u2105\b\u025f\u0001"+
		"\u025f\u0001\u025f\u0003\u025f\u2109\b\u025f\u0001\u025f\u0001\u025f\u0001"+
		"\u025f\u0001\u025f\u0001\u025f\u0001\u025f\u0001\u025f\u0001\u025f\u0001"+
		"\u025f\u0001\u025f\u0001\u025f\u0001\u025f\u0001\u025f\u0003\u025f\u2118"+
		"\b\u025f\u0001\u025f\u0003\u025f\u211b\b\u025f\u0003\u025f\u211d\b\u025f"+
		"\u0001\u0260\u0001\u0260\u0001\u0260\u0003\u0260\u2122\b\u0260\u0001\u0260"+
		"\u0001\u0260\u0001\u0260\u0001\u0260\u0001\u0260\u0001\u0260\u0001\u0260"+
		"\u0003\u0260\u212b\b\u0260\u0001\u0260\u0003\u0260\u212e\b\u0260\u0001"+
		"\u0260\u0001\u0260\u0003\u0260\u2132\b\u0260\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0262\u0001\u0262\u0001\u0262\u0001\u0262\u0005"+
		"\u0262\u213c\b\u0262\n\u0262\f\u0262\u213f\t\u0262\u0001\u0262\u0001\u0262"+
		"\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263"+
		"\u0001\u0263\u0003\u0263\u214a\b\u0263\u0001\u0263\u0001\u0263\u0001\u0263"+
		"\u0003\u0263\u214f\b\u0263\u0001\u0263\u0005\u0263\u2152\b\u0263\n\u0263"+
		"\f\u0263\u2155\t\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263"+
		"\u0005\u0263\u215b\b\u0263\n\u0263\f\u0263\u215e\t\u0263\u0001\u0263\u0001"+
		"\u0263\u0003\u0263\u2162\b\u0263\u0001\u0264\u0001\u0264\u0001\u0264\u0001"+
		"\u0264\u0001\u0264\u0005\u0264\u2169\b\u0264\n\u0264\f\u0264\u216c\t\u0264"+
		"\u0001\u0264\u0001\u0264\u0003\u0264\u2170\b\u0264\u0001\u0265\u0001\u0265"+
		"\u0003\u0265\u2174\b\u0265\u0001\u0265\u0001\u0265\u0003\u0265\u2178\b"+
		"\u0265\u0001\u0265\u0001\u0265\u0003\u0265\u217c\b\u0265\u0001\u0265\u0001"+
		"\u0265\u0001\u0265\u0003\u0265\u2181\b\u0265\u0001\u0265\u0001\u0265\u0001"+
		"\u0265\u0003\u0265\u2186\b\u0265\u0001\u0265\u0001\u0265\u0001\u0265\u0001"+
		"\u0265\u0003\u0265\u218c\b\u0265\u0001\u0265\u0001\u0265\u0001\u0265\u0003"+
		"\u0265\u2191\b\u0265\u0001\u0265\u0003\u0265\u2194\b\u0265\u0001\u0266"+
		"\u0001\u0266\u0001\u0266\u0005\u0266\u2199\b\u0266\n\u0266\f\u0266\u219c"+
		"\t\u0266\u0001\u0267\u0001\u0267\u0001\u0267\u0001\u0267\u0005\u0267\u21a2"+
		"\b\u0267\n\u0267\f\u0267\u21a5\t\u0267\u0001\u0267\u0001\u0267\u0001\u0268"+
		"\u0001\u0268\u0003\u0268\u21ab\b\u0268\u0001\u0269\u0001\u0269\u0001\u0269"+
		"\u0001\u0269\u0001\u026a\u0001\u026a\u0001\u026a\u0001\u026b\u0001\u026b"+
		"\u0001\u026b\u0001\u026c\u0001\u026c\u0001\u026c\u0001\u026c\u0001\u026c"+
		"\u0003\u026c\u21bc\b\u026c\u0003\u026c\u21be\b\u026c\u0001\u026d\u0001"+
		"\u026d\u0001\u026d\u0001\u026d\u0001\u026e\u0001\u026e\u0001\u026e\u0001"+
		"\u026e\u0001\u026f\u0003\u026f\u21c9\b\u026f\u0001\u026f\u0001\u026f\u0001"+
		"\u0270\u0001\u0270\u0001\u0270\u0001\u0271\u0001\u0271\u0001\u0271\u0001"+
		"\u0272\u0001\u0272\u0003\u0272\u21d5\b\u0272\u0001\u0273\u0001\u0273\u0001"+
		"\u0273\u0001\u0273\u0001\u0273\u0001\u0273\u0001\u0274\u0001\u0274\u0001"+
		"\u0274\u0005\u0274\u21e0\b\u0274\n\u0274\f\u0274\u21e3\t\u0274\u0001\u0275"+
		"\u0001\u0275\u0001\u0275\u0005\u0275\u21e8\b\u0275\n\u0275\f\u0275\u21eb"+
		"\t\u0275\u0001\u0276\u0001\u0276\u0001\u0276\u0001\u0276\u0003\u0276\u21f1"+
		"\b\u0276\u0001\u0277\u0001\u0277\u0001\u0277\u0001\u0278\u0001\u0278\u0004"+
		"\u0278\u21f8\b\u0278\u000b\u0278\f\u0278\u21f9\u0001\u0279\u0001\u0279"+
		"\u0001\u0279\u0001\u0279\u0003\u0279\u2200\b\u0279\u0001\u0279\u0001\u0279"+
		"\u0001\u0279\u0001\u0279\u0001\u0279\u0001\u0279\u0003\u0279\u2208\b\u0279"+
		"\u0001\u027a\u0001\u027a\u0004\u027a\u220c\b\u027a\u000b\u027a\f\u027a"+
		"\u220d\u0001\u027b\u0001\u027b\u0001\u027b\u0001\u027b\u0001\u027c\u0001"+
		"\u027c\u0001\u027c\u0005\u027c\u2217\b\u027c\n\u027c\f\u027c\u221a\t\u027c"+
		"\u0001\u027d\u0001\u027d\u0001\u027d\u0005\u027d\u221f\b\u027d\n\u027d"+
		"\f\u027d\u2222\t\u027d\u0001\u027e\u0001\u027e\u0001\u027e\u0003\u027e"+
		"\u2227\b\u027e\u0001\u027e\u0001\u027e\u0003\u027e\u222b\b\u027e\u0001"+
		"\u027e\u0003\u027e\u222e\b\u027e\u0001\u027f\u0001\u027f\u0001\u027f\u0001"+
		"\u027f\u0003\u027f\u2234\b\u027f\u0001\u0280\u0001\u0280\u0001\u0280\u0001"+
		"\u0280\u0001\u0280\u0001\u0280\u0003\u0280\u223c\b\u0280\u0001\u0281\u0001"+
		"\u0281\u0001\u0281\u0001\u0281\u0001\u0282\u0001\u0282\u0001\u0282\u0001"+
		"\u0282\u0001\u0282\u0001\u0283\u0001\u0283\u0001\u0283\u0001\u0283\u0001"+
		"\u0284\u0001\u0284\u0001\u0284\u0001\u0284\u0001\u0284\u0001\u0284\u0001"+
		"\u0285\u0001\u0285\u0001\u0285\u0001\u0285\u0001\u0285\u0001\u0285\u0001"+
		"\u0286\u0001\u0286\u0001\u0286\u0001\u0286\u0001\u0286\u0001\u0286\u0001"+
		"\u0286\u0001\u0287\u0001\u0287\u0001\u0287\u0001\u0287\u0001\u0287\u0003"+
		"\u0287\u2263\b\u0287\u0001\u0288\u0001\u0288\u0001\u0288\u0001\u0288\u0001"+
		"\u0289\u0001\u0289\u0001\u0289\u0001\u0289\u0001\u028a\u0001\u028a\u0001"+
		"\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001"+
		"\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001"+
		"\u028a\u0003\u028a\u227c\b\u028a\u0001\u028b\u0001\u028b\u0001\u028b\u0001"+
		"\u028c\u0001\u028c\u0001\u028c\u0001\u028d\u0001\u028d\u0003\u028d\u2286"+
		"\b\u028d\u0001\u028e\u0001\u028e\u0001\u028e\u0003\u028e\u228b\b\u028e"+
		"\u0003\u028e\u228d\b\u028e\u0001\u028f\u0001\u028f\u0001\u028f\u0001\u0290"+
		"\u0001\u0290\u0003\u0290\u2294\b\u0290\u0001\u0291\u0001\u0291\u0001\u0292"+
		"\u0001\u0292\u0001\u0293\u0001\u0293\u0001\u0293\u0001\u0294\u0001\u0294"+
		"\u0001\u0294\u0003\u0294\u22a0\b\u0294\u0003\u0294\u22a2\b\u0294\u0001"+
		"\u0295\u0001\u0295\u0001\u0296\u0001\u0296\u0001\u0297\u0001\u0297\u0001"+
		"\u0297\u0001\u0297\u0005\u0297\u22ac\b\u0297\n\u0297\f\u0297\u22af\t\u0297"+
		"\u0001\u0297\u0001\u0297\u0001\u0298\u0001\u0298\u0001\u0299\u0001\u0299"+
		"\u0003\u0299\u22b7\b\u0299\u0001\u029a\u0001\u029a\u0001\u029b\u0001\u029b"+
		"\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0003\u029c"+
		"\u22c2\b\u029c\u0001\u029c\u0001\u029c\u0001\u029d\u0001\u029d\u0001\u029e"+
		"\u0001\u029e\u0001\u029f\u0001\u029f\u0001\u02a0\u0001\u02a0\u0001\u02a1"+
		"\u0001\u02a1\u0001\u02a2\u0001\u02a2\u0001\u02a3\u0001\u02a3\u0001\u02a4"+
		"\u0001\u02a4\u0001\u02a5\u0001\u02a5\u0003\u02a5\u22d8\b\u02a5\u0001\u02a6"+
		"\u0001\u02a6\u0003\u02a6\u22dc\b\u02a6\u0001\u02a7\u0001\u02a7\u0001\u02a8"+
		"\u0001\u02a8\u0001\u02a9\u0001\u02a9\u0001\u02aa\u0001\u02aa\u0001\u02ab"+
		"\u0001\u02ab\u0001\u02ac\u0001\u02ac\u0001\u02ad\u0001\u02ad\u0001\u02ae"+
		"\u0001\u02ae\u0001\u02af\u0001\u02af\u0001\u02b0\u0001\u02b0\u0001\u02b1"+
		"\u0001\u02b1\u0003\u02b1\u22f4\b\u02b1\u0001\u02b2\u0001\u02b2\u0001\u02b2"+
		"\u0001\u02b3\u0001\u02b3\u0001\u02b3\u0001\u02b3\u0001\u02b3\u0001\u02b3"+
		"\u0003\u02b3\u22ff\b\u02b3\u0003\u02b3\u2301\b\u02b3\u0001\u02b4\u0001"+
		"\u02b4\u0003\u02b4\u2305\b\u02b4\u0001\u02b5\u0001\u02b5\u0001\u02b5\u0005"+
		"\u02b5\u230a\b\u02b5\n\u02b5\f\u02b5\u230d\t\u02b5\u0001\u02b6\u0001\u02b6"+
		"\u0001\u02b6\u0005\u02b6\u2312\b\u02b6\n\u02b6\f\u02b6\u2315\t\u02b6\u0001"+
		"\u02b7\u0001\u02b7\u0001\u02b8\u0001\u02b8\u0003\u02b8\u231b\b\u02b8\u0001"+
		"\u02b9\u0001\u02b9\u0001\u02ba\u0001\u02ba\u0003\u02ba\u2321\b\u02ba\u0001"+
		"\u02bb\u0001\u02bb\u0001\u02bc\u0001\u02bc\u0001\u02bd\u0001\u02bd\u0001"+
		"\u02be\u0001\u02be\u0001\u02bf\u0001\u02bf\u0001\u02bf\u0003\u02bf\u232e"+
		"\b\u02bf\u0001\u02c0\u0001\u02c0\u0003\u02c0\u2332\b\u02c0\u0001\u02c1"+
		"\u0001\u02c1\u0001\u02c1\u0005\u02c1\u2337\b\u02c1\n\u02c1\f\u02c1\u233a"+
		"\t\u02c1\u0001\u02c2\u0001\u02c2\u0001\u02c2\u0001\u02c2\u0001\u02c3\u0001"+
		"\u02c3\u0003\u02c3\u2342\b\u02c3\u0001\u02c4\u0001\u02c4\u0001\u02c4\u0003"+
		"\u02c4\u2347\b\u02c4\u0003\u02c4\u2349\b\u02c4\u0001\u02c5\u0001\u02c5"+
		"\u0001\u02c5\u0001\u02c6\u0001\u02c6\u0001\u02c7\u0001\u02c7\u0001\u02c8"+
		"\u0001\u02c8\u0001\u02c9\u0001\u02c9\u0001\u02c9\u0001\u02c9\u0001\u02c9"+
		"\u0003\u02c9\u2359\b\u02c9\u0001\u02ca\u0001\u02ca\u0001\u02ca\u0001\u02ca"+
		"\u0001\u02ca\u0003\u02ca\u2360\b\u02ca\u0001\u02cb\u0001\u02cb\u0001\u02cb"+
		"\u0003\u02cb\u2365\b\u02cb\u0001\u02cc\u0001\u02cc\u0001\u02cc\u0001\u02cc"+
		"\u0001\u02cc\u0001\u02cc\u0003\u02cc\u236d\b\u02cc\u0001\u02cc\u0003\u02cc"+
		"\u2370\b\u02cc\u0001\u02cd\u0001\u02cd\u0001\u02cd\u0003\u02cd\u2375\b"+
		"\u02cd\u0001\u02ce\u0001\u02ce\u0001\u02cf\u0001\u02cf\u0001\u02cf\u0001"+
		"\u02cf\u0005\u02cf\u237d\b\u02cf\n\u02cf\f\u02cf\u2380\t\u02cf\u0001\u02cf"+
		"\u0001\u02cf\u0001\u02d0\u0001\u02d0\u0001\u02d0\u0003\u02d0\u2387\b\u02d0"+
		"\u0001\u02d1\u0001\u02d1\u0001\u02d1\u0003\u02d1\u238c\b\u02d1\u0001\u02d2"+
		"\u0001\u02d2\u0001\u02d2\u0003\u02d2\u2391\b\u02d2\u0001\u02d3\u0003\u02d3"+
		"\u2394\b\u02d3\u0001\u02d3\u0001\u02d3\u0003\u02d3\u2398\b\u02d3\u0001"+
		"\u02d3\u0005\u02d3\u239b\b\u02d3\n\u02d3\f\u02d3\u239e\t\u02d3\u0001\u02d4"+
		"\u0001\u02d4\u0001\u02d5\u0001\u02d5\u0001\u02d5\u0005\u02d5\u23a5\b\u02d5"+
		"\n\u02d5\f\u02d5\u23a8\t\u02d5\u0001\u02d6\u0001\u02d6\u0001\u02d6\u0003"+
		"\u02d6\u23ad\b\u02d6\u0001\u02d7\u0001\u02d7\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d9\u0001\u02d9\u0001\u02da\u0001\u02da\u0001\u02da\u0001\u02da\u0001"+
		"\u02da\u0001\u02da\u0003\u02da\u23bb\b\u02da\u0001\u02db\u0001\u02db\u0003"+
		"\u02db\u23bf\b\u02db\u0001\u02dc\u0001\u02dc\u0001\u02dd\u0001\u02dd\u0001"+
		"\u02dd\u0001\u02dd\u0001\u02dd\u0001\u02dd\u0001\u02de\u0001\u02de\u0003"+
		"\u02de\u23cb\b\u02de\u0001\u02df\u0001\u02df\u0003\u02df\u23cf\b\u02df"+
		"\u0001\u02e0\u0001\u02e0\u0003\u02e0\u23d3\b\u02e0\u0001\u02e1\u0001\u02e1"+
		"\u0003\u02e1\u23d7\b\u02e1\u0001\u02e2\u0001\u02e2\u0001\u02e2\u0001\u02e3"+
		"\u0001\u02e3\u0001\u02e4\u0001\u02e4\u0001\u02e5\u0001\u02e5\u0001\u02e5"+
		"\u0001\u02e5\u0001\u02e5\u0001\u02e5\u0003\u02e5\u23e6\b\u02e5\u0001\u02e6"+
		"\u0001\u02e6\u0001\u02e6\u0001\u02e7\u0001\u02e7\u0001\u02e8\u0001\u02e8"+
		"\u0001\u02e8\u0001\u02e8\u0001\u02e8\u0001\u02e8\u0001\u02e8\u0003\u02e8"+
		"\u23f4\b\u02e8\u0001\u02e8\u0001\u02e8\u0001\u02e8\u0001\u02e8\u0001\u02e8"+
		"\u0003\u02e8\u23fb\b\u02e8\u0003\u02e8\u23fd\b\u02e8\u0001\u02e9\u0001"+
		"\u02e9\u0001\u02ea\u0001\u02ea\u0001\u02eb\u0001\u02eb\u0001\u02eb\u0001"+
		"\u02eb\u0001\u02eb\u0001\u02eb\u0001\u02eb\u0001\u02eb\u0001\u02eb\u0001"+
		"\u02eb\u0001\u02eb\u0003\u02eb\u240e\b\u02eb\u0001\u02eb\u0001\u02eb\u0001"+
		"\u02eb\u0003\u02eb\u2413\b\u02eb\u0003\u02eb\u2415\b\u02eb\u0001\u02ec"+
		"\u0001\u02ec\u0001\u02ed\u0001\u02ed\u0001\u02ed\u0001\u02ed\u0001\u02ed"+
		"\u0003\u02ed\u241e\b\u02ed\u0001\u02ee\u0001\u02ee\u0001\u02ee\u0003\u02ee"+
		"\u2423\b\u02ee\u0001\u02ee\u0001\u02ee\u0001\u02ee\u0003\u02ee\u2428\b"+
		"\u02ee\u0003\u02ee\u242a\b\u02ee\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0001"+
		"\u02ef\u0003\u02ef\u2430\b\u02ef\u0001\u02f0\u0001\u02f0\u0001\u02f1\u0001"+
		"\u02f1\u0001\u02f2\u0001\u02f2\u0001\u02f2\u0003\u02f2\u2439\b\u02f2\u0001"+
		"\u02f2\u0000\u0004\u0390\u0392\u039a\u039c\u02f3\u0000\u0002\u0004\u0006"+
		"\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,."+
		"02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088"+
		"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0"+
		"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8"+
		"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0"+
		"\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8"+
		"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100"+
		"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118"+
		"\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130"+
		"\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148"+
		"\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160"+
		"\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178"+
		"\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190"+
		"\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8"+
		"\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0"+
		"\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8"+
		"\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0"+
		"\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208"+
		"\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220"+
		"\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238"+
		"\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250"+
		"\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268"+
		"\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280"+
		"\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298"+
		"\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0"+
		"\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8"+
		"\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0"+
		"\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8"+
		"\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310"+
		"\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328"+
		"\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340"+
		"\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358"+
		"\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370"+
		"\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388"+
		"\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0"+
		"\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8"+
		"\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0"+
		"\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8"+
		"\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400"+
		"\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418"+
		"\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430"+
		"\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448"+
		"\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460"+
		"\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478"+
		"\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490"+
		"\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8"+
		"\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc\u04be\u04c0"+
		"\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8"+
		"\u04da\u04dc\u04de\u04e0\u04e2\u04e4\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0"+
		"\u04f2\u04f4\u04f6\u04f8\u04fa\u04fc\u04fe\u0500\u0502\u0504\u0506\u0508"+
		"\u050a\u050c\u050e\u0510\u0512\u0514\u0516\u0518\u051a\u051c\u051e\u0520"+
		"\u0522\u0524\u0526\u0528\u052a\u052c\u052e\u0530\u0532\u0534\u0536\u0538"+
		"\u053a\u053c\u053e\u0540\u0542\u0544\u0546\u0548\u054a\u054c\u054e\u0550"+
		"\u0552\u0554\u0556\u0558\u055a\u055c\u055e\u0560\u0562\u0564\u0566\u0568"+
		"\u056a\u056c\u056e\u0570\u0572\u0574\u0576\u0578\u057a\u057c\u057e\u0580"+
		"\u0582\u0584\u0586\u0588\u058a\u058c\u058e\u0590\u0592\u0594\u0596\u0598"+
		"\u059a\u059c\u059e\u05a0\u05a2\u05a4\u05a6\u05a8\u05aa\u05ac\u05ae\u05b0"+
		"\u05b2\u05b4\u05b6\u05b8\u05ba\u05bc\u05be\u05c0\u05c2\u05c4\u05c6\u05c8"+
		"\u05ca\u05cc\u05ce\u05d0\u05d2\u05d4\u05d6\u05d8\u05da\u05dc\u05de\u05e0"+
		"\u05e2\u05e4\u0000\u00b0\u0001\u0000\u02da\u02db\u0002\u0000??\u0257\u0257"+
		"\u0002\u0000]]\u01e8\u01e8\u0001\u0000\u028d\u028e\u0002\u000033\u00b8"+
		"\u00b8\u0001\u0000\u02dc\u02dd\u0002\u0000^^\u0138\u0138\u0002\u0000\u00b1"+
		"\u00b1\u00c0\u00c0\u0002\u0000\u0108\u0108\u01db\u01db\u0004\u0000\u00a4"+
		"\u00a4\u0118\u0118\u01c7\u01c7\u0236\u0236\u0002\u0000\u00a8\u00a8\u0119"+
		"\u0119\u0002\u0000\u01ca\u01ca\u0265\u0265\u0002\u0000\u0189\u0189\u0286"+
		"\u0286\u0003\u0000\u0167\u0167\u024b\u024b\u0263\u0263\u0002\u000055I"+
		"I\u0003\u0000\u00ab\u00ab\u0112\u0112\u026f\u026f\u0002\u0000\u00e5\u00e5"+
		"\u01b1\u01b1\u0002\u0000\u0245\u0245\u0247\u0247\u0003\u0000\u0108\u0108"+
		"\u0141\u0141\u01c1\u01c1\u0002\u0000\u00e1\u00e1\u0183\u0183\u0004\u0000"+
		"\u00e1\u00e1\u012a\u012a\u0183\u0183\u01b5\u01b5\u0002\u0000\u0006\u0006"+
		"\t\f\u0003\u0000\u00a9\u00a9\u00ff\u00ff\u0141\u0141\u0001\u0000\u027b"+
		"\u027c\u0002\u0000\u0099\u0099\u0295\u0295\u0002\u0000}}\u0141\u0141\u0002"+
		"\u0000\u0325\u0325\u032b\u032b\u0002\u0000\u0134\u0134\u01f4\u01f4\u0002"+
		"\u0000\u00a9\u00a9\u0141\u0141\u0002\u0000\u029f\u029f\u0323\u0323\u0006"+
		"\u000099\u00b4\u00b4\u00ff\u00ff\u021e\u0220\u0222\u0222\u0235\u0235\u0002"+
		"\u0000\u001d\u001d\u0190\u0190\u0002\u0000\u0003\u0005++\u0003\u0000\u01c2"+
		"\u01c2\u01f4\u01f4\u02b3\u02b3\u0002\u0000\u008d\u008d\u01f1\u01f1\u0002"+
		"\u0000@@\u00ac\u00ac\u0002\u0000\u0208\u0208\u026f\u026f\u0002\u0000\u012e"+
		"\u012e\u01ef\u01ef\u0002\u0000\u008c\u008c\u010f\u010f\u0002\u000099\u00b4"+
		"\u00b4\u0002\u0000\u00e6\u00e6\u0108\u0108\u0002\u0000\u010c\u010c\u0127"+
		"\u0127\u0002\u0000\u0194\u0194\u0291\u0291\u0003\u0000\u0114\u0114\u0245"+
		"\u0245\u0247\u0247\u0002\u0000JJ\u0229\u0229\u0002\u0000\u0123\u0123\u01e9"+
		"\u01e9\u0002\u0000MM\u0155\u0155\u0002\u0000\u0142\u0142\u02fe\u02fe\u0002"+
		"\u0000\u0146\u0146\u0304\u0304\u0002\u0000\u0143\u0143\u02ff\u02ff\u0002"+
		"\u0000\u0157\u0157\u0316\u0316\u0002\u0000\u0149\u0149\u0307\u0307\u0002"+
		"\u0000\u014a\u014a\u0308\u0308\u0002\u0000\u0144\u0144\u0301\u0301\u0002"+
		"\u0000\u014b\u014b\u030a\u030a\u0002\u0000\u0145\u0145\u0302\u0302\u0002"+
		"\u0000\u0153\u0153\u030b\u030b\u0002\u0000\u014d\u014d\u030c\u030c\u0002"+
		"\u0000\u014c\u014c\u030d\u030d\u0002\u0000\u014f\u014f\u030f\u030f\u0002"+
		"\u0000\u0150\u0150\u0310\u0310\u0002\u0000\u0151\u0151\u0311\u0311\u0002"+
		"\u0000\u0152\u0152\u0312\u0312\u0002\u0000\u0154\u0154\u0313\u0313\u0002"+
		"\u0000\u0156\u0156\u0315\u0315\u0002\u0000\u02ea\u02ea\u0314\u0314\u0002"+
		"\u0000\u014e\u014e\u030e\u030e\u0002\u0000\u02d0\u02d0\u0309\u0309\u0002"+
		"\u0000\u02d1\u02d1\u02fd\u02fd\u0002\u0000\u0158\u0158\u0303\u0303\u0002"+
		"\u0000\u02e7\u02e7\u0300\u0300\u0002\u0000\u02e8\u02e8\u0317\u0317\u0003"+
		"\u0000\u0191\u0191\u02ef\u02f0\u0326\u0326\u0002\u0000\u0147\u0147\u0305"+
		"\u0305\u0002\u0000\u0148\u0148\u0306\u0306\u0002\u0000\u021b\u021b\u021d"+
		"\u021d\u0002\u0000\u01d2\u01d2\u0224\u0224\u0002\u0000\u020e\u020e\u02fa"+
		"\u02fa\u0002\u0000\u00a3\u00a3\u00b8\u00b8\u0003\u0000\u0185\u0185\u0225"+
		"\u0225\u0292\u0292\u0002\u0000\u013a\u013a\u026c\u026c\u0002\u0000\u00a6"+
		"\u00a6\u02d7\u02d7\u0003\u0000\u00ee\u00ee\u01b8\u01b8\u0247\u0247\u0004"+
		"\u0000\u0112\u0112\u01cc\u01cc\u01ff\u01ff\u026f\u026f\r\u0000\u00ab\u00ab"+
		"\u00b8\u00b8\u00cd\u00cd\u00d0\u00d0\u00de\u00de\u010c\u010c\u01b9\u01b9"+
		"\u01bd\u01bd\u01d4\u01d4\u020a\u020a\u023f\u023f\u025b\u025b\u0271\u0271"+
		"\u0004\u0000\u01f3\u01f3\u0246\u0246\u0273\u0273\u0284\u0284\u0002\u0000"+
		"\u008b\u008b\u00b8\u00b8\u0002\u0000\u00a6\u00a6\u0185\u0185\u0002\u0000"+
		"\u00d7\u00d7\u01c1\u01c1\u0001\u0000\u032d\u032e\u0005\u0000dd\u00d7\u00d7"+
		"\u00db\u00db\u0165\u0165\u01c1\u01c1\u0003\u0000\u00d7\u00d7\u01c1\u01c1"+
		"\u0274\u0274\u0002\u0000\u00f6\u00f6\u029a\u029a\u0002\u0000ww\u0262\u0262"+
		"\u0002\u0000\u00eb\u00eb\u011a\u011a\u0002\u0000\u010b\u010c\u0125\u0125"+
		"\u0006\u000099\u008a\u008a\u011e\u011e\u0166\u0166\u0215\u0215\u0241\u0241"+
		"\u0002\u0000\u007f\u007f\u01c0\u01c0\u0004\u0000\u0101\u0101\u01b7\u01b7"+
		"\u022d\u022d\u0272\u0272\u0005\u0000MM\u00c6\u00c6\u00c8\u00c8\u00f0\u00f0"+
		"\u020f\u020f\u0002\u0000\u0273\u0273\u02ce\u02ce\u0002\u0000\u00ac\u00ad"+
		"\u00d5\u00d5\u0003\u0000\u00da\u00da\u025d\u025d\u026b\u026b\u0002\u0000"+
		"\u0017\u0017==\u0002\u0000\u001a\u001a\u019c\u019c\u0002\u000099>>\u0002"+
		"\u0000\u0006\u0006\b\r\u0003\u0000\u0010\u0012\u00b5\u00b5\u0174\u0174"+
		"\u0001\u0000\u000e\u000f\u0001\u0000\u0015\u0016\u0002\u0000\u000e\u000f"+
		"\u0014\u0014\u0002\u0000OPRR\u0002\u0000\u015e\u015e\u0170\u0170\u0005"+
		"\u0000\u022e\u022e\u0231\u0231\u023e\u023e\u0280\u0280\u0283\u0283\u0004"+
		"\u0000\u02ae\u02af\u02bc\u02bc\u02be\u02be\u02c0\u02c0\u0002\u0000\u02b4"+
		"\u02b4\u02b6\u02b6\u0002\u0000\u02b1\u02b1\u02b5\u02b5\u0002\u0000\u00e1"+
		"\u00e1\u012a\u012a\u0002\u0000\u02ce\u02ce\u032f\u032f\u0002\u0000\u0108"+
		"\u0108\u02bf\u02bf\u0002\u000044\u0238\u0238\u0001\u0000\u009b\u009c\u0001"+
		"\u0000\u0251\u0252\u0004\u0000\u009a\u009a\u009d\u009d\u0250\u0250\u0253"+
		"\u0253\u0004\u0000\u00f3\u00f3\u0135\u0135\u0176\u0178\u01ad\u01ae\u0002"+
		"\u0000\u0001\u0001\u0186\u0186\u0002\u0000\u0001\u0001\u0013\u0013\u0005"+
		"\u0000\u009e\u00a1\u0102\u0104\u016c\u016d\u01fc\u01fc\u0297\u0297\t\u0000"+
		"\u00a2\u00a2\u0105\u0105\u0169\u0169\u016e\u016e\u0175\u0175\u01bf\u01bf"+
		"\u01fd\u01fd\u0288\u0288\u0298\u0298\u0003\u0000\u0087\u0087\u00d2\u00d2"+
		"\u0266\u0266\u0002\u0000\u008f\u008f\u0226\u0226\u0002\u0000\u018c\u018c"+
		"\u01f5\u01f5\n\u0000aakktt\u0082\u0084\u0094\u0094\u0168\u0168\u017a\u017a"+
		"\u01fb\u01fb\u0237\u0237\u0249\u0249\u0002\u0000\u0234\u0234\u0285\u0285"+
		"\u0003\u0000\u00a6\u00a6\u00bc\u00bc\u00e2\u00e2\u0003\u0000\u00a6\u00a6"+
		"\u00b3\u00b3\u0166\u0166\u0003\u0000\u00ec\u00ec\u01a4\u01a4\u020d\u020d"+
		"\u0003\u0000XX\u00fc\u00fc\u01f8\u01f8\u0001\u0000\u029d\u029e\u0002\u0000"+
		"\u0260\u0260\u0276\u0276\u0005\u0000LL\u0118\u0118\u0163\u0163\u0210\u0210"+
		"\u0255\u0255\u0003\u0000\u00a4\u00a4\u00e2\u00e3\u018d\u018d\u0001\u0000"+
		"UV\u0002\u0000\u013d\u013d\u0162\u0162\u0004\u0000\u00f3\u00f4\u0135\u0135"+
		"\u0176\u0178\u01ad\u01ae\u0003\u0000\u020c\u020c\u026d\u026d\u0299\u0299"+
		"\u0001\u0000\u022a\u022c\u0002\u0000hh\u0248\u0248\u0006\u0000yy{{\u00a6"+
		"\u00a6\u00bc\u00bc\u00e2\u00e2\u01cb\u01cb\u0003\u0000\u00e1\u00e1\u012a"+
		"\u012a\u0188\u0188\u0002\u0000\u00b3\u00b3\u0166\u0166\u0002\u0000\u0136"+
		"\u0136\u01c2\u01c2\u0002\u0000\u015c\u015c\u016f\u016f\u0002\u0000\u0099"+
		"\u0099\u010c\u010c\u0003\u0000\u0110\u0110\u011a\u011a\u019f\u019f\u0002"+
		"\u0000\u0227\u0227\u024c\u024c\u0002\u0000\u018f\u018f\u0193\u0193\u0002"+
		"\u0000\u0138\u0138\u018a\u018a\u0002\u0000\u0334\u0334\u0336\u0336\u0003"+
		"\u0000\u0003\u0005,,./\u0002\u0000\u0003\u0005,,\u0002\u0000\u0003\u0005"+
		"./\u0001\u0000,-\u0002\u0000\u00da\u00da\u025d\u025d\u0002\u0000**\u018b"+
		"\u018b\u0001\u0000\u0003\u0005\u0001\u0000\u0006\u0007\u0005\u0000\u00f6"+
		"\u00f6\u0138\u0138\u0204\u0204\u029a\u029a\u02a9\u02a9\u0003\u0000\u00d0"+
		"\u00d0\u020a\u020a\u02d2\u02d2 \u0000AAJJZ[ffhhvvxx\u0085\u0085\u00a3"+
		"\u00a3\u00b7\u00b7\u00c3\u00c3\u00e4\u00e5\u00fb\u00fb\u00fe\u00fe\u010a"+
		"\u010a\u0115\u0115\u0129\u0129\u0188\u0188\u01b1\u01b1\u01b3\u01b3\u01d8"+
		"\u01d8\u01e5\u01e5\u01f0\u01f0";
	private static final String _serializedATNSegment1 =
		"\u01f9\u01f9\u020c\u020c\u020e\u020e\u0229\u0229\u0232\u0232\u025e\u025e"+
		"\u0267\u0268\u0293\u0293\u02ad\u02ad\t\u0000\u00cd\u00cd\u00de\u00de\u0185"+
		"\u0185\u01b9\u01b9\u01bd\u01bd\u01d4\u01d4\u01dc\u01dc\u023f\u023f\u02cd"+
		"\u02cd\u009d\u00001248;;>>CHNNQQTVXX^^abdejoqrtuwwy}\u007f\u0080\u0082"+
		"\u0084\u0086\u0086\u008a\u008a\u008f\u008f\u0094\u0094\u0098\u009a\u009d"+
		"\u009d\u00a2\u00a2\u00a7\u00a8\u00aa\u00aa\u00af\u00b3\u00ba\u00bc\u00c0"+
		"\u00c0\u00c2\u00c2\u00c4\u00c9\u00cb\u00cc\u00ce\u00cf\u00d3\u00d4\u00d6"+
		"\u00d8\u00db\u00dc\u00df\u00e2\u00e9\u00ea\u00ec\u00ec\u00f0\u00f0\u00f2"+
		"\u00f5\u00f8\u00f8\u00fc\u00fc\u0100\u0101\u0105\u0106\u0109\u0109\u010b"+
		"\u010b\u010e\u010e\u0113\u0114\u0119\u0119\u011d\u011e\u0120\u0121\u0124"+
		"\u0124\u0126\u0126\u012a\u012a\u012c\u012c\u012f\u0130\u0135\u0136\u0139"+
		"\u0139\u013b\u013c\u0142\u0142\u0144\u0153\u0155\u0158\u015a\u015d\u015f"+
		"\u0160\u0165\u0169\u016b\u016b\u016e\u016f\u0171\u0171\u0173\u0173\u0175"+
		"\u017d\u017f\u0184\u0189\u0189\u018c\u018c\u018e\u018e\u0190\u0190\u0192"+
		"\u0192\u0194\u0195\u0198\u0198\u01a0\u01a6\u01a8\u01af\u01b4\u01b5\u01b7"+
		"\u01b7\u01ba\u01bc\u01bf\u01c1\u01c4\u01c4\u01c8\u01cb\u01ce\u01d2\u01d5"+
		"\u01d5\u01d7\u01d7\u01d9\u01d9\u01dd\u01e3\u01e7\u01e7\u01e9\u01eb\u01ed"+
		"\u01ed\u01f1\u01f3\u01f5\u01f6\u01f8\u01f8\u01fa\u01fb\u01fd\u01fe\u0202"+
		"\u0203\u0205\u0205\u0208\u0208\u020d\u020d\u020f\u020f\u0211\u0215\u021b"+
		"\u021d\u021f\u021f\u0221\u0221\u0224\u0224\u0226\u0226\u0228\u0228\u022a"+
		"\u022d\u0233\u0233\u0236\u023b\u0240\u0242\u0245\u0246\u0248\u024b\u024d"+
		"\u024e\u0250\u0253\u0259\u025a\u025f\u0260\u0262\u0265\u026b\u026b\u026e"+
		"\u026e\u0270\u0270\u0272\u0274\u027a\u027a\u027c\u027c\u027f\u027f\u0284"+
		"\u0284\u0286\u0289\u028e\u0290\u0292\u0292\u0294\u0295\u0298\u0298\u029b"+
		"\u029e\u02a0\u02a0\u02a5\u02a7\u02aa\u02ab\u02b0\u02b0\u02b2\u02b2\u02b9"+
		"\u02ba\u02bd\u02bd\u02bf\u02bf\u02c1\u02c2\u02c6\u02cc\u02cf\u02d1\u02d3"+
		"\u02dd\u02df\u02e2\u02e4\u02e4\u02e7\u02ea\u02f1\u02f4\u02f6\u02f8\u02fa"+
		"\u0322\u0004\u0000\u0250\u0250\u0253\u0253\u02e3\u02e3\u02e5\u02f0\u0004"+
		"\u0000\u0324\u0324\u0326\u0329\u032b\u032b\u032f\u032f6\u000011;;AAHH"+
		"JJZ[ffhhmmvvxx\u0085\u0085\u00a3\u00a3\u00b7\u00b7\u00c3\u00c3\u00e4\u00e5"+
		"\u00e9\u00e9\u00f2\u00f2\u00fb\u00fb\u00fe\u00fe\u0100\u0100\u0115\u0115"+
		"\u0129\u0129\u0188\u0188\u0195\u0195\u0198\u0198\u01a0\u01a0\u01a3\u01a3"+
		"\u01a7\u01a7\u01af\u01af\u01b1\u01b1\u01b3\u01b3\u01d5\u01d5\u01d8\u01d8"+
		"\u01e5\u01e5\u01e7\u01e7\u01f0\u01f0\u01f9\u01f9\u01fe\u01fe\u0205\u0205"+
		"\u020c\u020c\u020e\u020e\u0212\u0213\u0229\u0229\u0232\u0232\u025e\u025e"+
		"\u0267\u0268\u0270\u0270\u0290\u0290\u0293\u0293\u029b\u029b\u029d\u029e"+
		"\u02ad\u02ad\u02d8\u02db\u0094\u00002248>>CGNNQQTVXX^^abdejlnoqrtuwwy"+
		"}\u007f\u0080\u0082\u0084\u0086\u0086\u008a\u008a\u008f\u008f\u0094\u0094"+
		"\u0098\u009a\u009d\u009d\u00a2\u00a2\u00a7\u00a8\u00aa\u00aa\u00af\u00b3"+
		"\u00ba\u00bc\u00c0\u00c0\u00c2\u00c2\u00c4\u00c9\u00cb\u00cc\u00ce\u00ce"+
		"\u00d3\u00d3\u00d6\u00d8\u00db\u00dc\u00df\u00e2\u00ea\u00ea\u00ec\u00ec"+
		"\u00f0\u00f0\u00f3\u00f6\u00f8\u00f8\u00fc\u00fc\u0101\u0101\u0105\u0106"+
		"\u0109\u0109\u010b\u010b\u010e\u010e\u0113\u0114\u0119\u0119\u011d\u011e"+
		"\u0120\u0121\u0124\u0124\u0126\u0126\u012a\u012a\u012c\u012c\u012f\u0130"+
		"\u0135\u0136\u0138\u0139\u013b\u013c\u0142\u0142\u0144\u0153\u0155\u0158"+
		"\u015a\u015d\u015f\u0160\u0165\u0169\u016b\u016b\u016e\u016f\u0171\u0171"+
		"\u0173\u0173\u0175\u017d\u017f\u0184\u0189\u0189\u018c\u018c\u018e\u018e"+
		"\u0190\u0190\u0192\u0192\u01a1\u01a2\u01a4\u01a6\u01a8\u01ae\u01b4\u01b5"+
		"\u01b7\u01b7\u01ba\u01bc\u01bf\u01c1\u01c4\u01c4\u01c8\u01cb\u01ce\u01d2"+
		"\u01d7\u01d7\u01d9\u01d9\u01dd\u01e3\u01e9\u01eb\u01ed\u01ed\u01f1\u01f3"+
		"\u01f5\u01f6\u01f8\u01f8\u01fa\u01fb\u01fd\u01fd\u0202\u0204\u0208\u0208"+
		"\u020d\u020d\u020f\u020f\u0211\u0211\u0214\u0215\u021b\u021d\u021f\u021f"+
		"\u0221\u0221\u0224\u0224\u0226\u0226\u0228\u0228\u022a\u022d\u0233\u0233"+
		"\u0236\u023b\u023f\u0242\u0245\u0246\u0248\u024b\u024d\u024e\u0250\u0253"+
		"\u0259\u025a\u025f\u0265\u026b\u026b\u026e\u026e\u0272\u0274\u027c\u027c"+
		"\u027f\u027f\u0284\u0284\u0286\u0289\u028f\u028f\u0292\u0292\u0294\u0295"+
		"\u0298\u0298\u02a0\u02a0\u02a5\u02a7\u02aa\u02ac\u02b0\u02b0\u02b2\u02b2"+
		"\u02b9\u02ba\u02bd\u02bd\u02bf\u02bf\u02c1\u02c2\u02c6\u02cc\u02cf\u02d0"+
		"\u02d4\u02d5\u02d7\u02d7\u02dc\u02dd\u02df\u02e0\u02f5\u02f5\u2861\u0000"+
		"\u05e9\u0001\u0000\u0000\u0000\u0002\u05f0\u0001\u0000\u0000\u0000\u0004"+
		"\u0640\u0001\u0000\u0000\u0000\u0006\u0642\u0001\u0000\u0000\u0000\b\u0659"+
		"\u0001\u0000\u0000\u0000\n\u0667\u0001\u0000\u0000\u0000\f\u066a\u0001"+
		"\u0000\u0000\u0000\u000e\u0690\u0001\u0000\u0000\u0000\u0010\u0699\u0001"+
		"\u0000\u0000\u0000\u0012\u06a6\u0001\u0000\u0000\u0000\u0014\u06a8\u0001"+
		"\u0000\u0000\u0000\u0016\u06ad\u0001\u0000\u0000\u0000\u0018\u06c1\u0001"+
		"\u0000\u0000\u0000\u001a\u06ca\u0001\u0000\u0000\u0000\u001c\u06cc\u0001"+
		"\u0000\u0000\u0000\u001e\u06db\u0001\u0000\u0000\u0000 \u073b\u0001\u0000"+
		"\u0000\u0000\"\u073f\u0001\u0000\u0000\u0000$\u074f\u0001\u0000\u0000"+
		"\u0000&\u07d8\u0001\u0000\u0000\u0000(\u07dd\u0001\u0000\u0000\u0000*"+
		"\u07df\u0001\u0000\u0000\u0000,\u07e1\u0001\u0000\u0000\u0000.\u07ef\u0001"+
		"\u0000\u0000\u00000\u07f7\u0001\u0000\u0000\u00002\u0807\u0001\u0000\u0000"+
		"\u00004\u0809\u0001\u0000\u0000\u00006\u080c\u0001\u0000\u0000\u00008"+
		"\u0811\u0001\u0000\u0000\u0000:\u0813\u0001\u0000\u0000\u0000<\u0822\u0001"+
		"\u0000\u0000\u0000>\u082a\u0001\u0000\u0000\u0000@\u0834\u0001\u0000\u0000"+
		"\u0000B\u0836\u0001\u0000\u0000\u0000D\u084c\u0001\u0000\u0000\u0000F"+
		"\u0855\u0001\u0000\u0000\u0000H\u0858\u0001\u0000\u0000\u0000J\u0865\u0001"+
		"\u0000\u0000\u0000L\u086a\u0001\u0000\u0000\u0000N\u086e\u0001\u0000\u0000"+
		"\u0000P\u0895\u0001\u0000\u0000\u0000R\u0897\u0001\u0000\u0000\u0000T"+
		"\u08ab\u0001\u0000\u0000\u0000V\u08ba\u0001\u0000\u0000\u0000X\u08bd\u0001"+
		"\u0000\u0000\u0000Z\u08d6\u0001\u0000\u0000\u0000\\\u08e0\u0001\u0000"+
		"\u0000\u0000^\u08e3\u0001\u0000\u0000\u0000`\u08e8\u0001\u0000\u0000\u0000"+
		"b\u08f1\u0001\u0000\u0000\u0000d\u08f3\u0001\u0000\u0000\u0000f\u08f7"+
		"\u0001\u0000\u0000\u0000h\u0903\u0001\u0000\u0000\u0000j\u0920\u0001\u0000"+
		"\u0000\u0000l\u0926\u0001\u0000\u0000\u0000n\u0929\u0001\u0000\u0000\u0000"+
		"p\u0947\u0001\u0000\u0000\u0000r\u0958\u0001\u0000\u0000\u0000t\u095b"+
		"\u0001\u0000\u0000\u0000v\u0974\u0001\u0000\u0000\u0000x\u0977\u0001\u0000"+
		"\u0000\u0000z\u09ab\u0001\u0000\u0000\u0000|\u09ad\u0001\u0000\u0000\u0000"+
		"~\u09b1\u0001\u0000\u0000\u0000\u0080\u09ba\u0001\u0000\u0000\u0000\u0082"+
		"\u09ca\u0001\u0000\u0000\u0000\u0084\u09cc\u0001\u0000\u0000\u0000\u0086"+
		"\u09d4\u0001\u0000\u0000\u0000\u0088\u09ee\u0001\u0000\u0000\u0000\u008a"+
		"\u09f0\u0001\u0000\u0000\u0000\u008c\u09fc\u0001\u0000\u0000\u0000\u008e"+
		"\u0a0b\u0001\u0000\u0000\u0000\u0090\u0a0d\u0001\u0000\u0000\u0000\u0092"+
		"\u0a10\u0001\u0000\u0000\u0000\u0094\u0a25\u0001\u0000\u0000\u0000\u0096"+
		"\u0a27\u0001\u0000\u0000\u0000\u0098\u0a2d\u0001\u0000\u0000\u0000\u009a"+
		"\u0a33\u0001\u0000\u0000\u0000\u009c\u0a39\u0001\u0000\u0000\u0000\u009e"+
		"\u0a3f\u0001\u0000\u0000\u0000\u00a0\u0a45\u0001\u0000\u0000\u0000\u00a2"+
		"\u0a4c\u0001\u0000\u0000\u0000\u00a4\u0a54\u0001\u0000\u0000\u0000\u00a6"+
		"\u0a56\u0001\u0000\u0000\u0000\u00a8\u0a5c\u0001\u0000\u0000\u0000\u00aa"+
		"\u0a62\u0001\u0000\u0000\u0000\u00ac\u0a68\u0001\u0000\u0000\u0000\u00ae"+
		"\u0a6f\u0001\u0000\u0000\u0000\u00b0\u0a81\u0001\u0000\u0000\u0000\u00b2"+
		"\u0a83\u0001\u0000\u0000\u0000\u00b4\u0a87\u0001\u0000\u0000\u0000\u00b6"+
		"\u0a8c\u0001\u0000\u0000\u0000\u00b8\u0a9f\u0001\u0000\u0000\u0000\u00ba"+
		"\u0aa3\u0001\u0000\u0000\u0000\u00bc\u0ac4\u0001\u0000\u0000\u0000\u00be"+
		"\u0ae3\u0001\u0000\u0000\u0000\u00c0\u0af4\u0001\u0000\u0000\u0000\u00c2"+
		"\u0af6\u0001\u0000\u0000\u0000\u00c4\u0b09\u0001\u0000\u0000\u0000\u00c6"+
		"\u0b0f\u0001\u0000\u0000\u0000\u00c8\u0b15\u0001\u0000\u0000\u0000\u00ca"+
		"\u0b1b\u0001\u0000\u0000\u0000\u00cc\u0b22\u0001\u0000\u0000\u0000\u00ce"+
		"\u0b2b\u0001\u0000\u0000\u0000\u00d0\u0b3c\u0001\u0000\u0000\u0000\u00d2"+
		"\u0b3e\u0001\u0000\u0000\u0000\u00d4\u0b45\u0001\u0000\u0000\u0000\u00d6"+
		"\u0b4f\u0001\u0000\u0000\u0000\u00d8\u0b5d\u0001\u0000\u0000\u0000\u00da"+
		"\u0b63\u0001\u0000\u0000\u0000\u00dc\u0b6b\u0001\u0000\u0000\u0000\u00de"+
		"\u0b71\u0001\u0000\u0000\u0000\u00e0\u0b79\u0001\u0000\u0000\u0000\u00e2"+
		"\u0b7f\u0001\u0000\u0000\u0000\u00e4\u0b89\u0001\u0000\u0000\u0000\u00e6"+
		"\u0b8d\u0001\u0000\u0000\u0000\u00e8\u0b93\u0001\u0000\u0000\u0000\u00ea"+
		"\u0b98\u0001\u0000\u0000\u0000\u00ec\u0ba2\u0001\u0000\u0000\u0000\u00ee"+
		"\u0bcd\u0001\u0000\u0000\u0000\u00f0\u0bd2\u0001\u0000\u0000\u0000\u00f2"+
		"\u0bd4\u0001\u0000\u0000\u0000\u00f4\u0bd7\u0001\u0000\u0000\u0000\u00f6"+
		"\u0bf5\u0001\u0000\u0000\u0000\u00f8\u0bf7\u0001\u0000\u0000\u0000\u00fa"+
		"\u0c14\u0001\u0000\u0000\u0000\u00fc\u0c1b\u0001\u0000\u0000\u0000\u00fe"+
		"\u0c1f\u0001\u0000\u0000\u0000\u0100\u0c27\u0001\u0000\u0000\u0000\u0102"+
		"\u0c34\u0001\u0000\u0000\u0000\u0104\u0c36\u0001\u0000\u0000\u0000\u0106"+
		"\u0c48\u0001\u0000\u0000\u0000\u0108\u0c54\u0001\u0000\u0000\u0000\u010a"+
		"\u0c5a\u0001\u0000\u0000\u0000\u010c\u0c60\u0001\u0000\u0000\u0000\u010e"+
		"\u0c94\u0001\u0000\u0000\u0000\u0110\u0c96\u0001\u0000\u0000\u0000\u0112"+
		"\u0c98\u0001\u0000\u0000\u0000\u0114\u0c9e\u0001\u0000\u0000\u0000\u0116"+
		"\u0ca0\u0001\u0000\u0000\u0000\u0118\u0ca8\u0001\u0000\u0000\u0000\u011a"+
		"\u0cae\u0001\u0000\u0000\u0000\u011c\u0cb6\u0001\u0000\u0000\u0000\u011e"+
		"\u0cbf\u0001\u0000\u0000\u0000\u0120\u0cc9\u0001\u0000\u0000\u0000\u0122"+
		"\u0cd8\u0001\u0000\u0000\u0000\u0124\u0cdd\u0001\u0000\u0000\u0000\u0126"+
		"\u0ce2\u0001\u0000\u0000\u0000\u0128\u0ce7\u0001\u0000\u0000\u0000\u012a"+
		"\u0cfd\u0001\u0000\u0000\u0000\u012c\u0d10\u0001\u0000\u0000\u0000\u012e"+
		"\u0d13\u0001\u0000\u0000\u0000\u0130\u0d1e\u0001\u0000\u0000\u0000\u0132"+
		"\u0d2e\u0001\u0000\u0000\u0000\u0134\u0d3a\u0001\u0000\u0000\u0000\u0136"+
		"\u0d3c\u0001\u0000\u0000\u0000\u0138\u0d59\u0001\u0000\u0000\u0000\u013a"+
		"\u0d5b\u0001\u0000\u0000\u0000\u013c\u0d5d\u0001\u0000\u0000\u0000\u013e"+
		"\u0d60\u0001\u0000\u0000\u0000\u0140\u0d63\u0001\u0000\u0000\u0000\u0142"+
		"\u0d6a\u0001\u0000\u0000\u0000\u0144\u0d6c\u0001\u0000\u0000\u0000\u0146"+
		"\u0d8a\u0001\u0000\u0000\u0000\u0148\u0d95\u0001\u0000\u0000\u0000\u014a"+
		"\u0d98\u0001\u0000\u0000\u0000\u014c\u0d9c\u0001\u0000\u0000\u0000\u014e"+
		"\u0da5\u0001\u0000\u0000\u0000\u0150\u0da9\u0001\u0000\u0000\u0000\u0152"+
		"\u0dae\u0001\u0000\u0000\u0000\u0154\u0dbb\u0001\u0000\u0000\u0000\u0156"+
		"\u0dc0\u0001\u0000\u0000\u0000\u0158\u0dc4\u0001\u0000\u0000\u0000\u015a"+
		"\u0dd4\u0001\u0000\u0000\u0000\u015c\u0dd6\u0001\u0000\u0000\u0000\u015e"+
		"\u0de8\u0001\u0000\u0000\u0000\u0160\u0dea\u0001\u0000\u0000\u0000\u0162"+
		"\u0df3\u0001\u0000\u0000\u0000\u0164\u0dff\u0001\u0000\u0000\u0000\u0166"+
		"\u0e14\u0001\u0000\u0000\u0000\u0168\u0e16\u0001\u0000\u0000\u0000\u016a"+
		"\u0e19\u0001\u0000\u0000\u0000\u016c\u0e1d\u0001\u0000\u0000\u0000\u016e"+
		"\u0e1f\u0001\u0000\u0000\u0000\u0170\u0e24\u0001\u0000\u0000\u0000\u0172"+
		"\u0e2c\u0001\u0000\u0000\u0000\u0174\u0e35\u0001\u0000\u0000\u0000\u0176"+
		"\u0e38\u0001\u0000\u0000\u0000\u0178\u0e41\u0001\u0000\u0000\u0000\u017a"+
		"\u0e43\u0001\u0000\u0000\u0000\u017c\u0e56\u0001\u0000\u0000\u0000\u017e"+
		"\u0e58\u0001\u0000\u0000\u0000\u0180\u0e5d\u0001\u0000\u0000\u0000\u0182"+
		"\u0e61\u0001\u0000\u0000\u0000\u0184\u0e6f\u0001\u0000\u0000\u0000\u0186"+
		"\u0e72\u0001\u0000\u0000\u0000\u0188\u0e78\u0001\u0000\u0000\u0000\u018a"+
		"\u0e85\u0001\u0000\u0000\u0000\u018c\u0e8d\u0001\u0000\u0000\u0000\u018e"+
		"\u0ea7\u0001\u0000\u0000\u0000\u0190\u0eb4\u0001\u0000\u0000\u0000\u0192"+
		"\u0ebb\u0001\u0000\u0000\u0000\u0194\u0ebd\u0001\u0000\u0000\u0000\u0196"+
		"\u0ec9\u0001\u0000\u0000\u0000\u0198\u0ecb\u0001\u0000\u0000\u0000\u019a"+
		"\u0ed8\u0001\u0000\u0000\u0000\u019c\u0eef\u0001\u0000\u0000\u0000\u019e"+
		"\u0ef1\u0001\u0000\u0000\u0000\u01a0\u0ef8\u0001\u0000\u0000\u0000\u01a2"+
		"\u0f02\u0001\u0000\u0000\u0000\u01a4\u0f25\u0001\u0000\u0000\u0000\u01a6"+
		"\u0f2c\u0001\u0000\u0000\u0000\u01a8\u0f32\u0001\u0000\u0000\u0000\u01aa"+
		"\u0f34\u0001\u0000\u0000\u0000\u01ac\u0f38\u0001\u0000\u0000\u0000\u01ae"+
		"\u0f40\u0001\u0000\u0000\u0000\u01b0\u0f42\u0001\u0000\u0000\u0000\u01b2"+
		"\u0f47\u0001\u0000\u0000\u0000\u01b4\u0f4b\u0001\u0000\u0000\u0000\u01b6"+
		"\u0f67\u0001\u0000\u0000\u0000\u01b8\u0f69\u0001\u0000\u0000\u0000\u01ba"+
		"\u0f6b\u0001\u0000\u0000\u0000\u01bc\u0f73\u0001\u0000\u0000\u0000\u01be"+
		"\u0f75\u0001\u0000\u0000\u0000\u01c0\u0f7d\u0001\u0000\u0000\u0000\u01c2"+
		"\u0f87\u0001\u0000\u0000\u0000\u01c4\u0f8a\u0001\u0000\u0000\u0000\u01c6"+
		"\u0fa3\u0001\u0000\u0000\u0000\u01c8\u0fbe\u0001\u0000\u0000\u0000\u01ca"+
		"\u0fc0\u0001\u0000\u0000\u0000\u01cc\u0fc9\u0001\u0000\u0000\u0000\u01ce"+
		"\u0fe8\u0001\u0000\u0000\u0000\u01d0\u0ffa\u0001\u0000\u0000\u0000\u01d2"+
		"\u0ffc\u0001\u0000\u0000\u0000\u01d4\u100a\u0001\u0000\u0000\u0000\u01d6"+
		"\u100c\u0001\u0000\u0000\u0000\u01d8\u102b\u0001\u0000\u0000\u0000\u01da"+
		"\u102e\u0001\u0000\u0000\u0000\u01dc\u104d\u0001\u0000\u0000\u0000\u01de"+
		"\u104f\u0001\u0000\u0000\u0000\u01e0\u1062\u0001\u0000\u0000\u0000\u01e2"+
		"\u106a\u0001\u0000\u0000\u0000\u01e4\u106c\u0001\u0000\u0000\u0000\u01e6"+
		"\u106f\u0001\u0000\u0000\u0000\u01e8\u107c\u0001\u0000\u0000\u0000\u01ea"+
		"\u107e\u0001\u0000\u0000\u0000\u01ec\u1085\u0001\u0000\u0000\u0000\u01ee"+
		"\u110d\u0001\u0000\u0000\u0000\u01f0\u110f\u0001\u0000\u0000\u0000\u01f2"+
		"\u1111\u0001\u0000\u0000\u0000\u01f4\u1113\u0001\u0000\u0000\u0000\u01f6"+
		"\u1115\u0001\u0000\u0000\u0000\u01f8\u1117\u0001\u0000\u0000\u0000\u01fa"+
		"\u1119\u0001\u0000\u0000\u0000\u01fc\u111b\u0001\u0000\u0000\u0000\u01fe"+
		"\u111d\u0001\u0000\u0000\u0000\u0200\u111f\u0001\u0000\u0000\u0000\u0202"+
		"\u1121\u0001\u0000\u0000\u0000\u0204\u1123\u0001\u0000\u0000\u0000\u0206"+
		"\u1125\u0001\u0000\u0000\u0000\u0208\u1127\u0001\u0000\u0000\u0000\u020a"+
		"\u1129\u0001\u0000\u0000\u0000\u020c\u112b\u0001\u0000\u0000\u0000\u020e"+
		"\u112d\u0001\u0000\u0000\u0000\u0210\u112f\u0001\u0000\u0000\u0000\u0212"+
		"\u1131\u0001\u0000\u0000\u0000\u0214\u1133\u0001\u0000\u0000\u0000\u0216"+
		"\u1135\u0001\u0000\u0000\u0000\u0218\u1137\u0001\u0000\u0000\u0000\u021a"+
		"\u1139\u0001\u0000\u0000\u0000\u021c\u113b\u0001\u0000\u0000\u0000\u021e"+
		"\u113d\u0001\u0000\u0000\u0000\u0220\u113f\u0001\u0000\u0000\u0000\u0222"+
		"\u1143\u0001\u0000\u0000\u0000\u0224\u1145\u0001\u0000\u0000\u0000\u0226"+
		"\u114a\u0001\u0000\u0000\u0000\u0228\u114e\u0001\u0000\u0000\u0000\u022a"+
		"\u115e\u0001\u0000\u0000\u0000\u022c\u1160\u0001\u0000\u0000\u0000\u022e"+
		"\u1162\u0001\u0000\u0000\u0000\u0230\u1164\u0001\u0000\u0000\u0000\u0232"+
		"\u1171\u0001\u0000\u0000\u0000\u0234\u11b0\u0001\u0000\u0000\u0000\u0236"+
		"\u11b2\u0001\u0000\u0000\u0000\u0238\u11ba\u0001\u0000\u0000\u0000\u023a"+
		"\u11c2\u0001\u0000\u0000\u0000\u023c\u11ca\u0001\u0000\u0000\u0000\u023e"+
		"\u11cc\u0001\u0000\u0000\u0000\u0240\u11d4\u0001\u0000\u0000\u0000\u0242"+
		"\u11ec\u0001\u0000\u0000\u0000\u0244\u11f9\u0001\u0000\u0000\u0000\u0246"+
		"\u1202\u0001\u0000\u0000\u0000\u0248\u1206\u0001\u0000\u0000\u0000\u024a"+
		"\u120a\u0001\u0000\u0000\u0000\u024c\u120e\u0001\u0000\u0000\u0000\u024e"+
		"\u1212\u0001\u0000\u0000\u0000\u0250\u121a\u0001\u0000\u0000\u0000\u0252"+
		"\u1221\u0001\u0000\u0000\u0000\u0254\u1225\u0001\u0000\u0000\u0000\u0256"+
		"\u1230\u0001\u0000\u0000\u0000\u0258\u1232\u0001\u0000\u0000\u0000\u025a"+
		"\u1236\u0001\u0000\u0000\u0000\u025c\u123a\u0001\u0000\u0000\u0000\u025e"+
		"\u123e\u0001\u0000\u0000\u0000\u0260\u124b\u0001\u0000\u0000\u0000\u0262"+
		"\u124d\u0001\u0000\u0000\u0000\u0264\u1253\u0001\u0000\u0000\u0000\u0266"+
		"\u125b\u0001\u0000\u0000\u0000\u0268\u1280\u0001\u0000\u0000\u0000\u026a"+
		"\u1282\u0001\u0000\u0000\u0000\u026c\u128f\u0001\u0000\u0000\u0000\u026e"+
		"\u1291\u0001\u0000\u0000\u0000\u0270\u12c0\u0001\u0000\u0000\u0000\u0272"+
		"\u1313\u0001\u0000\u0000\u0000\u0274\u134e\u0001\u0000\u0000\u0000\u0276"+
		"\u1350\u0001\u0000\u0000\u0000\u0278\u1353\u0001\u0000\u0000\u0000\u027a"+
		"\u135f\u0001\u0000\u0000\u0000\u027c\u1372\u0001\u0000\u0000\u0000\u027e"+
		"\u1374\u0001\u0000\u0000\u0000\u0280\u1378\u0001\u0000\u0000\u0000\u0282"+
		"\u137d\u0001\u0000\u0000\u0000\u0284\u13b2\u0001\u0000\u0000\u0000\u0286"+
		"\u13b9\u0001\u0000\u0000\u0000\u0288\u13bb\u0001\u0000\u0000\u0000\u028a"+
		"\u13c2\u0001\u0000\u0000\u0000\u028c\u13f2\u0001\u0000\u0000\u0000\u028e"+
		"\u13f4\u0001\u0000\u0000\u0000\u0290\u13f7\u0001\u0000\u0000\u0000\u0292"+
		"\u13fa\u0001\u0000\u0000\u0000\u0294\u1405\u0001\u0000\u0000\u0000\u0296"+
		"\u140a\u0001\u0000\u0000\u0000\u0298\u140d\u0001\u0000\u0000\u0000\u029a"+
		"\u141c\u0001\u0000\u0000\u0000\u029c\u144a\u0001\u0000\u0000\u0000\u029e"+
		"\u144c\u0001\u0000\u0000\u0000\u02a0\u147e\u0001\u0000\u0000\u0000\u02a2"+
		"\u1490\u0001\u0000\u0000\u0000\u02a4\u1492\u0001\u0000\u0000\u0000\u02a6"+
		"\u14a2\u0001\u0000\u0000\u0000\u02a8\u14b1\u0001\u0000\u0000\u0000\u02aa"+
		"\u14ca\u0001\u0000\u0000\u0000\u02ac\u14cc\u0001\u0000\u0000\u0000\u02ae"+
		"\u14d4\u0001\u0000\u0000\u0000\u02b0\u1502\u0001\u0000\u0000\u0000\u02b2"+
		"\u1504\u0001\u0000\u0000\u0000\u02b4\u1512\u0001\u0000\u0000\u0000\u02b6"+
		"\u1514\u0001\u0000\u0000\u0000\u02b8\u1523\u0001\u0000\u0000\u0000\u02ba"+
		"\u1528\u0001\u0000\u0000\u0000\u02bc\u152a\u0001\u0000\u0000\u0000\u02be"+
		"\u152c\u0001\u0000\u0000\u0000\u02c0\u153a\u0001\u0000\u0000\u0000\u02c2"+
		"\u1547\u0001\u0000\u0000\u0000\u02c4\u154b\u0001\u0000\u0000\u0000\u02c6"+
		"\u154d\u0001\u0000\u0000\u0000\u02c8\u1552\u0001\u0000\u0000\u0000\u02ca"+
		"\u155c\u0001\u0000\u0000\u0000\u02cc\u1591\u0001\u0000\u0000\u0000\u02ce"+
		"\u159c\u0001\u0000\u0000\u0000\u02d0\u159e\u0001\u0000\u0000\u0000\u02d2"+
		"\u15a1\u0001\u0000\u0000\u0000\u02d4\u15ae\u0001\u0000\u0000\u0000\u02d6"+
		"\u15ce\u0001\u0000\u0000\u0000\u02d8\u15d6\u0001\u0000\u0000\u0000\u02da"+
		"\u15d8\u0001\u0000\u0000\u0000\u02dc\u15e3\u0001\u0000\u0000\u0000\u02de"+
		"\u15e5\u0001\u0000\u0000\u0000\u02e0\u15f0\u0001\u0000\u0000\u0000\u02e2"+
		"\u15f2\u0001\u0000\u0000\u0000\u02e4\u15f7\u0001\u0000\u0000\u0000\u02e6"+
		"\u1602\u0001\u0000\u0000\u0000\u02e8\u160d\u0001\u0000\u0000\u0000\u02ea"+
		"\u1615\u0001\u0000\u0000\u0000\u02ec\u161e\u0001\u0000\u0000\u0000\u02ee"+
		"\u1627\u0001\u0000\u0000\u0000\u02f0\u162c\u0001\u0000\u0000\u0000\u02f2"+
		"\u162f\u0001\u0000\u0000\u0000\u02f4\u1634\u0001\u0000\u0000\u0000\u02f6"+
		"\u1639\u0001\u0000\u0000\u0000\u02f8\u163e\u0001\u0000\u0000\u0000\u02fa"+
		"\u164b\u0001\u0000\u0000\u0000\u02fc\u164f\u0001\u0000\u0000\u0000\u02fe"+
		"\u1654\u0001\u0000\u0000\u0000\u0300\u165b\u0001\u0000\u0000\u0000\u0302"+
		"\u166c\u0001\u0000\u0000\u0000\u0304\u167d\u0001\u0000\u0000\u0000\u0306"+
		"\u168a\u0001\u0000\u0000\u0000\u0308\u1690\u0001\u0000\u0000\u0000\u030a"+
		"\u1697\u0001\u0000\u0000\u0000\u030c\u169e\u0001\u0000\u0000\u0000\u030e"+
		"\u16a3\u0001\u0000\u0000\u0000\u0310\u16a8\u0001\u0000\u0000\u0000\u0312"+
		"\u16ab\u0001\u0000\u0000\u0000\u0314\u16b8\u0001\u0000\u0000\u0000\u0316"+
		"\u16c0\u0001\u0000\u0000\u0000\u0318\u16c6\u0001\u0000\u0000\u0000\u031a"+
		"\u16ce\u0001\u0000\u0000\u0000\u031c\u16d3\u0001\u0000\u0000\u0000\u031e"+
		"\u16d8\u0001\u0000\u0000\u0000\u0320\u16db\u0001\u0000\u0000\u0000\u0322"+
		"\u16e5\u0001\u0000\u0000\u0000\u0324\u16ed\u0001\u0000\u0000\u0000\u0326"+
		"\u16f2\u0001\u0000\u0000\u0000\u0328\u16f7\u0001\u0000\u0000\u0000\u032a"+
		"\u16fb\u0001\u0000\u0000\u0000\u032c\u1701\u0001\u0000\u0000\u0000\u032e"+
		"\u1706\u0001\u0000\u0000\u0000\u0330\u170b\u0001\u0000\u0000\u0000\u0332"+
		"\u1710\u0001\u0000\u0000\u0000\u0334\u1717\u0001\u0000\u0000\u0000\u0336"+
		"\u171e\u0001\u0000\u0000\u0000\u0338\u1724\u0001\u0000\u0000\u0000\u033a"+
		"\u172a\u0001\u0000\u0000\u0000\u033c\u172f\u0001\u0000\u0000\u0000\u033e"+
		"\u1739\u0001\u0000\u0000\u0000\u0340\u173d\u0001\u0000\u0000\u0000\u0342"+
		"\u173f\u0001\u0000\u0000\u0000\u0344\u1741\u0001\u0000\u0000\u0000\u0346"+
		"\u1744\u0001\u0000\u0000\u0000\u0348\u1753\u0001\u0000\u0000\u0000\u034a"+
		"\u1779\u0001\u0000\u0000\u0000\u034c\u177d\u0001\u0000\u0000\u0000\u034e"+
		"\u177f\u0001\u0000\u0000\u0000\u0350\u1787\u0001\u0000\u0000\u0000\u0352"+
		"\u178b\u0001\u0000\u0000\u0000\u0354\u1793\u0001\u0000\u0000\u0000\u0356"+
		"\u179c\u0001\u0000\u0000\u0000\u0358\u179e\u0001\u0000\u0000\u0000\u035a"+
		"\u17b1\u0001\u0000\u0000\u0000\u035c\u17b3\u0001\u0000\u0000\u0000\u035e"+
		"\u17b5\u0001\u0000\u0000\u0000\u0360\u17c4\u0001\u0000\u0000\u0000\u0362"+
		"\u17d0\u0001\u0000\u0000\u0000\u0364\u17d2\u0001\u0000\u0000\u0000\u0366"+
		"\u17da\u0001\u0000\u0000\u0000\u0368\u17e2\u0001\u0000\u0000\u0000\u036a"+
		"\u17eb\u0001\u0000\u0000\u0000\u036c\u17ed\u0001\u0000\u0000\u0000\u036e"+
		"\u17ff\u0001\u0000\u0000\u0000\u0370\u180d\u0001\u0000\u0000\u0000\u0372"+
		"\u1812\u0001\u0000\u0000\u0000\u0374\u1818\u0001\u0000\u0000\u0000\u0376"+
		"\u181a\u0001\u0000\u0000\u0000\u0378\u182a\u0001\u0000\u0000\u0000\u037a"+
		"\u1832\u0001\u0000\u0000\u0000\u037c\u183c\u0001\u0000\u0000\u0000\u037e"+
		"\u1849\u0001\u0000\u0000\u0000\u0380\u184b\u0001\u0000\u0000\u0000\u0382"+
		"\u1851\u0001\u0000\u0000\u0000\u0384\u186d\u0001\u0000\u0000\u0000\u0386"+
		"\u1877\u0001\u0000\u0000\u0000\u0388\u1879\u0001\u0000\u0000\u0000\u038a"+
		"\u187d\u0001\u0000\u0000\u0000\u038c\u1880\u0001\u0000\u0000\u0000\u038e"+
		"\u1883\u0001\u0000\u0000\u0000\u0390\u1890\u0001\u0000\u0000\u0000\u0392"+
		"\u18a0\u0001\u0000\u0000\u0000\u0394\u18b7\u0001\u0000\u0000\u0000\u0396"+
		"\u18b9\u0001\u0000\u0000\u0000\u0398\u18de\u0001\u0000\u0000\u0000\u039a"+
		"\u18e0\u0001\u0000\u0000\u0000\u039c\u197a\u0001\u0000\u0000\u0000\u039e"+
		"\u1987\u0001\u0000\u0000\u0000\u03a0\u198e\u0001\u0000\u0000\u0000\u03a2"+
		"\u19e5\u0001\u0000\u0000\u0000\u03a4\u19e7\u0001\u0000\u0000\u0000\u03a6"+
		"\u1a1d\u0001\u0000\u0000\u0000\u03a8\u1a1f\u0001\u0000\u0000\u0000\u03aa"+
		"\u1a25\u0001\u0000\u0000\u0000\u03ac\u1a27\u0001\u0000\u0000\u0000\u03ae"+
		"\u1a2e\u0001\u0000\u0000\u0000\u03b0\u1a33\u0001\u0000\u0000\u0000\u03b2"+
		"\u1a40\u0001\u0000\u0000\u0000\u03b4\u1a46\u0001\u0000\u0000\u0000\u03b6"+
		"\u1a48\u0001\u0000\u0000\u0000\u03b8\u1a5b\u0001\u0000\u0000\u0000\u03ba"+
		"\u1a5e\u0001\u0000\u0000\u0000\u03bc\u1a67\u0001\u0000\u0000\u0000\u03be"+
		"\u1a69\u0001\u0000\u0000\u0000\u03c0\u1a80\u0001\u0000\u0000\u0000\u03c2"+
		"\u1b9d\u0001\u0000\u0000\u0000\u03c4\u1b9f\u0001\u0000\u0000\u0000\u03c6"+
		"\u1bb9\u0001\u0000\u0000\u0000\u03c8\u1bbb\u0001\u0000\u0000\u0000\u03ca"+
		"\u1bc1\u0001\u0000\u0000\u0000\u03cc\u1bc3\u0001\u0000\u0000\u0000\u03ce"+
		"\u1bd2\u0001\u0000\u0000\u0000\u03d0\u1bda\u0001\u0000\u0000\u0000\u03d2"+
		"\u1bdc\u0001\u0000\u0000\u0000\u03d4\u1bf9\u0001\u0000\u0000\u0000\u03d6"+
		"\u1c1a\u0001\u0000\u0000\u0000\u03d8\u1c1c\u0001\u0000\u0000\u0000\u03da"+
		"\u1c24\u0001\u0000\u0000\u0000\u03dc\u1c2b\u0001\u0000\u0000\u0000\u03de"+
		"\u1c2d\u0001\u0000\u0000\u0000\u03e0\u1c37\u0001\u0000\u0000\u0000\u03e2"+
		"\u1c46\u0001\u0000\u0000\u0000\u03e4\u1c48\u0001\u0000\u0000\u0000\u03e6"+
		"\u1c4c\u0001\u0000\u0000\u0000\u03e8\u1c4f\u0001\u0000\u0000\u0000\u03ea"+
		"\u1c52\u0001\u0000\u0000\u0000\u03ec\u1c85\u0001\u0000\u0000\u0000\u03ee"+
		"\u1c87\u0001\u0000\u0000\u0000\u03f0\u1c92\u0001\u0000\u0000\u0000\u03f2"+
		"\u1c94\u0001\u0000\u0000\u0000\u03f4\u1c96\u0001\u0000\u0000\u0000\u03f6"+
		"\u1c9a\u0001\u0000\u0000\u0000\u03f8\u1c9c\u0001\u0000\u0000\u0000\u03fa"+
		"\u1c9e\u0001\u0000\u0000\u0000\u03fc\u1ca2\u0001\u0000\u0000\u0000\u03fe"+
		"\u1ca6\u0001\u0000\u0000\u0000\u0400\u1caa\u0001\u0000\u0000\u0000\u0402"+
		"\u1cb2\u0001\u0000\u0000\u0000\u0404\u1cb6\u0001\u0000\u0000\u0000\u0406"+
		"\u1cbe\u0001\u0000\u0000\u0000\u0408\u1cc0\u0001\u0000\u0000\u0000\u040a"+
		"\u1cd1\u0001\u0000\u0000\u0000\u040c\u1cd3\u0001\u0000\u0000\u0000\u040e"+
		"\u1cd6\u0001\u0000\u0000\u0000\u0410\u1cdb\u0001\u0000\u0000\u0000\u0412"+
		"\u1ce3\u0001\u0000\u0000\u0000\u0414\u1ce9\u0001\u0000\u0000\u0000\u0416"+
		"\u1ced\u0001\u0000\u0000\u0000\u0418\u1cfe\u0001\u0000\u0000\u0000\u041a"+
		"\u1d01\u0001\u0000\u0000\u0000\u041c\u1d06\u0001\u0000\u0000\u0000\u041e"+
		"\u1d08\u0001\u0000\u0000\u0000\u0420\u1d0b\u0001\u0000\u0000\u0000\u0422"+
		"\u1d14\u0001\u0000\u0000\u0000\u0424\u1d1c\u0001\u0000\u0000\u0000\u0426"+
		"\u1d1e\u0001\u0000\u0000\u0000\u0428\u1d23\u0001\u0000\u0000\u0000\u042a"+
		"\u1d2a\u0001\u0000\u0000\u0000\u042c\u1d34\u0001\u0000\u0000\u0000\u042e"+
		"\u1d3c\u0001\u0000\u0000\u0000\u0430\u1d3e\u0001\u0000\u0000\u0000\u0432"+
		"\u1d48\u0001\u0000\u0000\u0000\u0434\u1d50\u0001\u0000\u0000\u0000\u0436"+
		"\u1d52\u0001\u0000\u0000\u0000\u0438\u1d58\u0001\u0000\u0000\u0000\u043a"+
		"\u1d6d\u0001\u0000\u0000\u0000\u043c\u1d6f\u0001\u0000\u0000\u0000\u043e"+
		"\u1d75\u0001\u0000\u0000\u0000\u0440\u1d78\u0001\u0000\u0000\u0000\u0442"+
		"\u1d7b\u0001\u0000\u0000\u0000\u0444\u1d97\u0001\u0000\u0000\u0000\u0446"+
		"\u1d9b\u0001\u0000\u0000\u0000\u0448\u1da2\u0001\u0000\u0000\u0000\u044a"+
		"\u1da9\u0001\u0000\u0000\u0000\u044c\u1dab\u0001\u0000\u0000\u0000\u044e"+
		"\u1dbb\u0001\u0000\u0000\u0000\u0450\u1dcb\u0001\u0000\u0000\u0000\u0452"+
		"\u1dcf\u0001\u0000\u0000\u0000\u0454\u1dd2\u0001\u0000\u0000\u0000\u0456"+
		"\u1dd5\u0001\u0000\u0000\u0000\u0458\u1ded\u0001\u0000\u0000\u0000\u045a"+
		"\u1def\u0001\u0000\u0000\u0000\u045c\u1df7\u0001\u0000\u0000\u0000\u045e"+
		"\u1df9\u0001\u0000\u0000\u0000\u0460\u1dfc\u0001\u0000\u0000\u0000\u0462"+
		"\u1e4c\u0001\u0000\u0000\u0000\u0464\u1e4e\u0001\u0000\u0000\u0000\u0466"+
		"\u1e52\u0001\u0000\u0000\u0000\u0468\u1eaa\u0001\u0000\u0000\u0000\u046a"+
		"\u1eac\u0001\u0000\u0000\u0000\u046c\u1eae\u0001\u0000\u0000\u0000\u046e"+
		"\u1eb0\u0001\u0000\u0000\u0000\u0470\u1eb5\u0001\u0000\u0000\u0000\u0472"+
		"\u1ec5\u0001\u0000\u0000\u0000\u0474\u1ec7\u0001\u0000\u0000\u0000\u0476"+
		"\u1ee9\u0001\u0000\u0000\u0000\u0478\u1eeb\u0001\u0000\u0000\u0000\u047a"+
		"\u1ef6\u0001\u0000\u0000\u0000\u047c\u1efd\u0001\u0000\u0000\u0000\u047e"+
		"\u1f0e\u0001\u0000\u0000\u0000\u0480\u1f10\u0001\u0000\u0000\u0000\u0482"+
		"\u1f14\u0001\u0000\u0000\u0000\u0484\u1f2a\u0001\u0000\u0000\u0000\u0486"+
		"\u1f2c\u0001\u0000\u0000\u0000\u0488\u1f2e\u0001\u0000\u0000\u0000\u048a"+
		"\u1f35\u0001\u0000\u0000\u0000\u048c\u1f37\u0001\u0000\u0000\u0000\u048e"+
		"\u1f39\u0001\u0000\u0000\u0000\u0490\u1fce\u0001\u0000\u0000\u0000\u0492"+
		"\u1fd3\u0001\u0000\u0000\u0000\u0494\u1fda\u0001\u0000\u0000\u0000\u0496"+
		"\u1fdc\u0001\u0000\u0000\u0000\u0498\u1fe4\u0001\u0000\u0000\u0000\u049a"+
		"\u1ff6\u0001\u0000\u0000\u0000\u049c\u1ffe\u0001\u0000\u0000\u0000\u049e"+
		"\u2006\u0001\u0000\u0000\u0000\u04a0\u2008\u0001\u0000\u0000\u0000\u04a2"+
		"\u200c\u0001\u0000\u0000\u0000\u04a4\u2015\u0001\u0000\u0000\u0000\u04a6"+
		"\u201b\u0001\u0000\u0000\u0000\u04a8\u2022\u0001\u0000\u0000\u0000\u04aa"+
		"\u2024\u0001\u0000\u0000\u0000\u04ac\u2033\u0001\u0000\u0000\u0000\u04ae"+
		"\u203a\u0001\u0000\u0000\u0000\u04b0\u203d\u0001\u0000\u0000\u0000\u04b2"+
		"\u20cd\u0001\u0000\u0000\u0000\u04b4\u20d1\u0001\u0000\u0000\u0000\u04b6"+
		"\u20d4\u0001\u0000\u0000\u0000\u04b8\u20dd\u0001\u0000\u0000\u0000\u04ba"+
		"\u20e6\u0001\u0000\u0000\u0000\u04bc\u20ee\u0001\u0000\u0000\u0000\u04be"+
		"\u211c\u0001\u0000\u0000\u0000\u04c0\u211e\u0001\u0000\u0000\u0000\u04c2"+
		"\u2133\u0001\u0000\u0000\u0000\u04c4\u2137\u0001\u0000\u0000\u0000\u04c6"+
		"\u2142\u0001\u0000\u0000\u0000\u04c8\u216f\u0001\u0000\u0000\u0000\u04ca"+
		"\u2193\u0001\u0000\u0000\u0000\u04cc\u2195\u0001\u0000\u0000\u0000\u04ce"+
		"\u219d\u0001\u0000\u0000\u0000\u04d0\u21aa\u0001\u0000\u0000\u0000\u04d2"+
		"\u21ac\u0001\u0000\u0000\u0000\u04d4\u21b0\u0001\u0000\u0000\u0000\u04d6"+
		"\u21b3\u0001\u0000\u0000\u0000\u04d8\u21bd\u0001\u0000\u0000\u0000\u04da"+
		"\u21bf\u0001\u0000\u0000\u0000\u04dc\u21c3\u0001\u0000\u0000\u0000\u04de"+
		"\u21c8\u0001\u0000\u0000\u0000\u04e0\u21cc\u0001\u0000\u0000\u0000\u04e2"+
		"\u21cf\u0001\u0000\u0000\u0000\u04e4\u21d2\u0001\u0000\u0000\u0000\u04e6"+
		"\u21d6\u0001\u0000\u0000\u0000\u04e8\u21dc\u0001\u0000\u0000\u0000\u04ea"+
		"\u21e4\u0001\u0000\u0000\u0000\u04ec\u21ec\u0001\u0000\u0000\u0000\u04ee"+
		"\u21f2\u0001\u0000\u0000\u0000\u04f0\u21f5\u0001\u0000\u0000\u0000\u04f2"+
		"\u2207\u0001\u0000\u0000\u0000\u04f4\u2209\u0001\u0000\u0000\u0000\u04f6"+
		"\u220f\u0001\u0000\u0000\u0000\u04f8\u2213\u0001\u0000\u0000\u0000\u04fa"+
		"\u221b\u0001\u0000\u0000\u0000\u04fc\u2223\u0001\u0000\u0000\u0000\u04fe"+
		"\u222f\u0001\u0000\u0000\u0000\u0500\u223b\u0001\u0000\u0000\u0000\u0502"+
		"\u223d\u0001\u0000\u0000\u0000\u0504\u2241\u0001\u0000\u0000\u0000\u0506"+
		"\u2246\u0001\u0000\u0000\u0000\u0508\u224a\u0001\u0000\u0000\u0000\u050a"+
		"\u2250\u0001\u0000\u0000\u0000\u050c\u2256\u0001\u0000\u0000\u0000\u050e"+
		"\u225d\u0001\u0000\u0000\u0000\u0510\u2264\u0001\u0000\u0000\u0000\u0512"+
		"\u2268\u0001\u0000\u0000\u0000\u0514\u227b\u0001\u0000\u0000\u0000\u0516"+
		"\u227d\u0001\u0000\u0000\u0000\u0518\u2280\u0001\u0000\u0000\u0000\u051a"+
		"\u2283\u0001\u0000\u0000\u0000\u051c\u228c\u0001\u0000\u0000\u0000\u051e"+
		"\u228e\u0001\u0000\u0000\u0000\u0520\u2293\u0001\u0000\u0000\u0000\u0522"+
		"\u2295\u0001\u0000\u0000\u0000\u0524\u2297\u0001\u0000\u0000\u0000\u0526"+
		"\u2299\u0001\u0000\u0000\u0000\u0528\u22a1\u0001\u0000\u0000\u0000\u052a"+
		"\u22a3\u0001\u0000\u0000\u0000\u052c\u22a5\u0001\u0000\u0000\u0000\u052e"+
		"\u22a7\u0001\u0000\u0000\u0000\u0530\u22b2\u0001\u0000\u0000\u0000\u0532"+
		"\u22b6\u0001\u0000\u0000\u0000\u0534\u22b8\u0001\u0000\u0000\u0000\u0536"+
		"\u22ba\u0001\u0000\u0000\u0000\u0538\u22bc\u0001\u0000\u0000\u0000\u053a"+
		"\u22c5\u0001\u0000\u0000\u0000\u053c\u22c7\u0001\u0000\u0000\u0000\u053e"+
		"\u22c9\u0001\u0000\u0000\u0000\u0540\u22cb\u0001\u0000\u0000\u0000\u0542"+
		"\u22cd\u0001\u0000\u0000\u0000\u0544\u22cf\u0001\u0000\u0000\u0000\u0546"+
		"\u22d1\u0001\u0000\u0000\u0000\u0548\u22d3\u0001\u0000\u0000\u0000\u054a"+
		"\u22d7\u0001\u0000\u0000\u0000\u054c\u22db\u0001\u0000\u0000\u0000\u054e"+
		"\u22dd\u0001\u0000\u0000\u0000\u0550\u22df\u0001\u0000\u0000\u0000\u0552"+
		"\u22e1\u0001\u0000\u0000\u0000\u0554\u22e3\u0001\u0000\u0000\u0000\u0556"+
		"\u22e5\u0001\u0000\u0000\u0000\u0558\u22e7\u0001\u0000\u0000\u0000\u055a"+
		"\u22e9\u0001\u0000\u0000\u0000\u055c\u22eb\u0001\u0000\u0000\u0000\u055e"+
		"\u22ed\u0001\u0000\u0000\u0000\u0560\u22ef\u0001\u0000\u0000\u0000\u0562"+
		"\u22f3\u0001\u0000\u0000\u0000\u0564\u22f5\u0001\u0000\u0000\u0000\u0566"+
		"\u22f8\u0001\u0000\u0000\u0000\u0568\u2304\u0001\u0000\u0000\u0000\u056a"+
		"\u2306\u0001\u0000\u0000\u0000\u056c\u230e\u0001\u0000\u0000\u0000\u056e"+
		"\u2316\u0001\u0000\u0000\u0000\u0570\u231a\u0001\u0000\u0000\u0000\u0572"+
		"\u231c\u0001\u0000\u0000\u0000\u0574\u2320\u0001\u0000\u0000\u0000\u0576"+
		"\u2322\u0001\u0000\u0000\u0000\u0578\u2324\u0001\u0000\u0000\u0000\u057a"+
		"\u2326\u0001\u0000\u0000\u0000\u057c\u2328\u0001\u0000\u0000\u0000\u057e"+
		"\u232d\u0001\u0000\u0000\u0000\u0580\u2331\u0001\u0000\u0000\u0000\u0582"+
		"\u2333\u0001\u0000\u0000\u0000\u0584\u233b\u0001\u0000\u0000\u0000\u0586"+
		"\u233f\u0001\u0000\u0000\u0000\u0588\u2343\u0001\u0000\u0000\u0000\u058a"+
		"\u234a\u0001\u0000\u0000\u0000\u058c\u234d\u0001\u0000\u0000\u0000\u058e"+
		"\u234f\u0001\u0000\u0000\u0000\u0590\u2351\u0001\u0000\u0000\u0000\u0592"+
		"\u2358\u0001\u0000\u0000\u0000\u0594\u235f\u0001\u0000\u0000\u0000\u0596"+
		"\u2364\u0001\u0000\u0000\u0000\u0598\u236f\u0001\u0000\u0000\u0000\u059a"+
		"\u2374\u0001\u0000\u0000\u0000\u059c\u2376\u0001\u0000\u0000\u0000\u059e"+
		"\u2378\u0001\u0000\u0000\u0000\u05a0\u2386\u0001\u0000\u0000\u0000\u05a2"+
		"\u238b\u0001\u0000\u0000\u0000\u05a4\u2390\u0001\u0000\u0000\u0000\u05a6"+
		"\u2397\u0001\u0000\u0000\u0000\u05a8\u239f\u0001\u0000\u0000\u0000\u05aa"+
		"\u23a1\u0001\u0000\u0000\u0000\u05ac\u23ac\u0001\u0000\u0000\u0000\u05ae"+
		"\u23ae\u0001\u0000\u0000\u0000\u05b0\u23b0\u0001\u0000\u0000\u0000\u05b2"+
		"\u23b2\u0001\u0000\u0000\u0000\u05b4\u23ba\u0001\u0000\u0000\u0000\u05b6"+
		"\u23be\u0001\u0000\u0000\u0000\u05b8\u23c0\u0001\u0000\u0000\u0000\u05ba"+
		"\u23c2\u0001\u0000\u0000\u0000\u05bc\u23ca\u0001\u0000\u0000\u0000\u05be"+
		"\u23ce\u0001\u0000\u0000\u0000\u05c0\u23d2\u0001\u0000\u0000\u0000\u05c2"+
		"\u23d6\u0001\u0000\u0000\u0000\u05c4\u23d8\u0001\u0000\u0000\u0000\u05c6"+
		"\u23db\u0001\u0000\u0000\u0000\u05c8\u23dd\u0001\u0000\u0000\u0000\u05ca"+
		"\u23e5\u0001\u0000\u0000\u0000\u05cc\u23e7\u0001\u0000\u0000\u0000\u05ce"+
		"\u23ea\u0001\u0000\u0000\u0000\u05d0\u23fc\u0001\u0000\u0000\u0000\u05d2"+
		"\u23fe\u0001\u0000\u0000\u0000\u05d4\u2400\u0001\u0000\u0000\u0000\u05d6"+
		"\u2414\u0001\u0000\u0000\u0000\u05d8\u2416\u0001\u0000\u0000\u0000\u05da"+
		"\u241d\u0001\u0000\u0000\u0000\u05dc\u2429\u0001\u0000\u0000\u0000\u05de"+
		"\u242f\u0001\u0000\u0000\u0000\u05e0\u2431\u0001\u0000\u0000\u0000\u05e2"+
		"\u2433\u0001\u0000\u0000\u0000\u05e4\u2438\u0001\u0000\u0000\u0000\u05e6"+
		"\u05e8\u0003\u0002\u0001\u0000\u05e7\u05e6\u0001\u0000\u0000\u0000\u05e8"+
		"\u05eb\u0001\u0000\u0000\u0000\u05e9\u05e7\u0001\u0000\u0000\u0000\u05e9"+
		"\u05ea\u0001\u0000\u0000\u0000\u05ea\u05ec\u0001\u0000\u0000\u0000\u05eb"+
		"\u05e9\u0001\u0000\u0000\u0000\u05ec\u05ed\u0005\u0000\u0000\u0001\u05ed"+
		"\u0001\u0001\u0000\u0000\u0000\u05ee\u05f1\u0003\u0004\u0002\u0000\u05ef"+
		"\u05f1\u0003\u01ca\u00e5\u0000\u05f0\u05ee\u0001\u0000\u0000\u0000\u05f0"+
		"\u05ef\u0001\u0000\u0000\u0000\u05f1\u05f2\u0001\u0000\u0000\u0000\u05f2"+
		"\u05f3\u0005\u001e\u0000\u0000\u05f3\u0003\u0001\u0000\u0000\u0000\u05f4"+
		"\u0641\u0003\u0006\u0003\u0000\u05f5\u0641\u0003R)\u0000\u05f6\u0641\u0003"+
		"\u00c2a\u0000\u05f7\u0641\u0003\u00e2q\u0000\u05f8\u0641\u0003\u00e6s"+
		"\u0000\u05f9\u0641\u0003\u00e8t\u0000\u05fa\u0641\u0003\u00eau\u0000\u05fb"+
		"\u0641\u0003\u00ecv\u0000\u05fc\u0641\u0003\u00f2y\u0000\u05fd\u0641\u0003"+
		"\u00f4z\u0000\u05fe\u0641\u0003\u00f8|\u0000\u05ff\u0641\u0003\u010c\u0086"+
		"\u0000\u0600\u0641\u0003\u0128\u0094\u0000\u0601\u0641\u0003\u012a\u0095"+
		"\u0000\u0602\u0641\u0003\u01c4\u00e2\u0000\u0603\u0641\u0003\u01c6\u00e3"+
		"\u0000\u0604\u0641\u0003\u01dc\u00ee\u0000\u0605\u0641\u0003\u0260\u0130"+
		"\u0000\u0606\u0641\u0003\u0266\u0133\u0000\u0607\u0641\u0003\u026c\u0136"+
		"\u0000\u0608\u0641\u0003\u02b0\u0158\u0000\u0609\u0641\u0003\u02be\u015f"+
		"\u0000\u060a\u0641\u0003\u02c0\u0160\u0000\u060b\u0641\u0003\u02ca\u0165"+
		"\u0000\u060c\u0641\u0003\u02e2\u0171\u0000\u060d\u0641\u0003\u02e4\u0172"+
		"\u0000\u060e\u0641\u0003\u02e6\u0173\u0000\u060f\u0641\u0003\u02e8\u0174"+
		"\u0000\u0610\u0641\u0003\u02ea\u0175\u0000\u0611\u0641\u0003\u02ec\u0176"+
		"\u0000\u0612\u0641\u0003\u02ee\u0177\u0000\u0613\u0641\u0003\u02f0\u0178"+
		"\u0000\u0614\u0641\u0003\u02f2\u0179\u0000\u0615\u0641\u0003\u02f4\u017a"+
		"\u0000\u0616\u0641\u0003\u02f6\u017b\u0000\u0617\u0641\u0003\u02f8\u017c"+
		"\u0000\u0618\u0641\u0003\u02fa\u017d\u0000\u0619\u0641\u0003\u02fc\u017e"+
		"\u0000\u061a\u0641\u0003\u02fe\u017f\u0000\u061b\u0641\u0003\u0300\u0180"+
		"\u0000\u061c\u0641\u0003\u0302\u0181\u0000\u061d\u0641\u0003\u0304\u0182"+
		"\u0000\u061e\u0641\u0003\u0306\u0183\u0000\u061f\u0641\u0003\u0308\u0184"+
		"\u0000\u0620\u0641\u0003\u030a\u0185\u0000\u0621\u0641\u0003\u030c\u0186"+
		"\u0000\u0622\u0641\u0003\u030e\u0187\u0000\u0623\u0641\u0003\u0310\u0188"+
		"\u0000\u0624\u0641\u0003\u0312\u0189\u0000\u0625\u0641\u0003\u0314\u018a"+
		"\u0000\u0626\u0641\u0003\u0316\u018b\u0000\u0627\u0641\u0003\u0318\u018c"+
		"\u0000\u0628\u0641\u0003\u031a\u018d\u0000\u0629\u0641\u0003\u031c\u018e"+
		"\u0000\u062a\u0641\u0003\u031e\u018f\u0000\u062b\u0641\u0003\u0320\u0190"+
		"\u0000\u062c\u0641\u0003\u0322\u0191\u0000\u062d\u0641\u0003\u0324\u0192"+
		"\u0000\u062e\u0641\u0003\u0326\u0193\u0000\u062f\u0641\u0003\u0328\u0194"+
		"\u0000\u0630\u0641\u0003\u032a\u0195\u0000\u0631\u0641\u0003\u032c\u0196"+
		"\u0000\u0632\u0641\u0003\u032e\u0197\u0000\u0633\u0641\u0003\u0330\u0198"+
		"\u0000\u0634\u0641\u0003\u0332\u0199\u0000\u0635\u0641\u0003\u0334\u019a"+
		"\u0000\u0636\u0641\u0003\u0336\u019b\u0000\u0637\u0641\u0003\u0338\u019c"+
		"\u0000\u0638\u0641\u0003\u033a\u019d\u0000\u0639\u0641\u0003\u033c\u019e"+
		"\u0000\u063a\u0641\u0003\u036a\u01b5\u0000\u063b\u0641\u0003\u034a\u01a5"+
		"\u0000\u063c\u0641\u0003\u037e\u01bf\u0000\u063d\u0641\u0003\u0442\u0221"+
		"\u0000\u063e\u0641\u0003\u044c\u0226\u0000\u063f\u0641\u0003\u044e\u0227"+
		"\u0000\u0640\u05f4\u0001\u0000\u0000\u0000\u0640\u05f5\u0001\u0000\u0000"+
		"\u0000\u0640\u05f6\u0001\u0000\u0000\u0000\u0640\u05f7\u0001\u0000\u0000"+
		"\u0000\u0640\u05f8\u0001\u0000\u0000\u0000\u0640\u05f9\u0001\u0000\u0000"+
		"\u0000\u0640\u05fa\u0001\u0000\u0000\u0000\u0640\u05fb\u0001\u0000\u0000"+
		"\u0000\u0640\u05fc\u0001\u0000\u0000\u0000\u0640\u05fd\u0001\u0000\u0000"+
		"\u0000\u0640\u05fe\u0001\u0000\u0000\u0000\u0640\u05ff\u0001\u0000\u0000"+
		"\u0000\u0640\u0600\u0001\u0000\u0000\u0000\u0640\u0601\u0001\u0000\u0000"+
		"\u0000\u0640\u0602\u0001\u0000\u0000\u0000\u0640\u0603\u0001\u0000\u0000"+
		"\u0000\u0640\u0604\u0001\u0000\u0000\u0000\u0640\u0605\u0001\u0000\u0000"+
		"\u0000\u0640\u0606\u0001\u0000\u0000\u0000\u0640\u0607\u0001\u0000\u0000"+
		"\u0000\u0640\u0608\u0001\u0000\u0000\u0000\u0640\u0609\u0001\u0000\u0000"+
		"\u0000\u0640\u060a\u0001\u0000\u0000\u0000\u0640\u060b\u0001\u0000\u0000"+
		"\u0000\u0640\u060c\u0001\u0000\u0000\u0000\u0640\u060d\u0001\u0000\u0000"+
		"\u0000\u0640\u060e\u0001\u0000\u0000\u0000\u0640\u060f\u0001\u0000\u0000"+
		"\u0000\u0640\u0610\u0001\u0000\u0000\u0000\u0640\u0611\u0001\u0000\u0000"+
		"\u0000\u0640\u0612\u0001\u0000\u0000\u0000\u0640\u0613\u0001\u0000\u0000"+
		"\u0000\u0640\u0614\u0001\u0000\u0000\u0000\u0640\u0615\u0001\u0000\u0000"+
		"\u0000\u0640\u0616\u0001\u0000\u0000\u0000\u0640\u0617\u0001\u0000\u0000"+
		"\u0000\u0640\u0618\u0001\u0000\u0000\u0000\u0640\u0619\u0001\u0000\u0000"+
		"\u0000\u0640\u061a\u0001\u0000\u0000\u0000\u0640\u061b\u0001\u0000\u0000"+
		"\u0000\u0640\u061c\u0001\u0000\u0000\u0000\u0640\u061d\u0001\u0000\u0000"+
		"\u0000\u0640\u061e\u0001\u0000\u0000\u0000\u0640\u061f\u0001\u0000\u0000"+
		"\u0000\u0640\u0620\u0001\u0000\u0000\u0000\u0640\u0621\u0001\u0000\u0000"+
		"\u0000\u0640\u0622\u0001\u0000\u0000\u0000\u0640\u0623\u0001\u0000\u0000"+
		"\u0000\u0640\u0624\u0001\u0000\u0000\u0000\u0640\u0625\u0001\u0000\u0000"+
		"\u0000\u0640\u0626\u0001\u0000\u0000\u0000\u0640\u0627\u0001\u0000\u0000"+
		"\u0000\u0640\u0628\u0001\u0000\u0000\u0000\u0640\u0629\u0001\u0000\u0000"+
		"\u0000\u0640\u062a\u0001\u0000\u0000\u0000\u0640\u062b\u0001\u0000\u0000"+
		"\u0000\u0640\u062c\u0001\u0000\u0000\u0000\u0640\u062d\u0001\u0000\u0000"+
		"\u0000\u0640\u062e\u0001\u0000\u0000\u0000\u0640\u062f\u0001\u0000\u0000"+
		"\u0000\u0640\u0630\u0001\u0000\u0000\u0000\u0640\u0631\u0001\u0000\u0000"+
		"\u0000\u0640\u0632\u0001\u0000\u0000\u0000\u0640\u0633\u0001\u0000\u0000"+
		"\u0000\u0640\u0634\u0001\u0000\u0000\u0000\u0640\u0635\u0001\u0000\u0000"+
		"\u0000\u0640\u0636\u0001\u0000\u0000\u0000\u0640\u0637\u0001\u0000\u0000"+
		"\u0000\u0640\u0638\u0001\u0000\u0000\u0000\u0640\u0639\u0001\u0000\u0000"+
		"\u0000\u0640\u063a\u0001\u0000\u0000\u0000\u0640\u063b\u0001\u0000\u0000"+
		"\u0000\u0640\u063c\u0001\u0000\u0000\u0000\u0640\u063d\u0001\u0000\u0000"+
		"\u0000\u0640\u063e\u0001\u0000\u0000\u0000\u0640\u063f\u0001\u0000\u0000"+
		"\u0000\u0641\u0005\u0001\u0000\u0000\u0000\u0642\u0657\u0005:\u0000\u0000"+
		"\u0643\u0658\u0003\u0016\u000b\u0000\u0644\u0658\u0003\b\u0004\u0000\u0645"+
		"\u0646\u0005\u01b8\u0000\u0000\u0646\u0648\u0003\u0540\u02a0\u0000\u0647"+
		"\u0649\u0003t:\u0000\u0648\u0647\u0001\u0000\u0000\u0000\u0648\u0649\u0001"+
		"\u0000\u0000\u0000\u0649\u0658\u0001\u0000\u0000\u0000\u064a\u064b\u0005"+
		"\u00ee\u0000\u0000\u064b\u064d\u0003\u0544\u02a2\u0000\u064c\u064e\u0003"+
		"t:\u0000\u064d\u064c\u0001\u0000\u0000\u0000\u064d\u064e\u0001\u0000\u0000"+
		"\u0000\u064e\u0658\u0001\u0000\u0000\u0000\u064f\u0658\u0003H$\u0000\u0650"+
		"\u0658\u0003\f\u0006\u0000\u0651\u0658\u0003:\u001d\u0000\u0652\u0653"+
		"\u0004\u0003\u0000\u0000\u0653\u0658\u0003<\u001e\u0000\u0654\u0658\u0003"+
		"\u000e\u0007\u0000\u0655\u0658\u0003\u0014\n\u0000\u0656\u0658\u0003P"+
		"(\u0000\u0657\u0643\u0001\u0000\u0000\u0000\u0657\u0644\u0001\u0000\u0000"+
		"\u0000\u0657\u0645\u0001\u0000\u0000\u0000\u0657\u064a\u0001\u0000\u0000"+
		"\u0000\u0657\u064f\u0001\u0000\u0000\u0000\u0657\u0650\u0001\u0000\u0000"+
		"\u0000\u0657\u0651\u0001\u0000\u0000\u0000\u0657\u0652\u0001\u0000\u0000"+
		"\u0000\u0657\u0654\u0001\u0000\u0000\u0000\u0657\u0655\u0001\u0000\u0000"+
		"\u0000\u0657\u0656\u0001\u0000\u0000\u0000\u0658\u0007\u0001\u0000\u0000"+
		"\u0000\u0659\u065a\u0005\u0096\u0000\u0000\u065a\u065c\u0003\u053c\u029e"+
		"\u0000\u065b\u065d\u0003\n\u0005\u0000\u065c\u065b\u0001\u0000\u0000\u0000"+
		"\u065d\u065e\u0001\u0000\u0000\u0000\u065e\u065c\u0001\u0000\u0000\u0000"+
		"\u065e\u065f\u0001\u0000\u0000\u0000\u065f\t\u0001\u0000\u0000\u0000\u0660"+
		"\u0668\u0003V+\u0000\u0661\u0662\u0005\u01c5\u0000\u0000\u0662\u0664\u0005"+
		"\u0194\u0000\u0000\u0663\u0665\u0005\u0006\u0000\u0000\u0664\u0663\u0001"+
		"\u0000\u0000\u0000\u0664\u0665\u0001\u0000\u0000\u0000\u0665\u0666\u0001"+
		"\u0000\u0000\u0000\u0666\u0668\u0003\u04b4\u025a\u0000\u0667\u0660\u0001"+
		"\u0000\u0000\u0000\u0667\u0661\u0001\u0000\u0000\u0000\u0668\u000b\u0001"+
		"\u0000\u0000\u0000\u0669\u066b\u0003\u04d2\u0269\u0000\u066a\u0669\u0001"+
		"\u0000\u0000\u0000\u066a\u066b\u0001\u0000\u0000\u0000\u066b\u066c\u0001"+
		"\u0000\u0000\u0000\u066c\u066d\u0005\u00cd\u0000\u0000\u066d\u0671\u0003"+
		"\u0558\u02ac\u0000\u066e\u066f\u0005\u0191\u0000\u0000\u066f\u0670\u0005"+
		"\u01fa\u0000\u0000\u0670\u0672\u0003\u0458\u022c\u0000\u0671\u066e\u0001"+
		"\u0000\u0000\u0000\u0671\u0672\u0001\u0000\u0000\u0000\u0672\u0679\u0001"+
		"\u0000\u0000\u0000\u0673\u0674\u0005\u0191\u0000\u0000\u0674\u0676\u0005"+
		"z\u0000\u0000\u0675\u0677\u0005\u0186\u0000\u0000\u0676\u0675\u0001\u0000"+
		"\u0000\u0000\u0676\u0677\u0001\u0000\u0000\u0000\u0677\u0678\u0001\u0000"+
		"\u0000\u0000\u0678\u067a\u0005\u01b4\u0000\u0000\u0679\u0673\u0001\u0000"+
		"\u0000\u0000\u0679\u067a\u0001\u0000\u0000\u0000\u067a\u067e\u0001\u0000"+
		"\u0000\u0000\u067b\u067c\u0005\u01d6\u0000\u0000\u067c\u067d\u0005\u0257"+
		"\u0000\u0000\u067d\u067f\u0003\u0580\u02c0\u0000\u067e\u067b\u0001\u0000"+
		"\u0000\u0000\u067e\u067f\u0001\u0000\u0000\u0000\u067f\u0686\u0001\u0000"+
		"\u0000\u0000\u0680\u0687\u0005\u00c0\u0000\u0000\u0681\u0684\u0005\u00b1"+
		"\u0000\u0000\u0682\u0683\u0005\u0191\u0000\u0000\u0683\u0685\u0003\u025e"+
		"\u012f\u0000\u0684\u0682\u0001\u0000\u0000\u0000\u0684\u0685\u0001\u0000"+
		"\u0000\u0000\u0685\u0687\u0001\u0000\u0000\u0000\u0686\u0680\u0001\u0000"+
		"\u0000\u0000\u0686\u0681\u0001\u0000\u0000\u0000\u0686\u0687\u0001\u0000"+
		"\u0000\u0000\u0687\u068a\u0001\u0000\u0000\u0000\u0688\u0689\u0005v\u0000"+
		"\u0000\u0689\u068b\u0003\u05a6\u02d3\u0000\u068a\u0688\u0001\u0000\u0000"+
		"\u0000\u068a\u068b\u0001\u0000\u0000\u0000\u068b\u068e\u0001\u0000\u0000"+
		"\u0000\u068c\u068d\u0005\u00b7\u0000\u0000\u068d\u068f\u0003\u040a\u0205"+
		"\u0000\u068e\u068c\u0001\u0000\u0000\u0000\u068e\u068f\u0001\u0000\u0000"+
		"\u0000\u068f\r\u0001\u0000\u0000\u0000\u0690\u0691\u0005\u013b\u0000\u0000"+
		"\u0691\u0692\u0005\u00f9\u0000\u0000\u0692\u0693\u0003\u0554\u02aa\u0000"+
		"\u0693\u0694\u00053\u0000\u0000\u0694\u0695\u0005\u0264\u0000\u0000\u0695"+
		"\u0697\u0003\u05a6\u02d3\u0000\u0696\u0698\u0003\u0010\b\u0000\u0697\u0696"+
		"\u0001\u0000\u0000\u0000\u0697\u0698\u0001\u0000\u0000\u0000\u0698\u000f"+
		"\u0001\u0000\u0000\u0000\u0699\u06a0\u0003\u0012\t\u0000\u069a\u069c\u0005"+
		"\u001d\u0000\u0000\u069b\u069a\u0001\u0000\u0000\u0000\u069b\u069c\u0001"+
		"\u0000\u0000\u0000\u069c\u069d\u0001\u0000\u0000\u0000\u069d\u069f\u0003"+
		"\u0012\t\u0000\u069e\u069b\u0001\u0000\u0000\u0000\u069f\u06a2\u0001\u0000"+
		"\u0000\u0000\u06a0\u069e\u0001\u0000\u0000\u0000\u06a0\u06a1\u0001\u0000"+
		"\u0000\u0000\u06a1\u0011\u0001\u0000\u0000\u0000\u06a2\u06a0\u0001\u0000"+
		"\u0000\u0000\u06a3\u06a7\u0003\u0096K\u0000\u06a4\u06a7\u0003\u00a2Q\u0000"+
		"\u06a5\u06a7\u0003\u00a4R\u0000\u06a6\u06a3\u0001\u0000\u0000\u0000\u06a6"+
		"\u06a4\u0001\u0000\u0000\u0000\u06a6\u06a5\u0001\u0000\u0000\u0000\u06a7"+
		"\u0013\u0001\u0000\u0000\u0000\u06a8\u06a9\u0005\u0205\u0000\u0000\u06a9"+
		"\u06aa\u0003\u055e\u02af\u0000\u06aa\u06ab\u0003\u0086C\u0000\u06ab\u0015"+
		"\u0001\u0000\u0000\u0000\u06ac\u06ae\u0003\u0522\u0291\u0000\u06ad\u06ac"+
		"\u0001\u0000\u0000\u0000\u06ad\u06ae\u0001\u0000\u0000\u0000\u06ae\u06af"+
		"\u0001\u0000\u0000\u0000\u06af\u06b0\u0005\u0247\u0000\u0000\u06b0\u06b2"+
		"\u0003\u0568\u02b4\u0000\u06b1\u06b3\u0003\u0018\f\u0000\u06b2\u06b1\u0001"+
		"\u0000\u0000\u0000\u06b2\u06b3\u0001\u0000\u0000\u0000\u06b3\u0017\u0001"+
		"\u0000\u0000\u0000\u06b4\u06b7\u0003\u001a\r\u0000\u06b5\u06b8\u0003\u04bc"+
		"\u025e\u0000\u06b6\u06b8\u00036\u001b\u0000\u06b7\u06b5\u0001\u0000\u0000"+
		"\u0000\u06b7\u06b6\u0001\u0000\u0000\u0000\u06b7\u06b8\u0001\u0000\u0000"+
		"\u0000\u06b8\u06c2\u0001\u0000\u0000\u0000\u06b9\u06c2\u0003\u04bc\u025e"+
		"\u0000\u06ba\u06c2\u00036\u001b\u0000\u06bb\u06bc\u0003\u001c\u000e\u0000"+
		"\u06bc\u06bd\u0005\u001d\u0000\u0000\u06bd\u06bf\u0001\u0000\u0000\u0000"+
		"\u06be\u06bb\u0001\u0000\u0000\u0000\u06be\u06bf\u0001\u0000\u0000\u0000"+
		"\u06bf\u06c0\u0001\u0000\u0000\u0000\u06c0\u06c2\u0003\u001e\u000f\u0000"+
		"\u06c1\u06b4\u0001\u0000\u0000\u0000\u06c1\u06b9\u0001\u0000\u0000\u0000"+
		"\u06c1\u06ba\u0001\u0000\u0000\u0000\u06c1\u06be\u0001\u0000\u0000\u0000"+
		"\u06c2\u0019\u0001\u0000\u0000\u0000\u06c3\u06cb\u0003\u001c\u000e\u0000"+
		"\u06c4\u06c5\u0003\u001c\u000e\u0000\u06c5\u06c6\u0005\u001d\u0000\u0000"+
		"\u06c6\u06c8\u0001\u0000\u0000\u0000\u06c7\u06c4\u0001\u0000\u0000\u0000"+
		"\u06c7\u06c8\u0001\u0000\u0000\u0000\u06c8\u06c9\u0001\u0000\u0000\u0000"+
		"\u06c9\u06cb\u0003\"\u0011\u0000\u06ca\u06c3\u0001\u0000\u0000\u0000\u06ca"+
		"\u06c7\u0001\u0000\u0000\u0000\u06cb\u001b\u0001\u0000\u0000\u0000\u06cc"+
		"\u06d1\u0003$\u0012\u0000\u06cd\u06ce\u0005\u001d\u0000\u0000\u06ce\u06d0"+
		"\u0003$\u0012\u0000\u06cf\u06cd\u0001\u0000\u0000\u0000\u06d0\u06d3\u0001"+
		"\u0000\u0000\u0000\u06d1\u06cf\u0001\u0000\u0000\u0000\u06d1\u06d2\u0001"+
		"\u0000\u0000\u0000\u06d2\u001d\u0001\u0000\u0000\u0000\u06d3\u06d1\u0001"+
		"\u0000\u0000\u0000\u06d4\u06d5\u0005\u00b2\u0000\u0000\u06d5\u06dc\u0005"+
		"\u0246\u0000\u0000\u06d6\u06d7\u0005\u010a\u0000\u0000\u06d7\u06dc\u0005"+
		"\u0246\u0000\u0000\u06d8\u06dc\u0003 \u0010\u0000\u06d9\u06da\u0004\u000f"+
		"\u0001\u0000\u06da\u06dc\u0007\u0000\u0000\u0000\u06db\u06d4\u0001\u0000"+
		"\u0000\u0000\u06db\u06d6\u0001\u0000\u0000\u0000\u06db\u06d8\u0001\u0000"+
		"\u0000\u0000\u06db\u06d9\u0001\u0000\u0000\u0000\u06dc\u001f\u0001\u0000"+
		"\u0000\u0000\u06dd\u06de\u00053\u0000\u0000\u06de\u06e0\u0005\u01a7\u0000"+
		"\u0000\u06df\u06e1\u0003\u0524\u0292\u0000\u06e0\u06df\u0001\u0000\u0000"+
		"\u0000\u06e0\u06e1\u0001\u0000\u0000\u0000\u06e1\u06e5\u0001\u0000\u0000"+
		"\u0000\u06e2\u06e6\u0003\u04c4\u0262\u0000\u06e3\u06e4\u0005\u01a6\u0000"+
		"\u0000\u06e4\u06e6\u0003\u058e\u02c7\u0000\u06e5\u06e2\u0001\u0000\u0000"+
		"\u0000\u06e5\u06e3\u0001\u0000\u0000\u0000\u06e6\u073c\u0001\u0000\u0000"+
		"\u0000\u06e7\u06e8\u0005\u00b8\u0000\u0000\u06e8\u06e9\u0005\u01a7\u0000"+
		"\u0000\u06e9\u073c\u0003\u0582\u02c1\u0000\u06ea\u06eb\u0005\u01c8\u0000"+
		"\u0000\u06eb\u06ed\u0005\u01a7\u0000\u0000\u06ec\u06ee\u0003\u0524\u0292"+
		"\u0000\u06ed\u06ec\u0001\u0000\u0000\u0000\u06ed\u06ee\u0001\u0000\u0000"+
		"\u0000\u06ee\u06ef\u0001\u0000\u0000\u0000\u06ef\u073c\u00038\u001c\u0000"+
		"\u06f0\u06f1\u0005\u0196\u0000\u0000\u06f1\u06f3\u0005\u01a7\u0000\u0000"+
		"\u06f2\u06f4\u0003\u0524\u0292\u0000\u06f3\u06f2\u0001\u0000\u0000\u0000"+
		"\u06f3\u06f4\u0001\u0000\u0000\u0000\u06f4\u06f5\u0001\u0000\u0000\u0000"+
		"\u06f5\u06f7\u00038\u001c\u0000\u06f6\u06f8\u0003\u0524\u0292\u0000\u06f7"+
		"\u06f6\u0001\u0000\u0000\u0000\u06f7\u06f8\u0001\u0000\u0000\u0000\u06f8"+
		"\u073c\u0001\u0000\u0000\u0000\u06f9\u06fa\u0005<\u0000\u0000\u06fa\u06fc"+
		"\u0005\u01a7\u0000\u0000\u06fb\u06fd\u0003\u0524\u0292\u0000\u06fc\u06fb"+
		"\u0001\u0000\u0000\u0000\u06fc\u06fd\u0001\u0000\u0000\u0000\u06fd\u06fe"+
		"\u0001\u0000\u0000\u0000\u06fe\u073c\u00038\u001c\u0000\u06ff\u0700\u0005"+
		"i\u0000\u0000\u0700\u0701\u0005\u01a7\u0000\u0000\u0701\u0705\u00038\u001c"+
		"\u0000\u0702\u0704\u0003\u02ba\u015d\u0000\u0703\u0702\u0001\u0000\u0000"+
		"\u0000\u0704\u0707\u0001\u0000\u0000\u0000\u0705\u0703\u0001\u0000\u0000"+
		"\u0000\u0705\u0706\u0001\u0000\u0000\u0000\u0706\u073c\u0001\u0000\u0000"+
		"\u0000\u0707\u0705\u0001\u0000\u0000\u0000\u0708\u0709\u0005\u01d8\u0000"+
		"\u0000\u0709\u070b\u0005\u01a7\u0000\u0000\u070a\u070c\u0003\u0524\u0292"+
		"\u0000\u070b\u070a\u0001\u0000\u0000\u0000\u070b\u070c\u0001\u0000\u0000"+
		"\u0000\u070c\u070d\u0001\u0000\u0000\u0000\u070d\u0711\u00038\u001c\u0000"+
		"\u070e\u0710\u0003\u02bc\u015e\u0000\u070f\u070e\u0001\u0000\u0000\u0000"+
		"\u0710\u0713\u0001\u0000\u0000\u0000\u0711\u070f\u0001\u0000\u0000\u0000"+
		"\u0711\u0712\u0001\u0000\u0000\u0000\u0712\u073c\u0001\u0000\u0000\u0000"+
		"\u0713\u0711\u0001\u0000\u0000\u0000\u0714\u0715\u0005n\u0000\u0000\u0715"+
		"\u0717\u0005\u01a7\u0000\u0000\u0716\u0718\u0003\u0524\u0292\u0000\u0717"+
		"\u0716\u0001\u0000\u0000\u0000\u0717\u0718\u0001\u0000\u0000\u0000\u0718"+
		"\u0719\u0001\u0000\u0000\u0000\u0719\u073c\u0003\u058e\u02c7\u0000\u071a"+
		"\u071b\u0005\u025e\u0000\u0000\u071b\u071c\u0005\u01a7\u0000\u0000\u071c"+
		"\u073c\u00038\u001c\u0000\u071d\u071e\u0005\u01d7\u0000\u0000\u071e\u0720"+
		"\u0005\u01a7\u0000\u0000\u071f\u0721\u0003\u0524\u0292\u0000\u0720\u071f"+
		"\u0001\u0000\u0000\u0000\u0720\u0721\u0001\u0000\u0000\u0000\u0721\u0726"+
		"\u0001\u0000\u0000\u0000\u0722\u0723\u0003\u0582\u02c1\u0000\u0723\u0724"+
		"\u0005\u0117\u0000\u0000\u0724\u0725\u0003\u04c4\u0262\u0000\u0725\u0727"+
		"\u0001\u0000\u0000\u0000\u0726\u0722\u0001\u0000\u0000\u0000\u0726\u0727"+
		"\u0001\u0000\u0000\u0000\u0727\u073c\u0001\u0000\u0000\u0000\u0728\u0729"+
		"\u0005\u00cf\u0000\u0000\u0729\u072a\u0005\u01a7\u0000\u0000\u072a\u072b"+
		"\u0003\u0580\u02c0\u0000\u072b\u072c\u0005\u028d\u0000\u0000\u072c\u072d"+
		"\u0005\u0247\u0000\u0000\u072d\u072f\u0003\u0568\u02b4\u0000\u072e\u0730"+
		"\u00034\u001a\u0000\u072f\u072e\u0001\u0000\u0000\u0000\u072f\u0730\u0001"+
		"\u0000\u0000\u0000\u0730\u073c\u0001\u0000\u0000\u0000\u0731\u0732\u0005"+
		"\u00b2\u0000\u0000\u0732\u0733\u0005\u01a7\u0000\u0000\u0733\u0734\u0003"+
		"8\u001c\u0000\u0734\u0735\u0005\u0246\u0000\u0000\u0735\u073c\u0001\u0000"+
		"\u0000\u0000\u0736\u0737\u0005\u010a\u0000\u0000\u0737\u0738\u0005\u01a7"+
		"\u0000\u0000\u0738\u0739\u00038\u001c\u0000\u0739\u073a\u0005\u0246\u0000"+
		"\u0000\u073a\u073c\u0001\u0000\u0000\u0000\u073b\u06dd\u0001\u0000\u0000"+
		"\u0000\u073b\u06e7\u0001\u0000\u0000\u0000\u073b\u06ea\u0001\u0000\u0000"+
		"\u0000\u073b\u06f0\u0001\u0000\u0000\u0000\u073b\u06f9\u0001\u0000\u0000"+
		"\u0000\u073b\u06ff\u0001\u0000\u0000\u0000\u073b\u0708\u0001\u0000\u0000"+
		"\u0000\u073b\u0714\u0001\u0000\u0000\u0000\u073b\u071a\u0001\u0000\u0000"+
		"\u0000\u073b\u071d\u0001\u0000\u0000\u0000\u073b\u0728\u0001\u0000\u0000"+
		"\u0000\u073b\u0731\u0001\u0000\u0000\u0000\u073b\u0736\u0001\u0000\u0000"+
		"\u0000\u073c!\u0001\u0000\u0000\u0000\u073d\u0740\u0003&\u0013\u0000\u073e"+
		"\u0740\u0003\u04b0\u0258\u0000\u073f\u073d\u0001\u0000\u0000\u0000\u073f"+
		"\u073e\u0001\u0000\u0000\u0000\u0740\u0749\u0001\u0000\u0000\u0000\u0741"+
		"\u0745\u0005\u001d\u0000\u0000\u0742\u0746\u0003&\u0013\u0000\u0743\u0746"+
		"\u0003$\u0012\u0000\u0744\u0746\u0003\u04b0\u0258\u0000\u0745\u0742\u0001"+
		"\u0000\u0000\u0000\u0745\u0743\u0001\u0000\u0000\u0000\u0745\u0744\u0001"+
		"\u0000\u0000\u0000\u0746\u0748\u0001\u0000\u0000\u0000\u0747\u0741\u0001"+
		"\u0000\u0000\u0000\u0748\u074b\u0001\u0000\u0000\u0000\u0749\u0747\u0001"+
		"\u0000\u0000\u0000\u0749\u074a\u0001\u0000\u0000\u0000\u074a#\u0001\u0000"+
		"\u0000\u0000\u074b\u0749\u0001\u0000\u0000\u0000\u074c\u0750\u0003.\u0017"+
		"\u0000\u074d\u0750\u00030\u0018\u0000\u074e\u0750\u00034\u001a\u0000\u074f"+
		"\u074c\u0001\u0000\u0000\u0000\u074f\u074d\u0001\u0000\u0000\u0000\u074f"+
		"\u074e\u0001\u0000\u0000\u0000\u0750%\u0001\u0000\u0000\u0000\u0751\u0753"+
		"\u00053\u0000\u0000\u0752\u0754\u0005s\u0000\u0000\u0753\u0752\u0001\u0000"+
		"\u0000\u0000\u0753\u0754\u0001\u0000\u0000\u0000\u0754\u0761\u0001\u0000"+
		"\u0000\u0000\u0755\u0756\u0003\u0580\u02c0\u0000\u0756\u0758\u0003\u0466"+
		"\u0233\u0000\u0757\u0759\u0003\u045c\u022e\u0000\u0758\u0757\u0001\u0000"+
		"\u0000\u0000\u0758\u0759\u0001\u0000\u0000\u0000\u0759\u075b\u0001\u0000"+
		"\u0000\u0000\u075a\u075c\u0003(\u0014\u0000\u075b\u075a\u0001\u0000\u0000"+
		"\u0000\u075b\u075c\u0001\u0000\u0000\u0000\u075c\u0762\u0001\u0000\u0000"+
		"\u0000\u075d\u075e\u0005 \u0000\u0000\u075e\u075f\u0003Z-\u0000\u075f"+
		"\u0760\u0005!\u0000\u0000\u0760\u0762\u0001\u0000\u0000\u0000\u0761\u0755"+
		"\u0001\u0000\u0000\u0000\u0761\u075d\u0001\u0000\u0000\u0000\u0762\u07d9"+
		"\u0001\u0000\u0000\u0000\u0763\u0764\u00053\u0000\u0000\u0764\u07d9\u0003"+
		"\u0462\u0231\u0000\u0765\u0767\u0005c\u0000\u0000\u0766\u0768\u0005s\u0000"+
		"\u0000\u0767\u0766\u0001\u0000\u0000\u0000\u0767\u0768\u0001\u0000\u0000"+
		"\u0000\u0768\u0769\u0001\u0000\u0000\u0000\u0769\u076a\u0003\u052c\u0296"+
		"\u0000\u076a\u076b\u0003\u0580\u02c0\u0000\u076b\u076d\u0003\u0466\u0233"+
		"\u0000\u076c\u076e\u0003(\u0014\u0000\u076d\u076c\u0001\u0000\u0000\u0000"+
		"\u076d\u076e\u0001\u0000\u0000\u0000\u076e\u07d9\u0001\u0000\u0000\u0000"+
		"\u076f\u0771\u0005\u0173\u0000\u0000\u0770\u0772\u0005s\u0000\u0000\u0771"+
		"\u0770\u0001\u0000\u0000\u0000\u0771\u0772\u0001\u0000\u0000\u0000\u0772"+
		"\u0773\u0001\u0000\u0000\u0000\u0773\u0774\u0003\u052c\u0296\u0000\u0774"+
		"\u0776\u0003\u0466\u0233\u0000\u0775\u0777\u0003(\u0014\u0000\u0776\u0775"+
		"\u0001\u0000\u0000\u0000\u0776\u0777\u0001\u0000\u0000\u0000\u0777\u07d9"+
		"\u0001\u0000\u0000\u0000\u0778\u078e\u0005\u00b8\u0000\u0000\u0779\u077b"+
		"\u0005s\u0000\u0000\u077a\u0779\u0001\u0000\u0000\u0000\u077a\u077b\u0001"+
		"\u0000\u0000\u0000\u077b\u077c\u0001\u0000\u0000\u0000\u077c\u077e\u0003"+
		"\u052c\u0296\u0000\u077d\u077f\u0003*\u0015\u0000\u077e\u077d\u0001\u0000"+
		"\u0000\u0000\u077e\u077f\u0001\u0000\u0000\u0000\u077f\u078f\u0001\u0000"+
		"\u0000\u0000\u0780\u0781\u0005\u00e7\u0000\u0000\u0781\u0782\u0005\u0127"+
		"\u0000\u0000\u0782\u078f\u0003\u052c\u0296\u0000\u0783\u0784\u0005\u01b6"+
		"\u0000\u0000\u0784\u078f\u0005\u0127\u0000\u0000\u0785\u0786\u0003\u01ba"+
		"\u00dd\u0000\u0786\u0787\u0003\u0536\u029b\u0000\u0787\u078f\u0001\u0000"+
		"\u0000\u0000\u0788\u0789\u0004\u0013\u0002\u0000\u0789\u078a\u0005i\u0000"+
		"\u0000\u078a\u078f\u0003\u0580\u02c0\u0000\u078b\u078c\u0004\u0013\u0003"+
		"\u0000\u078c\u078d\u0005\u0081\u0000\u0000\u078d\u078f\u0003\u0580\u02c0"+
		"\u0000\u078e\u077a\u0001\u0000\u0000\u0000\u078e\u0780\u0001\u0000\u0000"+
		"\u0000\u078e\u0783\u0001\u0000\u0000\u0000\u078e\u0785\u0001\u0000\u0000"+
		"\u0000\u078e\u0788\u0001\u0000\u0000\u0000\u078e\u078b\u0001\u0000\u0000"+
		"\u0000\u078f\u07d9\u0001\u0000\u0000\u0000\u0790\u0791\u0005\u00b1\u0000"+
		"\u0000\u0791\u07d9\u0005\u0125\u0000\u0000\u0792\u0793\u0005\u00c0\u0000"+
		"\u0000\u0793\u07d9\u0005\u0125\u0000\u0000\u0794\u0796\u0005:\u0000\u0000"+
		"\u0795\u0797\u0005s\u0000\u0000\u0796\u0795\u0001\u0000\u0000\u0000\u0796"+
		"\u0797\u0001\u0000\u0000\u0000\u0797\u0798\u0001\u0000\u0000\u0000\u0798"+
		"\u07a5\u0003\u052c\u0296\u0000\u0799\u079a\u0005\u0207\u0000\u0000\u079a"+
		"\u079e\u0005\u00a6\u0000\u0000\u079b\u079c\u0004\u0013\u0004\u0000\u079c"+
		"\u079f\u0003\u03fc\u01fe\u0000\u079d\u079f\u0003\u0596\u02cb\u0000\u079e"+
		"\u079b\u0001\u0000\u0000\u0000\u079e\u079d\u0001\u0000\u0000\u0000\u079f"+
		"\u07a6\u0001\u0000\u0000\u0000\u07a0\u07a1\u0005\u00b8\u0000\u0000\u07a1"+
		"\u07a6\u0005\u00a6\u0000\u0000\u07a2\u07a3\u0004\u0013\u0005\u0000\u07a3"+
		"\u07a4\u0005\u0207\u0000\u0000\u07a4\u07a6\u0003\u0486\u0243\u0000\u07a5"+
		"\u0799\u0001\u0000\u0000\u0000\u07a5\u07a0\u0001\u0000\u0000\u0000\u07a5"+
		"\u07a2\u0001\u0000\u0000\u0000\u07a6\u07d9\u0001\u0000\u0000\u0000\u07a7"+
		"\u07a8\u0005:\u0000\u0000\u07a8\u07a9\u0005\u010c\u0000\u0000\u07a9\u07aa"+
		"\u0003\u0536\u029b\u0000\u07aa\u07ab\u0003\u0486\u0243\u0000\u07ab\u07d9"+
		"\u0001\u0000\u0000\u0000\u07ac\u07ad\u0004\u0013\u0006\u0000\u07ad\u07ae"+
		"\u0005:\u0000\u0000\u07ae\u07af\u0005i\u0000\u0000\u07af\u07b0\u0003\u0580"+
		"\u02c0\u0000\u07b0\u07b1\u0003\u0460\u0230\u0000\u07b1\u07d9\u0001\u0000"+
		"\u0000\u0000\u07b2\u07b3\u0004\u0013\u0007\u0000\u07b3\u07b4\u0005:\u0000"+
		"\u0000\u07b4\u07b5\u0005\u0081\u0000\u0000\u07b5\u07b6\u0003\u0580\u02c0"+
		"\u0000\u07b6\u07b7\u0003\u0460\u0230\u0000\u07b7\u07d9\u0001\u0000\u0000"+
		"\u0000\u07b8\u07b9\u0005\u01d6\u0000\u0000\u07b9\u07ba\u0005s\u0000\u0000"+
		"\u07ba\u07bb\u0003\u052c\u0296\u0000\u07bb\u07bc\u0005\u0257\u0000\u0000"+
		"\u07bc\u07bd\u0003\u0580\u02c0\u0000\u07bd\u07d9\u0001\u0000\u0000\u0000"+
		"\u07be\u07c0\u0005\u01d6\u0000\u0000\u07bf\u07c1\u0007\u0001\u0000\u0000"+
		"\u07c0\u07bf\u0001\u0000\u0000\u0000\u07c0\u07c1\u0001\u0000\u0000\u0000"+
		"\u07c1\u07c2\u0001\u0000\u0000\u0000\u07c2\u07d9\u0003\u0562\u02b1\u0000"+
		"\u07c3\u07c4\u0005\u01d6\u0000\u0000\u07c4\u07c5\u0003\u01ba\u00dd\u0000"+
		"\u07c5\u07c6\u0003\u0536\u029b\u0000\u07c6\u07c7\u0005\u0257\u0000\u0000"+
		"\u07c7\u07c8\u0003\u0534\u029a\u0000\u07c8\u07d9\u0001\u0000\u0000\u0000"+
		"\u07c9\u07ca\u0005\u0088\u0000\u0000\u07ca\u07cb\u0005\u0257\u0000\u0000"+
		"\u07cb\u07cf\u0003\u03f0\u01f8\u0000\u07cc\u07cd\u0004\u0013\b\u0000\u07cd"+
		"\u07d0\u0005\u00a6\u0000\u0000\u07ce\u07d0\u0003\u04a6\u0253\u0000\u07cf"+
		"\u07cc\u0001\u0000\u0000\u0000\u07cf\u07ce\u0001\u0000\u0000\u0000\u07d0"+
		"\u07d2\u0001\u0000\u0000\u0000\u07d1\u07d3\u0003\u04e2\u0271\u0000\u07d2"+
		"\u07d1\u0001\u0000\u0000\u0000\u07d2\u07d3\u0001\u0000\u0000\u0000\u07d3"+
		"\u07d9\u0001\u0000\u0000\u0000\u07d4\u07d9\u0005\u00e6\u0000\u0000\u07d5"+
		"\u07d6\u0005\u019b\u0000\u0000\u07d6\u07d7\u0005Y\u0000\u0000\u07d7\u07d9"+
		"\u0003,\u0016\u0000\u07d8\u0751\u0001\u0000\u0000\u0000\u07d8\u0763\u0001"+
		"\u0000\u0000\u0000\u07d8\u0765\u0001\u0000\u0000\u0000\u07d8\u076f\u0001"+
		"\u0000\u0000\u0000\u07d8\u0778\u0001\u0000\u0000\u0000\u07d8\u0790\u0001"+
		"\u0000\u0000\u0000\u07d8\u0792\u0001\u0000\u0000\u0000\u07d8\u0794\u0001"+
		"\u0000\u0000\u0000\u07d8\u07a7\u0001\u0000\u0000\u0000\u07d8\u07ac\u0001"+
		"\u0000\u0000\u0000\u07d8\u07b2\u0001\u0000\u0000\u0000\u07d8\u07b8\u0001"+
		"\u0000\u0000\u0000\u07d8\u07be\u0001\u0000\u0000\u0000\u07d8\u07c3\u0001"+
		"\u0000\u0000\u0000\u07d8\u07c9\u0001\u0000\u0000\u0000\u07d8\u07d4\u0001"+
		"\u0000\u0000\u0000\u07d8\u07d5\u0001\u0000\u0000\u0000\u07d9\'\u0001\u0000"+
		"\u0000\u0000\u07da\u07db\u00055\u0000\u0000\u07db\u07de\u0003\u0580\u02c0"+
		"\u0000\u07dc\u07de\u0005\u00e1\u0000\u0000\u07dd\u07da\u0001\u0000\u0000"+
		"\u0000\u07dd\u07dc\u0001\u0000\u0000\u0000\u07de)\u0001\u0000\u0000\u0000"+
		"\u07df\u07e0\u0007\u0002\u0000\u0000\u07e0+\u0001\u0000\u0000\u0000\u07e1"+
		"\u07e3\u0003\u0580\u02c0\u0000\u07e2\u07e4\u0003\u016c\u00b6\u0000\u07e3"+
		"\u07e2\u0001\u0000\u0000\u0000\u07e3\u07e4\u0001\u0000\u0000\u0000\u07e4"+
		"\u07ec\u0001\u0000\u0000\u0000\u07e5\u07e6\u0005\u001d\u0000\u0000\u07e6"+
		"\u07e8\u0003\u0580\u02c0\u0000\u07e7\u07e9\u0003\u016c\u00b6\u0000\u07e8"+
		"\u07e7\u0001\u0000\u0000\u0000\u07e8\u07e9\u0001\u0000\u0000\u0000\u07e9"+
		"\u07eb\u0001\u0000\u0000\u0000\u07ea\u07e5\u0001\u0000\u0000\u0000\u07eb"+
		"\u07ee\u0001\u0000\u0000\u0000\u07ec\u07ea\u0001\u0000\u0000\u0000\u07ec"+
		"\u07ed\u0001\u0000\u0000\u0000\u07ed-\u0001\u0000\u0000\u0000\u07ee\u07ec"+
		"\u0001\u0000\u0000\u0000\u07ef\u07f1\u00058\u0000\u0000\u07f0\u07f2\u0005"+
		"\u0006\u0000\u0000\u07f1\u07f0\u0001\u0000\u0000\u0000\u07f1\u07f2\u0001"+
		"\u0000\u0000\u0000\u07f2\u07f5\u0001\u0000\u0000\u0000\u07f3\u07f6\u0005"+
		"\u00a6\u0000\u0000\u07f4\u07f6\u0003\u0580\u02c0\u0000\u07f5\u07f3\u0001"+
		"\u0000\u0000\u0000\u07f5\u07f4\u0001\u0000\u0000\u0000\u07f6/\u0001\u0000"+
		"\u0000\u0000\u07f7\u07f9\u0005\u013a\u0000\u0000\u07f8\u07fa\u0005\u0006"+
		"\u0000\u0000\u07f9\u07f8\u0001\u0000\u0000\u0000\u07f9\u07fa\u0001\u0000"+
		"\u0000\u0000\u07fa\u07fd\u0001\u0000\u0000\u0000\u07fb\u07fe\u0005\u00a6"+
		"\u0000\u0000\u07fc\u07fe\u0003\u0580\u02c0\u0000\u07fd\u07fb\u0001\u0000"+
		"\u0000\u0000\u07fd\u07fc\u0001\u0000\u0000\u0000\u07fe1\u0001\u0000\u0000"+
		"\u0000\u07ff\u0801\u0003.\u0017\u0000\u0800\u0802\u00030\u0018\u0000\u0801"+
		"\u0800\u0001\u0000\u0000\u0000\u0801\u0802\u0001\u0000\u0000\u0000\u0802"+
		"\u0808\u0001\u0000\u0000\u0000\u0803\u0805\u00030\u0018\u0000\u0804\u0806"+
		"\u0003.\u0017\u0000\u0805\u0804\u0001\u0000\u0000\u0000\u0805\u0806\u0001"+
		"\u0000\u0000\u0000\u0806\u0808\u0001\u0000\u0000\u0000\u0807\u07ff\u0001"+
		"\u0000\u0000\u0000\u0807\u0803\u0001\u0000\u0000\u0000\u08083\u0001\u0000"+
		"\u0000\u0000\u0809\u080a\u0007\u0003\u0000\u0000\u080a\u080b\u0005\u027a"+
		"\u0000\u0000\u080b5\u0001\u0000\u0000\u0000\u080c\u080d\u0005\u01d5\u0000"+
		"\u0000\u080d\u080e\u0005\u01a5\u0000\u0000\u080e7\u0001\u0000\u0000\u0000"+
		"\u080f\u0812\u00059\u0000\u0000\u0810\u0812\u0003\u0582\u02c1\u0000\u0811"+
		"\u080f\u0001\u0000\u0000\u0000\u0811\u0810\u0001\u0000\u0000\u0000\u0812"+
		"9\u0001\u0000\u0000\u0000\u0813\u0814\u0005\u0246\u0000\u0000\u0814\u0820"+
		"\u0003\u0550\u02a8\u0000\u0815\u0816\u0007\u0004\u0000\u0000\u0816\u0817"+
		"\u0005\u0098\u0000\u0000\u0817\u0819\u0003\u05a6\u02d3\u0000\u0818\u081a"+
		"\u0003B!\u0000\u0819\u0818\u0001\u0000\u0000\u0000\u0819\u081a\u0001\u0000"+
		"\u0000\u0000\u081a\u0821\u0001\u0000\u0000\u0000\u081b\u081c\u0005\u01d6"+
		"\u0000\u0000\u081c\u081d\u0005\u0257\u0000\u0000\u081d\u0821\u0003\u0580"+
		"\u02c0\u0000\u081e\u081f\u0004\u001d\t\u0000\u081f\u0821\u0003B!\u0000"+
		"\u0820\u0815\u0001\u0000\u0000\u0000\u0820\u081b\u0001\u0000\u0000\u0000"+
		"\u0820\u081e\u0001\u0000\u0000\u0000\u0821;\u0001\u0000\u0000\u0000\u0822"+
		"\u0823\u0005\u0266\u0000\u0000\u0823\u0824\u0005\u0246\u0000\u0000\u0824"+
		"\u0825\u0003\u0550\u02a8\u0000\u0825\u0826\u0005\u0207\u0000\u0000\u0826"+
		"\u0828\u0007\u0005\u0000\u0000\u0827\u0829\u0003>\u001f\u0000\u0828\u0827"+
		"\u0001\u0000\u0000\u0000\u0828\u0829\u0001\u0000\u0000\u0000\u0829=\u0001"+
		"\u0000\u0000\u0000\u082a\u0831\u0003@ \u0000\u082b\u082d\u0005\u001d\u0000"+
		"\u0000\u082c\u082b\u0001\u0000\u0000\u0000\u082c\u082d\u0001\u0000\u0000"+
		"\u0000\u082d\u082e\u0001\u0000\u0000\u0000\u082e\u0830\u0003@ \u0000\u082f"+
		"\u082c\u0001\u0000\u0000\u0000\u0830\u0833\u0001\u0000\u0000\u0000\u0831"+
		"\u082f\u0001\u0000\u0000\u0000\u0831\u0832\u0001\u0000\u0000\u0000\u0832"+
		"?\u0001\u0000\u0000\u0000\u0833\u0831\u0001\u0000\u0000\u0000\u0834\u0835"+
		"\u0003\u00a2Q\u0000\u0835A\u0001\u0000\u0000\u0000\u0836\u083d\u0003D"+
		"\"\u0000\u0837\u0839\u0005\u001d\u0000\u0000\u0838\u0837\u0001\u0000\u0000"+
		"\u0000\u0838\u0839\u0001\u0000\u0000\u0000\u0839\u083a\u0001\u0000\u0000"+
		"\u0000\u083a\u083c\u0003D\"\u0000\u083b\u0838\u0001\u0000\u0000\u0000"+
		"\u083c\u083f\u0001\u0000\u0000\u0000\u083d\u083b\u0001\u0000\u0000\u0000"+
		"\u083d\u083e\u0001\u0000\u0000\u0000\u083eC\u0001\u0000\u0000\u0000\u083f"+
		"\u083d\u0001\u0000\u0000\u0000\u0840\u0842\u0005\u010e\u0000\u0000\u0841"+
		"\u0843\u0005\u0006\u0000\u0000\u0842\u0841\u0001\u0000\u0000\u0000\u0842"+
		"\u0843\u0001\u0000\u0000\u0000\u0843\u0844\u0001\u0000\u0000\u0000\u0844"+
		"\u084d\u0003\u05c2\u02e1\u0000\u0845\u084d\u0003\u009aM\u0000\u0846\u084d"+
		"\u0003\u009cN\u0000\u0847\u084d\u0003\u00a2Q\u0000\u0848\u084d\u0003\u00a4"+
		"R\u0000\u0849\u084d\u0003\u00aaU\u0000\u084a\u084b\u0004\"\n\u0000\u084b"+
		"\u084d\u0003\u00acV\u0000\u084c\u0840\u0001\u0000\u0000\u0000\u084c\u0845"+
		"\u0001\u0000\u0000\u0000\u084c\u0846\u0001\u0000\u0000\u0000\u084c\u0847"+
		"\u0001\u0000\u0000\u0000\u084c\u0848\u0001\u0000\u0000\u0000\u084c\u0849"+
		"\u0001\u0000\u0000\u0000\u084c\u084a\u0001\u0000\u0000\u0000\u084dE\u0001"+
		"\u0000\u0000\u0000\u084e\u0850\u0005\u010e\u0000\u0000\u084f\u0851\u0005"+
		"\u0006\u0000\u0000\u0850\u084f\u0001\u0000\u0000\u0000\u0850\u0851\u0001"+
		"\u0000\u0000\u0000\u0851\u0852\u0001\u0000\u0000\u0000\u0852\u0856\u0003"+
		"\u05c2\u02e1\u0000\u0853\u0856\u0003\u009aM\u0000\u0854\u0856\u0003\u009c"+
		"N\u0000\u0855\u084e\u0001\u0000\u0000\u0000\u0855\u0853\u0001\u0000\u0000"+
		"\u0000\u0855\u0854\u0001\u0000\u0000\u0000\u0856G\u0001\u0000\u0000\u0000"+
		"\u0857\u0859\u0003\u00b2Y\u0000\u0858\u0857\u0001\u0000\u0000\u0000\u0858"+
		"\u0859\u0001\u0000\u0000\u0000\u0859\u085b\u0001\u0000\u0000\u0000\u085a"+
		"\u085c\u0003\u04d2\u0269\u0000\u085b\u085a\u0001\u0000\u0000\u0000\u085b"+
		"\u085c\u0001\u0000\u0000\u0000\u085c\u085e\u0001\u0000\u0000\u0000\u085d"+
		"\u085f\u0003\u00b4Z\u0000\u085e\u085d\u0001\u0000\u0000\u0000\u085e\u085f"+
		"\u0001\u0000\u0000\u0000\u085f\u0860\u0001\u0000\u0000\u0000\u0860\u0861"+
		"\u0005\u0284\u0000\u0000\u0861\u0862\u0003\u054c\u02a6\u0000\u0862\u0863"+
		"\u0003J%\u0000\u0863I\u0001\u0000\u0000\u0000\u0864\u0866\u0003\u052e"+
		"\u0297\u0000\u0865\u0864\u0001\u0000\u0000\u0000\u0865\u0866\u0001\u0000"+
		"\u0000\u0000\u0866\u0867\u0001\u0000\u0000\u0000\u0867\u0868\u0005?\u0000"+
		"\u0000\u0868\u0869\u0003L&\u0000\u0869K\u0001\u0000\u0000\u0000\u086a"+
		"\u086c\u0003d2\u0000\u086b\u086d\u0003N\'\u0000\u086c\u086b\u0001\u0000"+
		"\u0000\u0000\u086c\u086d\u0001\u0000\u0000\u0000\u086dM\u0001\u0000\u0000"+
		"\u0000\u086e\u0870\u0005\u028d\u0000\u0000\u086f\u0871\u0007\u0006\u0000"+
		"\u0000\u0870\u086f\u0001\u0000\u0000\u0000\u0870\u0871\u0001\u0000\u0000"+
		"\u0000\u0871\u0872\u0001\u0000\u0000\u0000\u0872\u0873\u0005i\u0000\u0000"+
		"\u0873\u0874\u0005\u0199\u0000\u0000\u0874O\u0001\u0000\u0000\u0000\u0875"+
		"\u0876\u0005\u0114\u0000\u0000\u0876\u0877\u0005\u01f2\u0000\u0000\u0877"+
		"\u0878\u0003\u05bc\u02de\u0000\u0878\u0879\u0005\u0155\u0000\u0000\u0879"+
		"\u087a\u0005\u0127\u0000\u0000\u087a\u0896\u0001\u0000\u0000\u0000\u087b"+
		"\u0893\u0004(\u000b\u0000\u087c\u087d\u0005\u01d4\u0000\u0000\u087d\u088b"+
		"\u0005\u02f3\u0000\u0000\u087e\u087f\u0005\u0188\u0000\u0000\u087f\u0880"+
		"\u0005\u01f0\u0000\u0000\u0880\u0881\u0005\u0191\u0000\u0000\u0881\u088c"+
		"\u0005\u00c8\u0000\u0000\u0882\u0883\u0005\u00e8\u0000\u0000\u0883\u0884"+
		"\u0005e\u0000\u0000\u0884\u0889\u0003\u0580\u02c0\u0000\u0885\u0886\u0005"+
		"\u0188\u0000\u0000\u0886\u0887\u0005\u01f0\u0000\u0000\u0887\u0888\u0005"+
		"\u0191\u0000\u0000\u0888\u088a\u0005\u00c8\u0000\u0000\u0889\u0885\u0001"+
		"\u0000\u0000\u0000\u0889\u088a\u0001\u0000\u0000\u0000\u088a\u088c\u0001"+
		"\u0000\u0000\u0000\u088b\u087e\u0001\u0000\u0000\u0000\u088b\u0882\u0001"+
		"\u0000\u0000\u0000\u088c\u0894\u0001\u0000\u0000\u0000\u088d\u088e\u0007"+
		"\u0007\u0000\u0000\u088e\u088f\u0003\u0580\u02c0\u0000\u088f\u0890\u0003"+
		"\u0580\u02c0\u0000\u0890\u0894\u0001\u0000\u0000\u0000\u0891\u0892\u0005"+
		"\u01d4\u0000\u0000\u0892\u0894\u0005\u0319\u0000\u0000\u0893\u087c\u0001"+
		"\u0000\u0000\u0000\u0893\u088d\u0001\u0000\u0000\u0000\u0893\u0891\u0001"+
		"\u0000\u0000\u0000\u0894\u0896\u0001\u0000\u0000\u0000\u0895\u0875\u0001"+
		"\u0000\u0000\u0000\u0895\u087b\u0001\u0000\u0000\u0000\u0896Q\u0001\u0000"+
		"\u0000\u0000\u0897\u08a9\u0005\u008b\u0000\u0000\u0898\u08aa\u0003T*\u0000"+
		"\u0899\u08aa\u0003X,\u0000\u089a\u08aa\u0003n7\u0000\u089b\u08aa\u0003"+
		"h4\u0000\u089c\u08aa\u0003p8\u0000\u089d\u08aa\u0003~?\u0000\u089e\u08aa"+
		"\u0003\u00aeW\u0000\u089f\u08aa\u0003\u00b6[\u0000\u08a0\u08aa\u0003x"+
		"<\u0000\u08a1\u08aa\u0003\u0084B\u0000\u08a2\u08aa\u0003\u008aE\u0000"+
		"\u08a3\u08aa\u0003\u00ba]\u0000\u08a4\u08aa\u0003\u00bc^\u0000\u08a5\u08a6"+
		"\u0004)\f\u0000\u08a6\u08aa\u0003\u00be_\u0000\u08a7\u08a8\u0004)\r\u0000"+
		"\u08a8\u08aa\u0003\u008cF\u0000\u08a9\u0898\u0001\u0000\u0000\u0000\u08a9"+
		"\u0899\u0001\u0000\u0000\u0000\u08a9\u089a\u0001\u0000\u0000\u0000\u08a9"+
		"\u089b\u0001\u0000\u0000\u0000\u08a9\u089c\u0001\u0000\u0000\u0000\u08a9"+
		"\u089d\u0001\u0000\u0000\u0000\u08a9\u089e\u0001\u0000\u0000\u0000\u08a9"+
		"\u089f\u0001\u0000\u0000\u0000\u08a9\u08a0\u0001\u0000\u0000\u0000\u08a9"+
		"\u08a1\u0001\u0000\u0000\u0000\u08a9\u08a2\u0001\u0000\u0000\u0000\u08a9"+
		"\u08a3\u0001\u0000\u0000\u0000\u08a9\u08a4\u0001\u0000\u0000\u0000\u08a9"+
		"\u08a5\u0001\u0000\u0000\u0000\u08a9\u08a7\u0001\u0000\u0000\u0000\u08aa"+
		"S\u0001\u0000\u0000\u0000\u08ab\u08ad\u0005\u0096\u0000\u0000\u08ac\u08ae"+
		"\u0003\u04da\u026d\u0000\u08ad\u08ac\u0001\u0000\u0000\u0000\u08ad\u08ae"+
		"\u0001\u0000\u0000\u0000\u08ae\u08af\u0001\u0000\u0000\u0000\u08af\u08b3"+
		"\u0003\u053a\u029d\u0000\u08b0\u08b2\u0003V+\u0000\u08b1\u08b0\u0001\u0000"+
		"\u0000\u0000\u08b2\u08b5\u0001\u0000\u0000\u0000\u08b3\u08b1\u0001\u0000"+
		"\u0000\u0000\u08b3\u08b4\u0001\u0000\u0000\u0000\u08b4U\u0001\u0000\u0000"+
		"\u0000\u08b5\u08b3\u0001\u0000\u0000\u0000\u08b6\u08bb\u0003\u04ba\u025d"+
		"\u0000\u08b7\u08bb\u0003\u04b6\u025b\u0000\u08b8\u08b9\u0004+\u000e\u0000"+
		"\u08b9\u08bb\u0003\u04b8\u025c\u0000\u08ba\u08b6\u0001\u0000\u0000\u0000"+
		"\u08ba\u08b7\u0001\u0000\u0000\u0000\u08ba\u08b8\u0001\u0000\u0000\u0000"+
		"\u08bbW\u0001\u0000\u0000\u0000\u08bc\u08be\u0005\u024a\u0000\u0000\u08bd"+
		"\u08bc\u0001\u0000\u0000\u0000\u08bd\u08be\u0001\u0000\u0000\u0000\u08be"+
		"\u08bf\u0001\u0000\u0000\u0000\u08bf\u08c1\u0005\u0247\u0000\u0000\u08c0"+
		"\u08c2\u0003\u04da\u026d\u0000\u08c1\u08c0\u0001\u0000\u0000\u0000\u08c1"+
		"\u08c2\u0001\u0000\u0000\u0000\u08c2\u08c3\u0001\u0000\u0000\u0000\u08c3"+
		"\u08d4\u0003\u0562\u02b1\u0000\u08c4\u08c5\u0005 \u0000\u0000\u08c5\u08c6"+
		"\u0003Z-\u0000\u08c6\u08c7\u0005!\u0000\u0000\u08c7\u08c9\u0001\u0000"+
		"\u0000\u0000\u08c8\u08c4\u0001\u0000\u0000\u0000\u08c8\u08c9\u0001\u0000"+
		"\u0000\u0000\u08c9\u08cb\u0001\u0000\u0000\u0000\u08ca\u08cc\u0003\u04ac"+
		"\u0256\u0000\u08cb\u08ca\u0001\u0000\u0000\u0000\u08cb\u08cc\u0001\u0000"+
		"\u0000\u0000\u08cc\u08d5\u0001\u0000\u0000\u0000\u08cd\u08ce\u0005\u0131"+
		"\u0000\u0000\u08ce\u08d5\u0003\u0568\u02b4\u0000\u08cf\u08d0\u0005 \u0000"+
		"\u0000\u08d0\u08d1\u0005\u0131\u0000\u0000\u08d1\u08d2\u0003\u0568\u02b4"+
		"\u0000\u08d2\u08d3\u0005!\u0000\u0000\u08d3\u08d5\u0001\u0000\u0000\u0000"+
		"\u08d4\u08c8\u0001\u0000\u0000\u0000\u08d4\u08cd\u0001\u0000\u0000\u0000"+
		"\u08d4\u08cf\u0001\u0000\u0000\u0000\u08d5Y\u0001\u0000\u0000\u0000\u08d6"+
		"\u08db\u0003\\.\u0000\u08d7\u08d8\u0005\u001d\u0000\u0000\u08d8\u08da"+
		"\u0003\\.\u0000\u08d9\u08d7\u0001\u0000\u0000\u0000\u08da\u08dd\u0001"+
		"\u0000\u0000\u0000\u08db\u08d9\u0001\u0000\u0000\u0000\u08db\u08dc\u0001"+
		"\u0000\u0000\u0000\u08dc[\u0001\u0000\u0000\u0000\u08dd\u08db\u0001\u0000"+
		"\u0000\u0000\u08de\u08e1\u0003\u045a\u022d\u0000\u08df\u08e1\u0003\u0462"+
		"\u0231\u0000\u08e0\u08de\u0001\u0000\u0000\u0000\u08e0\u08df\u0001\u0000"+
		"\u0000\u0000\u08e1]\u0001\u0000\u0000\u0000\u08e2\u08e4\u0007\b\u0000"+
		"\u0000\u08e3\u08e2\u0001\u0000\u0000\u0000\u08e3\u08e4\u0001\u0000\u0000"+
		"\u0000\u08e4\u08e5\u0001\u0000\u0000\u0000\u08e5\u08e6\u0003`0\u0000\u08e6"+
		"_\u0001\u0000\u0000\u0000\u08e7\u08e9\u0005?\u0000\u0000\u08e8\u08e7\u0001"+
		"\u0000\u0000\u0000\u08e8\u08e9\u0001\u0000\u0000\u0000\u08e9\u08ea\u0001"+
		"\u0000\u0000\u0000\u08ea\u08eb\u0003d2\u0000\u08eba\u0001\u0000\u0000"+
		"\u0000\u08ec\u08ee\u0003\u012e\u0097\u0000\u08ed\u08ef\u0003\u017a\u00bd"+
		"\u0000\u08ee\u08ed\u0001\u0000\u0000\u0000\u08ee\u08ef\u0001\u0000\u0000"+
		"\u0000\u08ef\u08f2\u0001\u0000\u0000\u0000\u08f0\u08f2\u0003\u0132\u0099"+
		"\u0000\u08f1\u08ec\u0001\u0000\u0000\u0000\u08f1\u08f0\u0001\u0000\u0000"+
		"\u0000\u08f2c\u0001\u0000\u0000\u0000\u08f3\u08f5\u0003\u012e\u0097\u0000"+
		"\u08f4\u08f6\u0003\u017a\u00bd\u0000\u08f5\u08f4\u0001\u0000\u0000\u0000"+
		"\u08f5\u08f6\u0001\u0000\u0000\u0000\u08f6e\u0001\u0000\u0000\u0000\u08f7"+
		"\u08fb\u0005\u008b\u0000\u0000\u08f8\u08fc\u0003h4\u0000\u08f9\u08fc\u0003"+
		"n7\u0000\u08fa\u08fc\u0003p8\u0000\u08fb\u08f8\u0001\u0000\u0000\u0000"+
		"\u08fb\u08f9\u0001\u0000\u0000\u0000\u08fb\u08fa\u0001\u0000\u0000\u0000"+
		"\u08fc\u08fe\u0001\u0000\u0000\u0000\u08fd\u08ff\u0005\u001e\u0000\u0000"+
		"\u08fe\u08fd\u0001\u0000\u0000\u0000\u08fe\u08ff\u0001\u0000\u0000\u0000"+
		"\u08ff\u0900\u0001\u0000\u0000\u0000\u0900\u0901\u0005\u0000\u0000\u0001"+
		"\u0901g\u0001\u0000\u0000\u0000\u0902\u0904\u0003\u04d2\u0269\u0000\u0903"+
		"\u0902\u0001\u0000\u0000\u0000\u0903\u0904\u0001\u0000\u0000\u0000\u0904"+
		"\u0905\u0001\u0000\u0000\u0000\u0905\u0907\u0005\u01b8\u0000\u0000\u0906"+
		"\u0908\u0003\u04da\u026d\u0000\u0907\u0906\u0001\u0000\u0000\u0000\u0907"+
		"\u0908\u0001\u0000\u0000\u0000\u0908\u0909\u0001\u0000\u0000\u0000\u0909"+
		"\u090a\u0003\u053e\u029f\u0000\u090a\u0913\u0005 \u0000\u0000\u090b\u0910"+
		"\u0003\u04de\u026f\u0000\u090c\u090d\u0005\u001d\u0000\u0000\u090d\u090f"+
		"\u0003\u04de\u026f\u0000\u090e\u090c\u0001\u0000\u0000\u0000\u090f\u0912"+
		"\u0001\u0000\u0000\u0000\u0910\u090e\u0001\u0000\u0000\u0000\u0910\u0911"+
		"\u0001\u0000\u0000\u0000\u0911\u0914\u0001\u0000\u0000\u0000\u0912\u0910"+
		"\u0001\u0000\u0000\u0000\u0913\u090b\u0001\u0000\u0000\u0000\u0913\u0914"+
		"\u0001\u0000\u0000\u0000\u0914\u0915\u0001\u0000\u0000\u0000\u0915\u0919"+
		"\u0005!\u0000\u0000\u0916\u0918\u0003r9\u0000\u0917\u0916\u0001\u0000"+
		"\u0000\u0000\u0918\u091b\u0001\u0000\u0000\u0000\u0919\u0917\u0001\u0000"+
		"\u0000\u0000\u0919\u091a\u0001\u0000\u0000\u0000\u091a\u091c\u0001\u0000"+
		"\u0000\u0000\u091b\u0919\u0001\u0000\u0000\u0000\u091c\u091d\u0003l6\u0000"+
		"\u091di\u0001\u0000\u0000\u0000\u091e\u0921\u0003\u05a0\u02d0\u0000\u091f"+
		"\u0921\u0005\u0339\u0000\u0000\u0920\u091e\u0001\u0000\u0000\u0000\u0920"+
		"\u091f\u0001\u0000\u0000\u0000\u0921k\u0001\u0000\u0000\u0000\u0922\u0927"+
		"\u0003\u040a\u0205\u0000\u0923\u0924\u00046\u000f\u0000\u0924\u0925\u0005"+
		"?\u0000\u0000\u0925\u0927\u0003j5\u0000\u0926\u0922\u0001\u0000\u0000"+
		"\u0000\u0926\u0923\u0001\u0000\u0000\u0000\u0927m\u0001\u0000\u0000\u0000"+
		"\u0928\u092a\u0003\u04d2\u0269\u0000\u0929\u0928\u0001\u0000\u0000\u0000"+
		"\u0929\u092a\u0001\u0000\u0000\u0000\u092a\u092b\u0001\u0000\u0000\u0000"+
		"\u092b\u092d\u0005\u00ee\u0000\u0000\u092c\u092e\u0003\u04da\u026d\u0000"+
		"\u092d\u092c\u0001\u0000\u0000\u0000\u092d\u092e\u0001\u0000\u0000\u0000"+
		"\u092e\u092f\u0001\u0000\u0000\u0000\u092f\u0930\u0003\u0542\u02a1\u0000"+
		"\u0930\u0939\u0005 \u0000\u0000\u0931\u0936\u0003\u04e0\u0270\u0000\u0932"+
		"\u0933\u0005\u001d\u0000\u0000\u0933\u0935\u0003\u04e0\u0270\u0000\u0934"+
		"\u0932\u0001\u0000\u0000\u0000\u0935\u0938\u0001\u0000\u0000\u0000\u0936"+
		"\u0934\u0001\u0000\u0000\u0000\u0936\u0937\u0001\u0000\u0000\u0000\u0937"+
		"\u093a\u0001\u0000\u0000\u0000\u0938\u0936\u0001\u0000\u0000\u0000\u0939"+
		"\u0931\u0001\u0000\u0000\u0000\u0939\u093a\u0001\u0000\u0000\u0000\u093a"+
		"\u093b\u0001\u0000\u0000\u0000\u093b\u093c\u0005!\u0000\u0000\u093c\u093d"+
		"\u0005\u01eb\u0000\u0000\u093d\u0941\u0003\u04e4\u0272\u0000\u093e\u0940"+
		"\u0003r9\u0000\u093f\u093e\u0001\u0000\u0000\u0000\u0940\u0943\u0001\u0000"+
		"\u0000\u0000\u0941\u093f\u0001\u0000\u0000\u0000\u0941\u0942\u0001\u0000"+
		"\u0000\u0000\u0942\u0944\u0001\u0000\u0000\u0000\u0943\u0941\u0001\u0000"+
		"\u0000\u0000\u0944\u0945\u0003l6\u0000\u0945o\u0001\u0000\u0000\u0000"+
		"\u0946\u0948\u00057\u0000\u0000\u0947\u0946\u0001\u0000\u0000\u0000\u0947"+
		"\u0948\u0001\u0000\u0000\u0000\u0948\u0949\u0001\u0000\u0000\u0000\u0949"+
		"\u094b\u0005\u00ee\u0000\u0000\u094a\u094c\u0003\u04da\u026d\u0000\u094b"+
		"\u094a\u0001\u0000\u0000\u0000\u094b\u094c\u0001\u0000\u0000\u0000\u094c"+
		"\u094d\u0001\u0000\u0000\u0000\u094d\u094e\u0003\u055a\u02ad\u0000\u094e"+
		"\u094f\u0005\u01eb\u0000\u0000\u094f\u0950\u0007\t\u0000\u0000\u0950\u0951"+
		"\u0005\u0213\u0000\u0000\u0951\u0952\u0003\u05a6\u02d3\u0000\u0952q\u0001"+
		"\u0000\u0000\u0000\u0953\u0959\u0003v;\u0000\u0954\u0956\u0005\u0186\u0000"+
		"\u0000\u0955\u0954\u0001\u0000\u0000\u0000\u0955\u0956\u0001\u0000\u0000"+
		"\u0000\u0956\u0957\u0001\u0000\u0000\u0000\u0957\u0959\u0005\u00ae\u0000"+
		"\u0000\u0958\u0953\u0001\u0000\u0000\u0000\u0958\u0955\u0001\u0000\u0000"+
		"\u0000\u0959s\u0001\u0000\u0000\u0000\u095a\u095c\u0003r9\u0000\u095b"+
		"\u095a\u0001\u0000\u0000\u0000\u095c\u095d\u0001\u0000\u0000\u0000\u095d"+
		"\u095b\u0001\u0000\u0000\u0000\u095d\u095e\u0001\u0000\u0000\u0000\u095e"+
		"u\u0001\u0000\u0000\u0000\u095f\u0960\u0005v\u0000\u0000\u0960\u0975\u0003"+
		"\u05a6\u02d3\u0000\u0961\u0965\u0005\u0129\u0000\u0000\u0962\u0966\u0005"+
		"\u0223\u0000\u0000\u0963\u0964\u0004;\u0010\u0000\u0964\u0966\u0003\u0580"+
		"\u02c0\u0000\u0965\u0962\u0001\u0000\u0000\u0000\u0965\u0963\u0001\u0000"+
		"\u0000\u0000\u0966\u0975\u0001\u0000\u0000\u0000\u0967\u0968\u0005\u0188"+
		"\u0000\u0000\u0968\u0975\u0005\u0223\u0000\u0000\u0969\u096a\u0005\u0085"+
		"\u0000\u0000\u096a\u0975\u0005\u0223\u0000\u0000\u096b\u096c\u0005\u01c3"+
		"\u0000\u0000\u096c\u096d\u0005\u0223\u0000\u0000\u096d\u0975\u0005\u0099"+
		"\u0000\u0000\u096e\u096f\u0005\u0172\u0000\u0000\u096f\u0970\u0005\u0223"+
		"\u0000\u0000\u0970\u0975\u0005\u0099\u0000\u0000\u0971\u0972\u0005\u0223"+
		"\u0000\u0000\u0972\u0973\u0005\u01fe\u0000\u0000\u0973\u0975\u0007\n\u0000"+
		"\u0000\u0974\u095f\u0001\u0000\u0000\u0000\u0974\u0961\u0001\u0000\u0000"+
		"\u0000\u0974\u0967\u0001\u0000\u0000\u0000\u0974\u0969\u0001\u0000\u0000"+
		"\u0000\u0974\u096b\u0001\u0000\u0000\u0000\u0974\u096e\u0001\u0000\u0000"+
		"\u0000\u0974\u0971\u0001\u0000\u0000\u0000\u0975w\u0001\u0000\u0000\u0000"+
		"\u0976\u0978\u0003\u0522\u0291\u0000\u0977\u0976\u0001\u0000\u0000\u0000"+
		"\u0977\u0978\u0001\u0000\u0000\u0000\u0978\u099c\u0001\u0000\u0000\u0000"+
		"\u0979\u097b\u0005\u026a\u0000\u0000\u097a\u0979\u0001\u0000\u0000\u0000"+
		"\u097a\u097b\u0001\u0000\u0000\u0000\u097b\u097c\u0001\u0000\u0000\u0000"+
		"\u097c\u097d\u0005\u010c\u0000\u0000\u097d\u097f\u0003\u0534\u029a\u0000"+
		"\u097e\u0980\u0003\u0488\u0244\u0000\u097f\u097e\u0001\u0000\u0000\u0000"+
		"\u097f\u0980\u0001\u0000\u0000\u0000\u0980\u0981\u0001\u0000\u0000\u0000"+
		"\u0981\u0985\u0003|>\u0000\u0982\u0984\u0003\u0482\u0241\u0000\u0983\u0982"+
		"\u0001\u0000\u0000\u0000\u0984\u0987\u0001\u0000\u0000\u0000\u0985\u0983"+
		"\u0001\u0000\u0000\u0000\u0985\u0986\u0001\u0000\u0000\u0000\u0986\u099d"+
		"\u0001\u0000\u0000\u0000\u0987\u0985\u0001\u0000\u0000\u0000\u0988\u0989"+
		"\u0005\u00ed\u0000\u0000\u0989\u098a\u0005\u010c\u0000\u0000\u098a\u098b"+
		"\u0003\u0534\u029a\u0000\u098b\u098f\u0003|>\u0000\u098c\u098e\u0003\u048a"+
		"\u0245\u0000\u098d\u098c\u0001\u0000\u0000\u0000\u098e\u0991\u0001\u0000"+
		"\u0000\u0000\u098f\u098d\u0001\u0000\u0000\u0000\u098f\u0990\u0001\u0000"+
		"\u0000\u0000\u0990\u099d\u0001\u0000\u0000\u0000\u0991\u098f\u0001\u0000"+
		"\u0000\u0000\u0992\u0993\u0005\u0216\u0000\u0000\u0993\u0994\u0005\u010c"+
		"\u0000\u0000\u0994\u0995\u0003\u0534\u029a\u0000\u0995\u0999\u0003|>\u0000"+
		"\u0996\u0998\u0003\u048c\u0246\u0000\u0997\u0996\u0001\u0000\u0000\u0000"+
		"\u0998\u099b\u0001\u0000\u0000\u0000\u0999\u0997\u0001\u0000\u0000\u0000"+
		"\u0999\u099a\u0001\u0000\u0000\u0000\u099a\u099d\u0001\u0000\u0000\u0000"+
		"\u099b\u0999\u0001\u0000\u0000\u0000\u099c\u097a\u0001\u0000\u0000\u0000"+
		"\u099c\u0988\u0001\u0000\u0000\u0000\u099c\u0992\u0001\u0000\u0000\u0000"+
		"\u099d\u099f\u0001\u0000\u0000\u0000\u099e\u09a0\u00032\u0019\u0000\u099f"+
		"\u099e\u0001\u0000\u0000\u0000\u099f\u09a0\u0001\u0000\u0000\u0000\u09a0"+
		"y\u0001\u0000\u0000\u0000\u09a1\u09ac\u0003\u0534\u029a\u0000\u09a2\u09a4"+
		"\u0003\u0534\u029a\u0000\u09a3\u09a2\u0001\u0000\u0000\u0000\u09a3\u09a4"+
		"\u0001\u0000\u0000\u0000\u09a4\u09a5\u0001\u0000\u0000\u0000\u09a5\u09a6"+
		"\u0005\u0276\u0000\u0000\u09a6\u09ac\u0003\u0480\u0240\u0000\u09a7\u09a8"+
		"\u0003\u0534\u029a\u0000\u09a8\u09a9\u0005\u0260\u0000\u0000\u09a9\u09aa"+
		"\u0003\u0480\u0240\u0000\u09aa\u09ac\u0001\u0000\u0000\u0000\u09ab\u09a1"+
		"\u0001\u0000\u0000\u0000\u09ab\u09a3\u0001\u0000\u0000\u0000\u09ab\u09a7"+
		"\u0001\u0000\u0000\u0000\u09ac{\u0001\u0000\u0000\u0000\u09ad\u09ae\u0005"+
		"\u0191\u0000\u0000\u09ae\u09af\u0003\u0568\u02b4\u0000\u09af\u09b0\u0003"+
		"\u047c\u023e\u0000\u09b0}\u0001\u0000\u0000\u0000\u09b1\u09b2\u0005\u013b"+
		"\u0000\u0000\u09b2\u09b3\u0005\u00f9\u0000\u0000\u09b3\u09b4\u0003\u0552"+
		"\u02a9\u0000\u09b4\u09b5\u00053\u0000\u0000\u09b5\u09b6\u0005\u0264\u0000"+
		"\u0000\u09b6\u09b8\u0003\u05a6\u02d3\u0000\u09b7\u09b9\u0003\u0080@\u0000"+
		"\u09b8\u09b7\u0001\u0000\u0000\u0000\u09b8\u09b9\u0001\u0000\u0000\u0000"+
		"\u09b9\u007f\u0001\u0000\u0000\u0000\u09ba\u09c1\u0003\u0082A\u0000\u09bb"+
		"\u09bd\u0005\u001d\u0000\u0000\u09bc\u09bb\u0001\u0000\u0000\u0000\u09bc"+
		"\u09bd\u0001\u0000\u0000\u0000\u09bd\u09be\u0001\u0000\u0000\u0000\u09be"+
		"\u09c0\u0003\u0082A\u0000\u09bf\u09bc\u0001\u0000\u0000\u0000\u09c0\u09c3"+
		"\u0001\u0000\u0000\u0000\u09c1\u09bf\u0001\u0000\u0000\u0000\u09c1\u09c2"+
		"\u0001\u0000\u0000\u0000\u09c2\u0081\u0001\u0000\u0000\u0000\u09c3\u09c1"+
		"\u0001\u0000\u0000\u0000\u09c4\u09cb\u0003\u0096K\u0000\u09c5\u09cb\u0003"+
		"\u0098L\u0000\u09c6\u09cb\u0003\u00a0P\u0000\u09c7\u09cb\u0003\u00a2Q"+
		"\u0000\u09c8\u09cb\u0003\u00a4R\u0000\u09c9\u09cb\u0003\u00a6S\u0000\u09ca"+
		"\u09c4\u0001\u0000\u0000\u0000\u09ca\u09c5\u0001\u0000\u0000\u0000\u09ca"+
		"\u09c6\u0001\u0000\u0000\u0000\u09ca\u09c7\u0001\u0000\u0000\u0000\u09ca"+
		"\u09c8\u0001\u0000\u0000\u0000\u09ca\u09c9\u0001\u0000\u0000\u0000\u09cb"+
		"\u0083\u0001\u0000\u0000\u0000\u09cc\u09cd\u0005\u0205\u0000\u0000\u09cd"+
		"\u09ce\u0003\u055c\u02ae\u0000\u09ce\u09cf\u0005\u00e7\u0000\u0000\u09cf"+
		"\u09d0\u0005\u0099\u0000\u0000\u09d0\u09d1\u0005\u0290\u0000\u0000\u09d1"+
		"\u09d2\u0003\u05bc\u02de\u0000\u09d2\u09d3\u0003\u0086C\u0000\u09d3\u0085"+
		"\u0001\u0000\u0000\u0000\u09d4\u09d5\u0005\u0198\u0000\u0000\u09d5\u09d6"+
		"\u0005 \u0000\u0000\u09d6\u09db\u0003\u0088D\u0000\u09d7\u09d8\u0005\u001d"+
		"\u0000\u0000\u09d8\u09da\u0003\u0088D\u0000\u09d9\u09d7\u0001\u0000\u0000"+
		"\u0000\u09da\u09dd\u0001\u0000\u0000\u0000\u09db\u09d9\u0001\u0000\u0000"+
		"\u0000\u09db\u09dc\u0001\u0000\u0000\u0000\u09dc\u09de\u0001\u0000\u0000"+
		"\u0000\u09dd\u09db\u0001\u0000\u0000\u0000\u09de\u09df\u0005!\u0000\u0000"+
		"\u09df\u0087\u0001\u0000\u0000\u0000\u09e0\u09e1\u0005\u0100\u0000\u0000"+
		"\u09e1\u09ef\u0003\u05a6\u02d3\u0000\u09e2\u09e3\u0005\u0096\u0000\u0000"+
		"\u09e3\u09ef\u0003\u05a6\u02d3\u0000\u09e4\u09e5\u0005\u0273\u0000\u0000"+
		"\u09e5\u09ef\u0003\u05a6\u02d3\u0000\u09e6\u09e7\u0005\u01a8\u0000\u0000"+
		"\u09e7\u09ef\u0003\u05a6\u02d3\u0000\u09e8\u09e9\u0005\u0212\u0000\u0000"+
		"\u09e9\u09ef\u0003\u05a6\u02d3\u0000\u09ea\u09eb\u0005\u01a0\u0000\u0000"+
		"\u09eb\u09ef\u0003\u05a6\u02d3\u0000\u09ec\u09ed\u0005\u01af\u0000\u0000"+
		"\u09ed\u09ef\u0003\u058c\u02c6\u0000\u09ee\u09e0\u0001\u0000\u0000\u0000"+
		"\u09ee\u09e2\u0001\u0000\u0000\u0000\u09ee\u09e4\u0001\u0000\u0000\u0000"+
		"\u09ee\u09e6\u0001\u0000\u0000\u0000\u09ee\u09e8\u0001\u0000\u0000\u0000"+
		"\u09ee\u09ea\u0001\u0000\u0000\u0000\u09ee\u09ec\u0001\u0000\u0000\u0000"+
		"\u09ef\u0089\u0001\u0000\u0000\u0000\u09f0\u09f1\u0005\u0246\u0000\u0000"+
		"\u09f1\u09f2\u0003\u054e\u02a7\u0000\u09f2\u09f7\u0003\u008eG\u0000\u09f3"+
		"\u09f4\u0005\u0275\u0000\u0000\u09f4\u09f5\u0005\u013b\u0000\u0000\u09f5"+
		"\u09f6\u0005\u00f9\u0000\u0000\u09f6\u09f8\u0003\u0554\u02aa\u0000\u09f7"+
		"\u09f3\u0001\u0000\u0000\u0000\u09f7\u09f8\u0001\u0000\u0000\u0000\u09f8"+
		"\u09fa\u0001\u0000\u0000\u0000\u09f9\u09fb\u0003\u0092I\u0000\u09fa\u09f9"+
		"\u0001\u0000\u0000\u0000\u09fa\u09fb\u0001\u0000\u0000\u0000\u09fb\u008b"+
		"\u0001\u0000\u0000\u0000\u09fc\u09fd\u0005\u0266\u0000\u0000\u09fd\u09fe"+
		"\u0005\u0246\u0000\u0000\u09fe\u09ff\u0003\u054e\u02a7\u0000\u09ff\u0a00"+
		"\u00053\u0000\u0000\u0a00\u0a02\u0003\u0090H\u0000\u0a01\u0a03\u0003>"+
		"\u001f\u0000\u0a02\u0a01\u0001\u0000\u0000\u0000\u0a02\u0a03\u0001\u0000"+
		"\u0000\u0000\u0a03\u008d\u0001\u0000\u0000\u0000\u0a04\u0a05\u00053\u0000"+
		"\u0000\u0a05\u0a0c\u0003\u0090H\u0000\u0a06\u0a09\u0004G\u0011\u0000\u0a07"+
		"\u0a08\u00053\u0000\u0000\u0a08\u0a0a\u0003\u0090H\u0000\u0a09\u0a07\u0001"+
		"\u0000\u0000\u0000\u0a09\u0a0a\u0001\u0000\u0000\u0000\u0a0a\u0a0c\u0001"+
		"\u0000\u0000\u0000\u0a0b\u0a04\u0001\u0000\u0000\u0000\u0a0b\u0a06\u0001"+
		"\u0000\u0000\u0000\u0a0c\u008f\u0001\u0000\u0000\u0000\u0a0d\u0a0e\u0005"+
		"\u0098\u0000\u0000\u0a0e\u0a0f\u0003\u05a6\u02d3\u0000\u0a0f\u0091\u0001"+
		"\u0000\u0000\u0000\u0a10\u0a17\u0003\u0094J\u0000\u0a11\u0a13\u0005\u001d"+
		"\u0000\u0000\u0a12\u0a11\u0001\u0000\u0000\u0000\u0a12\u0a13\u0001\u0000"+
		"\u0000\u0000\u0a13\u0a14\u0001\u0000\u0000\u0000\u0a14\u0a16\u0003\u0094"+
		"J\u0000\u0a15\u0a12\u0001\u0000\u0000\u0000\u0a16\u0a19\u0001\u0000\u0000"+
		"\u0000\u0a17\u0a15\u0001\u0000\u0000\u0000\u0a17\u0a18\u0001\u0000\u0000"+
		"\u0000\u0a18\u0093\u0001\u0000\u0000\u0000\u0a19\u0a17\u0001\u0000\u0000"+
		"\u0000\u0a1a\u0a26\u0003\u0096K\u0000\u0a1b\u0a26\u0003\u009aM\u0000\u0a1c"+
		"\u0a26\u0003\u009cN\u0000\u0a1d\u0a26\u0003\u009eO\u0000\u0a1e\u0a26\u0003"+
		"\u00a0P\u0000\u0a1f\u0a26\u0003\u00a2Q\u0000\u0a20\u0a26\u0003\u00a4R"+
		"\u0000\u0a21\u0a26\u0003\u00a6S\u0000\u0a22\u0a26\u0003\u00a8T\u0000\u0a23"+
		"\u0a24\u0004J\u0012\u0000\u0a24\u0a26\u0003\u00aaU\u0000\u0a25\u0a1a\u0001"+
		"\u0000\u0000\u0000\u0a25\u0a1b\u0001\u0000\u0000\u0000\u0a25\u0a1c\u0001"+
		"\u0000\u0000\u0000\u0a25\u0a1d\u0001\u0000\u0000\u0000\u0a25\u0a1e\u0001"+
		"\u0000\u0000\u0000\u0a25\u0a1f\u0001\u0000\u0000\u0000\u0a25\u0a20\u0001"+
		"\u0000\u0000\u0000\u0a25\u0a21\u0001\u0000\u0000\u0000\u0a25\u0a22\u0001"+
		"\u0000\u0000\u0000\u0a25\u0a23\u0001\u0000\u0000\u0000\u0a26\u0095\u0001"+
		"\u0000\u0000\u0000\u0a27\u0a29\u0005\u010e\u0000\u0000\u0a28\u0a2a\u0005"+
		"\u0006\u0000\u0000\u0a29\u0a28\u0001\u0000\u0000\u0000\u0a29\u0a2a\u0001"+
		"\u0000\u0000\u0000\u0a2a\u0a2b\u0001\u0000\u0000\u0000\u0a2b\u0a2c\u0003"+
		"\u05c2\u02e1\u0000\u0a2c\u0097\u0001\u0000\u0000\u0000\u0a2d\u0a2f\u0007"+
		"\u000b\u0000\u0000\u0a2e\u0a30\u0005\u0006\u0000\u0000\u0a2f\u0a2e\u0001"+
		"\u0000\u0000\u0000\u0a2f\u0a30\u0001\u0000\u0000\u0000\u0a30\u0a31\u0001"+
		"\u0000\u0000\u0000\u0a31\u0a32\u0003\u05c2\u02e1\u0000\u0a32\u0099\u0001"+
		"\u0000\u0000\u0000\u0a33\u0a35\u0005D\u0000\u0000\u0a34\u0a36\u0005\u0006"+
		"\u0000\u0000\u0a35\u0a34\u0001\u0000\u0000\u0000\u0a35\u0a36\u0001\u0000"+
		"\u0000\u0000\u0a36\u0a37\u0001\u0000\u0000\u0000\u0a37\u0a38\u0003\u05c2"+
		"\u02e1\u0000\u0a38\u009b\u0001\u0000\u0000\u0000\u0a39\u0a3b\u0005\u015d"+
		"\u0000\u0000\u0a3a\u0a3c\u0005\u0006\u0000\u0000\u0a3b\u0a3a\u0001\u0000"+
		"\u0000\u0000\u0a3b\u0a3c\u0001\u0000\u0000\u0000\u0a3c\u0a3d\u0001\u0000"+
		"\u0000\u0000\u0a3d\u0a3e\u0003\u05c2\u02e1\u0000\u0a3e\u009d\u0001\u0000"+
		"\u0000\u0000\u0a3f\u0a41\u0005\u00d8\u0000\u0000\u0a40\u0a42\u0005\u0006"+
		"\u0000\u0000\u0a41\u0a40\u0001\u0000\u0000\u0000\u0a41\u0a42\u0001\u0000"+
		"\u0000\u0000\u0a42\u0a43\u0001\u0000\u0000\u0000\u0a43\u0a44\u0003\u05c2"+
		"\u02e1\u0000\u0a44\u009f\u0001\u0000\u0000\u0000\u0a45\u0a47\u0005\u0184"+
		"\u0000\u0000\u0a46\u0a48\u0005\u0006\u0000\u0000\u0a47\u0a46\u0001\u0000"+
		"\u0000\u0000\u0a47\u0a48\u0001\u0000\u0000\u0000\u0a48\u0a49\u0001\u0000"+
		"\u0000\u0000\u0a49\u0a4a\u0003\u058e\u02c7\u0000\u0a4a\u00a1\u0001\u0000"+
		"\u0000\u0000\u0a4b\u0a4d\u0005\u0233\u0000\u0000\u0a4c\u0a4b\u0001\u0000"+
		"\u0000\u0000\u0a4c\u0a4d\u0001\u0000\u0000\u0000\u0a4d\u0a4e\u0001\u0000"+
		"\u0000\u0000\u0a4e\u0a50\u0005\u00c6\u0000\u0000\u0a4f\u0a51\u0005\u0006"+
		"\u0000\u0000\u0a50\u0a4f\u0001\u0000\u0000\u0000\u0a50\u0a51\u0001\u0000"+
		"\u0000\u0000\u0a51\u0a52\u0001\u0000\u0000\u0000\u0a52\u0a53\u0003\u0560"+
		"\u02b0\u0000\u0a53\u00a3\u0001\u0000\u0000\u0000\u0a54\u0a55\u0007\f\u0000"+
		"\u0000\u0a55\u00a5\u0001\u0000\u0000\u0000\u0a56\u0a58\u0005v\u0000\u0000"+
		"\u0a57\u0a59\u0005\u0006\u0000\u0000\u0a58\u0a57\u0001\u0000\u0000\u0000"+
		"\u0a58\u0a59\u0001\u0000\u0000\u0000\u0a59\u0a5a\u0001\u0000\u0000\u0000"+
		"\u0a5a\u0a5b\u0003\u05a6\u02d3\u0000\u0a5b\u00a7\u0001\u0000\u0000\u0000"+
		"\u0a5c\u0a5e\u0005\u00df\u0000\u0000\u0a5d\u0a5f\u0005\u0006\u0000\u0000"+
		"\u0a5e\u0a5d\u0001\u0000\u0000\u0000\u0a5e\u0a5f\u0001\u0000\u0000\u0000"+
		"\u0a5f\u0a60\u0001\u0000\u0000\u0000\u0a60\u0a61\u0003\u05c2\u02e1\u0000"+
		"\u0a61\u00a9\u0001\u0000\u0000\u0000\u0a62\u0a64\u0005\u00c2\u0000\u0000"+
		"\u0a63\u0a65\u0005\u0006\u0000\u0000\u0a64\u0a63\u0001\u0000\u0000\u0000"+
		"\u0a64\u0a65\u0001\u0000\u0000\u0000\u0a65\u0a66\u0001\u0000\u0000\u0000"+
		"\u0a66\u0a67\u0003\u05a0\u02d0\u0000\u0a67\u00ab\u0001\u0000\u0000\u0000"+
		"\u0a68\u0a6a\u0005\u00c6\u0000\u0000\u0a69\u0a6b\u0005\u0006\u0000\u0000"+
		"\u0a6a\u0a69\u0001\u0000\u0000\u0000\u0a6a\u0a6b\u0001\u0000\u0000\u0000"+
		"\u0a6b\u0a6c\u0001\u0000\u0000\u0000\u0a6c\u0a6d\u0003\u05ce\u02e7\u0000"+
		"\u0a6d\u00ad\u0001\u0000\u0000\u0000\u0a6e\u0a70\u0003\u00b0X\u0000\u0a6f"+
		"\u0a6e\u0001\u0000\u0000\u0000\u0a6f\u0a70\u0001\u0000\u0000\u0000\u0a70"+
		"\u0a72\u0001\u0000\u0000\u0000\u0a71\u0a73\u0003\u04d2\u0269\u0000\u0a72"+
		"\u0a71\u0001\u0000\u0000\u0000\u0a72\u0a73\u0001\u0000\u0000\u0000\u0a73"+
		"\u0a75\u0001\u0000\u0000\u0000\u0a74\u0a76\u0003\u00b4Z\u0000\u0a75\u0a74"+
		"\u0001\u0000\u0000\u0000\u0a75\u0a76\u0001\u0000\u0000\u0000\u0a76\u0a77"+
		"\u0001\u0000\u0000\u0000\u0a77\u0a78\u0005\u0284\u0000\u0000\u0a78\u0a79"+
		"\u0003\u054a\u02a5\u0000\u0a79\u0a7a\u0003J%\u0000\u0a7a\u00af\u0001\u0000"+
		"\u0000\u0000\u0a7b\u0a7c\u0005\u019c\u0000\u0000\u0a7c\u0a7e\u0005\u01db"+
		"\u0000\u0000\u0a7d\u0a7f\u0003\u00b2Y\u0000\u0a7e\u0a7d\u0001\u0000\u0000"+
		"\u0000\u0a7e\u0a7f\u0001\u0000\u0000\u0000\u0a7f\u0a82\u0001\u0000\u0000"+
		"\u0000\u0a80\u0a82\u0003\u00b2Y\u0000\u0a81\u0a7b\u0001\u0000\u0000\u0000"+
		"\u0a81\u0a80\u0001\u0000\u0000\u0000\u0a82\u00b1\u0001\u0000\u0000\u0000"+
		"\u0a83\u0a84\u00058\u0000\u0000\u0a84\u0a85\u0005\u0006\u0000\u0000\u0a85"+
		"\u0a86\u0007\r\u0000\u0000\u0a86\u00b3\u0001\u0000\u0000\u0000\u0a87\u0a88"+
		"\u0005\u0223\u0000\u0000\u0a88\u0a89\u0005\u01fe\u0000\u0000\u0a89\u0a8a"+
		"\u0007\n\u0000\u0000\u0a8a\u00b5\u0001\u0000\u0000\u0000\u0a8b\u0a8d\u0003"+
		"\u04d2\u0269\u0000\u0a8c\u0a8b\u0001\u0000\u0000\u0000\u0a8c\u0a8d\u0001"+
		"\u0000\u0000\u0000\u0a8d\u0a8e\u0001\u0000\u0000\u0000\u0a8e\u0a90\u0005"+
		"\u025b\u0000\u0000\u0a8f\u0a91\u0003\u04da\u026d\u0000\u0a90\u0a8f\u0001"+
		"\u0000\u0000\u0000\u0a90\u0a91\u0001\u0000\u0000\u0000\u0a91\u0a92\u0001"+
		"\u0000\u0000\u0000\u0a92\u0a93\u0003\u0546\u02a3\u0000\u0a93\u0a94\u0007"+
		"\u000e\u0000\u0000\u0a94\u0a95\u0007\u000f\u0000\u0000\u0a95\u0a96\u0005"+
		"\u0191\u0000\u0000\u0a96\u0a97\u0003\u0568\u02b4\u0000\u0a97\u0a98\u0005"+
		"\u00e8\u0000\u0000\u0a98\u0a99\u0005\u00bd\u0000\u0000\u0a99\u0a9b\u0005"+
		"\u01f7\u0000\u0000\u0a9a\u0a9c\u0003\u00b8\\\u0000\u0a9b\u0a9a\u0001\u0000"+
		"\u0000\u0000\u0a9b\u0a9c\u0001\u0000\u0000\u0000\u0a9c\u0a9d\u0001\u0000"+
		"\u0000\u0000\u0a9d\u0a9e\u0003\u040a\u0205\u0000\u0a9e\u00b7\u0001\u0000"+
		"\u0000\u0000\u0a9f\u0aa0\u0007\u0010\u0000\u0000\u0aa0\u0aa1\u0003\u05bc"+
		"\u02de\u0000\u0aa1\u00b9\u0001\u0000\u0000\u0000\u0aa2\u0aa4\u0003\u04d2"+
		"\u0269\u0000\u0aa3\u0aa2\u0001\u0000\u0000\u0000\u0aa3\u0aa4\u0001\u0000"+
		"\u0000\u0000\u0aa4\u0aa5\u0001\u0000\u0000\u0000\u0aa5\u0aa7\u0005\u00cd"+
		"\u0000\u0000\u0aa6\u0aa8\u0003\u04da\u026d\u0000\u0aa7\u0aa6\u0001\u0000"+
		"\u0000\u0000\u0aa7\u0aa8\u0001\u0000\u0000\u0000\u0aa8\u0aa9\u0001\u0000"+
		"\u0000\u0000\u0aa9\u0aaa\u0003\u0556\u02ab\u0000\u0aaa\u0aab\u0005\u0191"+
		"\u0000\u0000\u0aab\u0aac\u0005\u01fa\u0000\u0000\u0aac\u0ab3\u0003\u0458"+
		"\u022c\u0000\u0aad\u0aae\u0005\u0191\u0000\u0000\u0aae\u0ab0\u0005z\u0000"+
		"\u0000\u0aaf\u0ab1\u0005\u0186\u0000\u0000\u0ab0\u0aaf\u0001\u0000\u0000"+
		"\u0000\u0ab0\u0ab1\u0001\u0000\u0000\u0000\u0ab1\u0ab2\u0001\u0000\u0000"+
		"\u0000\u0ab2\u0ab4\u0005\u01b4\u0000\u0000\u0ab3\u0aad\u0001\u0000\u0000"+
		"\u0000\u0ab3\u0ab4\u0001\u0000\u0000\u0000\u0ab4\u0abb\u0001\u0000\u0000"+
		"\u0000\u0ab5\u0abc\u0005\u00c0\u0000\u0000\u0ab6\u0ab9\u0005\u00b1\u0000"+
		"\u0000\u0ab7\u0ab8\u0005\u0191\u0000\u0000\u0ab8\u0aba\u0003\u025e\u012f"+
		"\u0000\u0ab9\u0ab7\u0001\u0000\u0000\u0000\u0ab9\u0aba\u0001\u0000\u0000"+
		"\u0000\u0aba\u0abc\u0001\u0000\u0000\u0000\u0abb\u0ab5\u0001\u0000\u0000"+
		"\u0000\u0abb\u0ab6\u0001\u0000\u0000\u0000\u0abb\u0abc\u0001\u0000\u0000"+
		"\u0000\u0abc\u0abf\u0001\u0000\u0000\u0000\u0abd\u0abe\u0005v\u0000\u0000"+
		"\u0abe\u0ac0\u0003\u05a6\u02d3\u0000\u0abf\u0abd\u0001\u0000\u0000\u0000"+
		"\u0abf\u0ac0\u0001\u0000\u0000\u0000\u0ac0\u0ac1\u0001\u0000\u0000\u0000"+
		"\u0ac1\u0ac2\u0005\u00b7\u0000\u0000\u0ac2\u0ac3\u0003\u040a\u0205\u0000"+
		"\u0ac3\u00bb\u0001\u0000\u0000\u0000\u0ac4\u0ac6\u0005\u029b\u0000\u0000"+
		"\u0ac5\u0ac7\u0003\u04da\u026d\u0000\u0ac6\u0ac5\u0001\u0000\u0000\u0000"+
		"\u0ac6\u0ac7\u0001\u0000\u0000\u0000\u0ac7\u0ac8\u0001\u0000\u0000\u0000"+
		"\u0ac8\u0ac9\u0003\u02ac\u0156\u0000\u0ac9\u00bd\u0001\u0000\u0000\u0000"+
		"\u0aca\u0acb\u0005\u019c\u0000\u0000\u0acb\u0acc\u0005\u01db\u0000\u0000"+
		"\u0acc\u0acd\u0005\u0216\u0000\u0000\u0acd\u0ace\u0005\u02d6\u0000\u0000"+
		"\u0ace\u0acf\u0005\u02ce\u0000\u0000\u0acf\u0ad3\u0003\u0592\u02c9\u0000"+
		"\u0ad0\u0ad2\u0003\u00c0`\u0000\u0ad1\u0ad0\u0001\u0000\u0000\u0000\u0ad2"+
		"\u0ad5\u0001\u0000\u0000\u0000\u0ad3\u0ad1\u0001\u0000\u0000\u0000\u0ad3"+
		"\u0ad4\u0001\u0000\u0000\u0000\u0ad4\u0ae4\u0001\u0000\u0000\u0000\u0ad5"+
		"\u0ad3\u0001\u0000\u0000\u0000\u0ad6\u0ad7\u0005\u0216\u0000\u0000\u0ad7"+
		"\u0ad8\u0005\u02d6\u0000\u0000\u0ad8\u0ada\u0005\u02ce\u0000\u0000\u0ad9"+
		"\u0adb\u0003\u04da\u026d\u0000\u0ada\u0ad9\u0001\u0000\u0000\u0000\u0ada"+
		"\u0adb\u0001\u0000\u0000\u0000\u0adb\u0adc\u0001\u0000\u0000\u0000\u0adc"+
		"\u0ae0\u0003\u0592\u02c9\u0000\u0add\u0adf\u0003\u00c0`\u0000\u0ade\u0add"+
		"\u0001\u0000\u0000\u0000\u0adf\u0ae2\u0001\u0000\u0000\u0000\u0ae0\u0ade"+
		"\u0001\u0000\u0000\u0000\u0ae0\u0ae1\u0001\u0000\u0000\u0000\u0ae1\u0ae4"+
		"\u0001\u0000\u0000\u0000\u0ae2\u0ae0\u0001\u0000\u0000\u0000\u0ae3\u0aca"+
		"\u0001\u0000\u0000\u0000\u0ae3\u0ad6\u0001\u0000\u0000\u0000\u0ae4\u00bf"+
		"\u0001\u0000\u0000\u0000\u0ae5\u0ae6\u0005\u017c\u0000\u0000\u0ae6\u0ae7"+
		"\u0005\u024d\u0000\u0000\u0ae7\u0af5\u0003\u05a8\u02d4\u0000\u0ae8\u0ae9"+
		"\u0005\u02d3\u0000\u0000\u0ae9\u0aea\u0005\u024d\u0000\u0000\u0aea\u0af5"+
		"\u0003\u05a8\u02d4\u0000\u0aeb\u0aec\u0005\u02d5\u0000\u0000\u0aec\u0aed"+
		"\u0003\u05a8\u02d4\u0000\u0aed\u0aee\u0005\u0106\u0000\u0000\u0aee\u0aef"+
		"\u0005Y\u0000\u0000\u0aef\u0af0\u0003\u0592\u02c9\u0000\u0af0\u0af5\u0001"+
		"\u0000\u0000\u0000\u0af1\u0af2\u0005\u02d4\u0000\u0000\u0af2\u0af3\u0005"+
		"\u024d\u0000\u0000\u0af3\u0af5\u0003\u05a8\u02d4\u0000\u0af4\u0ae5\u0001"+
		"\u0000\u0000\u0000\u0af4\u0ae8\u0001\u0000\u0000\u0000\u0af4\u0aeb\u0001"+
		"\u0000\u0000\u0000\u0af4\u0af1\u0001\u0000\u0000\u0000\u0af5\u00c1\u0001"+
		"\u0000\u0000\u0000\u0af6\u0b07\u0005\u00b8\u0000\u0000\u0af7\u0b08\u0003"+
		"\u00c4b\u0000\u0af8\u0b08\u0003\u00c6c\u0000\u0af9\u0b08\u0003\u00c8d"+
		"\u0000\u0afa\u0b08\u0003\u00cae\u0000\u0afb\u0b08\u0003\u00ccf\u0000\u0afc"+
		"\u0b08\u0003\u00ceg\u0000\u0afd\u0b08\u0003\u00d2i\u0000\u0afe\u0b08\u0003"+
		"\u00d4j\u0000\u0aff\u0b08\u0003\u00d6k\u0000\u0b00\u0b08\u0003\u00d8l"+
		"\u0000\u0b01\u0b08\u0003\u00dam\u0000\u0b02\u0b08\u0003\u00dcn\u0000\u0b03"+
		"\u0b04\u0004a\u0013\u0000\u0b04\u0b08\u0003\u00deo\u0000\u0b05\u0b06\u0004"+
		"a\u0014\u0000\u0b06\u0b08\u0003\u00e0p\u0000\u0b07\u0af7\u0001\u0000\u0000"+
		"\u0000\u0b07\u0af8\u0001\u0000\u0000\u0000\u0b07\u0af9\u0001\u0000\u0000"+
		"\u0000\u0b07\u0afa\u0001\u0000\u0000\u0000\u0b07\u0afb\u0001\u0000\u0000"+
		"\u0000\u0b07\u0afc\u0001\u0000\u0000\u0000\u0b07\u0afd\u0001\u0000\u0000"+
		"\u0000\u0b07\u0afe\u0001\u0000\u0000\u0000\u0b07\u0aff\u0001\u0000\u0000"+
		"\u0000\u0b07\u0b00\u0001\u0000\u0000\u0000\u0b07\u0b01\u0001\u0000\u0000"+
		"\u0000\u0b07\u0b02\u0001\u0000\u0000\u0000\u0b07\u0b03\u0001\u0000\u0000"+
		"\u0000\u0b07\u0b05\u0001\u0000\u0000\u0000\u0b08\u00c3\u0001\u0000\u0000"+
		"\u0000\u0b09\u0b0b\u0005\u0096\u0000\u0000\u0b0a\u0b0c\u0003\u04d4\u026a"+
		"\u0000\u0b0b\u0b0a\u0001\u0000\u0000\u0000\u0b0b\u0b0c\u0001\u0000\u0000"+
		"\u0000\u0b0c\u0b0d\u0001\u0000\u0000\u0000\u0b0d\u0b0e\u0003\u053c\u029e"+
		"\u0000\u0b0e\u00c5\u0001\u0000\u0000\u0000\u0b0f\u0b11\u0005\u00cd\u0000"+
		"\u0000\u0b10\u0b12\u0003\u04d4\u026a\u0000\u0b11\u0b10\u0001\u0000\u0000"+
		"\u0000\u0b11\u0b12\u0001\u0000\u0000\u0000\u0b12\u0b13\u0001\u0000\u0000"+
		"\u0000\u0b13\u0b14\u0003\u0558\u02ac\u0000\u0b14\u00c7\u0001\u0000\u0000"+
		"\u0000\u0b15\u0b17\u0005\u00ee\u0000\u0000\u0b16\u0b18\u0003\u04d4\u026a"+
		"\u0000\u0b17\u0b16\u0001\u0000\u0000\u0000\u0b17\u0b18\u0001\u0000\u0000"+
		"\u0000\u0b18\u0b19\u0001\u0000\u0000\u0000\u0b19\u0b1a\u0003\u0544\u02a2"+
		"\u0000\u0b1a\u00c9\u0001\u0000\u0000\u0000\u0b1b\u0b1d\u0005\u01b8\u0000"+
		"\u0000\u0b1c\u0b1e\u0003\u04d4\u026a\u0000\u0b1d\u0b1c\u0001\u0000\u0000"+
		"\u0000\u0b1d\u0b1e\u0001\u0000\u0000\u0000\u0b1e\u0b1f\u0001\u0000\u0000"+
		"\u0000\u0b1f\u0b20\u0003\u0540\u02a0\u0000\u0b20\u00cb\u0001\u0000\u0000"+
		"\u0000\u0b21\u0b23\u0003\u0522\u0291\u0000\u0b22\u0b21\u0001\u0000\u0000"+
		"\u0000\u0b22\u0b23\u0001\u0000\u0000\u0000\u0b23\u0b24\u0001\u0000\u0000"+
		"\u0000\u0b24\u0b25\u0005\u010c\u0000\u0000\u0b25\u0b26\u0003\u0536\u029b"+
		"\u0000\u0b26\u0b27\u0005\u0191\u0000\u0000\u0b27\u0b29\u0003\u0568\u02b4"+
		"\u0000\u0b28\u0b2a\u00032\u0019\u0000\u0b29\u0b28\u0001\u0000\u0000\u0000"+
		"\u0b29\u0b2a\u0001\u0000\u0000\u0000\u0b2a\u00cd\u0001\u0000\u0000\u0000"+
		"\u0b2b\u0b2c\u0005\u013b\u0000\u0000\u0b2c\u0b2d\u0005\u00f9\u0000\u0000"+
		"\u0b2d\u0b38\u0003\u0554\u02aa\u0000\u0b2e\u0b35\u0003\u00d0h\u0000\u0b2f"+
		"\u0b31\u0005\u001d\u0000\u0000\u0b30\u0b2f\u0001\u0000\u0000\u0000\u0b30"+
		"\u0b31\u0001\u0000\u0000\u0000\u0b31\u0b32\u0001\u0000\u0000\u0000\u0b32"+
		"\u0b34\u0003\u00d0h\u0000\u0b33\u0b30\u0001\u0000\u0000\u0000\u0b34\u0b37"+
		"\u0001\u0000\u0000\u0000\u0b35\u0b33\u0001\u0000\u0000\u0000\u0b35\u0b36"+
		"\u0001\u0000\u0000\u0000\u0b36\u0b39\u0001\u0000\u0000\u0000\u0b37\u0b35"+
		"\u0001\u0000\u0000\u0000\u0b38\u0b2e\u0001\u0000\u0000\u0000\u0b38\u0b39"+
		"\u0001\u0000\u0000\u0000\u0b39\u00cf\u0001\u0000\u0000\u0000\u0b3a\u0b3d"+
		"\u0003\u00a4R\u0000\u0b3b\u0b3d\u0003\u00a2Q\u0000\u0b3c\u0b3a\u0001\u0000"+
		"\u0000\u0000\u0b3c\u0b3b\u0001\u0000\u0000\u0000\u0b3d\u00d1\u0001\u0000"+
		"\u0000\u0000\u0b3e\u0b40\u0005\u0205\u0000\u0000\u0b3f\u0b41\u0003\u04d4"+
		"\u026a\u0000\u0b40\u0b3f\u0001\u0000\u0000\u0000\u0b40\u0b41\u0001\u0000"+
		"\u0000\u0000\u0b41\u0b42\u0001\u0000\u0000\u0000\u0b42\u0b43\u0003\u055e"+
		"\u02af\u0000\u0b43\u00d3\u0001\u0000\u0000\u0000\u0b44\u0b46\u0005\u024a"+
		"\u0000\u0000\u0b45\u0b44\u0001\u0000\u0000\u0000\u0b45\u0b46\u0001\u0000"+
		"\u0000\u0000\u0b46\u0b47\u0001\u0000\u0000\u0000\u0b47\u0b49\u0007\u0011"+
		"\u0000\u0000\u0b48\u0b4a\u0003\u04d4\u026a\u0000\u0b49\u0b48\u0001\u0000"+
		"\u0000\u0000\u0b49\u0b4a\u0001\u0000\u0000\u0000\u0b4a\u0b4b\u0001\u0000"+
		"\u0000\u0000\u0b4b\u0b4d\u0003\u056a\u02b5\u0000\u0b4c\u0b4e\u0007\u0002"+
		"\u0000\u0000\u0b4d\u0b4c\u0001\u0000\u0000\u0000\u0b4d\u0b4e\u0001\u0000"+
		"\u0000\u0000\u0b4e\u00d5\u0001\u0000\u0000\u0000\u0b4f\u0b50\u0005\u0246"+
		"\u0000\u0000\u0b50\u0b5b\u0003\u0550\u02a8\u0000\u0b51\u0b58\u0003\u00d0"+
		"h\u0000\u0b52\u0b54\u0005\u001d\u0000\u0000\u0b53\u0b52\u0001\u0000\u0000"+
		"\u0000\u0b53\u0b54\u0001\u0000\u0000\u0000\u0b54\u0b55\u0001\u0000\u0000"+
		"\u0000\u0b55\u0b57\u0003\u00d0h\u0000\u0b56\u0b53\u0001\u0000\u0000\u0000"+
		"\u0b57\u0b5a\u0001\u0000\u0000\u0000\u0b58\u0b56\u0001\u0000\u0000\u0000"+
		"\u0b58\u0b59\u0001\u0000\u0000\u0000\u0b59\u0b5c\u0001\u0000\u0000\u0000"+
		"\u0b5a\u0b58\u0001\u0000\u0000\u0000\u0b5b\u0b51\u0001\u0000\u0000\u0000"+
		"\u0b5b\u0b5c\u0001\u0000\u0000\u0000\u0b5c\u00d7\u0001\u0000\u0000\u0000"+
		"\u0b5d\u0b5f\u0005\u025b\u0000\u0000\u0b5e\u0b60\u0003\u04d4\u026a\u0000"+
		"\u0b5f\u0b5e\u0001\u0000\u0000\u0000\u0b5f\u0b60\u0001\u0000\u0000\u0000"+
		"\u0b60\u0b61\u0001\u0000\u0000\u0000\u0b61\u0b62\u0003\u0548\u02a4\u0000"+
		"\u0b62\u00d9\u0001\u0000\u0000\u0000\u0b63\u0b65\u0005\u0284\u0000\u0000"+
		"\u0b64\u0b66\u0003\u04d4\u026a\u0000\u0b65\u0b64\u0001\u0000\u0000\u0000"+
		"\u0b65\u0b66\u0001\u0000\u0000\u0000\u0b66\u0b67\u0001\u0000\u0000\u0000"+
		"\u0b67\u0b69\u0003\u04e8\u0274\u0000\u0b68\u0b6a\u0007\u0002\u0000\u0000"+
		"\u0b69\u0b68\u0001\u0000\u0000\u0000\u0b69\u0b6a\u0001\u0000\u0000\u0000"+
		"\u0b6a\u00db\u0001\u0000\u0000\u0000\u0b6b\u0b6d\u0005\u029b\u0000\u0000"+
		"\u0b6c\u0b6e\u0003\u04d4\u026a\u0000\u0b6d\u0b6c\u0001\u0000\u0000\u0000"+
		"\u0b6d\u0b6e\u0001\u0000\u0000\u0000\u0b6e\u0b6f\u0001\u0000\u0000\u0000"+
		"\u0b6f\u0b70\u0003\u02ac\u0156\u0000\u0b70\u00dd\u0001\u0000\u0000\u0000"+
		"\u0b71\u0b72\u0005\u0216\u0000\u0000\u0b72\u0b73\u0005\u02d6\u0000\u0000"+
		"\u0b73\u0b75\u0005\u02ce\u0000\u0000\u0b74\u0b76\u0003\u04d4\u026a\u0000"+
		"\u0b75\u0b74\u0001\u0000\u0000\u0000\u0b75\u0b76\u0001\u0000\u0000\u0000"+
		"\u0b76\u0b77\u0001\u0000\u0000\u0000\u0b77\u0b78\u0003\u0592\u02c9\u0000"+
		"\u0b78\u00df\u0001\u0000\u0000\u0000\u0b79\u0b7a\u0005\u0266\u0000\u0000"+
		"\u0b7a\u0b7b\u0005\u0246\u0000\u0000\u0b7b\u0b7d\u0003\u0550\u02a8\u0000"+
		"\u0b7c\u0b7e\u0003>\u001f\u0000\u0b7d\u0b7c\u0001\u0000\u0000\u0000\u0b7d"+
		"\u0b7e\u0001\u0000\u0000\u0000\u0b7e\u00e1\u0001\u0000\u0000\u0000\u0b7f"+
		"\u0b80\u0005\u01d6\u0000\u0000\u0b80\u0b81\u0007\u0011\u0000\u0000\u0b81"+
		"\u0b86\u0003\u00e4r\u0000\u0b82\u0b83\u0005\u001d\u0000\u0000\u0b83\u0b85"+
		"\u0003\u00e4r\u0000\u0b84\u0b82\u0001\u0000\u0000\u0000\u0b85\u0b88\u0001"+
		"\u0000\u0000\u0000\u0b86\u0b84\u0001\u0000\u0000\u0000\u0b86\u0b87\u0001"+
		"\u0000\u0000\u0000\u0b87\u00e3\u0001\u0000\u0000\u0000\u0b88\u0b86\u0001"+
		"\u0000\u0000\u0000\u0b89\u0b8a\u0003\u0568\u02b4\u0000\u0b8a\u0b8b\u0005"+
		"\u0257\u0000\u0000\u0b8b\u0b8c\u0003\u0562\u02b1\u0000\u0b8c\u00e5\u0001"+
		"\u0000\u0000\u0000\u0b8d\u0b8f\u0005\u025e\u0000\u0000\u0b8e\u0b90\u0005"+
		"\u0247\u0000\u0000\u0b8f\u0b8e\u0001\u0000\u0000\u0000\u0b8f\u0b90\u0001"+
		"\u0000\u0000\u0000\u0b90\u0b91\u0001\u0000\u0000\u0000\u0b91\u0b92\u0003"+
		"\u0568\u02b4\u0000\u0b92\u00e7\u0001\u0000\u0000\u0000\u0b93\u0b94\u0005"+
		"\u010a\u0000\u0000\u0b94\u0b95\u0005\u0247\u0000\u0000\u0b95\u0b96\u0005"+
		"\u00eb\u0000\u0000\u0b96\u0b97\u0003\u05aa\u02d5\u0000\u0b97\u00e9\u0001"+
		"\u0000\u0000\u0000\u0b98\u0b99\u0005\\\u0000\u0000\u0b99\u0b9f\u0003\u0540"+
		"\u02a0\u0000\u0b9a\u0b9c\u0005 \u0000\u0000\u0b9b\u0b9d\u0003\u03ee\u01f7"+
		"\u0000\u0b9c\u0b9b\u0001\u0000\u0000\u0000\u0b9c\u0b9d\u0001\u0000\u0000"+
		"\u0000\u0b9d\u0b9e\u0001\u0000\u0000\u0000\u0b9e\u0ba0\u0005!\u0000\u0000"+
		"\u0b9f\u0b9a\u0001\u0000\u0000\u0000\u0b9f\u0ba0\u0001\u0000\u0000\u0000"+
		"\u0ba0\u00eb\u0001\u0000\u0000\u0000\u0ba1\u0ba3\u0003\u0162\u00b1\u0000"+
		"\u0ba2\u0ba1\u0001\u0000\u0000\u0000\u0ba2\u0ba3\u0001\u0000\u0000\u0000"+
		"\u0ba3\u0ba4\u0001\u0000\u0000\u0000\u0ba4\u0ba8\u0005\u00ab\u0000\u0000"+
		"\u0ba5\u0ba7\u0003\u00f0x\u0000\u0ba6\u0ba5\u0001\u0000\u0000\u0000\u0ba7"+
		"\u0baa\u0001\u0000\u0000\u0000\u0ba8\u0ba6\u0001\u0000\u0000\u0000\u0ba8"+
		"\u0ba9\u0001\u0000\u0000\u0000\u0ba9\u0bcb\u0001\u0000\u0000\u0000\u0baa"+
		"\u0ba8\u0001\u0000\u0000\u0000\u0bab\u0bc3\u0005\u00eb\u0000\u0000\u0bac"+
		"\u0bad\u0003\u056c\u02b6\u0000\u0bad\u0bae\u0005\u0276\u0000\u0000\u0bae"+
		"\u0bb0\u0003\u0170\u00b8\u0000\u0baf\u0bb1\u0003\u0188\u00c4\u0000\u0bb0"+
		"\u0baf\u0001\u0000\u0000\u0000\u0bb0\u0bb1\u0001\u0000\u0000\u0000\u0bb1"+
		"\u0bc4\u0001\u0000\u0000\u0000\u0bb2\u0bb5\u0003\u0568\u02b4\u0000\u0bb3"+
		"\u0bb4\u0004v\u0015\u0000\u0bb4\u0bb6\u0003\u01b2\u00d9\u0000\u0bb5\u0bb3"+
		"\u0001\u0000\u0000\u0000\u0bb5\u0bb6\u0001\u0000\u0000\u0000\u0bb6\u0bb8"+
		"\u0001\u0000\u0000\u0000\u0bb7\u0bb9\u0003\u00eew\u0000\u0bb8\u0bb7\u0001"+
		"\u0000\u0000\u0000\u0bb8\u0bb9\u0001\u0000\u0000\u0000\u0bb9\u0bbb\u0001"+
		"\u0000\u0000\u0000\u0bba\u0bbc\u0003\u0188\u00c4\u0000\u0bbb\u0bba\u0001"+
		"\u0000\u0000\u0000\u0bbb\u0bbc\u0001\u0000\u0000\u0000\u0bbc\u0bbe\u0001"+
		"\u0000\u0000\u0000\u0bbd\u0bbf\u0003\u016a\u00b5\u0000\u0bbe\u0bbd\u0001"+
		"\u0000\u0000\u0000\u0bbe\u0bbf\u0001\u0000\u0000\u0000\u0bbf\u0bc1\u0001"+
		"\u0000\u0000\u0000\u0bc0\u0bc2\u0003\u013e\u009f\u0000\u0bc1\u0bc0\u0001"+
		"\u0000\u0000\u0000\u0bc1\u0bc2\u0001\u0000\u0000\u0000\u0bc2\u0bc4\u0001"+
		"\u0000\u0000\u0000\u0bc3\u0bac\u0001\u0000\u0000\u0000\u0bc3\u0bb2\u0001"+
		"\u0000\u0000\u0000\u0bc4\u0bcc\u0001\u0000\u0000\u0000\u0bc5\u0bc6\u0003"+
		"\u056c\u02b6\u0000\u0bc6\u0bc7\u0005\u00eb\u0000\u0000\u0bc7\u0bc9\u0003"+
		"\u0170\u00b8\u0000\u0bc8\u0bca\u0003\u0188\u00c4\u0000\u0bc9\u0bc8\u0001"+
		"\u0000\u0000\u0000\u0bc9\u0bca\u0001\u0000\u0000\u0000\u0bca\u0bcc\u0001"+
		"\u0000\u0000\u0000\u0bcb\u0bab\u0001\u0000\u0000\u0000\u0bcb\u0bc5\u0001"+
		"\u0000\u0000\u0000\u0bcc\u00ed\u0001\u0000\u0000\u0000\u0bcd\u0bce\u0005"+
		"\u01a7\u0000\u0000\u0bce\u0bcf\u0005 \u0000\u0000\u0bcf\u0bd0\u0003\u0582"+
		"\u02c1\u0000\u0bd0\u0bd1\u0005!\u0000\u0000\u0bd1\u00ef\u0001\u0000\u0000"+
		"\u0000\u0bd2\u0bd3\u0007\u0012\u0000\u0000\u0bd3\u00f1\u0001\u0000\u0000"+
		"\u0000\u0bd4\u0bd5\u0005\u00b7\u0000\u0000\u0bd5\u0bd6\u0003\u0182\u00c1"+
		"\u0000\u0bd6\u00f3\u0001\u0000\u0000\u0000\u0bd7\u0be9\u0005\u00fb\u0000"+
		"\u0000\u0bd8\u0bd9\u0003\u0568\u02b4\u0000\u0bd9\u0bdb\u0005\u0195\u0000"+
		"\u0000\u0bda\u0bdc\u0003\u01b2\u00d9\u0000\u0bdb\u0bda\u0001\u0000\u0000"+
		"\u0000\u0bdb\u0bdc\u0001\u0000\u0000\u0000\u0bdc\u0bea\u0001\u0000\u0000"+
		"\u0000\u0bdd\u0be7\u0003\u0580\u02c0\u0000\u0bde\u0be8\u0005m\u0000\u0000"+
		"\u0bdf\u0be0\u0005\u01c5\u0000\u0000\u0be0\u0be2\u0003\u00f6{\u0000\u0be1"+
		"\u0be3\u0003\u0188\u00c4\u0000\u0be2\u0be1\u0001\u0000\u0000\u0000\u0be2"+
		"\u0be3\u0001\u0000\u0000\u0000\u0be3\u0be5\u0001\u0000\u0000\u0000\u0be4"+
		"\u0be6\u0003\u013c\u009e\u0000\u0be5\u0be4\u0001\u0000\u0000\u0000\u0be5"+
		"\u0be6\u0001\u0000\u0000\u0000\u0be6\u0be8\u0001\u0000\u0000\u0000\u0be7"+
		"\u0bde\u0001\u0000\u0000\u0000\u0be7\u0bdf\u0001\u0000\u0000\u0000\u0be8"+
		"\u0bea\u0001\u0000\u0000\u0000\u0be9\u0bd8\u0001\u0000\u0000\u0000\u0be9"+
		"\u0bdd\u0001\u0000\u0000\u0000\u0bea\u00f5\u0001\u0000\u0000\u0000\u0beb"+
		"\u0bf6\u0007\u0013\u0000\u0000\u0bec\u0bf3\u0003\u0580\u02c0\u0000\u0bed"+
		"\u0bf4\u0007\u0014\u0000\u0000\u0bee\u0bef\u0007\u0015\u0000\u0000\u0bef"+
		"\u0bf0\u0005 \u0000\u0000\u0bf0\u0bf1\u0003\u0106\u0083\u0000\u0bf1\u0bf2"+
		"\u0005!\u0000\u0000\u0bf2\u0bf4\u0001\u0000\u0000\u0000\u0bf3\u0bed\u0001"+
		"\u0000\u0000\u0000\u0bf3\u0bee\u0001\u0000\u0000\u0000\u0bf4\u0bf6\u0001"+
		"\u0000\u0000\u0000\u0bf5\u0beb\u0001\u0000\u0000\u0000\u0bf5\u0bec\u0001"+
		"\u0000\u0000\u0000\u0bf6\u00f7\u0001\u0000\u0000\u0000\u0bf7\u0bf9\u0005"+
		"\u0112\u0000\u0000\u0bf8\u0bfa\u0003\u00fa}\u0000\u0bf9\u0bf8\u0001\u0000"+
		"\u0000\u0000\u0bf9\u0bfa\u0001\u0000\u0000\u0000\u0bfa\u0bfc\u0001\u0000"+
		"\u0000\u0000\u0bfb\u0bfd\u0005\u0108\u0000\u0000\u0bfc\u0bfb\u0001\u0000"+
		"\u0000\u0000\u0bfc\u0bfd\u0001\u0000\u0000\u0000\u0bfd\u0bff\u0001\u0000"+
		"\u0000\u0000\u0bfe\u0c00\u0005\u0117\u0000\u0000\u0bff\u0bfe\u0001\u0000"+
		"\u0000\u0000\u0bff\u0c00\u0001\u0000\u0000\u0000\u0c00\u0c01\u0001\u0000"+
		"\u0000\u0000\u0c01\u0c03\u0003\u0568\u02b4\u0000\u0c02\u0c04\u0003\u0526"+
		"\u0293\u0000\u0c03\u0c02\u0001\u0000\u0000\u0000\u0c03\u0c04\u0001\u0000"+
		"\u0000\u0000\u0c04\u0c0f\u0001\u0000\u0000\u0000\u0c05\u0c07\u0003\u00fc"+
		"~\u0000\u0c06\u0c08\u0003\u0108\u0084\u0000\u0c07\u0c06\u0001\u0000\u0000"+
		"\u0000\u0c07\u0c08\u0001\u0000\u0000\u0000\u0c08\u0c10\u0001\u0000\u0000"+
		"\u0000\u0c09\u0c0a\u0005\u0207\u0000\u0000\u0c0a\u0c0c\u0003\u04ea\u0275"+
		"\u0000\u0c0b\u0c0d\u0003\u0108\u0084\u0000\u0c0c\u0c0b\u0001\u0000\u0000"+
		"\u0000\u0c0c\u0c0d\u0001\u0000\u0000\u0000\u0c0d\u0c10\u0001\u0000\u0000"+
		"\u0000\u0c0e\u0c10\u0003\u0102\u0081\u0000\u0c0f\u0c05\u0001\u0000\u0000"+
		"\u0000\u0c0f\u0c09\u0001\u0000\u0000\u0000\u0c0f\u0c0e\u0001\u0000\u0000"+
		"\u0000\u0c10\u0c12\u0001\u0000\u0000\u0000\u0c11\u0c13\u0003\u010a\u0085"+
		"\u0000\u0c12\u0c11\u0001\u0000\u0000\u0000\u0c12\u0c13\u0001\u0000\u0000"+
		"\u0000\u0c13\u00f9\u0001\u0000\u0000\u0000\u0c14\u0c15\u0007\u0016\u0000"+
		"\u0000\u0c15\u00fb\u0001\u0000\u0000\u0000\u0c16\u0c18\u0005 \u0000\u0000"+
		"\u0c17\u0c19\u0003\u00fe\u007f\u0000\u0c18\u0c17\u0001\u0000\u0000\u0000"+
		"\u0c18\u0c19\u0001\u0000\u0000\u0000\u0c19\u0c1a\u0001\u0000\u0000\u0000"+
		"\u0c1a\u0c1c\u0005!\u0000\u0000\u0c1b\u0c16\u0001\u0000\u0000\u0000\u0c1b"+
		"\u0c1c\u0001\u0000\u0000\u0000\u0c1c\u0c1d\u0001\u0000\u0000\u0000\u0c1d"+
		"\u0c1e\u0003\u0100\u0080\u0000\u0c1e\u00fd\u0001\u0000\u0000\u0000\u0c1f"+
		"\u0c24\u0003\u0532\u0299\u0000\u0c20\u0c21\u0005\u001d\u0000\u0000\u0c21"+
		"\u0c23\u0003\u0532\u0299\u0000\u0c22\u0c20\u0001\u0000\u0000\u0000\u0c23"+
		"\u0c26\u0001\u0000\u0000\u0000\u0c24\u0c22\u0001\u0000\u0000\u0000\u0c24"+
		"\u0c25\u0001\u0000\u0000\u0000\u0c25\u00ff\u0001\u0000\u0000\u0000\u0c26"+
		"\u0c24\u0001\u0000\u0000\u0000\u0c27\u0c28\u0007\u0017\u0000\u0000\u0c28"+
		"\u0c29\u0003\u0104\u0082\u0000\u0c29\u0101\u0001\u0000\u0000\u0000\u0c2a"+
		"\u0c35\u0003\u012e\u0097\u0000\u0c2b\u0c35\u0003\u0132\u0099\u0000\u0c2c"+
		"\u0c2e\u0005 \u0000\u0000\u0c2d\u0c2f\u0003\u00fe\u007f\u0000\u0c2e\u0c2d"+
		"\u0001\u0000\u0000\u0000\u0c2e\u0c2f\u0001\u0000\u0000\u0000\u0c2f\u0c30"+
		"\u0001\u0000\u0000\u0000\u0c30\u0c32\u0005!\u0000\u0000\u0c31\u0c2c\u0001"+
		"\u0000\u0000\u0000\u0c31\u0c32\u0001\u0000\u0000\u0000\u0c32\u0c33\u0001"+
		"\u0000\u0000\u0000\u0c33\u0c35\u0003d2\u0000\u0c34\u0c2a\u0001\u0000\u0000"+
		"\u0000\u0c34\u0c2b\u0001\u0000\u0000\u0000\u0c34\u0c31\u0001\u0000\u0000"+
		"\u0000\u0c35\u0103\u0001\u0000\u0000\u0000\u0c36\u0c38\u0005 \u0000\u0000"+
		"\u0c37\u0c39\u0003\u0106\u0083\u0000\u0c38\u0c37\u0001\u0000\u0000\u0000"+
		"\u0c38\u0c39\u0001\u0000\u0000\u0000\u0c39\u0c3a\u0001\u0000\u0000\u0000"+
		"\u0c3a\u0c43\u0005!\u0000\u0000\u0c3b\u0c3c\u0005\u001d\u0000\u0000\u0c3c"+
		"\u0c3e\u0005 \u0000\u0000\u0c3d\u0c3f\u0003\u0106\u0083\u0000\u0c3e\u0c3d"+
		"\u0001\u0000\u0000\u0000\u0c3e\u0c3f\u0001\u0000\u0000\u0000\u0c3f\u0c40"+
		"\u0001\u0000\u0000\u0000\u0c40\u0c42\u0005!\u0000\u0000\u0c41\u0c3b\u0001"+
		"\u0000\u0000\u0000\u0c42\u0c45\u0001\u0000\u0000\u0000\u0c43\u0c41\u0001"+
		"\u0000\u0000\u0000\u0c43\u0c44\u0001\u0000\u0000\u0000\u0c44\u0105\u0001"+
		"\u0000\u0000\u0000\u0c45\u0c43\u0001\u0000\u0000\u0000\u0c46\u0c49\u0003"+
		"\u0390\u01c8\u0000\u0c47\u0c49\u0005\u00a6\u0000\u0000\u0c48\u0c46\u0001"+
		"\u0000\u0000\u0000\u0c48\u0c47\u0001\u0000\u0000\u0000\u0c49\u0c51\u0001"+
		"\u0000\u0000\u0000\u0c4a\u0c4d\u0005\u001d\u0000\u0000\u0c4b\u0c4e\u0003"+
		"\u0390\u01c8\u0000\u0c4c\u0c4e\u0005\u00a6\u0000\u0000\u0c4d\u0c4b\u0001"+
		"\u0000\u0000\u0000\u0c4d\u0c4c\u0001\u0000\u0000\u0000\u0c4e\u0c50\u0001"+
		"\u0000\u0000\u0000\u0c4f\u0c4a\u0001\u0000\u0000\u0000\u0c50\u0c53\u0001"+
		"\u0000\u0000\u0000\u0c51\u0c4f\u0001\u0000\u0000\u0000\u0c51\u0c52\u0001"+
		"\u0000\u0000\u0000\u0c52\u0107\u0001\u0000\u0000\u0000\u0c53\u0c51\u0001"+
		"\u0000\u0000\u0000\u0c54\u0c55\u0004\u0084\u0016\u0000\u0c55\u0c56\u0005"+
		"?\u0000\u0000\u0c56\u0c58\u0003\u0580\u02c0\u0000\u0c57\u0c59\u0003\u052e"+
		"\u0297\u0000\u0c58\u0c57\u0001\u0000\u0000\u0000\u0c58\u0c59\u0001\u0000"+
		"\u0000\u0000\u0c59\u0109\u0001\u0000\u0000\u0000\u0c5a\u0c5b\u0005\u0191"+
		"\u0000\u0000\u0c5b\u0c5c\u0005\u00bb\u0000\u0000\u0c5c\u0c5d\u0005\u0127"+
		"\u0000\u0000\u0c5d\u0c5e\u0005\u026f\u0000\u0000\u0c5e\u0c5f\u0003\u04ea"+
		"\u0275\u0000\u0c5f\u010b\u0001\u0000\u0000\u0000\u0c60\u0c61\u0005\u0137"+
		"\u0000\u0000\u0c61\u0c63\u0003\u010e\u0087\u0000\u0c62\u0c64\u0003\u0110"+
		"\u0088\u0000\u0c63\u0c62\u0001\u0000\u0000\u0000\u0c63\u0c64\u0001\u0000"+
		"\u0000\u0000\u0c64\u0c66\u0001\u0000\u0000\u0000\u0c65\u0c67\u0003\u0112"+
		"\u0089\u0000\u0c66\u0c65\u0001\u0000\u0000\u0000\u0c66\u0c67\u0001\u0000"+
		"\u0000\u0000\u0c67\u0c69\u0001\u0000\u0000\u0000\u0c68\u0c6a\u0005\u0138"+
		"\u0000\u0000\u0c69\u0c68\u0001\u0000\u0000\u0000\u0c69\u0c6a\u0001\u0000"+
		"\u0000\u0000\u0c6a\u0c6c\u0001\u0000\u0000\u0000\u0c6b\u0c6d\u0003\u0114"+
		"\u008a\u0000\u0c6c\u0c6b\u0001\u0000\u0000\u0000\u0c6c\u0c6d\u0001\u0000"+
		"\u0000\u0000\u0c6d\u0c6e\u0001\u0000\u0000\u0000\u0c6e\u0c70\u0003\u05a0"+
		"\u02d0\u0000\u0c6f\u0c71\u0003\u0116\u008b\u0000\u0c70\u0c6f\u0001\u0000"+
		"\u0000\u0000\u0c70\u0c71\u0001\u0000\u0000\u0000\u0c71\u0c73\u0001\u0000"+
		"\u0000\u0000\u0c72\u0c74\u0003\u0118\u008c\u0000\u0c73\u0c72\u0001\u0000"+
		"\u0000\u0000\u0c73\u0c74\u0001\u0000\u0000\u0000\u0c74\u0c76\u0001\u0000"+
		"\u0000\u0000\u0c75\u0c77\u0007\b\u0000\u0000\u0c76\u0c75\u0001\u0000\u0000"+
		"\u0000\u0c76\u0c77\u0001\u0000\u0000\u0000\u0c77\u0c78\u0001\u0000\u0000"+
		"\u0000\u0c78\u0c79\u0005\u0117\u0000\u0000\u0c79\u0c7a\u0005\u0247\u0000"+
		"\u0000\u0c7a\u0c7c\u0003\u0568\u02b4\u0000\u0c7b\u0c7d\u0003\u0526\u0293"+
		"\u0000\u0c7c\u0c7b\u0001\u0000\u0000\u0000\u0c7c\u0c7d\u0001\u0000\u0000"+
		"\u0000\u0c7d\u0c7f\u0001\u0000\u0000\u0000\u0c7e\u0c80\u0003\u04ee\u0277"+
		"\u0000\u0c7f\u0c7e\u0001\u0000\u0000\u0000\u0c7f\u0c80\u0001\u0000\u0000"+
		"\u0000\u0c80\u0c82\u0001\u0000\u0000\u0000\u0c81\u0c83\u0003\u011a\u008d"+
		"\u0000\u0c82\u0c81\u0001\u0000\u0000\u0000\u0c82\u0c83\u0001\u0000\u0000"+
		"\u0000\u0c83\u0c85\u0001\u0000\u0000\u0000\u0c84\u0c86\u0003\u04f0\u0278"+
		"\u0000\u0c85\u0c84\u0001\u0000\u0000\u0000\u0c85\u0c86\u0001\u0000\u0000"+
		"\u0000\u0c86\u0c88\u0001\u0000\u0000\u0000\u0c87\u0c89\u0003\u04f4\u027a"+
		"\u0000\u0c88\u0c87\u0001\u0000\u0000\u0000\u0c88\u0c89\u0001\u0000\u0000"+
		"\u0000\u0c89\u0c8a\u0001\u0000\u0000\u0000\u0c8a\u0c8c\u0003\u011c\u008e"+
		"\u0000\u0c8b\u0c8d\u0003\u0124\u0092\u0000\u0c8c\u0c8b\u0001\u0000\u0000"+
		"\u0000\u0c8c\u0c8d\u0001\u0000\u0000\u0000\u0c8d\u0c8f\u0001\u0000\u0000"+
		"\u0000\u0c8e\u0c90\u0003\u0126\u0093\u0000\u0c8f\u0c8e\u0001\u0000\u0000"+
		"\u0000\u0c8f\u0c90\u0001\u0000\u0000\u0000\u0c90\u0c92\u0001\u0000\u0000"+
		"\u0000\u0c91\u0c93\u0003\u0122\u0091\u0000\u0c92\u0c91\u0001\u0000\u0000"+
		"\u0000\u0c92\u0c93\u0001\u0000\u0000\u0000\u0c93\u010d\u0001\u0000\u0000"+
		"\u0000\u0c94\u0c95\u0007\u0018\u0000\u0000\u0c95\u010f\u0001\u0000\u0000"+
		"\u0000\u0c96\u0c97\u0007\u0019\u0000\u0000\u0c97\u0111\u0001\u0000\u0000"+
		"\u0000\u0c98\u0c99\u0004\u0089\u0017\u0000\u0c99\u0c9a\u0005\u00eb\u0000"+
		"\u0000\u0c9a\u0113\u0001\u0000\u0000\u0000\u0c9b\u0c9f\u0005\u010d\u0000"+
		"\u0000\u0c9c\u0c9d\u0004\u008a\u0018\u0000\u0c9d\u0c9f\u0007\u001a\u0000"+
		"\u0000\u0c9e\u0c9b\u0001\u0000\u0000\u0000\u0c9e\u0c9c\u0001\u0000\u0000"+
		"\u0000\u0c9f\u0115\u0001\u0000\u0000\u0000\u0ca0\u0ca6\u0004\u008b\u0019"+
		"\u0000\u0ca1\u0ca2\u0005\u0089\u0000\u0000\u0ca2\u0ca7\u0005\u0003\u0000"+
		"\u0000\u0ca3\u0ca4\u0003\u057e\u02bf\u0000\u0ca4\u0ca5\u0005\u0003\u0000"+
		"\u0000\u0ca5\u0ca7\u0001\u0000\u0000\u0000\u0ca6\u0ca1\u0001\u0000\u0000"+
		"\u0000\u0ca6\u0ca3\u0001\u0000\u0000\u0000\u0ca7\u0117\u0001\u0000\u0000"+
		"\u0000\u0ca8\u0ca9\u0004\u008c\u001a\u0000\u0ca9\u0caa\u0005\u011a\u0000"+
		"\u0000\u0caa\u0cab\u0005\u01b6\u0000\u0000\u0cab\u0cac\u0005\u0127\u0000"+
		"\u0000\u0cac\u0cad\u0005\u019b\u0000\u0000\u0cad\u0119\u0001\u0000\u0000"+
		"\u0000\u0cae\u0caf\u0005\u01f4\u0000\u0000\u0caf\u0cb0\u0005\u0106\u0000"+
		"\u0000\u0cb0\u0cb1\u0005Y\u0000\u0000\u0cb1\u0cb2\u0003\u05a2\u02d1\u0000"+
		"\u0cb2\u011b\u0001\u0000\u0000\u0000\u0cb3\u0cb4\u0005\u0108\u0000\u0000"+
		"\u0cb4\u0cb5\u0005\u0003\u0000\u0000\u0cb5\u0cb7\u0007\u001b\u0000\u0000"+
		"\u0cb6\u0cb3\u0001\u0000\u0000\u0000\u0cb6\u0cb7\u0001\u0000\u0000\u0000"+
		"\u0cb7\u0cb9\u0001\u0000\u0000\u0000\u0cb8\u0cba\u0003\u011e\u008f\u0000"+
		"\u0cb9\u0cb8\u0001\u0000\u0000\u0000\u0cb9\u0cba\u0001\u0000\u0000\u0000"+
		"\u0cba\u0cbd\u0001\u0000\u0000\u0000\u0cbb\u0cbc\u0005\u0207\u0000\u0000"+
		"\u0cbc\u0cbe\u0003\u04ea\u0275\u0000\u0cbd\u0cbb\u0001\u0000\u0000\u0000"+
		"\u0cbd\u0cbe\u0001\u0000\u0000\u0000\u0cbe\u011d\u0001\u0000\u0000\u0000"+
		"\u0cbf\u0cc1\u0005 \u0000\u0000\u0cc0\u0cc2\u0003\u0120\u0090\u0000\u0cc1"+
		"\u0cc0\u0001\u0000\u0000\u0000\u0cc1\u0cc2\u0001\u0000\u0000\u0000\u0cc2"+
		"\u0cc3\u0001\u0000\u0000\u0000\u0cc3\u0cc4\u0005!\u0000\u0000\u0cc4\u011f"+
		"\u0001\u0000\u0000\u0000\u0cc5\u0cca\u0003\u0530\u0298\u0000\u0cc6\u0cc7"+
		"\u0005\'\u0000\u0000\u0cc7\u0cca\u0003\u05bc\u02de\u0000\u0cc8\u0cca\u0005"+
		")\u0000\u0000\u0cc9\u0cc5\u0001\u0000\u0000\u0000\u0cc9\u0cc6\u0001\u0000"+
		"\u0000\u0000\u0cc9\u0cc8\u0001\u0000\u0000\u0000\u0cca\u0cd5\u0001\u0000"+
		"\u0000\u0000\u0ccb\u0cd1\u0005\u001d\u0000\u0000\u0ccc\u0cd2\u0003\u0530"+
		"\u0298\u0000\u0ccd\u0cce\u0005\'\u0000\u0000\u0cce\u0cd2\u0003\u05bc\u02de"+
		"\u0000\u0ccf\u0cd2\u0005(\u0000\u0000\u0cd0\u0cd2\u0005)\u0000\u0000\u0cd1"+
		"\u0ccc\u0001\u0000\u0000\u0000\u0cd1\u0ccd\u0001\u0000\u0000\u0000\u0cd1"+
		"\u0ccf\u0001\u0000\u0000\u0000\u0cd1\u0cd0\u0001\u0000\u0000\u0000\u0cd2"+
		"\u0cd4\u0001\u0000\u0000\u0000\u0cd3\u0ccb\u0001\u0000\u0000\u0000\u0cd4"+
		"\u0cd7\u0001\u0000\u0000\u0000\u0cd5\u0cd3\u0001\u0000\u0000\u0000\u0cd5"+
		"\u0cd6\u0001\u0000\u0000\u0000\u0cd6\u0121\u0001\u0000\u0000\u0000\u0cd7"+
		"\u0cd5\u0001\u0000\u0000\u0000\u0cd8\u0cd9\u0004\u0091\u001b\u0000\u0cd9"+
		"\u0cda\u00058\u0000\u0000\u0cda\u0cdb\u0005\u0006\u0000\u0000\u0cdb\u0cdc"+
		"\u0005\u0324\u0000\u0000\u0cdc\u0123\u0001\u0000\u0000\u0000\u0cdd\u0cde"+
		"\u0004\u0092\u001c\u0000\u0cde\u0cdf\u0005\u032a\u0000\u0000\u0cdf\u0ce0"+
		"\u0005\u0006\u0000\u0000\u0ce0\u0ce1\u0005\u0003\u0000\u0000\u0ce1\u0125"+
		"\u0001\u0000\u0000\u0000\u0ce2\u0ce3\u0004\u0093\u001d\u0000\u0ce3\u0ce4"+
		"\u0005\u0166\u0000\u0000\u0ce4\u0ce5\u0005\u0006\u0000\u0000\u0ce5\u0ce6"+
		"\u0003\u05c2\u02e1\u0000\u0ce6\u0127\u0001\u0000\u0000\u0000\u0ce7\u0ce9"+
		"\u0005\u01db\u0000\u0000\u0ce8\u0cea\u0007\u001c\u0000\u0000\u0ce9\u0ce8"+
		"\u0001\u0000\u0000\u0000\u0ce9\u0cea\u0001\u0000\u0000\u0000\u0cea\u0cec"+
		"\u0001\u0000\u0000\u0000\u0ceb\u0ced\u0005\u0117\u0000\u0000\u0cec\u0ceb"+
		"\u0001\u0000\u0000\u0000\u0cec\u0ced\u0001\u0000\u0000\u0000\u0ced\u0cee"+
		"\u0001\u0000\u0000\u0000\u0cee\u0cf0\u0003\u0568\u02b4\u0000\u0cef\u0cf1"+
		"\u0003\u0526\u0293\u0000\u0cf0\u0cef\u0001\u0000\u0000\u0000\u0cf0\u0cf1"+
		"\u0001\u0000\u0000\u0000\u0cf1\u0cf6\u0001\u0000\u0000\u0000\u0cf2\u0cf7"+
		"\u0003\u00fc~\u0000\u0cf3\u0cf4\u0005\u0207\u0000\u0000\u0cf4\u0cf7\u0003"+
		"\u04ea\u0275\u0000\u0cf5\u0cf7\u0003\u0102\u0081\u0000\u0cf6\u0cf2\u0001"+
		"\u0000\u0000\u0000\u0cf6\u0cf3\u0001\u0000\u0000\u0000\u0cf6\u0cf5\u0001"+
		"\u0000\u0000\u0000\u0cf7\u0129\u0001\u0000\u0000\u0000\u0cf8\u0cfa\u0003"+
		"\u012e\u0097\u0000\u0cf9\u0cfb\u0003\u017a\u00bd\u0000\u0cfa\u0cf9\u0001"+
		"\u0000\u0000\u0000\u0cfa\u0cfb\u0001\u0000\u0000\u0000\u0cfb\u0cfe\u0001"+
		"\u0000\u0000\u0000\u0cfc\u0cfe\u0003\u012c\u0096\u0000\u0cfd\u0cf8\u0001"+
		"\u0000\u0000\u0000\u0cfd\u0cfc\u0001\u0000\u0000\u0000\u0cfe\u012b\u0001"+
		"\u0000\u0000\u0000\u0cff\u0d00\u0005 \u0000\u0000\u0d00\u0d01\u0003\u012c"+
		"\u0096\u0000\u0d01\u0d02\u0005!\u0000\u0000\u0d02\u0d11\u0001\u0000\u0000"+
		"\u0000\u0d03\u0d04\u0003\u012e\u0097\u0000\u0d04\u0d06\u0003\u0144\u00a2"+
		"\u0000\u0d05\u0d07\u0003\u017a\u00bd\u0000\u0d06\u0d05\u0001\u0000\u0000"+
		"\u0000\u0d06\u0d07\u0001\u0000\u0000\u0000\u0d07\u0d11\u0001\u0000\u0000"+
		"\u0000\u0d08\u0d09\u0003\u012e\u0097\u0000\u0d09\u0d0a\u0003\u017a\u00bd"+
		"\u0000\u0d0a\u0d0b\u0003\u0144\u00a2\u0000\u0d0b\u0d11\u0001\u0000\u0000"+
		"\u0000\u0d0c\u0d0d\u0004\u0096\u001e\u0000\u0d0d\u0d0e\u0003\u0132\u0099"+
		"\u0000\u0d0e\u0d0f\u0003\u0144\u00a2\u0000\u0d0f\u0d11\u0001\u0000\u0000"+
		"\u0000\u0d10\u0cff\u0001\u0000\u0000\u0000\u0d10\u0d03\u0001\u0000\u0000"+
		"\u0000\u0d10\u0d08\u0001\u0000\u0000\u0000\u0d10\u0d0c\u0001\u0000\u0000"+
		"\u0000\u0d11\u012d\u0001\u0000\u0000\u0000\u0d12\u0d14\u0003\u0162\u00b1"+
		"\u0000\u0d13\u0d12\u0001\u0000\u0000\u0000\u0d13\u0d14\u0001\u0000\u0000"+
		"\u0000\u0d14\u0d15\u0001\u0000\u0000\u0000\u0d15\u0d17\u0003\u0130\u0098"+
		"\u0000\u0d16\u0d18\u0003\u016a\u00b5\u0000\u0d17\u0d16\u0001\u0000\u0000"+
		"\u0000\u0d17\u0d18\u0001\u0000\u0000\u0000\u0d18\u0d1a\u0001\u0000\u0000"+
		"\u0000\u0d19\u0d1b\u0003\u013c\u009e\u0000\u0d1a\u0d19\u0001\u0000\u0000"+
		"\u0000\u0d1a\u0d1b\u0001\u0000\u0000\u0000\u0d1b\u012f\u0001\u0000\u0000"+
		"\u0000\u0d1c\u0d1f\u0003\u0134\u009a\u0000\u0d1d\u0d1f\u0003\u0132\u0099"+
		"\u0000\u0d1e\u0d1c\u0001\u0000\u0000\u0000\u0d1e\u0d1d\u0001\u0000\u0000"+
		"\u0000\u0d1f\u0d2b\u0001\u0000\u0000\u0000\u0d20\u0d24\u0005\u0269\u0000"+
		"\u0000\u0d21\u0d22\u0004\u0098\u001f\u0000\u0d22\u0d24\u0007\u001d\u0000"+
		"\u0000\u0d23\u0d20\u0001\u0000\u0000\u0000\u0d23\u0d21\u0001\u0000\u0000"+
		"\u0000\u0d24\u0d26\u0001\u0000\u0000\u0000\u0d25\u0d27\u0003\u01b0\u00d8"+
		"\u0000\u0d26\u0d25\u0001\u0000\u0000\u0000\u0d26\u0d27\u0001\u0000\u0000"+
		"\u0000\u0d27\u0d28\u0001\u0000\u0000\u0000\u0d28\u0d2a\u0003\u0130\u0098"+
		"\u0000\u0d29\u0d23\u0001\u0000\u0000\u0000\u0d2a\u0d2d\u0001\u0000\u0000"+
		"\u0000\u0d2b\u0d29\u0001\u0000\u0000\u0000\u0d2b\u0d2c\u0001\u0000\u0000"+
		"\u0000\u0d2c\u0131\u0001\u0000\u0000\u0000\u0d2d\u0d2b\u0001\u0000\u0000"+
		"\u0000\u0d2e\u0d31\u0005 \u0000\u0000\u0d2f\u0d32\u0003\u0132\u0099\u0000"+
		"\u0d30\u0d32\u0003d2\u0000\u0d31\u0d2f\u0001\u0000\u0000\u0000\u0d31\u0d30"+
		"\u0001\u0000\u0000\u0000\u0d32\u0d33\u0001\u0000\u0000\u0000\u0d33\u0d34"+
		"\u0005!\u0000\u0000\u0d34\u0133\u0001\u0000\u0000\u0000\u0d35\u0d3b\u0003"+
		"\u0136\u009b\u0000\u0d36\u0d37\u0004\u009a \u0000\u0d37\u0d3b\u0003\u0172"+
		"\u00b9\u0000\u0d38\u0d39\u0004\u009a!\u0000\u0d39\u0d3b\u0003\u0174\u00ba"+
		"\u0000\u0d3a\u0d35\u0001\u0000\u0000\u0000\u0d3a\u0d36\u0001\u0000\u0000"+
		"\u0000\u0d3a\u0d38\u0001\u0000\u0000\u0000\u0d3b\u0135\u0001\u0000\u0000"+
		"\u0000\u0d3c\u0d40\u0005\u01ff\u0000\u0000\u0d3d\u0d3f\u0003\u0178\u00bc"+
		"\u0000\u0d3e\u0d3d\u0001\u0000\u0000\u0000\u0d3f\u0d42\u0001\u0000\u0000"+
		"\u0000\u0d40\u0d3e\u0001\u0000\u0000\u0000\u0d40\u0d41\u0001\u0000\u0000"+
		"\u0000\u0d41\u0d43\u0001\u0000\u0000\u0000\u0d42\u0d40\u0001\u0000\u0000"+
		"\u0000\u0d43\u0d45\u0003\u0182\u00c1\u0000\u0d44\u0d46\u0003\u0144\u00a2"+
		"\u0000\u0d45\u0d44\u0001\u0000\u0000\u0000\u0d45\u0d46\u0001\u0000\u0000"+
		"\u0000\u0d46\u0d48\u0001\u0000\u0000\u0000\u0d47\u0d49\u0003\u016e\u00b7"+
		"\u0000\u0d48\u0d47\u0001\u0000\u0000\u0000\u0d48\u0d49\u0001\u0000\u0000"+
		"\u0000\u0d49\u0d4b\u0001\u0000\u0000\u0000\u0d4a\u0d4c\u0003\u0188\u00c4"+
		"\u0000\u0d4b\u0d4a\u0001\u0000\u0000\u0000\u0d4b\u0d4c\u0001\u0000\u0000"+
		"\u0000\u0d4c\u0d4e\u0001\u0000\u0000\u0000\u0d4d\u0d4f\u0003\u0166\u00b3"+
		"\u0000\u0d4e\u0d4d\u0001\u0000\u0000\u0000\u0d4e\u0d4f\u0001\u0000\u0000"+
		"\u0000\u0d4f\u0d51\u0001\u0000\u0000\u0000\u0d50\u0d52\u0003\u0148\u00a4"+
		"\u0000\u0d51\u0d50\u0001\u0000\u0000\u0000\u0d51\u0d52\u0001\u0000\u0000"+
		"\u0000\u0d52\u0d54\u0001\u0000\u0000\u0000\u0d53\u0d55\u0003\u014c\u00a6"+
		"\u0000\u0d54\u0d53\u0001\u0000\u0000\u0000\u0d54\u0d55\u0001\u0000\u0000"+
		"\u0000\u0d55\u0d57\u0001\u0000\u0000\u0000\u0d56\u0d58\u0003\u014a\u00a5"+
		"\u0000\u0d57\u0d56\u0001\u0000\u0000\u0000\u0d57\u0d58\u0001\u0000\u0000"+
		"\u0000\u0d58\u0137\u0001\u0000\u0000\u0000\u0d59\u0d5a\u0003\u0132\u0099"+
		"\u0000\u0d5a\u0139\u0001\u0000\u0000\u0000\u0d5b\u0d5c\u0007\u001e\u0000"+
		"\u0000\u0d5c\u013b\u0001\u0000\u0000\u0000\u0d5d\u0d5e\u0005\u0132\u0000"+
		"\u0000\u0d5e\u0d5f\u0003\u0140\u00a0\u0000\u0d5f\u013d\u0001\u0000\u0000"+
		"\u0000\u0d60\u0d61\u0005\u0132\u0000\u0000\u0d61\u0d62\u0003\u0142\u00a1"+
		"\u0000\u0d62\u013f\u0001\u0000\u0000\u0000\u0d63\u0d66\u0003\u0142\u00a1"+
		"\u0000\u0d64\u0d65\u0007\u001f\u0000\u0000\u0d65\u0d67\u0003\u0142\u00a1"+
		"\u0000\u0d66\u0d64\u0001\u0000\u0000\u0000\u0d66\u0d67\u0001\u0000\u0000"+
		"\u0000\u0d67\u0141\u0001\u0000\u0000\u0000\u0d68\u0d6b\u0003\u0580\u02c0"+
		"\u0000\u0d69\u0d6b\u0007 \u0000\u0000\u0d6a\u0d68\u0001\u0000\u0000\u0000"+
		"\u0d6a\u0d69\u0001\u0000\u0000\u0000\u0d6b\u0143\u0001\u0000\u0000\u0000"+
		"\u0d6c\u0d88\u0005\u0117\u0000\u0000\u0d6d\u0d6e\u0005\u019e\u0000\u0000"+
		"\u0d6e\u0d70\u0003\u05a0\u02d0\u0000\u0d6f\u0d71\u0003\u04ee\u0277\u0000"+
		"\u0d70\u0d6f\u0001\u0000\u0000\u0000\u0d70\u0d71\u0001\u0000\u0000\u0000"+
		"\u0d71\u0d73\u0001\u0000\u0000\u0000\u0d72\u0d74\u0003\u04f0\u0278\u0000"+
		"\u0d73\u0d72\u0001\u0000\u0000\u0000\u0d73\u0d74\u0001\u0000\u0000\u0000"+
		"\u0d74\u0d76\u0001\u0000\u0000\u0000\u0d75\u0d77\u0003\u04f4\u027a\u0000"+
		"\u0d76\u0d75\u0001\u0000\u0000\u0000\u0d76\u0d77\u0001\u0000\u0000\u0000"+
		"\u0d77\u0d89\u0001\u0000\u0000\u0000\u0d78\u0d79\u0005\u00ba\u0000\u0000"+
		"\u0d79\u0d89\u0003\u05a0\u02d0\u0000\u0d7a\u0d7d\u0003\u05bc\u02de\u0000"+
		"\u0d7b\u0d7d\u0003\u03dc\u01ee\u0000\u0d7c\u0d7a\u0001\u0000\u0000\u0000"+
		"\u0d7c\u0d7b\u0001\u0000\u0000\u0000\u0d7d\u0d85\u0001\u0000\u0000\u0000"+
		"\u0d7e\u0d81\u0005\u001d\u0000\u0000\u0d7f\u0d82\u0003\u05bc\u02de\u0000"+
		"\u0d80\u0d82\u0003\u03dc\u01ee\u0000\u0d81\u0d7f\u0001\u0000\u0000\u0000"+
		"\u0d81\u0d80\u0001\u0000\u0000\u0000\u0d82\u0d84\u0001\u0000\u0000\u0000"+
		"\u0d83\u0d7e\u0001\u0000\u0000\u0000\u0d84\u0d87\u0001\u0000\u0000\u0000"+
		"\u0d85\u0d83\u0001\u0000\u0000\u0000\u0d85\u0d86\u0001\u0000\u0000\u0000"+
		"\u0d86\u0d89\u0001\u0000\u0000\u0000\u0d87\u0d85\u0001\u0000\u0000\u0000"+
		"\u0d88\u0d6d\u0001\u0000\u0000\u0000\u0d88\u0d78\u0001\u0000\u0000\u0000"+
		"\u0d88\u0d7c\u0001\u0000\u0000\u0000\u0d89\u0145\u0001\u0000\u0000\u0000"+
		"\u0d8a\u0d8b\u0005\u01b8\u0000\u0000\u0d8b\u0d91\u0005 \u0000\u0000\u0d8c"+
		"\u0d8f\u0005\u0003\u0000\u0000\u0d8d\u0d8e\u0005\u001d\u0000\u0000\u0d8e"+
		"\u0d90\u0005\u0003\u0000\u0000\u0d8f\u0d8d\u0001\u0000\u0000\u0000\u0d8f"+
		"\u0d90\u0001\u0000\u0000\u0000\u0d90\u0d92\u0001\u0000\u0000\u0000\u0d91"+
		"\u0d8c\u0001\u0000\u0000\u0000\u0d91\u0d92\u0001\u0000\u0000\u0000\u0d92"+
		"\u0d93\u0001\u0000\u0000\u0000\u0d93\u0d94\u0005!\u0000\u0000\u0d94\u0147"+
		"\u0001\u0000\u0000\u0000\u0d95\u0d96\u0005\u00fd\u0000\u0000\u0d96\u0d97"+
		"\u0003\u0390\u01c8\u0000\u0d97\u0149\u0001\u0000\u0000\u0000\u0d98\u0d99"+
		"\u0004\u00a5\"\u0000\u0d99\u0d9a\u0005\u032c\u0000\u0000\u0d9a\u0d9b\u0003"+
		"\u0390\u01c8\u0000\u0d9b\u014b\u0001\u0000\u0000\u0000\u0d9c\u0d9d\u0005"+
		"\u02c3\u0000\u0000\u0d9d\u0da2\u0003\u014e\u00a7\u0000\u0d9e\u0d9f\u0005"+
		"\u001d\u0000\u0000\u0d9f\u0da1\u0003\u014e\u00a7\u0000\u0da0\u0d9e\u0001"+
		"\u0000\u0000\u0000\u0da1\u0da4\u0001\u0000\u0000\u0000\u0da2\u0da0\u0001"+
		"\u0000\u0000\u0000\u0da2\u0da3\u0001\u0000\u0000\u0000\u0da3\u014d\u0001"+
		"\u0000\u0000\u0000\u0da4\u0da2\u0001\u0000\u0000\u0000\u0da5\u0da6\u0003"+
		"\u057c\u02be\u0000\u0da6\u0da7\u0005?\u0000\u0000\u0da7\u0da8\u0003\u0150"+
		"\u00a8\u0000\u0da8\u014f\u0001\u0000\u0000\u0000\u0da9\u0daa\u0005 \u0000"+
		"\u0000\u0daa\u0dab\u0003\u0152\u00a9\u0000\u0dab\u0dac\u0005!\u0000\u0000"+
		"\u0dac\u0151\u0001\u0000\u0000\u0000\u0dad\u0daf\u0003\u057c\u02be\u0000"+
		"\u0dae\u0dad\u0001\u0000\u0000\u0000\u0dae\u0daf\u0001\u0000\u0000\u0000"+
		"\u0daf\u0db3\u0001\u0000\u0000\u0000\u0db0\u0db1\u0005\u01a7\u0000\u0000"+
		"\u0db1\u0db2\u0005Y\u0000\u0000\u0db2\u0db4\u0003\u0400\u0200\u0000\u0db3"+
		"\u0db0\u0001\u0000\u0000\u0000\u0db3\u0db4\u0001\u0000\u0000\u0000\u0db4"+
		"\u0db6\u0001\u0000\u0000\u0000\u0db5\u0db7\u0003\u016a\u00b5\u0000\u0db6"+
		"\u0db5\u0001\u0000\u0000\u0000\u0db6\u0db7\u0001\u0000\u0000\u0000\u0db7"+
		"\u0db9\u0001\u0000\u0000\u0000\u0db8\u0dba\u0003\u0154\u00aa\u0000\u0db9"+
		"\u0db8\u0001\u0000\u0000\u0000\u0db9\u0dba\u0001\u0000\u0000\u0000\u0dba"+
		"\u0153\u0001\u0000\u0000\u0000\u0dbb\u0dbc\u0003\u0156\u00ab\u0000\u0dbc"+
		"\u0dbe\u0003\u0158\u00ac\u0000\u0dbd\u0dbf\u0003\u0160\u00b0\u0000\u0dbe"+
		"\u0dbd\u0001\u0000\u0000\u0000\u0dbe\u0dbf\u0001\u0000\u0000\u0000\u0dbf"+
		"\u0155\u0001\u0000\u0000\u0000\u0dc0\u0dc1\u0007!\u0000\u0000\u0dc1\u0157"+
		"\u0001\u0000\u0000\u0000\u0dc2\u0dc5\u0003\u015a\u00ad\u0000\u0dc3\u0dc5"+
		"\u0003\u015c\u00ae\u0000\u0dc4\u0dc2\u0001\u0000\u0000\u0000\u0dc4\u0dc3"+
		"\u0001\u0000\u0000\u0000\u0dc5\u0159\u0001\u0000\u0000\u0000\u0dc6\u0dc7"+
		"\u0005\u02c2\u0000\u0000\u0dc7\u0dd5\u0005\u02bd\u0000\u0000\u0dc8\u0dc9"+
		"\u0003\u0590\u02c8\u0000\u0dc9\u0dca\u0005\u02bd\u0000\u0000\u0dca\u0dd5"+
		"\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0005+\u0000\u0000\u0dcc\u0dd5\u0005"+
		"\u02bd\u0000\u0000\u0dcd\u0dce\u0005\u0116\u0000\u0000\u0dce\u0dcf\u0003"+
		"\u0390\u01c8\u0000\u0dcf\u0dd0\u0003\u03f6\u01fb\u0000\u0dd0\u0dd1\u0005"+
		"\u02bd\u0000\u0000\u0dd1\u0dd5\u0001\u0000\u0000\u0000\u0dd2\u0dd3\u0005"+
		"\u008f\u0000\u0000\u0dd3\u0dd5\u0005\u01f7\u0000\u0000\u0dd4\u0dc6\u0001"+
		"\u0000\u0000\u0000\u0dd4\u0dc8\u0001\u0000\u0000\u0000\u0dd4\u0dcb\u0001"+
		"\u0000\u0000\u0000\u0dd4\u0dcd\u0001\u0000\u0000\u0000\u0dd4\u0dd2\u0001"+
		"\u0000\u0000\u0000\u0dd5\u015b\u0001\u0000\u0000\u0000\u0dd6\u0dd7\u0005"+
		"K\u0000\u0000\u0dd7\u0dd8\u0003\u015e\u00af\u0000\u0dd8\u0dd9\u0005=\u0000"+
		"\u0000\u0dd9\u0dda\u0003\u015e\u00af\u0000\u0dda\u015d\u0001\u0000\u0000"+
		"\u0000\u0ddb\u0de9\u0003\u015a\u00ad\u0000\u0ddc\u0ddd\u0005\u02c2\u0000"+
		"\u0000\u0ddd\u0de9\u0005\u02b2\u0000\u0000\u0dde\u0ddf\u0003\u0590\u02c8"+
		"\u0000\u0ddf\u0de0\u0005\u02b2\u0000\u0000\u0de0\u0de9\u0001\u0000\u0000"+
		"\u0000\u0de1\u0de2\u0005+\u0000\u0000\u0de2\u0de9\u0005\u02b2\u0000\u0000"+
		"\u0de3\u0de4\u0005\u0116\u0000\u0000\u0de4\u0de5\u0003\u0390\u01c8\u0000"+
		"\u0de5\u0de6\u0003\u03f6\u01fb\u0000\u0de6\u0de7\u0005\u02b2\u0000\u0000"+
		"\u0de7\u0de9\u0001\u0000\u0000\u0000\u0de8\u0ddb\u0001\u0000\u0000\u0000"+
		"\u0de8\u0ddc\u0001\u0000\u0000\u0000\u0de8\u0dde\u0001\u0000\u0000\u0000"+
		"\u0de8\u0de1\u0001\u0000\u0000\u0000\u0de8\u0de3\u0001\u0000\u0000\u0000"+
		"\u0de9\u015f\u0001\u0000\u0000\u0000\u0dea\u0df1\u0005\u02b0\u0000\u0000"+
		"\u0deb\u0dec\u0005\u008f\u0000\u0000\u0dec\u0df2\u0005\u01f7\u0000\u0000"+
		"\u0ded\u0df2\u0005\u00f9\u0000\u0000\u0dee\u0df2\u0005\u02c1\u0000\u0000"+
		"\u0def\u0df0\u0005\u0188\u0000\u0000\u0df0\u0df2\u0005\u02ba\u0000\u0000"+
		"\u0df1\u0deb\u0001\u0000\u0000\u0000\u0df1\u0ded\u0001\u0000\u0000\u0000"+
		"\u0df1\u0dee\u0001\u0000\u0000\u0000\u0df1\u0def\u0001\u0000\u0000\u0000"+
		"\u0df2\u0161\u0001\u0000\u0000\u0000\u0df3\u0df5\u0005\u028d\u0000\u0000"+
		"\u0df4\u0df6\u0005\u02a1\u0000\u0000\u0df5\u0df4\u0001\u0000\u0000\u0000"+
		"\u0df5\u0df6\u0001\u0000\u0000\u0000\u0df6\u0df7\u0001\u0000\u0000\u0000"+
		"\u0df7\u0dfc\u0003\u0164\u00b2\u0000\u0df8\u0df9\u0005\u001d\u0000\u0000"+
		"\u0df9\u0dfb\u0003\u0164\u00b2\u0000\u0dfa\u0df8\u0001\u0000\u0000\u0000"+
		"\u0dfb\u0dfe\u0001\u0000\u0000\u0000\u0dfc\u0dfa\u0001\u0000\u0000\u0000"+
		"\u0dfc\u0dfd\u0001\u0000\u0000\u0000\u0dfd\u0163\u0001\u0000\u0000\u0000"+
		"\u0dfe\u0dfc\u0001\u0000\u0000\u0000\u0dff\u0e01\u0003\u0580\u02c0\u0000"+
		"\u0e00\u0e02\u0003\u052e\u0297\u0000\u0e01\u0e00\u0001\u0000\u0000\u0000"+
		"\u0e01\u0e02\u0001\u0000\u0000\u0000\u0e02\u0e03\u0001\u0000\u0000\u0000"+
		"\u0e03\u0e04\u0005?\u0000\u0000\u0e04\u0e05\u0003\u0138\u009c\u0000\u0e05"+
		"\u0165\u0001\u0000\u0000\u0000\u0e06\u0e07\u0005\u00f9\u0000\u0000\u0e07"+
		"\u0e08\u0005Y\u0000\u0000\u0e08\u0e0a\u0003\u0400\u0200\u0000\u0e09\u0e0b"+
		"\u0003\u0168\u00b4\u0000\u0e0a\u0e09\u0001\u0000\u0000\u0000\u0e0a\u0e0b"+
		"\u0001\u0000\u0000\u0000\u0e0b\u0e15\u0001\u0000\u0000\u0000\u0e0c\u0e0d"+
		"\u0004\u00b3#\u0000\u0e0d\u0e0e\u0005\u00f9\u0000\u0000\u0e0e\u0e0f\u0005"+
		"Y\u0000\u0000\u0e0f\u0e10\u0007\"\u0000\u0000\u0e10\u0e11\u0005 \u0000"+
		"\u0000\u0e11\u0e12\u0003\u0404\u0202\u0000\u0e12\u0e13\u0005!\u0000\u0000"+
		"\u0e13\u0e15\u0001\u0000\u0000\u0000\u0e14\u0e06\u0001\u0000\u0000\u0000"+
		"\u0e14\u0e0c\u0001\u0000\u0000\u0000\u0e15\u0167\u0001\u0000\u0000\u0000"+
		"\u0e16\u0e17\u0005\u028d\u0000\u0000\u0e17\u0e18\u0005\u01f1\u0000\u0000"+
		"\u0e18\u0169\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0005\u019b\u0000\u0000"+
		"\u0e1a\u0e1b\u0005Y\u0000\u0000\u0e1b\u0e1c\u0003\u0400\u0200\u0000\u0e1c"+
		"\u016b\u0001\u0000\u0000\u0000\u0e1d\u0e1e\u0007#\u0000\u0000\u0e1e\u016d"+
		"\u0001\u0000\u0000\u0000\u0e1f\u0e22\u0005\u00eb\u0000\u0000\u0e20\u0e23"+
		"\u0005\u00b9\u0000\u0000\u0e21\u0e23\u0003\u0170\u00b8\u0000\u0e22\u0e20"+
		"\u0001\u0000\u0000\u0000\u0e22\u0e21\u0001\u0000\u0000\u0000\u0e23\u016f"+
		"\u0001\u0000\u0000\u0000\u0e24\u0e29\u0003\u018a\u00c5\u0000\u0e25\u0e26"+
		"\u0005\u001d\u0000\u0000\u0e26\u0e28\u0003\u018a\u00c5\u0000\u0e27\u0e25"+
		"\u0001\u0000\u0000\u0000\u0e28\u0e2b\u0001\u0000\u0000\u0000\u0e29\u0e27"+
		"\u0001\u0000\u0000\u0000\u0e29\u0e2a\u0001\u0000\u0000\u0000\u0e2a\u0171"+
		"\u0001\u0000\u0000\u0000\u0e2b\u0e29\u0001\u0000\u0000\u0000\u0e2c\u0e2d"+
		"\u0005\u027b\u0000\u0000\u0e2d\u0e32\u0003\u0176\u00bb\u0000\u0e2e\u0e2f"+
		"\u0005\u001d\u0000\u0000\u0e2f\u0e31\u0003\u0176\u00bb\u0000\u0e30\u0e2e"+
		"\u0001\u0000\u0000\u0000\u0e31\u0e34\u0001\u0000\u0000\u0000\u0e32\u0e30"+
		"\u0001\u0000\u0000\u0000\u0e32\u0e33\u0001\u0000\u0000\u0000\u0e33\u0173"+
		"\u0001\u0000\u0000\u0000\u0e34\u0e32\u0001\u0000\u0000\u0000\u0e35\u0e36"+
		"\u0005\u0247\u0000\u0000\u0e36\u0e37\u0003\u0568\u02b4\u0000\u0e37\u0175"+
		"\u0001\u0000\u0000\u0000\u0e38\u0e39\u0005\u01f7\u0000\u0000\u0e39\u0e3b"+
		"\u0005 \u0000\u0000\u0e3a\u0e3c\u0003\u0106\u0083\u0000\u0e3b\u0e3a\u0001"+
		"\u0000\u0000\u0000\u0e3b\u0e3c\u0001\u0000\u0000\u0000\u0e3c\u0e3d\u0001"+
		"\u0000\u0000\u0000\u0e3d\u0e3e\u0005!\u0000\u0000\u0e3e\u0177\u0001\u0000"+
		"\u0000\u0000\u0e3f\u0e42\u0003\u013a\u009d\u0000\u0e40\u0e42\u0005\u0221"+
		"\u0000\u0000\u0e41\u0e3f\u0001\u0000\u0000\u0000\u0e41\u0e40\u0001\u0000"+
		"\u0000\u0000\u0e42\u0179\u0001\u0000\u0000\u0000\u0e43\u0e45\u0004\u00bd"+
		"$\u0000\u0e44\u0e46\u0003\u017c\u00be\u0000\u0e45\u0e44\u0001\u0000\u0000"+
		"\u0000\u0e46\u0e47\u0001\u0000\u0000\u0000\u0e47\u0e45\u0001\u0000\u0000"+
		"\u0000\u0e47\u0e48\u0001\u0000\u0000\u0000\u0e48\u017b\u0001\u0000\u0000"+
		"\u0000\u0e49\u0e4a\u0005\u00e8\u0000\u0000\u0e4a\u0e4d\u0003\u017e\u00bf"+
		"\u0000\u0e4b\u0e4c\u0005\u02a4\u0000\u0000\u0e4c\u0e4e\u0003\u056c\u02b6"+
		"\u0000\u0e4d\u0e4b\u0001\u0000\u0000\u0000\u0e4d\u0e4e\u0001\u0000\u0000"+
		"\u0000\u0e4e\u0e50\u0001\u0000\u0000\u0000\u0e4f\u0e51\u0003\u0180\u00c0"+
		"\u0000\u0e50\u0e4f\u0001\u0000\u0000\u0000\u0e50\u0e51\u0001\u0000\u0000"+
		"\u0000\u0e51\u0e57\u0001\u0000\u0000\u0000\u0e52\u0e53\u0005\u013a\u0000"+
		"\u0000\u0e53\u0e54\u0005\u011a\u0000\u0000\u0e54\u0e55\u0005\u0208\u0000"+
		"\u0000\u0e55\u0e57\u0005\u0171\u0000\u0000\u0e56\u0e49\u0001\u0000\u0000"+
		"\u0000\u0e56\u0e52\u0001\u0000\u0000\u0000\u0e57\u017d\u0001\u0000\u0000"+
		"\u0000\u0e58\u0e59\u0007$\u0000\u0000\u0e59\u017f\u0001\u0000\u0000\u0000"+
		"\u0e5a\u0e5b\u0005\u02a5\u0000\u0000\u0e5b\u0e5e\u0005\u02a6\u0000\u0000"+
		"\u0e5c\u0e5e\u0005\u02a7\u0000\u0000\u0e5d\u0e5a\u0001\u0000\u0000\u0000"+
		"\u0e5d\u0e5c\u0001\u0000\u0000\u0000\u0e5e\u0181\u0001\u0000\u0000\u0000"+
		"\u0e5f\u0e62\u0003\u0184\u00c2\u0000\u0e60\u0e62\u0005\u0010\u0000\u0000"+
		"\u0e61\u0e5f\u0001\u0000\u0000\u0000\u0e61\u0e60\u0001\u0000\u0000\u0000"+
		"\u0e62\u0e67\u0001\u0000\u0000\u0000\u0e63\u0e64\u0005\u001d\u0000\u0000"+
		"\u0e64\u0e66\u0003\u0184\u00c2\u0000\u0e65\u0e63\u0001\u0000\u0000\u0000"+
		"\u0e66\u0e69\u0001\u0000\u0000\u0000\u0e67\u0e65\u0001\u0000\u0000\u0000"+
		"\u0e67\u0e68\u0001\u0000\u0000\u0000\u0e68\u0183\u0001\u0000\u0000\u0000"+
		"\u0e69\u0e67\u0001\u0000\u0000\u0000\u0e6a\u0e70\u0003\u0538\u029c\u0000"+
		"\u0e6b\u0e6d\u0003\u0390\u01c8\u0000\u0e6c\u0e6e\u0003\u0186\u00c3\u0000"+
		"\u0e6d\u0e6c\u0001\u0000\u0000\u0000\u0e6d\u0e6e\u0001\u0000\u0000\u0000"+
		"\u0e6e\u0e70\u0001\u0000\u0000\u0000\u0e6f\u0e6a\u0001\u0000\u0000\u0000"+
		"\u0e6f\u0e6b\u0001\u0000\u0000\u0000\u0e70\u0185\u0001\u0000\u0000\u0000"+
		"\u0e71\u0e73\u0005?\u0000\u0000\u0e72\u0e71\u0001\u0000\u0000\u0000\u0e72"+
		"\u0e73\u0001\u0000\u0000\u0000\u0e73\u0e76\u0001\u0000\u0000\u0000\u0e74"+
		"\u0e77\u0003\u0580\u02c0\u0000\u0e75\u0e77\u0003\u05a0\u02d0\u0000\u0e76"+
		"\u0e74\u0001\u0000\u0000\u0000\u0e76\u0e75\u0001\u0000\u0000\u0000\u0e77"+
		"\u0187\u0001\u0000\u0000\u0000\u0e78\u0e79\u0005\u028b\u0000\u0000\u0e79"+
		"\u0e7a\u0003\u0390\u01c8\u0000\u0e7a\u0189\u0001\u0000\u0000\u0000\u0e7b"+
		"\u0e86\u0003\u0196\u00cb\u0000\u0e7c\u0e80\u0005\"\u0000\u0000\u0e7d\u0e7e";
	private static final String _serializedATNSegment2 =
		"\u0004\u00c5%\u0000\u0e7e\u0e81\u0003\u0580\u02c0\u0000\u0e7f\u0e81\u0005"+
		"\u02e4\u0000\u0000\u0e80\u0e7d\u0001\u0000\u0000\u0000\u0e80\u0e7f\u0001"+
		"\u0000\u0000\u0000\u0e81\u0e82\u0001\u0000\u0000\u0000\u0e82\u0e83\u0003"+
		"\u018c\u00c6\u0000\u0e83\u0e84\u0005#\u0000\u0000\u0e84\u0e86\u0001\u0000"+
		"\u0000\u0000\u0e85\u0e7b\u0001\u0000\u0000\u0000\u0e85\u0e7c\u0001\u0000"+
		"\u0000\u0000\u0e86\u0e8a\u0001\u0000\u0000\u0000\u0e87\u0e89\u0003\u018e"+
		"\u00c7\u0000\u0e88\u0e87\u0001\u0000\u0000\u0000\u0e89\u0e8c\u0001\u0000"+
		"\u0000\u0000\u0e8a\u0e88\u0001\u0000\u0000\u0000\u0e8a\u0e8b\u0001\u0000"+
		"\u0000\u0000\u0e8b\u018b\u0001\u0000\u0000\u0000\u0e8c\u0e8a\u0001\u0000"+
		"\u0000\u0000\u0e8d\u0e91\u0003\u0196\u00cb\u0000\u0e8e\u0e90\u0003\u018e"+
		"\u00c7\u0000\u0e8f\u0e8e\u0001\u0000\u0000\u0000\u0e90\u0e93\u0001\u0000"+
		"\u0000\u0000\u0e91\u0e8f\u0001\u0000\u0000\u0000\u0e91\u0e92\u0001\u0000"+
		"\u0000\u0000\u0e92\u018d\u0001\u0000\u0000\u0000\u0e93\u0e91\u0001\u0000"+
		"\u0000\u0000\u0e94\u0e95\u0003\u0192\u00c9\u0000\u0e95\u0e9a\u0003\u018a"+
		"\u00c5\u0000\u0e96\u0e97\u0005\u0191\u0000\u0000\u0e97\u0e9b\u0003\u0390"+
		"\u01c8\u0000\u0e98\u0e99\u0005\u0276\u0000\u0000\u0e99\u0e9b\u0003\u0584"+
		"\u02c2\u0000\u0e9a\u0e96\u0001\u0000\u0000\u0000\u0e9a\u0e98\u0001\u0000"+
		"\u0000\u0000\u0e9a\u0e9b\u0001\u0000\u0000\u0000\u0e9b\u0ea8\u0001\u0000"+
		"\u0000\u0000\u0e9c\u0e9d\u0003\u0194\u00ca\u0000\u0e9d\u0ea2\u0003\u018a"+
		"\u00c5\u0000\u0e9e\u0e9f\u0005\u0191\u0000\u0000\u0e9f\u0ea3\u0003\u0390"+
		"\u01c8\u0000\u0ea0\u0ea1\u0005\u0276\u0000\u0000\u0ea1\u0ea3\u0003\u0584"+
		"\u02c2\u0000\u0ea2\u0e9e\u0001\u0000\u0000\u0000\u0ea2\u0ea0\u0001\u0000"+
		"\u0000\u0000\u0ea3\u0ea8\u0001\u0000\u0000\u0000\u0ea4\u0ea5\u0003\u0190"+
		"\u00c8\u0000\u0ea5\u0ea6\u0003\u0196\u00cb\u0000\u0ea6\u0ea8\u0001\u0000"+
		"\u0000\u0000\u0ea7\u0e94\u0001\u0000\u0000\u0000\u0ea7\u0e9c\u0001\u0000"+
		"\u0000\u0000\u0ea7\u0ea4\u0001\u0000\u0000\u0000\u0ea8\u018f\u0001\u0000"+
		"\u0000\u0000\u0ea9\u0eab\u0005\u017e\u0000\u0000\u0eaa\u0eac\u0005\u010f"+
		"\u0000\u0000\u0eab\u0eaa\u0001\u0000\u0000\u0000\u0eab\u0eac\u0001\u0000"+
		"\u0000\u0000\u0eac\u0ead\u0001\u0000\u0000\u0000\u0ead\u0eb5\u0005\u0123"+
		"\u0000\u0000\u0eae\u0eaf\u0005\u017e\u0000\u0000\u0eaf\u0eb1\u0007%\u0000"+
		"\u0000\u0eb0\u0eb2\u0005\u019d\u0000\u0000\u0eb1\u0eb0\u0001\u0000\u0000"+
		"\u0000\u0eb1\u0eb2\u0001\u0000\u0000\u0000\u0eb2\u0eb3\u0001\u0000\u0000"+
		"\u0000\u0eb3\u0eb5\u0005\u0123\u0000\u0000\u0eb4\u0ea9\u0001\u0000\u0000"+
		"\u0000\u0eb4\u0eae\u0001\u0000\u0000\u0000\u0eb5\u0191\u0001\u0000\u0000"+
		"\u0000\u0eb6\u0eb8\u0007&\u0000\u0000\u0eb7\u0eb6\u0001\u0000\u0000\u0000"+
		"\u0eb7\u0eb8\u0001\u0000\u0000\u0000\u0eb8\u0eb9\u0001\u0000\u0000\u0000"+
		"\u0eb9\u0ebc\u0005\u0123\u0000\u0000\u0eba\u0ebc\u0005\u0235\u0000\u0000"+
		"\u0ebb\u0eb7\u0001\u0000\u0000\u0000\u0ebb\u0eba\u0001\u0000\u0000\u0000"+
		"\u0ebc\u0193\u0001\u0000\u0000\u0000\u0ebd\u0ebf\u0007%\u0000\u0000\u0ebe"+
		"\u0ec0\u0005\u019d\u0000\u0000\u0ebf\u0ebe\u0001\u0000\u0000\u0000\u0ebf"+
		"\u0ec0\u0001\u0000\u0000\u0000\u0ec0\u0ec1\u0001\u0000\u0000\u0000\u0ec1"+
		"\u0ec2\u0005\u0123\u0000\u0000\u0ec2\u0195\u0001\u0000\u0000\u0000\u0ec3"+
		"\u0eca\u0003\u0198\u00cc\u0000\u0ec4\u0eca\u0003\u019a\u00cd\u0000\u0ec5"+
		"\u0eca\u0003\u019c\u00ce\u0000\u0ec6\u0eca\u0003\u019e\u00cf\u0000\u0ec7"+
		"\u0ec8\u0004\u00cb&\u0000\u0ec8\u0eca\u0003\u01a0\u00d0\u0000\u0ec9\u0ec3"+
		"\u0001\u0000\u0000\u0000\u0ec9\u0ec4\u0001\u0000\u0000\u0000\u0ec9\u0ec5"+
		"\u0001\u0000\u0000\u0000\u0ec9\u0ec6\u0001\u0000\u0000\u0000\u0ec9\u0ec7"+
		"\u0001\u0000\u0000\u0000\u0eca\u0197\u0001\u0000\u0000\u0000\u0ecb\u0ecd"+
		"\u0003\u0568\u02b4\u0000\u0ecc\u0ece\u0003\u0526\u0293\u0000\u0ecd\u0ecc"+
		"\u0001\u0000\u0000\u0000\u0ecd\u0ece\u0001\u0000\u0000\u0000\u0ece\u0ed0"+
		"\u0001\u0000\u0000\u0000\u0ecf\u0ed1\u0003\u01b2\u00d9\u0000\u0ed0\u0ecf"+
		"\u0001\u0000\u0000\u0000\u0ed0\u0ed1\u0001\u0000\u0000\u0000\u0ed1\u0ed3"+
		"\u0001\u0000\u0000\u0000\u0ed2\u0ed4\u0003\u01b4\u00da\u0000\u0ed3\u0ed2"+
		"\u0001\u0000\u0000\u0000\u0ed3\u0ed4\u0001\u0000\u0000\u0000\u0ed4\u0ed6"+
		"\u0001\u0000\u0000\u0000\u0ed5\u0ed7\u0003\u03ac\u01d6\u0000\u0ed6\u0ed5"+
		"\u0001\u0000\u0000\u0000\u0ed6\u0ed7\u0001\u0000\u0000\u0000\u0ed7\u0199"+
		"\u0001\u0000\u0000\u0000\u0ed8\u0edb\u0005 \u0000\u0000\u0ed9\u0edc\u0003"+
		"\u0198\u00cc\u0000\u0eda\u0edc\u0003\u019a\u00cd\u0000\u0edb\u0ed9\u0001"+
		"\u0000\u0000\u0000\u0edb\u0eda\u0001\u0000\u0000\u0000\u0edc\u0edd\u0001"+
		"\u0000\u0000\u0000\u0edd\u0ede\u0005!\u0000\u0000\u0ede\u019b\u0001\u0000"+
		"\u0000\u0000\u0edf\u0ee1\u0003\u0138\u009c\u0000\u0ee0\u0ee2\u0003\u01b2"+
		"\u00d9\u0000\u0ee1\u0ee0\u0001\u0000\u0000\u0000\u0ee1\u0ee2\u0001\u0000"+
		"\u0000\u0000\u0ee2\u0ee4\u0001\u0000\u0000\u0000\u0ee3\u0ee5\u0003\u052e"+
		"\u0297\u0000\u0ee4\u0ee3\u0001\u0000\u0000\u0000\u0ee4\u0ee5\u0001\u0000"+
		"\u0000\u0000\u0ee5\u0ef0\u0001\u0000\u0000\u0000\u0ee6\u0ee7\u0004\u00ce"+
		"\'\u0000\u0ee7\u0ee8\u0005\u02de\u0000\u0000\u0ee8\u0eea\u0003\u0138\u009c"+
		"\u0000\u0ee9\u0eeb\u0003\u01b2\u00d9\u0000\u0eea\u0ee9\u0001\u0000\u0000"+
		"\u0000\u0eea\u0eeb\u0001\u0000\u0000\u0000\u0eeb\u0eed\u0001\u0000\u0000"+
		"\u0000\u0eec\u0eee\u0003\u052e\u0297\u0000\u0eed\u0eec\u0001\u0000\u0000"+
		"\u0000\u0eed\u0eee\u0001\u0000\u0000\u0000\u0eee\u0ef0\u0001\u0000\u0000"+
		"\u0000\u0eef\u0edf\u0001\u0000\u0000\u0000\u0eef\u0ee6\u0001\u0000\u0000"+
		"\u0000\u0ef0\u019d\u0001\u0000\u0000\u0000\u0ef1\u0ef4\u0005 \u0000\u0000"+
		"\u0ef2\u0ef5\u0003\u0170\u00b8\u0000\u0ef3\u0ef5\u0003\u019e\u00cf\u0000"+
		"\u0ef4\u0ef2\u0001\u0000\u0000\u0000\u0ef4\u0ef3\u0001\u0000\u0000\u0000"+
		"\u0ef5\u0ef6\u0001\u0000\u0000\u0000\u0ef6\u0ef7\u0005!\u0000\u0000\u0ef7"+
		"\u019f\u0001\u0000\u0000\u0000\u0ef8\u0ef9\u0005\u02c5\u0000\u0000\u0ef9"+
		"\u0efa\u0005 \u0000\u0000\u0efa\u0efb\u0003\u0390\u01c8\u0000\u0efb\u0efc"+
		"\u0005\u001d\u0000\u0000\u0efc\u0efd\u0003\u05a0\u02d0\u0000\u0efd\u0efe"+
		"\u0003\u01a2\u00d1\u0000\u0efe\u0f00\u0005!\u0000\u0000\u0eff\u0f01\u0003"+
		"\u01b2\u00d9\u0000\u0f00\u0eff\u0001\u0000\u0000\u0000\u0f00\u0f01\u0001"+
		"\u0000\u0000\u0000\u0f01\u01a1\u0001\u0000\u0000\u0000\u0f02\u0f03\u0005"+
		"r\u0000\u0000\u0f03\u0f04\u0005 \u0000\u0000\u0f04\u0f09\u0003\u01a4\u00d2"+
		"\u0000\u0f05\u0f06\u0005\u001d\u0000\u0000\u0f06\u0f08\u0003\u01a4\u00d2"+
		"\u0000\u0f07\u0f05\u0001\u0000\u0000\u0000\u0f08\u0f0b\u0001\u0000\u0000"+
		"\u0000\u0f09\u0f07\u0001\u0000\u0000\u0000\u0f09\u0f0a\u0001\u0000\u0000"+
		"\u0000\u0f0a\u0f0c\u0001\u0000\u0000\u0000\u0f0b\u0f09\u0001\u0000\u0000"+
		"\u0000\u0f0c\u0f0d\u0005!\u0000\u0000\u0f0d\u01a3\u0001\u0000\u0000\u0000"+
		"\u0f0e\u0f0f\u0003\u0580\u02c0\u0000\u0f0f\u0f10\u0005\u00e8\u0000\u0000"+
		"\u0f10\u0f11\u0005\u02c7\u0000\u0000\u0f11\u0f26\u0001\u0000\u0000\u0000"+
		"\u0f12\u0f13\u0003\u0580\u02c0\u0000\u0f13\u0f16\u0003\u0490\u0248\u0000"+
		"\u0f14\u0f15\u0004\u00d2(\u0000\u0f15\u0f17\u0003\u04e2\u0271\u0000\u0f16"+
		"\u0f14\u0001\u0000\u0000\u0000\u0f16\u0f17\u0001\u0000\u0000\u0000\u0f17"+
		"\u0f19\u0001\u0000\u0000\u0000\u0f18\u0f1a\u0005\u00d1\u0000\u0000\u0f19"+
		"\u0f18\u0001\u0000\u0000\u0000\u0f19\u0f1a\u0001\u0000\u0000\u0000\u0f1a"+
		"\u0f1b\u0001\u0000\u0000\u0000\u0f1b\u0f1c\u0005\u02c8\u0000\u0000\u0f1c"+
		"\u0f1e\u0003\u05a0\u02d0\u0000\u0f1d\u0f1f\u0003\u01a8\u00d4\u0000\u0f1e"+
		"\u0f1d\u0001\u0000\u0000\u0000\u0f1e\u0f1f\u0001\u0000\u0000\u0000\u0f1f"+
		"\u0f26\u0001\u0000\u0000\u0000\u0f20\u0f21\u0005\u02c6\u0000\u0000\u0f21"+
		"\u0f22\u0005\u02c8\u0000\u0000\u0f22\u0f23\u0003\u05a0\u02d0\u0000\u0f23"+
		"\u0f24\u0003\u01a2\u00d1\u0000\u0f24\u0f26\u0001\u0000\u0000\u0000\u0f25"+
		"\u0f0e\u0001\u0000\u0000\u0000\u0f25\u0f12\u0001\u0000\u0000\u0000\u0f25"+
		"\u0f20\u0001\u0000\u0000\u0000\u0f26\u01a5\u0001\u0000\u0000\u0000\u0f27"+
		"\u0f29\u0003\u01aa\u00d5\u0000\u0f28\u0f2a\u0003\u01ac\u00d6\u0000\u0f29"+
		"\u0f28\u0001\u0000\u0000\u0000\u0f29\u0f2a\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f2d\u0001\u0000\u0000\u0000\u0f2b\u0f2d\u0003\u01ac\u00d6\u0000\u0f2c"+
		"\u0f27\u0001\u0000\u0000\u0000\u0f2c\u0f2b\u0001\u0000\u0000\u0000\u0f2d"+
		"\u01a7\u0001\u0000\u0000\u0000\u0f2e\u0f33\u0003\u01a6\u00d3\u0000\u0f2f"+
		"\u0f30\u0003\u01ac\u00d6\u0000\u0f30\u0f31\u0003\u01aa\u00d5\u0000\u0f31"+
		"\u0f33\u0001\u0000\u0000\u0000\u0f32\u0f2e\u0001\u0000\u0000\u0000\u0f32"+
		"\u0f2f\u0001\u0000\u0000\u0000\u0f33\u01a9\u0001\u0000\u0000\u0000\u0f34"+
		"\u0f35\u0003\u01ae\u00d7\u0000\u0f35\u0f36\u0005\u0191\u0000\u0000\u0f36"+
		"\u0f37\u0005\u02c4\u0000\u0000\u0f37\u01ab\u0001\u0000\u0000\u0000\u0f38"+
		"\u0f39\u0003\u01ae\u00d7\u0000\u0f39\u0f3a\u0005\u0191\u0000\u0000\u0f3a"+
		"\u0f3b\u0005\u00c8\u0000\u0000\u0f3b\u01ad\u0001\u0000\u0000\u0000\u0f3c"+
		"\u0f41\u0005\u00c8\u0000\u0000\u0f3d\u0f41\u0005\u018b\u0000\u0000\u0f3e"+
		"\u0f3f\u0005\u00a6\u0000\u0000\u0f3f\u0f41\u0003\u05a0\u02d0\u0000\u0f40"+
		"\u0f3c\u0001\u0000\u0000\u0000\u0f40\u0f3d\u0001\u0000\u0000\u0000\u0f40"+
		"\u0f3e\u0001\u0000\u0000\u0000\u0f41\u01af\u0001\u0000\u0000\u0000\u0f42"+
		"\u0f43\u0007\'\u0000\u0000\u0f43\u01b1\u0001\u0000\u0000\u0000\u0f44\u0f48"+
		"\u0005?\u0000\u0000\u0f45\u0f46\u0004\u00d9)\u0000\u0f46\u0f48\u0005\u0006"+
		"\u0000\u0000\u0f47\u0f44\u0001\u0000\u0000\u0000\u0f47\u0f45\u0001\u0000"+
		"\u0000\u0000\u0f47\u0f48\u0001\u0000\u0000\u0000\u0f48\u0f49\u0001\u0000"+
		"\u0000\u0000\u0f49\u0f4a\u0003\u0580\u02c0\u0000\u0f4a\u01b3\u0001\u0000"+
		"\u0000\u0000\u0f4b\u0f50\u0003\u01b6\u00db\u0000\u0f4c\u0f4d\u0005\u001d"+
		"\u0000\u0000\u0f4d\u0f4f\u0003\u01b6\u00db\u0000\u0f4e\u0f4c\u0001\u0000"+
		"\u0000\u0000\u0f4f\u0f52\u0001\u0000\u0000\u0000\u0f50\u0f4e\u0001\u0000"+
		"\u0000\u0000\u0f50\u0f51\u0001\u0000\u0000\u0000\u0f51\u01b5\u0001\u0000"+
		"\u0000\u0000\u0f52\u0f50\u0001\u0000\u0000\u0000\u0f53\u0f54\u0003\u01b8"+
		"\u00dc\u0000\u0f54\u0f56\u0003\u01ba\u00dd\u0000\u0f55\u0f57\u0003\u01be"+
		"\u00df\u0000\u0f56\u0f55\u0001\u0000\u0000\u0000\u0f56\u0f57\u0001\u0000"+
		"\u0000\u0000\u0f57\u0f58\u0001\u0000\u0000\u0000\u0f58\u0f59\u0005 \u0000"+
		"\u0000\u0f59\u0f5a\u0003\u01c0\u00e0\u0000\u0f5a\u0f5b\u0005!\u0000\u0000"+
		"\u0f5b\u0f68\u0001\u0000\u0000\u0000\u0f5c\u0f5d\u0005\u0275\u0000\u0000"+
		"\u0f5d\u0f5f\u0003\u01ba\u00dd\u0000\u0f5e\u0f60\u0003\u01be\u00df\u0000"+
		"\u0f5f\u0f5e\u0001\u0000\u0000\u0000\u0f5f\u0f60\u0001\u0000\u0000\u0000"+
		"\u0f60\u0f61\u0001\u0000\u0000\u0000\u0f61\u0f63\u0005 \u0000\u0000\u0f62"+
		"\u0f64\u0003\u01c0\u00e0\u0000\u0f63\u0f62\u0001\u0000\u0000\u0000\u0f63"+
		"\u0f64\u0001\u0000\u0000\u0000\u0f64\u0f65\u0001\u0000\u0000\u0000\u0f65"+
		"\u0f66\u0005!\u0000\u0000\u0f66\u0f68\u0001\u0000\u0000\u0000\u0f67\u0f53"+
		"\u0001\u0000\u0000\u0000\u0f67\u0f5c\u0001\u0000\u0000\u0000\u0f68\u01b7"+
		"\u0001\u0000\u0000\u0000\u0f69\u0f6a\u0007(\u0000\u0000\u0f6a\u01b9\u0001"+
		"\u0000\u0000\u0000\u0f6b\u0f6c\u0007)\u0000\u0000\u0f6c\u01bb\u0001\u0000"+
		"\u0000\u0000\u0f6d\u0f6e\u0005\u01b6\u0000\u0000\u0f6e\u0f74\u0005\u0127"+
		"\u0000\u0000\u0f6f\u0f71\u0005\u026a\u0000\u0000\u0f70\u0f72\u0003\u01ba"+
		"\u00dd\u0000\u0f71\u0f70\u0001\u0000\u0000\u0000\u0f71\u0f72\u0001\u0000"+
		"\u0000\u0000\u0f72\u0f74\u0001\u0000\u0000\u0000\u0f73\u0f6d\u0001\u0000"+
		"\u0000\u0000\u0f73\u0f6f\u0001\u0000\u0000\u0000\u0f74\u01bd\u0001\u0000"+
		"\u0000\u0000\u0f75\u0f7b\u0005\u00e8\u0000\u0000\u0f76\u0f7c\u0005\u0123"+
		"\u0000\u0000\u0f77\u0f78\u0005\u019b\u0000\u0000\u0f78\u0f7c\u0005Y\u0000"+
		"\u0000\u0f79\u0f7a\u0005\u00f9\u0000\u0000\u0f7a\u0f7c\u0005Y\u0000\u0000"+
		"\u0f7b\u0f76\u0001\u0000\u0000\u0000\u0f7b\u0f77\u0001\u0000\u0000\u0000"+
		"\u0f7b\u0f79\u0001\u0000\u0000\u0000\u0f7c\u01bf\u0001\u0000\u0000\u0000"+
		"\u0f7d\u0f82\u0003\u01c2\u00e1\u0000\u0f7e\u0f7f\u0005\u001d\u0000\u0000"+
		"\u0f7f\u0f81\u0003\u01c2\u00e1\u0000\u0f80\u0f7e\u0001\u0000\u0000\u0000"+
		"\u0f81\u0f84\u0001\u0000\u0000\u0000\u0f82\u0f80\u0001\u0000\u0000\u0000"+
		"\u0f82\u0f83\u0001\u0000\u0000\u0000\u0f83\u01c1\u0001\u0000\u0000\u0000"+
		"\u0f84\u0f82\u0001\u0000\u0000\u0000\u0f85\u0f88\u0003\u0580\u02c0\u0000"+
		"\u0f86\u0f88\u0005\u01b6\u0000\u0000\u0f87\u0f85\u0001\u0000\u0000\u0000"+
		"\u0f87\u0f86\u0001\u0000\u0000\u0000\u0f88\u01c3\u0001\u0000\u0000\u0000"+
		"\u0f89\u0f8b\u0003\u0162\u00b1\u0000\u0f8a\u0f89\u0001\u0000\u0000\u0000"+
		"\u0f8a\u0f8b\u0001\u0000\u0000\u0000\u0f8b\u0f8c\u0001\u0000\u0000\u0000"+
		"\u0f8c\u0f8e\u0005\u026f\u0000\u0000\u0f8d\u0f8f\u0005\u0141\u0000\u0000"+
		"\u0f8e\u0f8d\u0001\u0000\u0000\u0000\u0f8e\u0f8f\u0001\u0000\u0000\u0000"+
		"\u0f8f\u0f91\u0001\u0000\u0000\u0000\u0f90\u0f92\u0005\u0108\u0000\u0000"+
		"\u0f91\u0f90\u0001\u0000\u0000\u0000\u0f91\u0f92\u0001\u0000\u0000\u0000"+
		"\u0f92\u0f93\u0001\u0000\u0000\u0000\u0f93\u0f94\u0003\u0170\u00b8\u0000"+
		"\u0f94\u0f95\u0005\u0207\u0000\u0000\u0f95\u0f97\u0003\u04ea\u0275\u0000"+
		"\u0f96\u0f98\u0003\u0188\u00c4\u0000\u0f97\u0f96\u0001\u0000\u0000\u0000"+
		"\u0f97\u0f98\u0001\u0000\u0000\u0000\u0f98\u0f9a\u0001\u0000\u0000\u0000"+
		"\u0f99\u0f9b\u0003\u016a\u00b5\u0000\u0f9a\u0f99\u0001\u0000\u0000\u0000"+
		"\u0f9a\u0f9b\u0001\u0000\u0000\u0000\u0f9b\u0f9d\u0001\u0000\u0000\u0000"+
		"\u0f9c\u0f9e\u0003\u013e\u009f\u0000\u0f9d\u0f9c\u0001\u0000\u0000\u0000"+
		"\u0f9d\u0f9e\u0001\u0000\u0000\u0000\u0f9e\u01c5\u0001\u0000\u0000\u0000"+
		"\u0f9f\u0fa4\u0003\u01c8\u00e4\u0000\u0fa0\u0fa4\u0003\u01ce\u00e7\u0000"+
		"\u0fa1\u0fa4\u0003\u01d0\u00e8\u0000\u0fa2\u0fa4\u0003\u01d6\u00eb\u0000"+
		"\u0fa3\u0f9f\u0001\u0000\u0000\u0000\u0fa3\u0fa0\u0001\u0000\u0000\u0000"+
		"\u0fa3\u0fa1\u0001\u0000\u0000\u0000\u0fa3\u0fa2\u0001\u0000\u0000\u0000"+
		"\u0fa4\u01c7\u0001\u0000\u0000\u0000\u0fa5\u0fa6\u0005\u0229\u0000\u0000"+
		"\u0fa6\u0faa\u0005\u0259\u0000\u0000\u0fa7\u0fa9\u0003\u01cc\u00e6\u0000"+
		"\u0fa8\u0fa7\u0001\u0000\u0000\u0000\u0fa9\u0fac\u0001\u0000\u0000\u0000"+
		"\u0faa\u0fa8\u0001\u0000\u0000\u0000\u0faa\u0fab\u0001\u0000\u0000\u0000"+
		"\u0fab\u0fbf\u0001\u0000\u0000\u0000\u0fac\u0faa\u0001\u0000\u0000\u0000"+
		"\u0fad\u0faf\u0005x\u0000\u0000\u0fae\u0fb0\u0005\u028f\u0000\u0000\u0faf"+
		"\u0fae\u0001\u0000\u0000\u0000\u0faf\u0fb0\u0001\u0000\u0000\u0000\u0fb0"+
		"\u0fb6\u0001\u0000\u0000\u0000\u0fb1\u0fb3\u0005=\u0000\u0000\u0fb2\u0fb4"+
		"\u0005\u0188\u0000\u0000\u0fb3\u0fb2\u0001\u0000\u0000\u0000\u0fb3\u0fb4"+
		"\u0001\u0000\u0000\u0000\u0fb4\u0fb5\u0001\u0000\u0000\u0000\u0fb5\u0fb7"+
		"\u0005b\u0000\u0000\u0fb6\u0fb1\u0001\u0000\u0000\u0000\u0fb6\u0fb7\u0001"+
		"\u0000\u0000\u0000\u0fb7\u0fbc\u0001\u0000\u0000\u0000\u0fb8\u0fba\u0005"+
		"\u0188\u0000\u0000\u0fb9\u0fb8\u0001\u0000\u0000\u0000\u0fb9\u0fba\u0001"+
		"\u0000\u0000\u0000\u0fba\u0fbb\u0001\u0000\u0000\u0000\u0fbb\u0fbd\u0005"+
		"\u01d3\u0000\u0000\u0fbc\u0fb9\u0001\u0000\u0000\u0000\u0fbc\u0fbd\u0001"+
		"\u0000\u0000\u0000\u0fbd\u0fbf\u0001\u0000\u0000\u0000\u0fbe\u0fa5\u0001"+
		"\u0000\u0000\u0000\u0fbe\u0fad\u0001\u0000\u0000\u0000\u0fbf\u01c9\u0001"+
		"\u0000\u0000\u0000\u0fc0\u0fc2\u0005J\u0000\u0000\u0fc1\u0fc3\u0005\u028f"+
		"\u0000\u0000\u0fc2\u0fc1\u0001\u0000\u0000\u0000\u0fc2\u0fc3\u0001\u0000"+
		"\u0000\u0000\u0fc3\u01cb\u0001\u0000\u0000\u0000\u0fc4\u0fc5\u0005\u028d"+
		"\u0000\u0000\u0fc5\u0fc6\u0005\u0080\u0000\u0000\u0fc6\u0fca\u0005\u0211"+
		"\u0000\u0000\u0fc7\u0fc8\u0005\u01c5\u0000\u0000\u0fc8\u0fca\u0007*\u0000"+
		"\u0000\u0fc9\u0fc4\u0001\u0000\u0000\u0000\u0fc9\u0fc7\u0001\u0000\u0000"+
		"\u0000\u0fca\u01cd\u0001\u0000\u0000\u0000\u0fcb\u0fcc\u0005\u01f9\u0000"+
		"\u0000\u0fcc\u0fe9\u0003\u0580\u02c0\u0000\u0fcd\u0fcf\u0005\u01f0\u0000"+
		"\u0000\u0fce\u0fd0\u0005\u028f\u0000\u0000\u0fcf\u0fce\u0001\u0000\u0000"+
		"\u0000\u0fcf\u0fd0\u0001\u0000\u0000\u0000\u0fd0\u0fe3\u0001\u0000\u0000"+
		"\u0000\u0fd1\u0fd3\u0005\u0257\u0000\u0000\u0fd2\u0fd4\u0005\u01f9\u0000"+
		"\u0000\u0fd3\u0fd2\u0001\u0000\u0000\u0000\u0fd3\u0fd4\u0001\u0000\u0000"+
		"\u0000\u0fd4\u0fd5\u0001\u0000\u0000\u0000\u0fd5\u0fe4\u0003\u0580\u02c0"+
		"\u0000\u0fd6\u0fd8\u0005=\u0000\u0000\u0fd7\u0fd9\u0005\u0188\u0000\u0000"+
		"\u0fd8\u0fd7\u0001\u0000\u0000\u0000\u0fd8\u0fd9\u0001\u0000\u0000\u0000"+
		"\u0fd9\u0fda\u0001\u0000\u0000\u0000\u0fda\u0fdc\u0005b\u0000\u0000\u0fdb"+
		"\u0fd6\u0001\u0000\u0000\u0000\u0fdb\u0fdc\u0001\u0000\u0000\u0000\u0fdc"+
		"\u0fe1\u0001\u0000\u0000\u0000\u0fdd\u0fdf\u0005\u0188\u0000\u0000\u0fde"+
		"\u0fdd\u0001\u0000\u0000\u0000\u0fde\u0fdf\u0001\u0000\u0000\u0000\u0fdf"+
		"\u0fe0\u0001\u0000\u0000\u0000\u0fe0\u0fe2\u0005\u01d3\u0000\u0000\u0fe1"+
		"\u0fde\u0001\u0000\u0000\u0000\u0fe1\u0fe2\u0001\u0000\u0000\u0000\u0fe2"+
		"\u0fe4\u0001\u0000\u0000\u0000\u0fe3\u0fd1\u0001\u0000\u0000\u0000\u0fe3"+
		"\u0fdb\u0001\u0000\u0000\u0000\u0fe4\u0fe9\u0001\u0000\u0000\u0000\u0fe5"+
		"\u0fe6\u0005\u01d3\u0000\u0000\u0fe6\u0fe7\u0005\u01f9\u0000\u0000\u0fe7"+
		"\u0fe9\u0003\u0580\u02c0\u0000\u0fe8\u0fcb\u0001\u0000\u0000\u0000\u0fe8"+
		"\u0fcd\u0001\u0000\u0000\u0000\u0fe8\u0fe5\u0001\u0000\u0000\u0000\u0fe9"+
		"\u01cf\u0001\u0000\u0000\u0000\u0fea\u0feb\u0005\u013a\u0000\u0000\u0feb"+
		"\u0fec\u0007\u0011\u0000\u0000\u0fec\u0ff1\u0003\u01d2\u00e9\u0000\u0fed"+
		"\u0fee\u0005\u001d\u0000\u0000\u0fee\u0ff0\u0003\u01d2\u00e9\u0000\u0fef"+
		"\u0fed\u0001\u0000\u0000\u0000\u0ff0\u0ff3\u0001\u0000\u0000\u0000\u0ff1"+
		"\u0fef\u0001\u0000\u0000\u0000\u0ff1\u0ff2\u0001\u0000\u0000\u0000\u0ff2"+
		"\u0ffb\u0001\u0000\u0000\u0000\u0ff3\u0ff1\u0001\u0000\u0000\u0000\u0ff4"+
		"\u0ff5\u0005\u013a\u0000\u0000\u0ff5\u0ff6\u0005\u0114\u0000\u0000\u0ff6"+
		"\u0ff7\u0005\u00e8\u0000\u0000\u0ff7\u0ffb\u0005H\u0000\u0000\u0ff8\u0ff9"+
		"\u0005\u026c\u0000\u0000\u0ff9\u0ffb\u0007+\u0000\u0000\u0ffa\u0fea\u0001"+
		"\u0000\u0000\u0000\u0ffa\u0ff4\u0001\u0000\u0000\u0000\u0ffa\u0ff8\u0001"+
		"\u0000\u0000\u0000\u0ffb\u01d1\u0001\u0000\u0000\u0000\u0ffc\u0ffe\u0003"+
		"\u0568\u02b4\u0000\u0ffd\u0fff\u0003\u01b2\u00d9\u0000\u0ffe\u0ffd\u0001"+
		"\u0000\u0000\u0000\u0ffe\u0fff\u0001\u0000\u0000\u0000\u0fff\u1000\u0001"+
		"\u0000\u0000\u0000\u1000\u1001\u0003\u01d4\u00ea\u0000\u1001\u01d3\u0001"+
		"\u0000\u0000\u0000\u1002\u1004\u0005\u01c5\u0000\u0000\u1003\u1005\u0005"+
		"\u0138\u0000\u0000\u1004\u1003\u0001\u0000\u0000\u0000\u1004\u1005\u0001"+
		"\u0000\u0000\u0000\u1005\u100b\u0001\u0000\u0000\u0000\u1006\u1008\u0005"+
		"\u0141\u0000\u0000\u1007\u1006\u0001\u0000\u0000\u0000\u1007\u1008\u0001"+
		"\u0000\u0000\u0000\u1008\u1009\u0001\u0000\u0000\u0000\u1009\u100b\u0005"+
		"\u0291\u0000\u0000\u100a\u1002\u0001\u0000\u0000\u0000\u100a\u1007\u0001"+
		"\u0000\u0000\u0000\u100b\u01d5\u0001\u0000\u0000\u0000\u100c\u1029\u0005"+
		"\u0293\u0000\u0000\u100d\u100e\u0007,\u0000\u0000\u100e\u1010\u0003\u01da"+
		"\u00ed\u0000\u100f\u1011\u0007-\u0000\u0000\u1010\u100f\u0001\u0000\u0000"+
		"\u0000\u1010\u1011\u0001\u0000\u0000\u0000\u1011\u102a\u0001\u0000\u0000"+
		"\u0000\u1012\u1013\u0005\u00c3\u0000\u0000\u1013\u1019\u0003\u01da\u00ed"+
		"\u0000\u1014\u1017\u0005\u0240\u0000\u0000\u1015\u1016\u0005\u00e8\u0000"+
		"\u0000\u1016\u1018\u0005\u016b\u0000\u0000\u1017\u1015\u0001\u0000\u0000"+
		"\u0000\u1017\u1018\u0001\u0000\u0000\u0000\u1018\u101a\u0001\u0000\u0000"+
		"\u0000\u1019\u1014\u0001\u0000\u0000\u0000\u1019\u101a\u0001\u0000\u0000"+
		"\u0000\u101a\u102a\u0001\u0000\u0000\u0000\u101b\u101c\u0005\u01b3\u0000"+
		"\u0000\u101c\u102a\u0003\u01da\u00ed\u0000\u101d\u101e\u0005x\u0000\u0000"+
		"\u101e\u1021\u0003\u01da\u00ed\u0000\u101f\u1020\u0005\u0192\u0000\u0000"+
		"\u1020\u1022\u0005\u01a9\u0000\u0000\u1021\u101f\u0001\u0000\u0000\u0000"+
		"\u1021\u1022\u0001\u0000\u0000\u0000\u1022\u102a\u0001\u0000\u0000\u0000"+
		"\u1023\u1024\u0005\u01f0\u0000\u0000\u1024\u102a\u0003\u01da\u00ed\u0000"+
		"\u1025\u1027\u0005\u01c9\u0000\u0000\u1026\u1028\u0003\u01d8\u00ec\u0000"+
		"\u1027\u1026\u0001\u0000\u0000\u0000\u1027\u1028\u0001\u0000\u0000\u0000"+
		"\u1028\u102a\u0001\u0000\u0000\u0000\u1029\u100d\u0001\u0000\u0000\u0000"+
		"\u1029\u1012\u0001\u0000\u0000\u0000\u1029\u101b\u0001\u0000\u0000\u0000"+
		"\u1029\u101d\u0001\u0000\u0000\u0000\u1029\u1023\u0001\u0000\u0000\u0000"+
		"\u1029\u1025\u0001\u0000\u0000\u0000\u102a\u01d7\u0001\u0000\u0000\u0000"+
		"\u102b\u102c\u0005\u0088\u0000\u0000\u102c\u102d\u0005\u0294\u0000\u0000"+
		"\u102d\u01d9\u0001\u0000\u0000\u0000\u102e\u1035\u0003\u05a2\u02d1\u0000"+
		"\u102f\u1030\u0005\u001d\u0000\u0000\u1030\u1033\u0003\u05a2\u02d1\u0000"+
		"\u1031\u1032\u0005\u001d\u0000\u0000\u1032\u1034\u0003\u058c\u02c6\u0000"+
		"\u1033\u1031\u0001\u0000\u0000\u0000\u1033\u1034\u0001\u0000\u0000\u0000"+
		"\u1034\u1036\u0001\u0000\u0000\u0000\u1035\u102f\u0001\u0000\u0000\u0000"+
		"\u1035\u1036\u0001\u0000\u0000\u0000\u1036\u01db\u0001\u0000\u0000\u0000"+
		"\u1037\u1038\u0005\u01be\u0000\u0000\u1038\u104e\u0003\u01de\u00ef\u0000"+
		"\u1039\u104e\u0003\u01ea\u00f5\u0000\u103a\u103b\u0005\u01e5\u0000\u0000"+
		"\u103b\u1040\u0003\u01e0\u00f0\u0000\u103c\u103d\u0005\u001d\u0000\u0000"+
		"\u103d\u103f\u0003\u01e0\u00f0\u0000\u103e\u103c\u0001\u0000\u0000\u0000"+
		"\u103f\u1042\u0001\u0000\u0000\u0000\u1040\u103e\u0001\u0000\u0000\u0000"+
		"\u1040\u1041\u0001\u0000\u0000\u0000\u1041\u104e\u0001\u0000\u0000\u0000"+
		"\u1042\u1040\u0001\u0000\u0000\u0000\u1043\u1044\u0005\u01e5\u0000\u0000"+
		"\u1044\u1046\u0005\u029a\u0000\u0000\u1045\u1047\u0003\u04d6\u026b\u0000"+
		"\u1046\u1045\u0001\u0000\u0000\u0000\u1046\u1047\u0001\u0000\u0000\u0000"+
		"\u1047\u104e\u0001\u0000\u0000\u0000\u1048\u104e\u0003\u0240\u0120\u0000"+
		"\u1049\u104e\u0003\u0242\u0121\u0000\u104a\u104e\u0003\u0232\u0119\u0000"+
		"\u104b\u104e\u0003\u01e6\u00f3\u0000\u104c\u104e\u0003\u0252\u0129\u0000"+
		"\u104d\u1037\u0001\u0000\u0000\u0000\u104d\u1039\u0001\u0000\u0000\u0000"+
		"\u104d\u103a\u0001\u0000\u0000\u0000\u104d\u1043\u0001\u0000\u0000\u0000"+
		"\u104d\u1048\u0001\u0000\u0000\u0000\u104d\u1049\u0001\u0000\u0000\u0000"+
		"\u104d\u104a\u0001\u0000\u0000\u0000\u104d\u104b\u0001\u0000\u0000\u0000"+
		"\u104d\u104c\u0001\u0000\u0000\u0000\u104e\u01dd\u0001\u0000\u0000\u0000"+
		"\u104f\u1050\u0007.\u0000\u0000\u1050\u1055\u0005\u013c\u0000\u0000\u1051"+
		"\u1052\u0005\u0257\u0000\u0000\u1052\u1056\u0003\u05a6\u02d3\u0000\u1053"+
		"\u1054\u0005I\u0000\u0000\u1054\u1056\u0003\u0390\u01c8\u0000\u1055\u1051"+
		"\u0001\u0000\u0000\u0000\u1055\u1053\u0001\u0000\u0000\u0000\u1056\u01df"+
		"\u0001\u0000\u0000\u0000\u1057\u1059\u0003\u01e2\u00f1\u0000\u1058\u105a"+
		"\u0003\u01e4\u00f2\u0000\u1059\u1058\u0001\u0000\u0000\u0000\u1059\u105a"+
		"\u0001\u0000\u0000\u0000\u105a\u1063\u0001\u0000\u0000\u0000\u105b\u105d"+
		"\u0003\u025e\u012f\u0000\u105c\u105e\u00059\u0000\u0000\u105d\u105c\u0001"+
		"\u0000\u0000\u0000\u105d\u105e\u0001\u0000\u0000\u0000\u105e\u1060\u0001"+
		"\u0000\u0000\u0000\u105f\u1061\u0003\u0408\u0204\u0000\u1060\u105f\u0001"+
		"\u0000\u0000\u0000\u1060\u1061\u0001\u0000\u0000\u0000\u1061\u1063\u0001"+
		"\u0000\u0000\u0000\u1062\u1057\u0001\u0000\u0000\u0000\u1062\u105b\u0001"+
		"\u0000\u0000\u0000\u1063\u01e1\u0001\u0000\u0000\u0000\u1064\u106b\u0005"+
		"\u0155\u0000\u0000\u1065\u1066\u0004\u00f1*\u0000\u1066\u1067\u0005M\u0000"+
		"\u0000\u1067\u1068\u0005\u013c\u0000\u0000\u1068\u1069\u0005=\u0000\u0000"+
		"\u1069\u106b\u0005\u0329\u0000\u0000\u106a\u1064\u0001\u0000\u0000\u0000"+
		"\u106a\u1065\u0001\u0000\u0000\u0000\u106b\u01e3\u0001\u0000\u0000\u0000"+
		"\u106c\u106d\u0005\u0257\u0000\u0000\u106d\u106e\u0003\u0592\u02c9\u0000"+
		"\u106e\u01e5\u0001\u0000\u0000\u0000\u106f\u1073\u0005\u0137\u0000\u0000"+
		"\u1070\u1074\u0005\u0099\u0000\u0000\u1071\u1072\u0005\u0247\u0000\u0000"+
		"\u1072\u1074\u0003\u0568\u02b4\u0000\u1073\u1070\u0001\u0000\u0000\u0000"+
		"\u1073\u1071\u0001\u0000\u0000\u0000\u1074\u1075\u0001\u0000\u0000\u0000"+
		"\u1075\u1076\u0005\u00eb\u0000\u0000\u1076\u1077\u0005\u0155\u0000\u0000"+
		"\u1077\u01e7\u0001\u0000\u0000\u0000\u1078\u107d\u0005\u0155\u0000\u0000"+
		"\u1079\u107a\u0004\u00f4+\u0000\u107a\u107b\u0005\u01dc\u0000\u0000\u107b"+
		"\u107d\u0005\u0215\u0000\u0000\u107c\u1078\u0001\u0000\u0000\u0000\u107c"+
		"\u1079\u0001\u0000\u0000\u0000\u107d\u01e9\u0001\u0000\u0000\u0000\u107e"+
		"\u107f\u0005c\u0000\u0000\u107f\u1080\u0003\u01e8\u00f4\u0000\u1080\u1081"+
		"\u0005\u0257\u0000\u0000\u1081\u1083\u0003\u01ec\u00f6\u0000\u1082\u1084"+
		"\u0003\u0408\u0204\u0000\u1083\u1082\u0001\u0000\u0000\u0000\u1083\u1084"+
		"\u0001\u0000\u0000\u0000\u1084\u01eb\u0001\u0000\u0000\u0000\u1085\u108a"+
		"\u0003\u01ee\u00f7\u0000\u1086\u1087\u0005\u001d\u0000\u0000\u1087\u1089"+
		"\u0003\u01ee\u00f7\u0000\u1088\u1086\u0001\u0000\u0000\u0000\u1089\u108c"+
		"\u0001\u0000\u0000\u0000\u108a\u1088\u0001\u0000\u0000\u0000\u108a\u108b"+
		"\u0001\u0000\u0000\u0000\u108b\u01ed\u0001\u0000\u0000\u0000\u108c\u108a"+
		"\u0001\u0000\u0000\u0000\u108d\u108e\u0003\u01f2\u00f9\u0000\u108e\u108f"+
		"\u0005\u0006\u0000\u0000\u108f\u1090\u0003\u05a8\u02d4\u0000\u1090\u110e"+
		"\u0001\u0000\u0000\u0000\u1091\u1092\u0005\u02e1\u0000\u0000\u1092\u1093"+
		"\u0005\u0006\u0000\u0000\u1093\u110e\u0003\u05a8\u02d4\u0000\u1094\u1095"+
		"\u0003\u01f4\u00fa\u0000\u1095\u1096\u0005\u0006\u0000\u0000\u1096\u1097"+
		"\u0003\u05a8\u02d4\u0000\u1097\u110e\u0001\u0000\u0000\u0000\u1098\u1099"+
		"\u0003\u01f6\u00fb\u0000\u1099\u109a\u0005\u0006\u0000\u0000\u109a\u109b"+
		"\u0003\u05a8\u02d4\u0000\u109b\u110e\u0001\u0000\u0000\u0000\u109c\u109d"+
		"\u0003\u01f8\u00fc\u0000\u109d\u109e\u0005\u0006\u0000\u0000\u109e\u109f"+
		"\u0003\u05a8\u02d4\u0000\u109f\u110e\u0001\u0000\u0000\u0000\u10a0\u10a1"+
		"\u0003\u01fa\u00fd\u0000\u10a1\u10a2\u0005\u0006\u0000\u0000\u10a2\u10a3"+
		"\u0003\u058c\u02c6\u0000\u10a3\u110e\u0001\u0000\u0000\u0000\u10a4\u10a5"+
		"\u0003\u01fc\u00fe\u0000\u10a5\u10a6\u0005\u0006\u0000\u0000\u10a6\u10a7"+
		"\u0003\u058c\u02c6\u0000\u10a7\u110e\u0001\u0000\u0000\u0000\u10a8\u10a9"+
		"\u0003\u01fe\u00ff\u0000\u10a9\u10aa\u0005\u0006\u0000\u0000\u10aa\u10ab"+
		"\u0003\u058c\u02c6\u0000\u10ab\u110e\u0001\u0000\u0000\u0000\u10ac\u10ad"+
		"\u0003\u0200\u0100\u0000\u10ad\u10ae\u0005\u0006\u0000\u0000\u10ae\u10af"+
		"\u0003\u058c\u02c6\u0000\u10af\u110e\u0001\u0000\u0000\u0000\u10b0\u10b1"+
		"\u0003\u0202\u0101\u0000\u10b1\u10b2\u0005\u0006\u0000\u0000\u10b2\u10b3"+
		"\u0003\u058c\u02c6\u0000\u10b3\u110e\u0001\u0000\u0000\u0000\u10b4\u10b5"+
		"\u0003\u0204\u0102\u0000\u10b5\u10b6\u0005\u0006\u0000\u0000\u10b6\u10b7"+
		"\u0003\u05a8\u02d4\u0000\u10b7\u110e\u0001\u0000\u0000\u0000\u10b8\u10b9"+
		"\u0003\u0206\u0103\u0000\u10b9\u10ba\u0005\u0006\u0000\u0000\u10ba\u10bb"+
		"\u0003\u05a8\u02d4\u0000\u10bb\u110e\u0001\u0000\u0000\u0000\u10bc\u10bd"+
		"\u0003\u0212\u0109\u0000\u10bd\u10be\u0005\u0006\u0000\u0000\u10be\u10bf"+
		"\u0003\u05a8\u02d4\u0000\u10bf\u110e\u0001\u0000\u0000\u0000\u10c0\u10c1"+
		"\u0003\u0216\u010b\u0000\u10c1\u10c2\u0005\u0006\u0000\u0000\u10c2\u10c3"+
		"\u0003\u05a8\u02d4\u0000\u10c3\u110e\u0001\u0000\u0000\u0000\u10c4\u10c5"+
		"\u0003\u0214\u010a\u0000\u10c5\u10c6\u0005\u0006\u0000\u0000\u10c6\u10c7"+
		"\u0003\u0228\u0114\u0000\u10c7\u110e\u0001\u0000\u0000\u0000\u10c8\u10c9"+
		"\u0003\u0208\u0104\u0000\u10c9\u10ca\u0005\u0006\u0000\u0000\u10ca\u10cb"+
		"\u0003\u05a8\u02d4\u0000\u10cb\u110e\u0001\u0000\u0000\u0000\u10cc\u10cd"+
		"\u0003\u020e\u0107\u0000\u10cd\u10ce\u0005\u0006\u0000\u0000\u10ce\u10cf"+
		"\u0003\u05a8\u02d4\u0000\u10cf\u110e\u0001\u0000\u0000\u0000\u10d0\u10d1"+
		"\u0003\u0210\u0108\u0000\u10d1\u10d2\u0005\u0006\u0000\u0000\u10d2\u10d3"+
		"\u0003\u058c\u02c6\u0000\u10d3\u110e\u0001\u0000\u0000\u0000\u10d4\u10d5"+
		"\u0003\u020a\u0105\u0000\u10d5\u10d6\u0005\u0006\u0000\u0000\u10d6\u10d7"+
		"\u0003\u05a6\u02d3\u0000\u10d7\u110e\u0001\u0000\u0000\u0000\u10d8\u10d9"+
		"\u0003\u020c\u0106\u0000\u10d9\u10da\u0005\u0006\u0000\u0000\u10da\u10db"+
		"\u0003\u05a8\u02d4\u0000\u10db\u110e\u0001\u0000\u0000\u0000\u10dc\u10dd"+
		"\u0003\u0218\u010c\u0000\u10dd\u10de\u0005\u0006\u0000\u0000\u10de\u10df"+
		"\u0003\u05a8\u02d4\u0000\u10df\u110e\u0001\u0000\u0000\u0000\u10e0\u10e1"+
		"\u0003\u021a\u010d\u0000\u10e1\u10e2\u0005\u0006\u0000\u0000\u10e2\u10e3"+
		"\u0003\u058c\u02c6\u0000\u10e3\u110e\u0001\u0000\u0000\u0000\u10e4\u10e5"+
		"\u0003\u021c\u010e\u0000\u10e5\u10e6\u0005\u0006\u0000\u0000\u10e6\u10e7"+
		"\u0003\u058c\u02c6\u0000\u10e7\u110e\u0001\u0000\u0000\u0000\u10e8\u10e9"+
		"\u0005\u0109\u0000\u0000\u10e9\u10ea\u0005\u0006\u0000\u0000\u10ea\u110e"+
		"\u0003\u0230\u0118\u0000\u10eb\u10ec\u0003\u021e\u010f\u0000\u10ec\u10ed"+
		"\u0005\u0006\u0000\u0000\u10ed\u10ee\u0003\u05a0\u02d0\u0000\u10ee\u110e"+
		"\u0001\u0000\u0000\u0000\u10ef\u10f0\u0003\u0220\u0110\u0000\u10f0\u10f1"+
		"\u0005\u0006\u0000\u0000\u10f1\u10f2\u0003\u058c\u02c6\u0000\u10f2\u110e"+
		"\u0001\u0000\u0000\u0000\u10f3\u10f4\u0003\u01f0\u00f8\u0000\u10f4\u10f5"+
		"\u0005\u0006\u0000\u0000\u10f5\u10f6\u0003\u058c\u02c6\u0000\u10f6\u110e"+
		"\u0001\u0000\u0000\u0000\u10f7\u10f8\u0005\u02e9\u0000\u0000\u10f8\u10f9"+
		"\u0005\u0006\u0000\u0000\u10f9\u110e\u0003\u0222\u0111\u0000\u10fa\u10fb"+
		"\u0005\u02eb\u0000\u0000\u10fb\u10fc\u0005\u0006\u0000\u0000\u10fc\u110e"+
		"\u0003\u058c\u02c6\u0000\u10fd\u10fe\u0005\u02ee\u0000\u0000\u10fe\u10ff"+
		"\u0005\u0006\u0000\u0000\u10ff\u110e\u0003\u0224\u0112\u0000\u1100\u1101"+
		"\u0004\u00f7,\u0000\u1101\u1102\u0005\u02f7\u0000\u0000\u1102\u1103\u0005"+
		"\u0006\u0000\u0000\u1103\u110e\u0003\u058e\u02c7\u0000\u1104\u1105\u0004"+
		"\u00f7-\u0000\u1105\u1106\u0005\u02fc\u0000\u0000\u1106\u1107\u0005\u0006"+
		"\u0000\u0000\u1107\u110e\u0003\u0226\u0113\u0000\u1108\u1109\u0004\u00f7"+
		".\u0000\u1109\u110a\u0005\u0322\u0000\u0000\u110a\u110b\u0005\u0006\u0000"+
		"\u0000\u110b\u110e\u0003\u058e\u02c7\u0000\u110c\u110e\u0003\u022a\u0115"+
		"\u0000\u110d\u108d\u0001\u0000\u0000\u0000\u110d\u1091\u0001\u0000\u0000"+
		"\u0000\u110d\u1094\u0001\u0000\u0000\u0000\u110d\u1098\u0001\u0000\u0000"+
		"\u0000\u110d\u109c\u0001\u0000\u0000\u0000\u110d\u10a0\u0001\u0000\u0000"+
		"\u0000\u110d\u10a4\u0001\u0000\u0000\u0000\u110d\u10a8\u0001\u0000\u0000"+
		"\u0000\u110d\u10ac\u0001\u0000\u0000\u0000\u110d\u10b0\u0001\u0000\u0000"+
		"\u0000\u110d\u10b4\u0001\u0000\u0000\u0000\u110d\u10b8\u0001\u0000\u0000"+
		"\u0000\u110d\u10bc\u0001\u0000\u0000\u0000\u110d\u10c0\u0001\u0000\u0000"+
		"\u0000\u110d\u10c4\u0001\u0000\u0000\u0000\u110d\u10c8\u0001\u0000\u0000"+
		"\u0000\u110d\u10cc\u0001\u0000\u0000\u0000\u110d\u10d0\u0001\u0000\u0000"+
		"\u0000\u110d\u10d4\u0001\u0000\u0000\u0000\u110d\u10d8\u0001\u0000\u0000"+
		"\u0000\u110d\u10dc\u0001\u0000\u0000\u0000\u110d\u10e0\u0001\u0000\u0000"+
		"\u0000\u110d\u10e4\u0001\u0000\u0000\u0000\u110d\u10e8\u0001\u0000\u0000"+
		"\u0000\u110d\u10eb\u0001\u0000\u0000\u0000\u110d\u10ef\u0001\u0000\u0000"+
		"\u0000\u110d\u10f3\u0001\u0000\u0000\u0000\u110d\u10f7\u0001\u0000\u0000"+
		"\u0000\u110d\u10fa\u0001\u0000\u0000\u0000\u110d\u10fd\u0001\u0000\u0000"+
		"\u0000\u110d\u1100\u0001\u0000\u0000\u0000\u110d\u1104\u0001\u0000\u0000"+
		"\u0000\u110d\u1108\u0001\u0000\u0000\u0000\u110d\u110c\u0001\u0000\u0000"+
		"\u0000\u110e\u01ef\u0001\u0000\u0000\u0000\u110f\u1110\u0007/\u0000\u0000"+
		"\u1110\u01f1\u0001\u0000\u0000\u0000\u1111\u1112\u00070\u0000\u0000\u1112"+
		"\u01f3\u0001\u0000\u0000\u0000\u1113\u1114\u00071\u0000\u0000\u1114\u01f5"+
		"\u0001\u0000\u0000\u0000\u1115\u1116\u00072\u0000\u0000\u1116\u01f7\u0001"+
		"\u0000\u0000\u0000\u1117\u1118\u00073\u0000\u0000\u1118\u01f9\u0001\u0000"+
		"\u0000\u0000\u1119\u111a\u00074\u0000\u0000\u111a\u01fb\u0001\u0000\u0000"+
		"\u0000\u111b\u111c\u00075\u0000\u0000\u111c\u01fd\u0001\u0000\u0000\u0000"+
		"\u111d\u111e\u00076\u0000\u0000\u111e\u01ff\u0001\u0000\u0000\u0000\u111f"+
		"\u1120\u00077\u0000\u0000\u1120\u0201\u0001\u0000\u0000\u0000\u1121\u1122"+
		"\u00078\u0000\u0000\u1122\u0203\u0001\u0000\u0000\u0000\u1123\u1124\u0007"+
		"9\u0000\u0000\u1124\u0205\u0001\u0000\u0000\u0000\u1125\u1126\u0007:\u0000"+
		"\u0000\u1126\u0207\u0001\u0000\u0000\u0000\u1127\u1128\u0007;\u0000\u0000"+
		"\u1128\u0209\u0001\u0000\u0000\u0000\u1129\u112a\u0007<\u0000\u0000\u112a"+
		"\u020b\u0001\u0000\u0000\u0000\u112b\u112c\u0007=\u0000\u0000\u112c\u020d"+
		"\u0001\u0000\u0000\u0000\u112d\u112e\u0007>\u0000\u0000\u112e\u020f\u0001"+
		"\u0000\u0000\u0000\u112f\u1130\u0007?\u0000\u0000\u1130\u0211\u0001\u0000"+
		"\u0000\u0000\u1131\u1132\u0007@\u0000\u0000\u1132\u0213\u0001\u0000\u0000"+
		"\u0000\u1133\u1134\u0007A\u0000\u0000\u1134\u0215\u0001\u0000\u0000\u0000"+
		"\u1135\u1136\u0007B\u0000\u0000\u1136\u0217\u0001\u0000\u0000\u0000\u1137"+
		"\u1138\u0007C\u0000\u0000\u1138\u0219\u0001\u0000\u0000\u0000\u1139\u113a"+
		"\u0007D\u0000\u0000\u113a\u021b\u0001\u0000\u0000\u0000\u113b\u113c\u0007"+
		"E\u0000\u0000\u113c\u021d\u0001\u0000\u0000\u0000\u113d\u113e\u0007F\u0000"+
		"\u0000\u113e\u021f\u0001\u0000\u0000\u0000\u113f\u1140\u0007G\u0000\u0000"+
		"\u1140\u0221\u0001\u0000\u0000\u0000\u1141\u1144\u0003\u051a\u028d\u0000"+
		"\u1142\u1144\u0005\u018b\u0000\u0000\u1143\u1141\u0001\u0000\u0000\u0000"+
		"\u1143\u1142\u0001\u0000\u0000\u0000\u1144\u0223\u0001\u0000\u0000\u0000"+
		"\u1145\u1146\u0007H\u0000\u0000\u1146\u0225\u0001\u0000\u0000\u0000\u1147"+
		"\u114b\u0005\u02f0\u0000\u0000\u1148\u114b\u0005\u0138\u0000\u0000\u1149"+
		"\u114b\u0003\u05a0\u02d0\u0000\u114a\u1147\u0001\u0000\u0000\u0000\u114a"+
		"\u1148\u0001\u0000\u0000\u0000\u114a\u1149\u0001\u0000\u0000\u0000\u114b"+
		"\u0227\u0001\u0000\u0000\u0000\u114c\u114f\u0003\u05a8\u02d4\u0000\u114d"+
		"\u114f\u0005\u018b\u0000\u0000\u114e\u114c\u0001\u0000\u0000\u0000\u114e"+
		"\u114d\u0001\u0000\u0000\u0000\u114f\u0229\u0001\u0000\u0000\u0000\u1150"+
		"\u1151\u0003\u022c\u0116\u0000\u1151\u1152\u0005\u0006\u0000\u0000\u1152"+
		"\u1153\u0003\u05a8\u02d4\u0000\u1153\u115f\u0001\u0000\u0000\u0000\u1154"+
		"\u1155\u0003\u022e\u0117\u0000\u1155\u1156\u0005\u0006\u0000\u0000\u1156"+
		"\u1157\u0003\u0590\u02c8\u0000\u1157\u115f\u0001\u0000\u0000\u0000\u1158"+
		"\u1159\u0005\u01d0\u0000\u0000\u1159\u115a\u0005\u0006\u0000\u0000\u115a"+
		"\u115f\u0003\u05a8\u02d4\u0000\u115b\u115c\u0005\u01d1\u0000\u0000\u115c"+
		"\u115d\u0005\u0006\u0000\u0000\u115d\u115f\u0003\u058c\u02c6\u0000\u115e"+
		"\u1150\u0001\u0000\u0000\u0000\u115e\u1154\u0001\u0000\u0000\u0000\u115e"+
		"\u1158\u0001\u0000\u0000\u0000\u115e\u115b\u0001\u0000\u0000\u0000\u115f"+
		"\u022b\u0001\u0000\u0000\u0000\u1160\u1161\u0007I\u0000\u0000\u1161\u022d"+
		"\u0001\u0000\u0000\u0000\u1162\u1163\u0007J\u0000\u0000\u1163\u022f\u0001"+
		"\u0000\u0000\u0000\u1164\u116d\u0005 \u0000\u0000\u1165\u116a\u0003\u058c"+
		"\u02c6\u0000\u1166\u1167\u0005\u001d\u0000\u0000\u1167\u1169\u0003\u058c"+
		"\u02c6\u0000\u1168\u1166\u0001\u0000\u0000\u0000\u1169\u116c\u0001\u0000"+
		"\u0000\u0000\u116a\u1168\u0001\u0000\u0000\u0000\u116a\u116b\u0001\u0000"+
		"\u0000\u0000\u116b\u116e\u0001\u0000\u0000\u0000\u116c\u116a\u0001\u0000"+
		"\u0000\u0000\u116d\u1165\u0001\u0000\u0000\u0000\u116d\u116e\u0001\u0000"+
		"\u0000\u0000\u116e\u116f\u0001\u0000\u0000\u0000\u116f\u1170\u0005!\u0000"+
		"\u0000\u1170\u0231\u0001\u0000\u0000\u0000\u1171\u1172\u0005c\u0000\u0000"+
		"\u1172\u1173\u0005\u01dc\u0000\u0000\u1173\u1174\u0005\u00e0\u0000\u0000"+
		"\u1174\u1179\u0003\u0234\u011a\u0000\u1175\u1176\u0005\u001d\u0000\u0000"+
		"\u1176\u1178\u0003\u0234\u011a\u0000\u1177\u1175\u0001\u0000\u0000\u0000"+
		"\u1178\u117b\u0001\u0000\u0000\u0000\u1179\u1177\u0001\u0000\u0000\u0000"+
		"\u1179\u117a\u0001\u0000\u0000\u0000\u117a\u117d\u0001\u0000\u0000\u0000"+
		"\u117b\u1179\u0001\u0000\u0000\u0000\u117c\u117e\u0003\u0408\u0204\u0000"+
		"\u117d\u117c\u0001\u0000\u0000\u0000\u117d\u117e\u0001\u0000\u0000\u0000"+
		"\u117e\u0233\u0001\u0000\u0000\u0000\u117f\u1180\u0005\u01dd\u0000\u0000"+
		"\u1180\u1181\u0005\u0006\u0000\u0000\u1181\u1183\u0005 \u0000\u0000\u1182"+
		"\u1184\u0003\u0236\u011b\u0000\u1183\u1182\u0001\u0000\u0000\u0000\u1183"+
		"\u1184\u0001\u0000\u0000\u0000\u1184\u1185\u0001\u0000\u0000\u0000\u1185"+
		"\u11b1\u0005!\u0000\u0000\u1186\u1187\u0005\u01de\u0000\u0000\u1187\u1188"+
		"\u0005\u0006\u0000\u0000\u1188\u118a\u0005 \u0000\u0000\u1189\u118b\u0003"+
		"\u0236\u011b\u0000\u118a\u1189\u0001\u0000\u0000\u0000\u118a\u118b\u0001"+
		"\u0000\u0000\u0000\u118b\u118c\u0001\u0000\u0000\u0000\u118c\u11b1\u0005"+
		"!\u0000\u0000\u118d\u118e\u0005\u01df\u0000\u0000\u118e\u118f\u0005\u0006"+
		"\u0000\u0000\u118f\u1191\u0005 \u0000\u0000\u1190\u1192\u0003\u0238\u011c"+
		"\u0000\u1191\u1190\u0001\u0000\u0000\u0000\u1191\u1192\u0001\u0000\u0000"+
		"\u0000\u1192\u1193\u0001\u0000\u0000\u0000\u1193\u11b1\u0005!\u0000\u0000"+
		"\u1194\u1195\u0005\u01e0\u0000\u0000\u1195\u1196\u0005\u0006\u0000\u0000"+
		"\u1196\u1198\u0005 \u0000\u0000\u1197\u1199\u0003\u0238\u011c\u0000\u1198"+
		"\u1197\u0001\u0000\u0000\u0000\u1198\u1199\u0001\u0000\u0000\u0000\u1199"+
		"\u119a\u0001\u0000\u0000\u0000\u119a\u11b1\u0005!\u0000\u0000\u119b\u119c"+
		"\u0005\u01e1\u0000\u0000\u119c\u119d\u0005\u0006\u0000\u0000\u119d\u119f"+
		"\u0005 \u0000\u0000\u119e\u11a0\u0003\u023a\u011d\u0000\u119f\u119e\u0001"+
		"\u0000\u0000\u0000\u119f\u11a0\u0001\u0000\u0000\u0000\u11a0\u11a1\u0001"+
		"\u0000\u0000\u0000\u11a1\u11b1\u0005!\u0000\u0000\u11a2\u11a3\u0005\u01e2"+
		"\u0000\u0000\u11a3\u11a4\u0005\u0006\u0000\u0000\u11a4\u11a6\u0005 \u0000"+
		"\u0000\u11a5\u11a7\u0003\u023a\u011d\u0000\u11a6\u11a5\u0001\u0000\u0000"+
		"\u0000\u11a6\u11a7\u0001\u0000\u0000\u0000\u11a7\u11a8\u0001\u0000\u0000"+
		"\u0000\u11a8\u11b1\u0005!\u0000\u0000\u11a9\u11aa\u0005\u01e3\u0000\u0000"+
		"\u11aa\u11ab\u0005\u0006\u0000\u0000\u11ab\u11ad\u0005 \u0000\u0000\u11ac"+
		"\u11ae\u0003\u023e\u011f\u0000\u11ad\u11ac\u0001\u0000\u0000\u0000\u11ad"+
		"\u11ae\u0001\u0000\u0000\u0000\u11ae\u11af\u0001\u0000\u0000\u0000\u11af"+
		"\u11b1\u0005!\u0000\u0000\u11b0\u117f\u0001\u0000\u0000\u0000\u11b0\u1186"+
		"\u0001\u0000\u0000\u0000\u11b0\u118d\u0001\u0000\u0000\u0000\u11b0\u1194"+
		"\u0001\u0000\u0000\u0000\u11b0\u119b\u0001\u0000\u0000\u0000\u11b0\u11a2"+
		"\u0001\u0000\u0000\u0000\u11b0\u11a9\u0001\u0000\u0000\u0000\u11b1\u0235"+
		"\u0001\u0000\u0000\u0000\u11b2\u11b7\u0003\u053c\u029e\u0000\u11b3\u11b4"+
		"\u0005\u001d\u0000\u0000\u11b4\u11b6\u0003\u053c\u029e\u0000\u11b5\u11b3"+
		"\u0001\u0000\u0000\u0000\u11b6\u11b9\u0001\u0000\u0000\u0000\u11b7\u11b5"+
		"\u0001\u0000\u0000\u0000\u11b7\u11b8\u0001\u0000\u0000\u0000\u11b8\u0237"+
		"\u0001\u0000\u0000\u0000\u11b9\u11b7\u0001\u0000\u0000\u0000\u11ba\u11bf"+
		"\u0003\u0564\u02b2\u0000\u11bb\u11bc\u0005\u001d\u0000\u0000\u11bc\u11be"+
		"\u0003\u0564\u02b2\u0000\u11bd\u11bb\u0001\u0000\u0000\u0000\u11be\u11c1"+
		"\u0001\u0000\u0000\u0000\u11bf\u11bd\u0001\u0000\u0000\u0000\u11bf\u11c0"+
		"\u0001\u0000\u0000\u0000\u11c0\u0239\u0001\u0000\u0000\u0000\u11c1\u11bf"+
		"\u0001\u0000\u0000\u0000\u11c2\u11c7\u0003\u023c\u011e\u0000\u11c3\u11c4"+
		"\u0005\u001d\u0000\u0000\u11c4\u11c6\u0003\u023c\u011e\u0000\u11c5\u11c3"+
		"\u0001\u0000\u0000\u0000\u11c6\u11c9\u0001\u0000\u0000\u0000\u11c7\u11c5"+
		"\u0001\u0000\u0000\u0000\u11c7\u11c8\u0001\u0000\u0000\u0000\u11c8\u023b"+
		"\u0001\u0000\u0000\u0000\u11c9\u11c7\u0001\u0000\u0000\u0000\u11ca\u11cb"+
		"\u0003\u05a8\u02d4\u0000\u11cb\u023d\u0001\u0000\u0000\u0000\u11cc\u11d1"+
		"\u0003\u04e6\u0273\u0000\u11cd\u11ce\u0005\u001d\u0000\u0000\u11ce\u11d0"+
		"\u0003\u04e6\u0273\u0000\u11cf\u11cd\u0001\u0000\u0000\u0000\u11d0\u11d3"+
		"\u0001\u0000\u0000\u0000\u11d1\u11cf\u0001\u0000\u0000\u0000\u11d1\u11d2"+
		"\u0001\u0000\u0000\u0000\u11d2\u023f\u0001\u0000\u0000\u0000\u11d3\u11d1"+
		"\u0001\u0000\u0000\u0000\u11d4\u11d5\u0005\u0229\u0000\u0000\u11d5\u11d7"+
		"\u0003\u025e\u012f\u0000\u11d6\u11d8\u0003\u024e\u0127\u0000\u11d7\u11d6"+
		"\u0001\u0000\u0000\u0000\u11d7\u11d8\u0001\u0000\u0000\u0000\u11d8\u11db"+
		"\u0001\u0000\u0000\u0000\u11d9\u11da\u0005\u026e\u0000\u0000\u11da\u11dc"+
		"\u0003\u0244\u0122\u0000\u11db\u11d9\u0001\u0000\u0000\u0000\u11db\u11dc"+
		"\u0001\u0000\u0000\u0000\u11dc\u11de\u0001\u0000\u0000\u0000\u11dd\u11df"+
		"\u0003\u0246\u0123\u0000\u11de\u11dd\u0001\u0000\u0000\u0000\u11de\u11df"+
		"\u0001\u0000\u0000\u0000\u11df\u11e1\u0001\u0000\u0000\u0000\u11e0\u11e2"+
		"\u0003\u0248\u0124\u0000\u11e1\u11e0\u0001\u0000\u0000\u0000\u11e1\u11e2"+
		"\u0001\u0000\u0000\u0000\u11e2\u11e4\u0001\u0000\u0000\u0000\u11e3\u11e5"+
		"\u0003\u024a\u0125\u0000\u11e4\u11e3\u0001\u0000\u0000\u0000\u11e4\u11e5"+
		"\u0001\u0000\u0000\u0000\u11e5\u11e7\u0001\u0000\u0000\u0000\u11e6\u11e8"+
		"\u0003\u024c\u0126\u0000\u11e7\u11e6\u0001\u0000\u0000\u0000\u11e7\u11e8"+
		"\u0001\u0000\u0000\u0000\u11e8\u11ea\u0001\u0000\u0000\u0000\u11e9\u11eb"+
		"\u0003\u0408\u0204\u0000\u11ea\u11e9\u0001\u0000\u0000\u0000\u11ea\u11eb"+
		"\u0001\u0000\u0000\u0000\u11eb\u0241\u0001\u0000\u0000\u0000\u11ec\u11ed"+
		"\u0005\u0232\u0000\u0000\u11ed\u11ef\u0003\u025e\u012f\u0000\u11ee\u11f0"+
		"\u0003\u024e\u0127\u0000\u11ef\u11ee\u0001\u0000\u0000\u0000\u11ef\u11f0"+
		"\u0001\u0000\u0000\u0000\u11f0\u11f2\u0001\u0000\u0000\u0000\u11f1\u11f3"+
		"\u0003\u0408\u0204\u0000\u11f2\u11f1\u0001\u0000\u0000\u0000\u11f2\u11f3"+
		"\u0001\u0000\u0000\u0000\u11f3\u0243\u0001\u0000\u0000\u0000\u11f4\u11fa"+
		"\u0003\u022a\u0115\u0000\u11f5\u11f6\u0007K\u0000\u0000\u11f6\u11f7\u0005"+
		"\u0006\u0000\u0000\u11f7\u11fa\u0003\u05a2\u02d1\u0000\u11f8\u11fa\u0005"+
		"\u021c\u0000\u0000\u11f9\u11f4\u0001\u0000\u0000\u0000\u11f9\u11f5\u0001"+
		"\u0000\u0000\u0000\u11f9\u11f8\u0001\u0000\u0000\u0000\u11fa\u11ff\u0001"+
		"\u0000\u0000\u0000\u11fb\u11fc\u0005\u001d\u0000\u0000\u11fc\u11fe\u0003"+
		"\u022a\u0115\u0000\u11fd\u11fb\u0001\u0000\u0000\u0000\u11fe\u1201\u0001"+
		"\u0000\u0000\u0000\u11ff\u11fd\u0001\u0000\u0000\u0000\u11ff\u1200\u0001"+
		"\u0000\u0000\u0000\u1200\u0245\u0001\u0000\u0000\u0000\u1201\u11ff\u0001"+
		"\u0000\u0000\u0000\u1202\u1203\u0005\u0273\u0000\u0000\u1203\u1204\u0005"+
		"\u0006\u0000\u0000\u1204\u1205\u0003\u05a2\u02d1\u0000\u1205\u0247\u0001"+
		"\u0000\u0000\u0000\u1206\u1207\u0005\u01a8\u0000\u0000\u1207\u1208\u0005"+
		"\u0006\u0000\u0000\u1208\u1209\u0003\u05a2\u02d1\u0000\u1209\u0249\u0001"+
		"\u0000\u0000\u0000\u120a\u120b\u0005\u00a7\u0000\u0000\u120b\u120c\u0005"+
		"\u0006\u0000\u0000\u120c\u120d\u0003\u05a2\u02d1\u0000\u120d\u024b\u0001"+
		"\u0000\u0000\u0000\u120e\u120f\u0005\u01ab\u0000\u0000\u120f\u1210\u0005"+
		"\u0006\u0000\u0000\u1210\u1211\u0003\u05a2\u02d1\u0000\u1211\u024d\u0001"+
		"\u0000\u0000\u0000\u1212\u1217\u0003\u0250\u0128\u0000\u1213\u1214\u0005"+
		"\u001d\u0000\u0000\u1214\u1216\u0003\u0250\u0128\u0000\u1215\u1213\u0001"+
		"\u0000\u0000\u0000\u1216\u1219\u0001\u0000\u0000\u0000\u1217\u1215\u0001"+
		"\u0000\u0000\u0000\u1217\u1218\u0001\u0000\u0000\u0000\u1218\u024f\u0001"+
		"\u0000\u0000\u0000\u1219\u1217\u0001\u0000\u0000\u0000\u121a\u121b\u0007"+
		"L\u0000\u0000\u121b\u0251\u0001\u0000\u0000\u0000\u121c\u121e\u0005\u0229"+
		"\u0000\u0000\u121d\u121f\u0003\u0254\u012a\u0000\u121e\u121d\u0001\u0000"+
		"\u0000\u0000\u121e\u121f\u0001\u0000\u0000\u0000\u121f\u1222\u0001\u0000"+
		"\u0000\u0000\u1220\u1222\u0005\u0232\u0000\u0000\u1221\u121c\u0001\u0000"+
		"\u0000\u0000\u1221\u1220\u0001\u0000\u0000\u0000\u1222\u1223\u0001\u0000"+
		"\u0000\u0000\u1223\u1224\u0005\u00f2\u0000\u0000\u1224\u0253\u0001\u0000"+
		"\u0000\u0000\u1225\u122a\u0003\u0256\u012b\u0000\u1226\u1227\u0005\u001d"+
		"\u0000\u0000\u1227\u1229\u0003\u0256\u012b\u0000\u1228\u1226\u0001\u0000"+
		"\u0000\u0000\u1229\u122c\u0001\u0000\u0000\u0000\u122a\u1228\u0001\u0000"+
		"\u0000\u0000\u122a\u122b\u0001\u0000\u0000\u0000\u122b\u0255\u0001\u0000"+
		"\u0000\u0000\u122c\u122a\u0001\u0000\u0000\u0000\u122d\u1231\u0003\u0258"+
		"\u012c\u0000\u122e\u1231\u0003\u025a\u012d\u0000\u122f\u1231\u0003\u025c"+
		"\u012e\u0000\u1230\u122d\u0001\u0000\u0000\u0000\u1230\u122e\u0001\u0000"+
		"\u0000\u0000\u1230\u122f\u0001\u0000\u0000\u0000\u1231\u0257\u0001\u0000"+
		"\u0000\u0000\u1232\u1233\u0005\u0273\u0000\u0000\u1233\u1234\u0005\u0006"+
		"\u0000\u0000\u1234\u1235\u0003\u05a8\u02d4\u0000\u1235\u0259\u0001\u0000"+
		"\u0000\u0000\u1236\u1237\u0005\u01a8\u0000\u0000\u1237\u1238\u0005\u0006"+
		"\u0000\u0000\u1238\u1239\u0003\u05a8\u02d4\u0000\u1239\u025b\u0001\u0000"+
		"\u0000\u0000\u123a\u123b\u0005\u00a7\u0000\u0000\u123b\u123c\u0005\u0006"+
		"\u0000\u0000\u123c\u123d\u0003\u05a8\u02d4\u0000\u123d\u025d\u0001\u0000"+
		"\u0000\u0000\u123e\u123f\u0007M\u0000\u0000\u123f\u025f\u0001\u0000\u0000"+
		"\u0000\u1240\u1241\u0005\u01b3\u0000\u0000\u1241\u1242\u0003\u0580\u02c0"+
		"\u0000\u1242\u1245\u0005\u00eb\u0000\u0000\u1243\u1246\u0003\u05a6\u02d3"+
		"\u0000\u1244\u1246\u0003\u03dc\u01ee\u0000\u1245\u1243\u0001\u0000\u0000"+
		"\u0000\u1245\u1244\u0001\u0000\u0000\u0000\u1246\u124c\u0001\u0000\u0000"+
		"\u0000\u1247\u124c\u0003\u0262\u0131\u0000\u1248\u1249\u0007N\u0000\u0000"+
		"\u1249\u124a\u0005\u01b3\u0000\u0000\u124a\u124c\u0003\u0580\u02c0\u0000"+
		"\u124b\u1240\u0001\u0000\u0000\u0000\u124b\u1247\u0001\u0000\u0000\u0000"+
		"\u124b\u1248\u0001\u0000\u0000\u0000\u124c\u0261\u0001\u0000\u0000\u0000"+
		"\u124d\u124e\u0005\u00d0\u0000\u0000\u124e\u1251\u0003\u0580\u02c0\u0000"+
		"\u124f\u1250\u0005\u0276\u0000\u0000\u1250\u1252\u0003\u0264\u0132\u0000"+
		"\u1251\u124f\u0001\u0000\u0000\u0000\u1251\u1252\u0001\u0000\u0000\u0000"+
		"\u1252\u0263\u0001\u0000\u0000\u0000\u1253\u1258\u0003\u03dc\u01ee\u0000"+
		"\u1254\u1255\u0005\u001d\u0000\u0000\u1255\u1257\u0003\u03dc\u01ee\u0000"+
		"\u1256\u1254\u0001\u0000\u0000\u0000\u1257\u125a\u0001\u0000\u0000\u0000"+
		"\u1258\u1256\u0001\u0000\u0000\u0000\u1258\u1259\u0001\u0000\u0000\u0000"+
		"\u1259\u0265\u0001\u0000\u0000\u0000\u125a\u1258\u0001\u0000\u0000\u0000"+
		"\u125b\u1274\u0005\u02ad\u0000\u0000\u125c\u125d\u0005\u0138\u0000\u0000"+
		"\u125d\u125e\u0005\u0099\u0000\u0000\u125e\u1260\u0005\u00b0\u0000\u0000"+
		"\u125f\u1261\u0003\u05c6\u02e3\u0000\u1260\u125f\u0001\u0000\u0000\u0000"+
		"\u1260\u1261\u0001\u0000\u0000\u0000\u1261\u1262\u0001\u0000\u0000\u0000"+
		"\u1262\u1275\u0003\u05a0\u02d0\u0000\u1263\u1266\u0005\u02ac\u0000\u0000"+
		"\u1264\u1265\u0005\u00e8\u0000\u0000\u1265\u1267\u0005\u01dc\u0000\u0000"+
		"\u1266\u1264\u0001\u0000\u0000\u0000\u1266\u1267\u0001\u0000\u0000\u0000"+
		"\u1267\u1275\u0001\u0000\u0000\u0000\u1268\u1269\u0004\u0133/\u0000\u1269"+
		"\u126a\u0005\u0114\u0000\u0000\u126a\u126b\u0005\u00eb\u0000\u0000\u126b"+
		"\u126c\u0003\u051c\u028e\u0000\u126c\u126d\u0005\u001f\u0000\u0000\u126d"+
		"\u126e\u0003\u058c\u02c6\u0000\u126e\u126f\u0005\u0106\u0000\u0000\u126f"+
		"\u1270\u0005Y\u0000\u0000\u1270\u1272\u0003\u05a0\u02d0\u0000\u1271\u1273"+
		"\u0003\u0268\u0134\u0000\u1272\u1271\u0001\u0000\u0000\u0000\u1272\u1273"+
		"\u0001\u0000\u0000\u0000\u1273\u1275\u0001\u0000\u0000\u0000\u1274\u125c"+
		"\u0001\u0000\u0000\u0000\u1274\u1263\u0001\u0000\u0000\u0000\u1274\u1268"+
		"\u0001\u0000\u0000\u0000\u1275\u0267\u0001\u0000\u0000\u0000\u1276\u1281"+
		"\u0003\u026a\u0135\u0000\u1277\u1278\u0005\u0099\u0000\u0000\u1278\u127a"+
		"\u0005\u00b0\u0000\u0000\u1279\u127b\u0003\u05c6\u02e3\u0000\u127a\u1279"+
		"\u0001\u0000\u0000\u0000\u127a\u127b\u0001\u0000\u0000\u0000\u127b\u127c"+
		"\u0001\u0000\u0000\u0000\u127c\u127e\u0003\u05a0\u02d0\u0000\u127d\u127f"+
		"\u0003\u026a\u0135\u0000\u127e\u127d\u0001\u0000\u0000\u0000\u127e\u127f"+
		"\u0001\u0000\u0000\u0000\u127f\u1281\u0001\u0000\u0000\u0000\u1280\u1276"+
		"\u0001\u0000\u0000\u0000\u1280\u1277\u0001\u0000\u0000\u0000\u1281\u0269"+
		"\u0001\u0000\u0000\u0000\u1282\u1284\u0005\u01e4\u0000\u0000\u1283\u1285"+
		"\u0005\u0188\u0000\u0000\u1284\u1283\u0001\u0000\u0000\u0000\u1284\u1285"+
		"\u0001\u0000\u0000\u0000\u1285\u1286\u0001\u0000\u0000\u0000\u1286\u1287"+
		"\u0005\u0225\u0000\u0000\u1287\u026b\u0001\u0000\u0000\u0000\u1288\u1290"+
		"\u0003\u026e\u0137\u0000\u1289\u1290\u0003\u0278\u013c\u0000\u128a\u1290"+
		"\u0003\u0288\u0144\u0000\u128b\u1290\u0003\u028a\u0145\u0000\u128c\u1290"+
		"\u0003\u0298\u014c\u0000\u128d\u1290\u0003\u029a\u014d\u0000\u128e\u1290"+
		"\u0003\u02aa\u0155\u0000\u128f\u1288\u0001\u0000\u0000\u0000\u128f\u1289"+
		"\u0001\u0000\u0000\u0000\u128f\u128a\u0001\u0000\u0000\u0000\u128f\u128b"+
		"\u0001\u0000\u0000\u0000\u128f\u128c\u0001\u0000\u0000\u0000\u128f\u128d"+
		"\u0001\u0000\u0000\u0000\u128f\u128e\u0001\u0000\u0000\u0000\u1290\u026d"+
		"\u0001\u0000\u0000\u0000\u1291\u1292\u0005:\u0000\u0000\u1292\u1294\u0005"+
		"\u0273\u0000\u0000\u1293\u1295\u0003\u04d4\u026a\u0000\u1294\u1293\u0001"+
		"\u0000\u0000\u0000\u1294\u1295\u0001\u0000\u0000\u0000\u1295\u12be\u0001"+
		"\u0000\u0000\u0000\u1296\u1297\u0004\u01370\u0000\u1297\u129b\u0003\u04fa"+
		"\u027d\u0000\u1298\u1299\u0004\u01371\u0000\u1299\u129b\u0003\u0270\u0138"+
		"\u0000\u129a\u1296\u0001\u0000\u0000\u0000\u129a\u1298\u0001\u0000\u0000"+
		"\u0000\u129b\u129c\u0001\u0000\u0000\u0000\u129c\u129d\u0003\u027a\u013d"+
		"\u0000\u129d\u12bf\u0001\u0000\u0000\u0000\u129e\u12af\u0003\u0276\u013b"+
		"\u0000\u129f\u12a2\u0003\u0504\u0282\u0000\u12a0\u12a2\u0003\u0502\u0281"+
		"\u0000\u12a1\u129f\u0001\u0000\u0000\u0000\u12a1\u12a0\u0001\u0000\u0000"+
		"\u0000\u12a2\u12a4\u0001\u0000\u0000\u0000\u12a3\u12a5\u0003\u0518\u028c"+
		"\u0000\u12a4\u12a3\u0001\u0000\u0000\u0000\u12a4\u12a5\u0001\u0000\u0000"+
		"\u0000\u12a5\u12a7\u0001\u0000\u0000\u0000\u12a6\u12a8\u0003\u0510\u0288"+
		"\u0000\u12a7\u12a6\u0001\u0000\u0000\u0000\u12a7\u12a8\u0001\u0000\u0000"+
		"\u0000\u12a8\u12b0\u0001\u0000\u0000\u0000\u12a9\u12aa\u0005\u00b2\u0000"+
		"\u0000\u12aa\u12ab\u0005\u02e0\u0000\u0000\u12ab\u12b0\u0005\u01a8\u0000"+
		"\u0000\u12ac\u12ae\u0003\u0514\u028a\u0000\u12ad\u12ac\u0001\u0000\u0000"+
		"\u0000\u12ad\u12ae\u0001\u0000\u0000\u0000\u12ae\u12b0\u0001\u0000\u0000"+
		"\u0000\u12af\u12a1\u0001\u0000\u0000\u0000\u12af\u12a9\u0001\u0000\u0000"+
		"\u0000\u12af\u12ad\u0001\u0000\u0000\u0000\u12b0\u12bf\u0001\u0000\u0000"+
		"\u0000\u12b1\u12bc\u0003\u051c\u028e\u0000\u12b2\u12b3\u0005\u00a6\u0000"+
		"\u0000\u12b3\u12b7\u0005\u029b\u0000\u0000\u12b4\u12b8\u00059\u0000\u0000"+
		"\u12b5\u12b8\u0005\u0185\u0000\u0000\u12b6\u12b8\u0003\u02ac\u0156\u0000"+
		"\u12b7\u12b4\u0001\u0000\u0000\u0000\u12b7\u12b5\u0001\u0000\u0000\u0000"+
		"\u12b7\u12b6\u0001\u0000\u0000\u0000\u12b8\u12bd\u0001\u0000\u0000\u0000"+
		"\u12b9\u12bb\u0003\u0514\u028a\u0000\u12ba\u12b9\u0001\u0000\u0000\u0000"+
		"\u12ba\u12bb\u0001\u0000\u0000\u0000\u12bb\u12bd\u0001\u0000\u0000\u0000"+
		"\u12bc\u12b2\u0001\u0000\u0000\u0000\u12bc\u12ba\u0001\u0000\u0000\u0000"+
		"\u12bd\u12bf\u0001\u0000\u0000\u0000\u12be\u129a\u0001\u0000\u0000\u0000"+
		"\u12be\u129e\u0001\u0000\u0000\u0000\u12be\u12b1\u0001\u0000\u0000\u0000"+
		"\u12bf\u026f\u0001\u0000\u0000\u0000\u12c0\u12c5\u0003\u0272\u0139\u0000"+
		"\u12c1\u12c2\u0005\u001d\u0000\u0000\u12c2\u12c4\u0003\u0272\u0139\u0000"+
		"\u12c3\u12c1\u0001\u0000\u0000\u0000\u12c4\u12c7\u0001\u0000\u0000\u0000"+
		"\u12c5\u12c3\u0001\u0000\u0000\u0000\u12c5\u12c6\u0001\u0000\u0000\u0000"+
		"\u12c6\u0271\u0001\u0000\u0000\u0000\u12c7\u12c5\u0001\u0000\u0000\u0000"+
		"\u12c8\u12c9\u0004\u01392\u0000\u12c9\u1314\u0003\u0274\u013a\u0000\u12ca"+
		"\u12cb\u0004\u01393\u0000\u12cb\u1311\u0003\u051c\u028e\u0000\u12cc\u12d5"+
		"\u0003\u0502\u0281\u0000\u12cd\u12ce\u0005\u01db\u0000\u0000\u12ce\u12d0"+
		"\u0003\u05a0\u02d0\u0000\u12cf\u12d1\u0003\u0510\u0288\u0000\u12d0\u12cf"+
		"\u0001\u0000\u0000\u0000\u12d0\u12d1\u0001\u0000\u0000\u0000\u12d1\u12d6"+
		"\u0001\u0000\u0000\u0000\u12d2\u12d4\u0003\u0510\u0288\u0000\u12d3\u12d2"+
		"\u0001\u0000\u0000\u0000\u12d3\u12d4\u0001\u0000\u0000\u0000\u12d4\u12d6"+
		"\u0001\u0000\u0000\u0000\u12d5\u12cd\u0001\u0000\u0000\u0000\u12d5\u12d3"+
		"\u0001\u0000\u0000\u0000\u12d6\u1312\u0001\u0000\u0000\u0000\u12d7\u12e0"+
		"\u0003\u0504\u0282\u0000\u12d8\u12da\u0003\u0510\u0288\u0000\u12d9\u12d8"+
		"\u0001\u0000\u0000\u0000\u12d9\u12da\u0001\u0000\u0000\u0000\u12da\u12e1"+
		"\u0001\u0000\u0000\u0000\u12db\u12dc\u0005\u01db\u0000\u0000\u12dc\u12de"+
		"\u0003\u05a0\u02d0\u0000\u12dd\u12df\u0003\u0510\u0288\u0000\u12de\u12dd"+
		"\u0001\u0000\u0000\u0000\u12de\u12df\u0001\u0000\u0000\u0000\u12df\u12e1"+
		"\u0001\u0000\u0000\u0000\u12e0\u12d9\u0001\u0000\u0000\u0000\u12e0\u12db"+
		"\u0001\u0000\u0000\u0000\u12e1\u1312\u0001\u0000\u0000\u0000\u12e2\u1312"+
		"\u0003\u0506\u0283\u0000\u12e3\u12e5\u0003\u0508\u0284\u0000\u12e4\u12e6"+
		"\u0003\u0510\u0288\u0000\u12e5\u12e4\u0001\u0000\u0000\u0000\u12e5\u12e6"+
		"\u0001\u0000\u0000\u0000\u12e6\u1312\u0001\u0000\u0000\u0000\u12e7\u12f0"+
		"\u0003\u050a\u0285\u0000\u12e8\u12e9\u0005\u01db\u0000\u0000\u12e9\u12eb"+
		"\u0003\u05a0\u02d0\u0000\u12ea\u12ec\u0003\u0510\u0288\u0000\u12eb\u12ea"+
		"\u0001\u0000\u0000\u0000\u12eb\u12ec\u0001\u0000\u0000\u0000\u12ec\u12f1"+
		"\u0001\u0000\u0000\u0000\u12ed\u12ef\u0003\u0510\u0288\u0000\u12ee\u12ed"+
		"\u0001\u0000\u0000\u0000\u12ee\u12ef\u0001\u0000\u0000\u0000\u12ef\u12f1"+
		"\u0001\u0000\u0000\u0000\u12f0\u12e8\u0001\u0000\u0000\u0000\u12f0\u12ee"+
		"\u0001\u0000\u0000\u0000\u12f1\u1312\u0001\u0000\u0000\u0000\u12f2\u12f4"+
		"\u0003\u050c\u0286\u0000\u12f3\u12f5\u0003\u0510\u0288\u0000\u12f4\u12f3"+
		"\u0001\u0000\u0000\u0000\u12f4\u12f5\u0001\u0000\u0000\u0000\u12f5\u1312"+
		"\u0001\u0000\u0000\u0000\u12f6\u12f8\u0003\u0512\u0289\u0000\u12f7\u12f6"+
		"\u0001\u0000\u0000\u0000\u12f7\u12f8\u0001\u0000\u0000\u0000\u12f8\u1312"+
		"\u0001\u0000\u0000\u0000\u12f9\u12fa\u00053\u0000\u0000\u12fa\u12fb\u0003"+
		"\u0516\u028b\u0000\u12fb\u1300\u0003\u0500\u0280\u0000\u12fc\u12fd\u0005"+
		"3\u0000\u0000\u12fd\u12fe\u0003\u0516\u028b\u0000\u12fe\u12ff\u0003\u0500"+
		"\u0280\u0000\u12ff\u1301\u0001\u0000\u0000\u0000\u1300\u12fc\u0001\u0000"+
		"\u0000\u0000\u1300\u1301\u0001\u0000\u0000\u0000\u1301\u1312\u0001\u0000"+
		"\u0000\u0000\u1302\u1303\u0005\u0173\u0000\u0000\u1303\u1304\u0003\u0516"+
		"\u028b\u0000\u1304\u1309\u0003\u0500\u0280\u0000\u1305\u1306\u0005\u0173"+
		"\u0000\u0000\u1306\u1307\u0003\u0516\u028b\u0000\u1307\u1308\u0003\u0500"+
		"\u0280\u0000\u1308\u130a\u0001\u0000\u0000\u0000\u1309\u1305\u0001\u0000"+
		"\u0000\u0000\u1309\u130a\u0001\u0000\u0000\u0000\u130a\u1312\u0001\u0000"+
		"\u0000\u0000\u130b\u130c\u0005\u00b8\u0000\u0000\u130c\u130f\u0003\u0516"+
		"\u028b\u0000\u130d\u130e\u0005\u00b8\u0000\u0000\u130e\u1310\u0003\u0516"+
		"\u028b\u0000\u130f\u130d\u0001\u0000\u0000\u0000\u130f\u1310\u0001\u0000"+
		"\u0000\u0000\u1310\u1312\u0001\u0000\u0000\u0000\u1311\u12cc\u0001\u0000"+
		"\u0000\u0000\u1311\u12d7\u0001\u0000\u0000\u0000\u1311\u12e2\u0001\u0000"+
		"\u0000\u0000\u1311\u12e3\u0001\u0000\u0000\u0000\u1311\u12e7\u0001\u0000"+
		"\u0000\u0000\u1311\u12f2\u0001\u0000\u0000\u0000\u1311\u12f7\u0001\u0000"+
		"\u0000\u0000\u1311\u12f9\u0001\u0000\u0000\u0000\u1311\u1302\u0001\u0000"+
		"\u0000\u0000\u1311\u130b\u0001\u0000\u0000\u0000\u1312\u1314\u0001\u0000"+
		"\u0000\u0000\u1313\u12c8\u0001\u0000\u0000\u0000\u1313\u12ca\u0001\u0000"+
		"\u0000\u0000\u1314\u0273\u0001\u0000\u0000\u0000\u1315\u1316\u0003\u051c"+
		"\u028e\u0000\u1316\u1317\u0005\u0106\u0000\u0000\u1317\u132b\u0005Y\u0000"+
		"\u0000\u1318\u1319\u0003\u05a2\u02d1\u0000\u1319\u131a\u0005\u01db\u0000"+
		"\u0000\u131a\u131c\u0003\u05a2\u02d1\u0000\u131b\u131d\u0003\u0510\u0288"+
		"\u0000\u131c\u131b\u0001\u0000\u0000\u0000\u131c\u131d\u0001\u0000\u0000"+
		"\u0000\u131d\u132c\u0001\u0000\u0000\u0000\u131e\u1320\u0003\u05a2\u02d1"+
		"\u0000\u131f\u1321\u0003\u0510\u0288\u0000\u1320\u131f\u0001\u0000\u0000"+
		"\u0000\u1320\u1321\u0001\u0000\u0000\u0000\u1321\u132c\u0001\u0000\u0000"+
		"\u0000\u1322\u1323\u0005\u02e6\u0000\u0000\u1323\u1326\u0005\u01a8\u0000"+
		"\u0000\u1324\u1325\u0005\u01db\u0000\u0000\u1325\u1327\u0003\u05a2\u02d1"+
		"\u0000\u1326\u1324\u0001\u0000\u0000\u0000\u1326\u1327\u0001\u0000\u0000"+
		"\u0000\u1327\u1329\u0001\u0000\u0000\u0000\u1328\u132a\u0003\u0510\u0288"+
		"\u0000\u1329\u1328\u0001\u0000\u0000\u0000\u1329\u132a\u0001\u0000\u0000"+
		"\u0000\u132a\u132c\u0001\u0000\u0000\u0000\u132b\u1318\u0001\u0000\u0000"+
		"\u0000\u132b\u131e\u0001\u0000\u0000\u0000\u132b\u1322\u0001\u0000\u0000"+
		"\u0000\u132c\u134f\u0001\u0000\u0000\u0000\u132d\u132e\u0003\u051c\u028e"+
		"\u0000\u132e\u132f\u0005\u0106\u0000\u0000\u132f\u1330\u0005\u028d\u0000"+
		"\u0000\u1330\u1348\u0003\u05bc\u02de\u0000\u1331\u1332\u0005Y\u0000\u0000"+
		"\u1332\u1333\u0003\u05a2\u02d1\u0000\u1333\u1334\u0005\u01db\u0000\u0000"+
		"\u1334\u1336\u0003\u05a2\u02d1\u0000\u1335\u1337\u0003\u0510\u0288\u0000"+
		"\u1336\u1335\u0001\u0000\u0000\u0000\u1336\u1337\u0001\u0000\u0000\u0000"+
		"\u1337\u1349\u0001\u0000\u0000\u0000\u1338\u1339\u0005?\u0000\u0000\u1339"+
		"\u133b\u0003\u05a4\u02d2\u0000\u133a\u133c\u0003\u0510\u0288\u0000\u133b"+
		"\u133a\u0001\u0000\u0000\u0000\u133b\u133c\u0001\u0000\u0000\u0000\u133c"+
		"\u1349\u0001\u0000\u0000\u0000\u133d\u133e\u0005Y\u0000\u0000\u133e\u1340"+
		"\u0003\u05a2\u02d1\u0000\u133f\u1341\u0003\u0510\u0288\u0000\u1340\u133f"+
		"\u0001\u0000\u0000\u0000\u1340\u1341\u0001\u0000\u0000\u0000\u1341\u1349"+
		"\u0001\u0000\u0000\u0000\u1342\u1343\u0005Y\u0000\u0000\u1343\u1344\u0005"+
		"\u02e6\u0000\u0000\u1344\u1346\u0005\u01a8\u0000\u0000\u1345\u1347\u0003"+
		"\u0510\u0288\u0000\u1346\u1345\u0001\u0000\u0000\u0000\u1346\u1347\u0001"+
		"\u0000\u0000\u0000\u1347\u1349\u0001\u0000\u0000\u0000\u1348\u1331\u0001"+
		"\u0000\u0000\u0000\u1348\u1338\u0001\u0000\u0000\u0000\u1348\u133d\u0001"+
		"\u0000\u0000\u0000\u1348\u1342\u0001\u0000\u0000\u0000\u1348\u1349\u0001"+
		"\u0000\u0000\u0000\u1349\u134f\u0001\u0000\u0000\u0000\u134a\u134c\u0003"+
		"\u051c\u028e\u0000\u134b\u134d\u0003\u0512\u0289\u0000\u134c\u134b\u0001"+
		"\u0000\u0000\u0000\u134c\u134d\u0001\u0000\u0000\u0000\u134d\u134f\u0001"+
		"\u0000\u0000\u0000\u134e\u1315\u0001\u0000\u0000\u0000\u134e\u132d\u0001"+
		"\u0000\u0000\u0000\u134e\u134a\u0001\u0000\u0000\u0000\u134f\u0275\u0001"+
		"\u0000\u0000\u0000\u1350\u1351\u0005\u0273\u0000\u0000\u1351\u1352\u0003"+
		"\u05c4\u02e2\u0000\u1352\u0277\u0001\u0000\u0000\u0000\u1353\u1354\u0005"+
		"\u008b\u0000\u0000\u1354\u1356\u0005\u0273\u0000\u0000\u1355\u1357\u0003"+
		"\u04da\u026d\u0000\u1356\u1355\u0001\u0000\u0000\u0000\u1356\u1357\u0001"+
		"\u0000\u0000\u0000\u1357\u1358\u0001\u0000\u0000\u0000\u1358\u135a\u0003"+
		"\u04fa\u027d\u0000\u1359\u135b\u0003\u027e\u013f\u0000\u135a\u1359\u0001"+
		"\u0000\u0000\u0000\u135a\u135b\u0001\u0000\u0000\u0000\u135b\u135c\u0001"+
		"\u0000\u0000\u0000\u135c\u135d\u0003\u027a\u013d\u0000\u135d\u0279\u0001"+
		"\u0000\u0000\u0000\u135e\u1360\u0003\u0280\u0140\u0000\u135f\u135e\u0001"+
		"\u0000\u0000\u0000\u135f\u1360\u0001\u0000\u0000\u0000\u1360\u1362\u0001"+
		"\u0000\u0000\u0000\u1361\u1363\u0003\u0282\u0141\u0000\u1362\u1361\u0001"+
		"\u0000\u0000\u0000\u1362\u1363\u0001\u0000\u0000\u0000\u1363\u1367\u0001"+
		"\u0000\u0000\u0000\u1364\u1366\u0003\u0284\u0142\u0000\u1365\u1364\u0001"+
		"\u0000\u0000\u0000\u1366\u1369\u0001\u0000\u0000\u0000\u1367\u1365\u0001"+
		"\u0000\u0000\u0000\u1367\u1368\u0001\u0000\u0000\u0000\u1368\u136c\u0001"+
		"\u0000\u0000\u0000\u1369\u1367\u0001\u0000\u0000\u0000\u136a\u136b\u0004"+
		"\u013d4\u0000\u136b\u136d\u0003\u027c\u013e\u0000\u136c\u136a\u0001\u0000"+
		"\u0000\u0000\u136c\u136d\u0001\u0000\u0000\u0000\u136d\u027b\u0001\u0000"+
		"\u0000\u0000\u136e\u136f\u0005\u02f4\u0000\u0000\u136f\u1373\u0003\u05a0"+
		"\u02d0\u0000\u1370\u1371\u0005v\u0000\u0000\u1371\u1373\u0003\u05a0\u02d0"+
		"\u0000\u1372\u136e\u0001\u0000\u0000\u0000\u1372\u1370\u0001\u0000\u0000"+
		"\u0000\u1373\u027d\u0001\u0000\u0000\u0000\u1374\u1375\u0005\u00a6\u0000"+
		"\u0000\u1375\u1376\u0005\u029b\u0000\u0000\u1376\u1377\u0003\u02ac\u0156"+
		"\u0000\u1377\u027f\u0001\u0000\u0000\u0000\u1378\u137b\u0005\u01e4\u0000"+
		"\u0000\u1379\u137c\u0003\u02a4\u0152\u0000\u137a\u137c\u0007O\u0000\u0000"+
		"\u137b\u1379\u0001\u0000\u0000\u0000\u137b\u137a\u0001\u0000\u0000\u0000"+
		"\u137c\u0281\u0001\u0000\u0000\u0000\u137d\u1386\u0005\u028d\u0000\u0000"+
		"\u137e\u137f\u0005\u015b\u0000\u0000\u137f\u1387\u0003\u058c\u02c6\u0000"+
		"\u1380\u1381\u0005\u015f\u0000\u0000\u1381\u1387\u0003\u058c\u02c6\u0000"+
		"\u1382\u1383\u0005\u015a\u0000\u0000\u1383\u1387\u0003\u058c\u02c6\u0000"+
		"\u1384\u1385\u0005\u0160\u0000\u0000\u1385\u1387\u0003\u058c\u02c6\u0000"+
		"\u1386\u137e\u0001\u0000\u0000\u0000\u1386\u1380\u0001\u0000\u0000\u0000"+
		"\u1386\u1382\u0001\u0000\u0000\u0000\u1386\u1384\u0001\u0000\u0000\u0000"+
		"\u1387\u1388\u0001\u0000\u0000\u0000\u1388\u1386\u0001\u0000\u0000\u0000"+
		"\u1388\u1389\u0001\u0000\u0000\u0000\u1389\u0283\u0001\u0000\u0000\u0000"+
		"\u138a\u138b\u00051\u0000\u0000\u138b\u13b3\u0007P\u0000\u0000\u138c\u13a9"+
		"\u0005\u01a8\u0000\u0000\u138d\u1394\u0005\u00d4\u0000\u0000\u138e\u138f"+
		"\u0005\u0116\u0000\u0000\u138f\u1390\u0003\u058e\u02c7\u0000\u1390\u1391"+
		"\u0005\u00a2\u0000\u0000\u1391\u1395\u0001\u0000\u0000\u0000\u1392\u1395"+
		"\u0005\u0181\u0000\u0000\u1393\u1395\u0005\u00a6\u0000\u0000\u1394\u138e"+
		"\u0001\u0000\u0000\u0000\u1394\u1392\u0001\u0000\u0000\u0000\u1394\u1393"+
		"\u0001\u0000\u0000\u0000\u1394\u1395\u0001\u0000\u0000\u0000\u1395\u13aa"+
		"\u0001\u0000\u0000\u0000\u1396\u1399\u0005\u02c9\u0000\u0000\u1397\u139a"+
		"\u0003\u058e\u02c7\u0000\u1398\u139a\u0005\u00a6\u0000\u0000\u1399\u1397"+
		"\u0001\u0000\u0000\u0000\u1399\u1398\u0001\u0000\u0000\u0000\u139a\u13aa"+
		"\u0001\u0000\u0000\u0000\u139b\u139c\u0005\u02ca\u0000\u0000\u139c\u13a1"+
		"\u0005\u0116\u0000\u0000\u139d\u139e\u0003\u058e\u02c7\u0000\u139e\u139f"+
		"\u0005\u00a2\u0000\u0000\u139f\u13a2\u0001\u0000\u0000\u0000\u13a0\u13a2"+
		"\u0005\u00a6\u0000\u0000\u13a1\u139d\u0001\u0000\u0000\u0000\u13a1\u13a0"+
		"\u0001\u0000\u0000\u0000\u13a2\u13aa\u0001\u0000\u0000\u0000\u13a3\u13a4"+
		"\u0004\u01425\u0000\u13a4\u13a5\u0005\u01e4\u0000\u0000\u13a5\u13a7\u0005"+
		"\u008f\u0000\u0000\u13a6\u13a8\u0007Q\u0000\u0000\u13a7\u13a6\u0001\u0000"+
		"\u0000\u0000\u13a7\u13a8\u0001\u0000\u0000\u0000\u13a8\u13aa\u0001\u0000"+
		"\u0000\u0000\u13a9\u138d\u0001\u0000\u0000\u0000\u13a9\u1396\u0001\u0000"+
		"\u0000\u0000\u13a9\u139b\u0001\u0000\u0000\u0000\u13a9\u13a3\u0001\u0000"+
		"\u0000\u0000\u13aa\u13b3\u0001\u0000\u0000\u0000\u13ab\u13ac\u0005\u02ed"+
		"\u0000\u0000\u13ac\u13b3\u0003\u058e\u02c7\u0000\u13ad\u13b0\u0005\u02ec"+
		"\u0000\u0000\u13ae\u13b1\u0003\u058e\u02c7\u0000\u13af\u13b1\u0005\u02c2"+
		"\u0000\u0000\u13b0\u13ae\u0001\u0000\u0000\u0000\u13b0\u13af\u0001\u0000"+
		"\u0000\u0000\u13b1\u13b3\u0001\u0000\u0000\u0000\u13b2\u138a\u0001\u0000"+
		"\u0000\u0000\u13b2\u138c\u0001\u0000\u0000\u0000\u13b2\u13ab\u0001\u0000"+
		"\u0000\u0000\u13b2\u13ad\u0001\u0000\u0000\u0000\u13b3\u0285\u0001\u0000"+
		"\u0000\u0000\u13b4\u13ba\u0001\u0000\u0000\u0000\u13b5\u13b6\u0005\u02f4"+
		"\u0000\u0000\u13b6\u13ba\u0003\u05a0\u02d0\u0000\u13b7\u13b8\u0005v\u0000"+
		"\u0000\u13b8\u13ba\u0003\u05a0\u02d0\u0000\u13b9\u13b4\u0001\u0000\u0000"+
		"\u0000\u13b9\u13b5\u0001\u0000\u0000\u0000\u13b9\u13b7\u0001\u0000\u0000"+
		"\u0000\u13ba\u0287\u0001\u0000\u0000\u0000\u13bb\u13bc\u0005\u00b8\u0000"+
		"\u0000\u13bc\u13be\u0005\u0273\u0000\u0000\u13bd\u13bf\u0003\u04d4\u026a"+
		"\u0000\u13be\u13bd\u0001\u0000\u0000\u0000\u13be\u13bf\u0001\u0000\u0000"+
		"\u0000\u13bf\u13c0\u0001\u0000\u0000\u0000\u13c0\u13c1\u0003\u04f8\u027c"+
		"\u0000\u13c1\u0289\u0001\u0000\u0000\u0000\u13c2\u13ec\u0005\u00f7\u0000"+
		"\u0000\u13c3\u13c4\u0003\u029e\u014f\u0000\u13c4\u13c5\u0005\u0257\u0000"+
		"\u0000\u13c5\u13c9\u0003\u04f8\u027c\u0000\u13c6\u13c7\u0005\u028d\u0000"+
		"\u0000\u13c7\u13c8\u0005\u029c\u0000\u0000\u13c8\u13ca\u0005\u0199\u0000"+
		"\u0000\u13c9\u13c6\u0001\u0000\u0000\u0000\u13c9\u13ca\u0001\u0000\u0000"+
		"\u0000\u13ca\u13ed\u0001\u0000\u0000\u0000\u13cb\u13d1\u0003\u029e\u014f"+
		"\u0000\u13cc\u13ce\u00059\u0000\u0000\u13cd\u13cf\u0005\u01b7\u0000\u0000"+
		"\u13ce\u13cd\u0001\u0000\u0000\u0000\u13ce\u13cf\u0001\u0000\u0000\u0000"+
		"\u13cf\u13d1\u0001\u0000\u0000\u0000\u13d0\u13cb\u0001\u0000\u0000\u0000"+
		"\u13d0\u13cc\u0001\u0000\u0000\u0000\u13d1\u13d2\u0001\u0000\u0000\u0000"+
		"\u13d2\u13d4\u0005\u0191\u0000\u0000\u13d3\u13d5\u0003\u029c\u014e\u0000"+
		"\u13d4\u13d3\u0001\u0000\u0000\u0000\u13d4\u13d5\u0001\u0000\u0000\u0000"+
		"\u13d5\u13d6\u0001\u0000\u0000\u0000\u13d6\u13d7\u0003\u02a2\u0151\u0000"+
		"\u13d7\u13d8\u0005\u0257\u0000\u0000\u13d8\u13da\u0003\u028c\u0146\u0000"+
		"\u13d9\u13db\u0003\u0296\u014b\u0000\u13da\u13d9\u0001\u0000\u0000\u0000"+
		"\u13da\u13db\u0001\u0000\u0000\u0000\u13db\u13dd\u0001\u0000\u0000\u0000"+
		"\u13dc\u13de\u0003\u028e\u0147\u0000\u13dd\u13dc\u0001\u0000\u0000\u0000"+
		"\u13dd\u13de\u0001\u0000\u0000\u0000\u13de\u13e0\u0001\u0000\u0000\u0000"+
		"\u13df\u13e1\u0003\u0294\u014a\u0000\u13e0\u13df\u0001\u0000\u0000\u0000"+
		"\u13e0\u13e1\u0001\u0000\u0000\u0000\u13e1\u13ed\u0001\u0000\u0000\u0000"+
		"\u13e2\u13e3\u0005\u01bd\u0000\u0000\u13e3\u13e4\u0005\u0191\u0000\u0000"+
		"\u13e4\u13e5\u0003\u051c\u028e\u0000\u13e5\u13e6\u0005\u0257\u0000\u0000"+
		"\u13e6\u13ea\u0003\u028c\u0146\u0000\u13e7\u13e8\u0005\u028d\u0000\u0000"+
		"\u13e8\u13e9\u0005\u00f7\u0000\u0000\u13e9\u13eb\u0005\u0199\u0000\u0000"+
		"\u13ea\u13e7\u0001\u0000\u0000\u0000\u13ea\u13eb\u0001\u0000\u0000\u0000"+
		"\u13eb\u13ed\u0001\u0000\u0000\u0000\u13ec\u13c3\u0001\u0000\u0000\u0000"+
		"\u13ec\u13d0\u0001\u0000\u0000\u0000\u13ec\u13e2\u0001\u0000\u0000\u0000"+
		"\u13ed\u028b\u0001\u0000\u0000\u0000\u13ee\u13ef\u0004\u01466\u0000\u13ef"+
		"\u13f3\u0003\u04fa\u027d\u0000\u13f0\u13f1\u0004\u01467\u0000\u13f1\u13f3"+
		"\u0003\u04f8\u027c\u0000\u13f2\u13ee\u0001\u0000\u0000\u0000\u13f2\u13f0"+
		"\u0001\u0000\u0000\u0000\u13f3\u028d\u0001\u0000\u0000\u0000\u13f4\u13f5"+
		"\u0005\u028d\u0000\u0000\u13f5\u13f6\u0003\u02a8\u0154\u0000\u13f6\u028f"+
		"\u0001\u0000\u0000\u0000\u13f7\u13f8\u0005\u029f\u0000\u0000\u13f8\u13f9"+
		"\u0003\u02ac\u0156\u0000\u13f9\u0291\u0001\u0000\u0000\u0000\u13fa\u13fb"+
		"\u0005\u028d\u0000\u0000\u13fb\u1403\u0005\u029b\u0000\u0000\u13fc\u1404"+
		"\u0003\u02ac\u0156\u0000\u13fd\u13ff\u00059\u0000\u0000\u13fe\u1400\u0003"+
		"\u0290\u0148\u0000\u13ff\u13fe\u0001\u0000\u0000\u0000\u13ff\u1400\u0001"+
		"\u0000\u0000\u0000\u1400\u1404\u0001\u0000\u0000\u0000\u1401\u1404\u0005"+
		"\u0185\u0000\u0000\u1402\u1404\u0005\u00a6\u0000\u0000\u1403\u13fc\u0001"+
		"\u0000\u0000\u0000\u1403\u13fd\u0001\u0000\u0000\u0000\u1403\u1401\u0001"+
		"\u0000\u0000\u0000\u1403\u1402\u0001\u0000\u0000\u0000\u1404\u0293\u0001"+
		"\u0000\u0000\u0000\u1405\u1406\u0005?\u0000\u0000\u1406\u1408\u0005\u0273"+
		"\u0000\u0000\u1407\u1409\u0003\u0292\u0149\u0000\u1408\u1407\u0001\u0000"+
		"\u0000\u0000\u1408\u1409\u0001\u0000\u0000\u0000\u1409\u0295\u0001\u0000"+
		"\u0000\u0000\u140a\u140b\u0004\u014b8\u0000\u140b\u140c\u0003\u0280\u0140"+
		"\u0000\u140c\u0297\u0001\u0000\u0000\u0000\u140d\u140e\u0005\u01d6\u0000"+
		"\u0000\u140e\u140f\u0005\u0273\u0000\u0000\u140f\u1410\u0003\u051c\u028e"+
		"\u0000\u1410\u1411\u0005\u0257\u0000\u0000\u1411\u1419\u0003\u051c\u028e"+
		"\u0000\u1412\u1413\u0005\u001d\u0000\u0000\u1413\u1414\u0003\u051c\u028e"+
		"\u0000\u1414\u1415\u0005\u0257\u0000\u0000\u1415\u1416\u0003\u051c\u028e"+
		"\u0000\u1416\u1418\u0001\u0000\u0000\u0000\u1417\u1412\u0001\u0000\u0000"+
		"\u0000\u1418\u141b\u0001\u0000\u0000\u0000\u1419\u1417\u0001\u0000\u0000"+
		"\u0000\u1419\u141a\u0001\u0000\u0000\u0000\u141a\u0299\u0001\u0000\u0000"+
		"\u0000\u141b\u1419\u0001\u0000\u0000\u0000\u141c\u141f\u0005\u01ee\u0000"+
		"\u0000\u141d\u141e\u0004\u014d9\u0000\u141e\u1420\u0003\u04d4\u026a\u0000"+
		"\u141f\u141d\u0001\u0000\u0000\u0000\u141f\u1420\u0001\u0000\u0000\u0000"+
		"\u1420\u1444\u0001\u0000\u0000\u0000\u1421\u1422\u0003\u029e\u014f\u0000"+
		"\u1422\u1423\u0005\u00eb\u0000\u0000\u1423\u1424\u0003\u04f8\u027c\u0000"+
		"\u1424\u1445\u0001\u0000\u0000\u0000\u1425\u1426\u0003\u029e\u014f\u0000"+
		"\u1426\u1428\u0005\u0191\u0000\u0000\u1427\u1429\u0003\u029c\u014e\u0000"+
		"\u1428\u1427\u0001\u0000\u0000\u0000\u1428\u1429\u0001\u0000\u0000\u0000"+
		"\u1429\u142a\u0001\u0000\u0000\u0000\u142a\u142b\u0003\u02a2\u0151\u0000"+
		"\u142b\u142c\u0005\u00eb\u0000\u0000\u142c\u142d\u0003\u04f8\u027c\u0000"+
		"\u142d\u1445\u0001\u0000\u0000\u0000\u142e\u1430\u00059\u0000\u0000\u142f"+
		"\u1431\u0005\u01b7\u0000\u0000\u1430\u142f\u0001\u0000\u0000\u0000\u1430"+
		"\u1431\u0001\u0000\u0000\u0000\u1431\u143a\u0001\u0000\u0000\u0000\u1432"+
		"\u1434\u0005\u0191\u0000\u0000\u1433\u1435\u0003\u029c\u014e\u0000\u1434"+
		"\u1433\u0001\u0000\u0000\u0000\u1434\u1435\u0001\u0000\u0000\u0000\u1435"+
		"\u1436\u0001\u0000\u0000\u0000\u1436\u143b\u0003\u02a2\u0151\u0000\u1437"+
		"\u1438\u0005\u001d\u0000\u0000\u1438\u1439\u0005\u00f7\u0000\u0000\u1439"+
		"\u143b\u0005\u0199\u0000\u0000\u143a\u1432\u0001\u0000\u0000\u0000\u143a"+
		"\u1437\u0001\u0000\u0000\u0000\u143b\u143c\u0001\u0000\u0000\u0000\u143c"+
		"\u143d\u0005\u00eb\u0000\u0000\u143d\u1445\u0003\u04f8\u027c\u0000\u143e"+
		"\u143f\u0005\u01bd\u0000\u0000\u143f\u1440\u0005\u0191\u0000\u0000\u1440"+
		"\u1441\u0003\u051c\u028e\u0000\u1441\u1442\u0005\u00eb\u0000\u0000\u1442"+
		"\u1443\u0003\u04f8\u027c\u0000\u1443\u1445\u0001\u0000\u0000\u0000\u1444"+
		"\u1421\u0001\u0000\u0000\u0000\u1444\u1425\u0001\u0000\u0000\u0000\u1444"+
		"\u142e\u0001\u0000\u0000\u0000\u1444\u143e\u0001\u0000\u0000\u0000\u1445"+
		"\u1448\u0001\u0000\u0000\u0000\u1446\u1447\u0004\u014d:\u0000\u1447\u1449"+
		"\u0003\u04dc\u026e\u0000\u1448\u1446\u0001\u0000\u0000\u0000\u1448\u1449"+
		"\u0001\u0000\u0000\u0000\u1449\u029b\u0001\u0000\u0000\u0000\u144a\u144b"+
		"\u0007R\u0000\u0000\u144b\u029d\u0001\u0000\u0000\u0000\u144c\u1451\u0003"+
		"\u02a0\u0150\u0000\u144d\u144e\u0005\u001d\u0000\u0000\u144e\u1450\u0003"+
		"\u02a0\u0150\u0000\u144f\u144d\u0001\u0000\u0000\u0000\u1450\u1453\u0001"+
		"\u0000\u0000\u0000\u1451\u144f\u0001\u0000\u0000\u0000\u1451\u1452\u0001"+
		"\u0000\u0000\u0000\u1452\u029f\u0001\u0000\u0000\u0000\u1453\u1451\u0001"+
		"\u0000\u0000\u0000\u1454\u1456\u0003\u05c0\u02e0\u0000\u1455\u1457\u0003"+
		"\u052e\u0297\u0000\u1456\u1455\u0001\u0000\u0000\u0000\u1456\u1457\u0001"+
		"\u0000\u0000\u0000\u1457\u145f\u0001\u0000\u0000\u0000\u1458\u145c\u0003"+
		"\u05c0\u02e0\u0000\u1459\u145d\u0005(\u0000\u0000\u145a\u145b\u0005\'"+
		"\u0000\u0000\u145b\u145d\u0003\u05bc\u02de\u0000\u145c\u1459\u0001\u0000"+
		"\u0000\u0000\u145c\u145a\u0001\u0000\u0000\u0000\u145d\u145f\u0001\u0000"+
		"\u0000\u0000\u145e\u1454\u0001\u0000\u0000\u0000\u145e\u1458\u0001\u0000"+
		"\u0000\u0000\u145f\u147f\u0001\u0000\u0000\u0000\u1460\u1462\u0007S\u0000"+
		"\u0000\u1461\u1463\u0003\u052e\u0297\u0000\u1462\u1461\u0001\u0000\u0000"+
		"\u0000\u1462\u1463\u0001\u0000\u0000\u0000\u1463\u147f\u0001\u0000\u0000"+
		"\u0000\u1464\u147f\u0007T\u0000\u0000\u1465\u1466\u0005\u00f7\u0000\u0000"+
		"\u1466\u147f\u0005\u0199\u0000\u0000\u1467\u1468\u0005\u0209\u0000\u0000"+
		"\u1468\u147f\u0005\u0097\u0000\u0000\u1469\u146d\u0005\u008b\u0000\u0000"+
		"\u146a\u146b\u0005\u024a\u0000\u0000\u146b\u146e\u0005\u0245\u0000\u0000"+
		"\u146c\u146e\u0007U\u0000\u0000\u146d\u146a\u0001\u0000\u0000\u0000\u146d"+
		"\u146c\u0001\u0000\u0000\u0000\u146d\u146e\u0001\u0000\u0000\u0000\u146e"+
		"\u147f\u0001\u0000\u0000\u0000\u146f\u1470\u0005\u013a\u0000\u0000\u1470"+
		"\u147f\u0005\u0245\u0000\u0000\u1471\u1474\u0005\u01dc\u0000\u0000\u1472"+
		"\u1475\u0005l\u0000\u0000\u1473\u1475\u0003\u025e\u012f\u0000\u1474\u1472"+
		"\u0001\u0000\u0000\u0000\u1474\u1473\u0001\u0000\u0000\u0000\u1475\u147f"+
		"\u0001\u0000\u0000\u0000\u1476\u1477\u0005\u0209\u0000\u0000\u1477\u147f"+
		"\u0005\u0284\u0000\u0000\u1478\u147a\u0005:\u0000\u0000\u1479\u147b\u0005"+
		"\u01f3\u0000\u0000\u147a\u1479\u0001\u0000\u0000\u0000\u147a\u147b\u0001"+
		"\u0000\u0000\u0000\u147b\u147f\u0001\u0000\u0000\u0000\u147c\u147d\u0007"+
		"V\u0000\u0000\u147d\u147f\u0005\u029b\u0000\u0000\u147e\u145e\u0001\u0000"+
		"\u0000\u0000\u147e\u1460\u0001\u0000\u0000\u0000\u147e\u1464\u0001\u0000"+
		"\u0000\u0000\u147e\u1465\u0001\u0000\u0000\u0000\u147e\u1467\u0001\u0000"+
		"\u0000\u0000\u147e\u1469\u0001\u0000\u0000\u0000\u147e\u146f\u0001\u0000"+
		"\u0000\u0000\u147e\u1471\u0001\u0000\u0000\u0000\u147e\u1476\u0001\u0000"+
		"\u0000\u0000\u147e\u1478\u0001\u0000\u0000\u0000\u147e\u147c\u0001\u0000"+
		"\u0000\u0000\u147f\u02a1\u0001\u0000\u0000\u0000\u1480\u1483\u0005\u0010"+
		"\u0000\u0000\u1481\u1482\u0005\u001c\u0000\u0000\u1482\u1484\u0005\u0010"+
		"\u0000\u0000\u1483\u1481\u0001\u0000\u0000\u0000\u1483\u1484\u0001\u0000"+
		"\u0000\u0000\u1484\u1491\u0001\u0000\u0000\u0000\u1485\u1488\u0003\u053c"+
		"\u029e\u0000\u1486\u1487\u0005\u001c\u0000\u0000\u1487\u1489\u0005\u0010"+
		"\u0000\u0000\u1488\u1486\u0001\u0000\u0000\u0000\u1488\u1489\u0001\u0000"+
		"\u0000\u0000\u1489\u1491\u0001\u0000\u0000\u0000\u148a\u1491\u0003\u0568"+
		"\u02b4\u0000\u148b\u148c\u0004\u0151;\u0000\u148c\u148d\u0003\u053c\u029e"+
		"\u0000\u148d\u148e\u0005\u001c\u0000\u0000\u148e\u148f\u0003\u0568\u02b4"+
		"\u0000\u148f\u1491\u0001\u0000\u0000\u0000\u1490\u1480\u0001\u0000\u0000"+
		"\u0000\u1490\u1485\u0001\u0000\u0000\u0000\u1490\u148a\u0001\u0000\u0000"+
		"\u0000\u1490\u148b\u0001\u0000\u0000\u0000\u1491\u02a3\u0001\u0000\u0000"+
		"\u0000\u1492\u1499\u0003\u02a6\u0153\u0000\u1493\u1495\u0005=\u0000\u0000"+
		"\u1494\u1493\u0001\u0000\u0000\u0000\u1494\u1495\u0001\u0000\u0000\u0000"+
		"\u1495\u1496\u0001\u0000\u0000\u0000\u1496\u1498\u0003\u02a6\u0153\u0000"+
		"\u1497\u1494\u0001\u0000\u0000\u0000\u1498\u149b\u0001\u0000\u0000\u0000"+
		"\u1499\u1497\u0001\u0000\u0000\u0000\u1499\u149a\u0001\u0000\u0000\u0000"+
		"\u149a\u02a5\u0001\u0000\u0000\u0000\u149b\u1499\u0001\u0000\u0000\u0000"+
		"\u149c\u149d\u0005j\u0000\u0000\u149d\u14a3\u0003\u05a2\u02d1\u0000\u149e"+
		"\u149f\u0005\u0121\u0000\u0000\u149f\u14a3\u0003\u05a2\u02d1\u0000\u14a0"+
		"\u14a1\u0005\u0239\u0000\u0000\u14a1\u14a3\u0003\u05a2\u02d1\u0000\u14a2"+
		"\u149c\u0001\u0000\u0000\u0000\u14a2\u149e\u0001\u0000\u0000\u0000\u14a2"+
		"\u14a0\u0001\u0000\u0000\u0000\u14a3\u02a7\u0001\u0000\u0000\u0000\u14a4"+
		"\u14a5\u0005\u00f7\u0000\u0000\u14a5\u14b2\u0005\u0199\u0000\u0000\u14a6"+
		"\u14af\u0004\u0154<\u0000\u14a7\u14a8\u0005\u015b\u0000\u0000\u14a8\u14b0"+
		"\u0003\u058c\u02c6\u0000\u14a9\u14aa\u0005\u015f\u0000\u0000\u14aa\u14b0"+
		"\u0003\u058c\u02c6\u0000\u14ab\u14ac\u0005\u015a\u0000\u0000\u14ac\u14b0"+
		"\u0003\u058c\u02c6\u0000\u14ad\u14ae\u0005\u0160\u0000\u0000\u14ae\u14b0"+
		"\u0003\u058c\u02c6\u0000\u14af\u14a7\u0001\u0000\u0000\u0000\u14af\u14a9"+
		"\u0001\u0000\u0000\u0000\u14af\u14ab\u0001\u0000\u0000\u0000\u14af\u14ad"+
		"\u0001\u0000\u0000\u0000\u14b0\u14b2\u0001\u0000\u0000\u0000\u14b1\u14a4"+
		"\u0001\u0000\u0000\u0000\u14b1\u14a6\u0001\u0000\u0000\u0000\u14b2\u02a9"+
		"\u0001\u0000\u0000\u0000\u14b3\u14b4\u0005\u0207\u0000\u0000\u14b4\u14b5"+
		"\u0005\u029b\u0000\u0000\u14b5\u14cb\u0003\u02ac\u0156\u0000\u14b6\u14b7"+
		"\u0005\u0207\u0000\u0000\u14b7\u14b8\u0005\u029b\u0000\u0000\u14b8\u14cb"+
		"\u0007W\u0000\u0000\u14b9\u14ba\u0005\u0207\u0000\u0000\u14ba\u14bb\u0005"+
		"\u00a6\u0000\u0000\u14bb\u14bf\u0005\u029b\u0000\u0000\u14bc\u14c0\u0003"+
		"\u02ac\u0156\u0000\u14bd\u14c0\u0005\u0185\u0000\u0000\u14be\u14c0\u0005"+
		"9\u0000\u0000\u14bf\u14bc\u0001\u0000\u0000\u0000\u14bf\u14bd\u0001\u0000"+
		"\u0000\u0000\u14bf\u14be\u0001\u0000\u0000\u0000\u14c0\u14c1\u0001\u0000"+
		"\u0000\u0000\u14c1\u14c2\u0005\u0257\u0000\u0000\u14c2\u14cb\u0003\u02ac"+
		"\u0156\u0000\u14c3\u14c4\u0005\u0207\u0000\u0000\u14c4\u14c5\u0005\u029b"+
		"\u0000\u0000\u14c5\u14c8\u00059\u0000\u0000\u14c6\u14c7\u0005\u029f\u0000"+
		"\u0000\u14c7\u14c9\u0003\u02ac\u0156\u0000\u14c8\u14c6\u0001\u0000\u0000"+
		"\u0000\u14c8\u14c9\u0001\u0000\u0000\u0000\u14c9\u14cb\u0001\u0000\u0000"+
		"\u0000\u14ca\u14b3\u0001\u0000\u0000\u0000\u14ca\u14b6\u0001\u0000\u0000"+
		"\u0000\u14ca\u14b9\u0001\u0000\u0000\u0000\u14ca\u14c3\u0001\u0000\u0000"+
		"\u0000\u14cb\u02ab\u0001\u0000\u0000\u0000\u14cc\u14d1\u0003\u02ae\u0157"+
		"\u0000\u14cd\u14ce\u0005\u001d\u0000\u0000\u14ce\u14d0\u0003\u02ae\u0157"+
		"\u0000\u14cf\u14cd\u0001\u0000\u0000\u0000\u14d0\u14d3\u0001\u0000\u0000"+
		"\u0000\u14d1\u14cf\u0001\u0000\u0000\u0000\u14d1\u14d2\u0001\u0000\u0000"+
		"\u0000\u14d2\u02ad\u0001\u0000\u0000\u0000\u14d3\u14d1\u0001\u0000\u0000"+
		"\u0000\u14d4\u14d6\u0003\u05c0\u02e0\u0000\u14d5\u14d7\u0003\u03dc\u01ee"+
		"\u0000\u14d6\u14d5\u0001\u0000\u0000\u0000\u14d6\u14d7\u0001\u0000\u0000"+
		"\u0000\u14d7\u02af\u0001\u0000\u0000\u0000\u14d8\u14da\u0005<\u0000\u0000"+
		"\u14d9\u14db\u0003\u0524\u0292\u0000\u14da\u14d9\u0001\u0000\u0000\u0000"+
		"\u14da\u14db\u0001\u0000\u0000\u0000\u14db\u14dc\u0001\u0000\u0000\u0000"+
		"\u14dc\u14dd\u0005\u0247\u0000\u0000\u14dd\u14df\u0003\u056a\u02b5\u0000"+
		"\u14de\u14e0\u0003\u02b8\u015c\u0000\u14df\u14de\u0001\u0000\u0000\u0000"+
		"\u14df\u14e0\u0001\u0000\u0000\u0000\u14e0\u1503\u0001\u0000\u0000\u0000"+
		"\u14e1\u14e2\u0005i\u0000\u0000\u14e2\u14e3\u0005\u0247\u0000\u0000\u14e3"+
		"\u14e7\u0003\u056a\u02b5\u0000\u14e4\u14e6\u0003\u02ba\u015d\u0000\u14e5"+
		"\u14e4\u0001\u0000\u0000\u0000\u14e6\u14e9\u0001\u0000\u0000\u0000\u14e7"+
		"\u14e5\u0001\u0000\u0000\u0000\u14e7\u14e8\u0001\u0000\u0000\u0000\u14e8"+
		"\u1503\u0001\u0000\u0000\u0000\u14e9\u14e7\u0001\u0000\u0000\u0000\u14ea"+
		"\u14eb\u0005h\u0000\u0000\u14eb\u14ec\u0005\u0247\u0000\u0000\u14ec\u14ee"+
		"\u0003\u056a\u02b5\u0000\u14ed\u14ef\u0007X\u0000\u0000\u14ee\u14ed\u0001"+
		"\u0000\u0000\u0000\u14ee\u14ef\u0001\u0000\u0000\u0000\u14ef\u1503\u0001"+
		"\u0000\u0000\u0000\u14f0\u14f2\u0005\u0196\u0000\u0000\u14f1\u14f3\u0003"+
		"\u0524\u0292\u0000\u14f2\u14f1\u0001\u0000\u0000\u0000\u14f2\u14f3\u0001"+
		"\u0000\u0000\u0000\u14f3\u14f4\u0001\u0000\u0000\u0000\u14f4\u14f5\u0005"+
		"\u0247\u0000\u0000\u14f5\u1503\u0003\u056a\u02b5\u0000\u14f6\u14f8\u0005"+
		"\u01d8\u0000\u0000\u14f7\u14f9\u0003\u0524\u0292\u0000\u14f8\u14f7\u0001"+
		"\u0000\u0000\u0000\u14f8\u14f9\u0001\u0000\u0000\u0000\u14f9\u14fa\u0001"+
		"\u0000\u0000\u0000\u14fa\u14fb\u0005\u0247\u0000\u0000\u14fb\u14ff\u0003"+
		"\u056a\u02b5\u0000\u14fc\u14fe\u0003\u02bc\u015e\u0000\u14fd\u14fc\u0001"+
		"\u0000\u0000\u0000\u14fe\u1501\u0001\u0000\u0000\u0000\u14ff\u14fd\u0001"+
		"\u0000\u0000\u0000\u14ff\u1500\u0001\u0000\u0000\u0000\u1500\u1503\u0001"+
		"\u0000\u0000\u0000\u1501\u14ff\u0001\u0000\u0000\u0000\u1502\u14d8\u0001"+
		"\u0000\u0000\u0000\u1502\u14e1\u0001\u0000\u0000\u0000\u1502\u14ea\u0001"+
		"\u0000\u0000\u0000\u1502\u14f0\u0001\u0000\u0000\u0000\u1502\u14f6\u0001"+
		"\u0000\u0000\u0000\u1503\u02b1\u0001\u0000\u0000\u0000\u1504\u1505\u0004"+
		"\u0159=\u0000\u1505\u1506\u0007Y\u0000\u0000\u1506\u1507\u0005\u026f\u0000"+
		"\u0000\u1507\u02b3\u0001\u0000\u0000\u0000\u1508\u150a\u0003\u02b6\u015b"+
		"\u0000\u1509\u1508\u0001\u0000\u0000\u0000\u1509\u150a\u0001\u0000\u0000"+
		"\u0000\u150a\u150c\u0001\u0000\u0000\u0000\u150b\u150d\u0003\u02b2\u0159"+
		"\u0000\u150c\u150b\u0001\u0000\u0000\u0000\u150c\u150d\u0001\u0000\u0000"+
		"\u0000\u150d\u1513\u0001\u0000\u0000\u0000\u150e\u150f\u0004\u015a>\u0000"+
		"\u150f\u1510\u0005\u0276\u0000\u0000\u1510\u1511\u0005\u0099\u0000\u0000"+
		"\u1511\u1513\u0003\u05a0\u02d0\u0000\u1512\u1509\u0001\u0000\u0000\u0000"+
		"\u1512\u150e\u0001\u0000\u0000\u0000\u1513\u02b5\u0001\u0000\u0000\u0000"+
		"\u1514\u1515\u0004\u015b?\u0000\u1515\u1516\u0005\u028d\u0000\u0000\u1516"+
		"\u1517\u0005\u0003\u0000\u0000\u1517\u1518\u0005\u02ab\u0000\u0000\u1518"+
		"\u02b7\u0001\u0000\u0000\u0000\u1519\u151a\u0005\u026f\u0000\u0000\u151a"+
		"\u151b\u0005\u02aa\u0000\u0000\u151b\u151c\u0005\u0191\u0000\u0000\u151c"+
		"\u151d\u0003\u0582\u02c1\u0000\u151d\u151e\u0003\u02b4\u015a\u0000\u151e"+
		"\u1524\u0001\u0000\u0000\u0000\u151f\u1520\u0005\u00b8\u0000\u0000\u1520"+
		"\u1521\u0005\u02aa\u0000\u0000\u1521\u1522\u0005\u0191\u0000\u0000\u1522"+
		"\u1524\u0003\u0582\u02c1\u0000\u1523\u1519\u0001\u0000\u0000\u0000\u1523"+
		"\u151f\u0001\u0000\u0000\u0000\u1524\u02b9\u0001\u0000\u0000\u0000\u1525"+
		"\u1526\u0005\u00e8\u0000\u0000\u1526\u1529\u0005\u0270\u0000\u0000\u1527"+
		"\u1529\u0007Z\u0000\u0000\u1528\u1525\u0001\u0000\u0000\u0000\u1528\u1527"+
		"\u0001\u0000\u0000\u0000\u1529\u02bb\u0001\u0000\u0000\u0000\u152a\u152b"+
		"\u0007[\u0000\u0000\u152b\u02bd\u0001\u0000\u0000\u0000\u152c\u1538\u0005"+
		"\u0268\u0000\u0000\u152d\u152e\u0005\u01ac\u0000\u0000\u152e\u1539\u0003"+
		"\u0576\u02bb\u0000\u152f\u1530\u0005\u02a0\u0000\u0000\u1530\u1535\u0003"+
		"\u0578\u02bc\u0000\u1531\u1532\u0005\u001d\u0000\u0000\u1532\u1534\u0003"+
		"\u0578\u02bc\u0000\u1533\u1531\u0001\u0000\u0000\u0000\u1534\u1537\u0001"+
		"\u0000\u0000\u0000\u1535\u1533\u0001\u0000\u0000\u0000\u1535\u1536\u0001"+
		"\u0000\u0000\u0000\u1536\u1539\u0001\u0000\u0000\u0000\u1537\u1535\u0001"+
		"\u0000\u0000\u0000\u1538\u152d\u0001\u0000\u0000\u0000\u1538\u152f\u0001"+
		"\u0000\u0000\u0000\u1539\u02bf\u0001\u0000\u0000\u0000\u153a\u1545\u0005"+
		"\u0115\u0000\u0000\u153b\u153c\u0005\u01ac\u0000\u0000\u153c\u153d\u0003"+
		"\u0580\u02c0\u0000\u153d\u153e\u0005\u0213\u0000\u0000\u153e\u153f\u0003"+
		"\u05a0\u02d0\u0000\u153f\u1546\u0001\u0000\u0000\u0000\u1540\u1541\u0005"+
		"\u02a0\u0000\u0000\u1541\u1543\u0003\u05aa\u02d5\u0000\u1542\u1544\u0003"+
		"\u02c8\u0164\u0000\u1543\u1542\u0001\u0000\u0000\u0000\u1543\u1544\u0001"+
		"\u0000\u0000\u0000\u1544\u1546\u0001\u0000\u0000\u0000\u1545\u153b\u0001"+
		"\u0000\u0000\u0000\u1545\u1540\u0001\u0000\u0000\u0000\u1546\u02c1\u0001"+
		"\u0000\u0000\u0000\u1547\u1548\u0007\\\u0000\u0000\u1548\u02c3\u0001\u0000"+
		"\u0000\u0000\u1549\u154c\u0003\u0390\u01c8\u0000\u154a\u154c\u0005\u0191"+
		"\u0000\u0000\u154b\u1549\u0001\u0000\u0000\u0000\u154b\u154a\u0001\u0000"+
		"\u0000\u0000\u154c\u02c5\u0001\u0000\u0000\u0000\u154d\u154e\u0003\u02c2"+
		"\u0161\u0000\u154e\u154f\u0003\u03e2\u01f1\u0000\u154f\u1550\u0003\u05c6"+
		"\u02e3\u0000\u1550\u1551\u0003\u02c4\u0162\u0000\u1551\u02c7\u0001\u0000"+
		"\u0000\u0000\u1552\u1553\u0004\u0164@\u0000\u1553\u1554\u0005\u0207\u0000"+
		"\u0000\u1554\u1559\u0003\u02c6\u0163\u0000\u1555\u1556\u0005\u001d\u0000"+
		"\u0000\u1556\u1558\u0003\u02c6\u0163\u0000\u1557\u1555\u0001\u0000\u0000"+
		"\u0000\u1558\u155b\u0001\u0000\u0000\u0000\u1559\u1557\u0001\u0000\u0000"+
		"\u0000\u1559\u155a\u0001\u0000\u0000\u0000\u155a\u02c9\u0001\u0000\u0000"+
		"\u0000\u155b\u1559\u0001\u0000\u0000\u0000\u155c\u155d\u0005\u0207\u0000"+
		"\u0000\u155d\u155e\u0003\u02cc\u0166\u0000\u155e\u02cb\u0001\u0000\u0000"+
		"\u0000\u155f\u1560\u0003\u02d6\u016b\u0000\u1560\u1561\u0003\u02d4\u016a"+
		"\u0000\u1561\u1592\u0001\u0000\u0000\u0000\u1562\u1563\u0005\u0259\u0000"+
		"\u0000\u1563\u1592\u0003\u02ce\u0167\u0000\u1564\u1565\u0003\u05c8\u02e4"+
		"\u0000\u1565\u1566\u0003\u02dc\u016e\u0000\u1566\u1592\u0001\u0000\u0000"+
		"\u0000\u1567\u156a\u0005\u01a8\u0000\u0000\u1568\u1569\u0005\u00e8\u0000"+
		"\u0000\u1569\u156b\u0003\u051c\u028e\u0000\u156a\u1568\u0001\u0000\u0000"+
		"\u0000\u156a\u156b\u0001\u0000\u0000\u0000\u156b\u156c\u0001\u0000\u0000"+
		"\u0000\u156c\u1581\u0003\u05c6\u02e3\u0000\u156d\u156f\u0003\u05a2\u02d1"+
		"\u0000\u156e\u1570\u0003\u0518\u028c\u0000\u156f\u156e\u0001\u0000\u0000"+
		"\u0000\u156f\u1570\u0001\u0000\u0000\u0000\u1570\u1572\u0001\u0000\u0000"+
		"\u0000\u1571\u1573\u0003\u0510\u0288\u0000\u1572\u1571\u0001\u0000\u0000"+
		"\u0000\u1572\u1573\u0001\u0000\u0000\u0000\u1573\u1582\u0001\u0000\u0000"+
		"\u0000\u1574\u1576\u0003\u05a2\u02d1\u0000\u1575\u1577\u0003\u0518\u028c"+
		"\u0000\u1576\u1575\u0001\u0000\u0000\u0000\u1576\u1577\u0001\u0000\u0000"+
		"\u0000\u1577\u1579\u0001\u0000\u0000\u0000\u1578\u157a\u0003\u0510\u0288"+
		"\u0000\u1579\u1578\u0001\u0000\u0000\u0000\u1579\u157a\u0001\u0000\u0000"+
		"\u0000\u157a\u1582\u0001\u0000\u0000\u0000\u157b\u157c\u0004\u0166A\u0000"+
		"\u157c\u157d\u0005\u01a8\u0000\u0000\u157d\u157e\u0005 \u0000\u0000\u157e"+
		"\u157f\u0003\u05a2\u02d1\u0000\u157f\u1580\u0005!\u0000\u0000\u1580\u1582"+
		"\u0001\u0000\u0000\u0000\u1581\u156d\u0001\u0000\u0000\u0000\u1581\u1574"+
		"\u0001\u0000\u0000\u0000\u1581\u157b\u0001\u0000\u0000\u0000\u1582\u1592"+
		"\u0001\u0000\u0000\u0000\u1583\u1584\u0004\u0166B\u0000\u1584\u1587\u0005"+
		"\u01a8\u0000\u0000\u1585\u1586\u0005\u00e8\u0000\u0000\u1586\u1588\u0003"+
		"\u051c\u028e\u0000\u1587\u1585\u0001\u0000\u0000\u0000\u1587\u1588\u0001"+
		"\u0000\u0000\u0000\u1588\u1589\u0001\u0000\u0000\u0000\u1589\u158a\u0005"+
		"\u0257\u0000\u0000\u158a\u158c\u0005\u02e6\u0000\u0000\u158b\u158d\u0003"+
		"\u0518\u028c\u0000\u158c\u158b\u0001\u0000\u0000\u0000\u158c\u158d\u0001"+
		"\u0000\u0000\u0000\u158d\u158f\u0001\u0000\u0000\u0000\u158e\u1590\u0003"+
		"\u0510\u0288\u0000\u158f\u158e\u0001\u0000\u0000\u0000\u158f\u1590\u0001"+
		"\u0000\u0000\u0000\u1590\u1592\u0001\u0000\u0000\u0000\u1591\u155f\u0001"+
		"\u0000\u0000\u0000\u1591\u1562\u0001\u0000\u0000\u0000\u1591\u1564\u0001"+
		"\u0000\u0000\u0000\u1591\u1567\u0001\u0000\u0000\u0000\u1591\u1583\u0001"+
		"\u0000\u0000\u0000\u1592\u02cd\u0001\u0000\u0000\u0000\u1593\u1595\u0003"+
		"\u02d0\u0168\u0000\u1594\u1596\u0003\u02d2\u0169\u0000\u1595\u1594\u0001"+
		"\u0000\u0000\u0000\u1595\u1596\u0001\u0000\u0000\u0000\u1596\u159d\u0001"+
		"\u0000\u0000\u0000\u1597\u159a\u0003\u02d2\u0169\u0000\u1598\u1599\u0005"+
		"\u001d\u0000\u0000\u1599\u159b\u0003\u02d0\u0168\u0000\u159a\u1598\u0001"+
		"\u0000\u0000\u0000\u159a\u159b\u0001\u0000\u0000\u0000\u159b\u159d\u0001"+
		"\u0000\u0000\u0000\u159c\u1593\u0001\u0000\u0000\u0000\u159c\u1597\u0001"+
		"\u0000\u0000\u0000\u159d\u02cf\u0001\u0000\u0000\u0000\u159e\u159f\u0005"+
		"\u01c5\u0000\u0000\u159f\u15a0\u0007*\u0000\u0000\u15a0\u02d1\u0001\u0000"+
		"\u0000\u0000\u15a1\u15a2\u0005\u0120\u0000\u0000\u15a2\u15a8\u0005\u0130"+
		"\u0000\u0000\u15a3\u15a4\u0005\u01d9\u0000\u0000\u15a4\u15a9\u0005\u01c5"+
		"\u0000\u0000\u15a5\u15a6\u0005\u01c5\u0000\u0000\u15a6\u15a9\u0007]\u0000"+
		"\u0000\u15a7\u15a9\u0005\u0202\u0000\u0000\u15a8\u15a3\u0001\u0000\u0000"+
		"\u0000\u15a8\u15a5\u0001\u0000\u0000\u0000\u15a8\u15a7\u0001\u0000\u0000"+
		"\u0000\u15a9\u02d3\u0001\u0000\u0000\u0000\u15aa\u15ab\u0005\u001d\u0000"+
		"\u0000\u15ab\u15ad\u0003\u02d8\u016c\u0000\u15ac\u15aa\u0001\u0000\u0000"+
		"\u0000\u15ad\u15b0\u0001\u0000\u0000\u0000\u15ae\u15ac\u0001\u0000\u0000"+
		"\u0000\u15ae\u15af\u0001\u0000\u0000\u0000\u15af\u02d5\u0001\u0000\u0000"+
		"\u0000\u15b0\u15ae\u0001\u0000\u0000\u0000\u15b1\u15b2\u0003\u03e2\u01f1"+
		"\u0000\u15b2\u15b3\u0003\u05c6\u02e3\u0000\u15b3\u15b4\u0003\u02e0\u0170"+
		"\u0000\u15b4\u15cf\u0001\u0000\u0000\u0000\u15b5\u15cf\u0003\u04ee\u0277"+
		"\u0000\u15b6\u15b7\u0003\u03dc\u01ee\u0000\u15b7\u15b8\u0003\u05c6\u02e3"+
		"\u0000\u15b8\u15b9\u0003\u0390\u01c8\u0000\u15b9\u15cf\u0001\u0000\u0000"+
		"\u0000\u15ba\u15bc\u0005)\u0000\u0000\u15bb\u15bd\u0003\u05cc\u02e6\u0000"+
		"\u15bc\u15bb\u0001\u0000\u0000\u0000\u15bc\u15bd\u0001\u0000\u0000\u0000"+
		"\u15bd\u15be\u0001\u0000\u0000\u0000\u15be\u15bf\u0003\u03e2\u01f1\u0000"+
		"\u15bf\u15c0\u0003\u05c6\u02e3\u0000\u15c0\u15c1\u0003\u02e0\u0170\u0000"+
		"\u15c1\u15cf\u0001\u0000\u0000\u0000\u15c2\u15cc\u0005\u017b\u0000\u0000"+
		"\u15c3\u15c4\u0003\u05c6\u02e3\u0000\u15c4\u15c5\u0003\u0390\u01c8\u0000"+
		"\u15c5\u15cd\u0001\u0000\u0000\u0000\u15c6\u15c8\u0003\u04a6\u0253\u0000"+
		"\u15c7\u15c9\u0003\u04e2\u0271\u0000\u15c8\u15c7\u0001\u0000\u0000\u0000"+
		"\u15c8\u15c9\u0001\u0000\u0000\u0000\u15c9\u15cd\u0001\u0000\u0000\u0000"+
		"\u15ca\u15cb\u0004\u016bC\u0000\u15cb\u15cd\u0005\u00a6\u0000\u0000\u15cc"+
		"\u15c3\u0001\u0000\u0000\u0000\u15cc\u15c6\u0001\u0000\u0000\u0000\u15cc"+
		"\u15ca\u0001\u0000\u0000\u0000\u15cd\u15cf\u0001\u0000\u0000\u0000\u15ce"+
		"\u15b1\u0001\u0000\u0000\u0000\u15ce\u15b5\u0001\u0000\u0000\u0000\u15ce"+
		"\u15b6\u0001\u0000\u0000\u0000\u15ce\u15ba\u0001\u0000\u0000\u0000\u15ce"+
		"\u15c2\u0001\u0000\u0000\u0000\u15cf\u02d7\u0001\u0000\u0000\u0000\u15d0"+
		"\u15d1\u0003\u05c8\u02e4\u0000\u15d1\u15d2\u0003\u03e2\u01f1\u0000\u15d2"+
		"\u15d3\u0003\u05c6\u02e3\u0000\u15d3\u15d4\u0003\u02e0\u0170\u0000\u15d4"+
		"\u15d7\u0001\u0000\u0000\u0000\u15d5\u15d7\u0003\u02d6\u016b\u0000\u15d6"+
		"\u15d0\u0001\u0000\u0000\u0000\u15d6\u15d5\u0001\u0000\u0000\u0000\u15d7"+
		"\u02d9\u0001\u0000\u0000\u0000\u15d8\u15da\u0005)\u0000\u0000\u15d9\u15db"+
		"\u0003\u05cc\u02e6\u0000\u15da\u15d9\u0001\u0000\u0000\u0000\u15da\u15db"+
		"\u0001\u0000\u0000\u0000\u15db\u15dc\u0001\u0000\u0000\u0000\u15dc\u15dd"+
		"\u0003\u03e2\u01f1\u0000\u15dd\u02db\u0001\u0000\u0000\u0000\u15de\u15df"+
		"\u0003\u02de\u016f\u0000\u15df\u15e0\u0003\u02d4\u016a\u0000\u15e0\u15e4"+
		"\u0001\u0000\u0000\u0000\u15e1\u15e2\u0005\u0259\u0000\u0000\u15e2\u15e4"+
		"\u0003\u02ce\u0167\u0000\u15e3\u15de\u0001\u0000\u0000\u0000\u15e3\u15e1"+
		"\u0001\u0000\u0000\u0000\u15e4\u02dd\u0001\u0000\u0000\u0000\u15e5\u15e6"+
		"\u0003\u03e2\u01f1\u0000\u15e6\u15e7\u0003\u05c6\u02e3\u0000\u15e7\u15e8"+
		"\u0003\u02e0\u0170\u0000\u15e8\u02df\u0001\u0000\u0000\u0000\u15e9\u15f1"+
		"\u0003\u0390\u01c8\u0000\u15ea\u15f1\u0005\u00a6\u0000\u0000\u15eb\u15f1"+
		"\u0005\u0191\u0000\u0000\u15ec\u15f1\u00059\u0000\u0000\u15ed\u15f1\u0005"+
		"M\u0000\u0000\u15ee\u15f1\u0005\u01f7\u0000\u0000\u15ef\u15f1\u0005\u02ce"+
		"\u0000\u0000\u15f0\u15e9\u0001\u0000\u0000\u0000\u15f0\u15ea\u0001\u0000"+
		"\u0000\u0000\u15f0\u15eb\u0001\u0000\u0000\u0000\u15f0\u15ec\u0001\u0000"+
		"\u0000\u0000\u15f0\u15ed\u0001\u0000\u0000\u0000\u15f0\u15ee\u0001\u0000"+
		"\u0000\u0000\u15f0\u15ef\u0001\u0000\u0000\u0000\u15f1\u02e1\u0001\u0000"+
		"\u0000\u0000\u15f2\u15f3\u0005\u0209\u0000\u0000\u15f3\u15f5\u0005\u0097"+
		"\u0000\u0000\u15f4\u15f6\u0003\u0520\u0290\u0000\u15f5\u15f4\u0001\u0000"+
		"\u0000\u0000\u15f5\u15f6\u0001\u0000\u0000\u0000\u15f6\u02e3\u0001\u0000"+
		"\u0000\u0000\u15f7\u15f9\u0005\u0209\u0000\u0000\u15f8\u15fa\u0003\u033e"+
		"\u019f\u0000\u15f9\u15f8\u0001\u0000\u0000\u0000\u15f9\u15fa\u0001\u0000"+
		"\u0000\u0000\u15fa\u15fb\u0001\u0000\u0000\u0000\u15fb\u15fd\u0005\u0245"+
		"\u0000\u0000\u15fc\u15fe\u0003\u0344\u01a2\u0000\u15fd\u15fc\u0001\u0000"+
		"\u0000\u0000\u15fd\u15fe\u0001\u0000\u0000\u0000\u15fe\u1600\u0001\u0000"+
		"\u0000\u0000\u15ff\u1601\u0003\u0520\u0290\u0000\u1600\u15ff\u0001\u0000"+
		"\u0000\u0000\u1600\u1601\u0001\u0000\u0000\u0000\u1601\u02e5\u0001\u0000"+
		"\u0000\u0000\u1602\u1604\u0005\u0209\u0000\u0000\u1603\u1605\u0005\u00ec"+
		"\u0000\u0000\u1604\u1603\u0001\u0000\u0000\u0000\u1604\u1605\u0001\u0000"+
		"\u0000\u0000\u1605\u1606\u0001\u0000\u0000\u0000\u1606\u1608\u0005\u025a"+
		"\u0000\u0000\u1607\u1609\u0003\u0344\u01a2\u0000\u1608\u1607\u0001\u0000"+
		"\u0000\u0000\u1608\u1609\u0001\u0000\u0000\u0000\u1609\u160b\u0001\u0000"+
		"\u0000\u0000\u160a\u160c\u0003\u0520\u0290\u0000\u160b\u160a\u0001\u0000"+
		"\u0000\u0000\u160b\u160c\u0001\u0000\u0000\u0000\u160c\u02e7\u0001\u0000"+
		"\u0000\u0000\u160d\u160e\u0005\u0209\u0000\u0000\u160e\u1610\u0005\u00cc"+
		"\u0000\u0000\u160f\u1611\u0003\u0344\u01a2\u0000\u1610\u160f\u0001\u0000"+
		"\u0000\u0000\u1610\u1611\u0001\u0000\u0000\u0000\u1611\u1613\u0001\u0000"+
		"\u0000\u0000\u1612\u1614\u0003\u0520\u0290\u0000\u1613\u1612\u0001\u0000"+
		"\u0000\u0000\u1613\u1614\u0001\u0000\u0000\u0000\u1614\u02e9\u0001\u0000"+
		"\u0000\u0000\u1615\u1616\u0005\u0209\u0000\u0000\u1616\u1617\u0005\u0247"+
		"\u0000\u0000\u1617\u1619\u0005\u022d\u0000\u0000\u1618\u161a\u0003\u0344"+
		"\u01a2\u0000\u1619\u1618\u0001\u0000\u0000\u0000\u1619\u161a\u0001\u0000"+
		"\u0000\u0000\u161a\u161c\u0001\u0000\u0000\u0000\u161b\u161d\u0003\u0520"+
		"\u0290\u0000\u161c\u161b\u0001\u0000\u0000\u0000\u161c\u161d\u0001\u0000"+
		"\u0000\u0000\u161d\u02eb\u0001\u0000\u0000\u0000\u161e\u161f\u0005\u0209"+
		"\u0000\u0000\u161f\u1620\u0005\u0195\u0000\u0000\u1620\u1622\u0005\u0245"+
		"\u0000\u0000\u1621\u1623\u0003\u0344\u01a2\u0000\u1622\u1621\u0001\u0000"+
		"\u0000\u0000\u1622\u1623\u0001\u0000\u0000\u0000\u1623\u1625\u0001\u0000"+
		"\u0000\u0000\u1624\u1626\u0003\u0520\u0290\u0000\u1625\u1624\u0001\u0000"+
		"\u0000\u0000\u1625\u1626\u0001\u0000\u0000\u0000\u1626\u02ed\u0001\u0000"+
		"\u0000\u0000\u1627\u1628\u0004\u0177D\u0000\u1628\u1629\u0005\u0209\u0000"+
		"\u0000\u1629\u162a\u0005\u0327\u0000\u0000\u162a\u162b\u0003\u0004\u0002"+
		"\u0000\u162b\u02ef\u0001\u0000\u0000\u0000\u162c\u162d\u0005\u0209\u0000"+
		"\u0000\u162d\u162e\u0005\u01aa\u0000\u0000\u162e\u02f1\u0001\u0000\u0000"+
		"\u0000\u162f\u1630\u0005\u0209\u0000\u0000\u1630\u1631\u0005\u00c6\u0000"+
		"\u0000\u1631\u1632\u0003\u0340\u01a0\u0000\u1632\u1633\u0005\u013c\u0000"+
		"\u0000\u1633\u02f3\u0001\u0000\u0000\u0000\u1634\u1635\u0005\u0209\u0000"+
		"\u0000\u1635\u1636\u0005\u00c6\u0000\u0000\u1636\u1637\u0003\u0340\u01a0"+
		"\u0000\u1637\u1638\u0005\u0179\u0000\u0000\u1638\u02f5\u0001\u0000\u0000"+
		"\u0000\u1639\u163a\u0005\u0209\u0000\u0000\u163a\u163b\u0005\u00c6\u0000"+
		"\u0000\u163b\u163c\u0003\u0340\u01a0\u0000\u163c\u163d\u0005\u022d\u0000"+
		"\u0000\u163d\u02f7\u0001\u0000\u0000\u0000\u163e\u1640\u0005\u0209\u0000"+
		"\u0000\u163f\u1641\u0003\u033e\u019f\u0000\u1640\u163f\u0001\u0000\u0000"+
		"\u0000\u1640\u1641\u0001\u0000\u0000\u0000\u1641\u1642\u0001\u0000\u0000"+
		"\u0000\u1642\u1643\u0005r\u0000\u0000\u1643\u1644\u0007^\u0000\u0000\u1644"+
		"\u1646\u0003\u0568\u02b4\u0000\u1645\u1647\u0003\u0344\u01a2\u0000\u1646"+
		"\u1645\u0001\u0000\u0000\u0000\u1646\u1647\u0001\u0000\u0000\u0000\u1647"+
		"\u1649\u0001\u0000\u0000\u0000\u1648\u164a\u0003\u0520\u0290\u0000\u1649"+
		"\u1648\u0001\u0000\u0000\u0000\u1649\u164a\u0001\u0000\u0000\u0000\u164a"+
		"\u02f9\u0001\u0000\u0000\u0000\u164b\u164c\u0005\u0209\u0000\u0000\u164c"+
		"\u164d\u0007.\u0000\u0000\u164d\u164e\u0005\u013c\u0000\u0000\u164e\u02fb"+
		"\u0001\u0000\u0000\u0000\u164f\u1650\u0005\u0209\u0000\u0000\u1650\u1651"+
		"\u0005M\u0000\u0000\u1651\u1652\u0005\u0328\u0000\u0000\u1652\u1653\u0005"+
		"\u022d\u0000\u0000\u1653\u02fd\u0001\u0000\u0000\u0000\u1654\u1659\u0005"+
		"\u0209\u0000\u0000\u1655\u1656\u0003\u025e\u012f\u0000\u1656\u1657\u0005"+
		"\u0101\u0000\u0000\u1657\u165a\u0001\u0000\u0000\u0000\u1658\u165a\u0005"+
		"\u02fb\u0000\u0000\u1659\u1655\u0001\u0000\u0000\u0000\u1659\u1658\u0001"+
		"\u0000\u0000\u0000\u165a\u02ff\u0001\u0000\u0000\u0000\u165b\u165c\u0005"+
		"\u0209\u0000\u0000\u165c\u165d\u0005N\u0000\u0000\u165d\u1660\u0005\u00cc"+
		"\u0000\u0000\u165e\u165f\u0005\u011a\u0000\u0000\u165f\u1661\u0003\u05a2"+
		"\u02d1\u0000\u1660\u165e\u0001\u0000\u0000\u0000\u1660\u1661\u0001\u0000"+
		"\u0000\u0000\u1661\u1664\u0001\u0000\u0000\u0000\u1662\u1663\u0005\u00eb"+
		"\u0000\u0000\u1663\u1665\u0003\u0590\u02c8\u0000\u1664\u1662\u0001\u0000"+
		"\u0000\u0000\u1664\u1665\u0001\u0000\u0000\u0000\u1665\u1667\u0001\u0000"+
		"\u0000\u0000\u1666\u1668\u0003\u013c\u009e\u0000\u1667\u1666\u0001\u0000"+
		"\u0000\u0000\u1667\u1668\u0001\u0000\u0000\u0000\u1668\u166a\u0001\u0000"+
		"\u0000\u0000\u1669\u166b\u0003\u0408\u0204\u0000\u166a\u1669\u0001\u0000"+
		"\u0000\u0000\u166a\u166b\u0001\u0000\u0000\u0000\u166b\u0301\u0001\u0000"+
		"\u0000\u0000\u166c\u166d\u0005\u0209\u0000\u0000\u166d\u166e\u0005\u01cf"+
		"\u0000\u0000\u166e\u1671\u0005\u00cc\u0000\u0000\u166f\u1670\u0005\u011a"+
		"\u0000\u0000\u1670\u1672\u0003\u05a2\u02d1\u0000\u1671\u166f\u0001\u0000"+
		"\u0000\u0000\u1671\u1672\u0001\u0000\u0000\u0000\u1672\u1675\u0001\u0000"+
		"\u0000\u0000\u1673\u1674\u0005\u00eb\u0000\u0000\u1674\u1676\u0003\u0590"+
		"\u02c8\u0000\u1675\u1673\u0001\u0000\u0000\u0000\u1675\u1676\u0001\u0000"+
		"\u0000\u0000\u1676\u1678\u0001\u0000\u0000\u0000\u1677\u1679\u0003\u013c"+
		"\u009e\u0000\u1678\u1677\u0001\u0000\u0000\u0000\u1678\u1679\u0001\u0000"+
		"\u0000\u0000\u1679\u167b\u0001\u0000\u0000\u0000\u167a\u167c\u0003\u0408"+
		"\u0204\u0000\u167b\u167a\u0001\u0000\u0000\u0000\u167b\u167c\u0001\u0000"+
		"\u0000\u0000\u167c\u0303\u0001\u0000\u0000\u0000\u167d\u167f\u0005\u0209"+
		"\u0000\u0000\u167e\u1680\u0005\u00d7\u0000\u0000\u167f\u167e\u0001\u0000"+
		"\u0000\u0000\u167f\u1680\u0001\u0000\u0000\u0000\u1680\u1681\u0001\u0000"+
		"\u0000\u0000\u1681\u1682\u0007_\u0000\u0000\u1682\u1683\u0003\u0342\u01a1"+
		"\u0000\u1683\u1685\u0003\u0568\u02b4\u0000\u1684\u1686\u0003\u0344\u01a2"+
		"\u0000\u1685\u1684\u0001\u0000\u0000\u0000\u1685\u1686\u0001\u0000\u0000"+
		"\u0000\u1686\u1688\u0001\u0000\u0000\u0000\u1687\u1689\u0003\u0188\u00c4"+
		"\u0000\u1688\u1687\u0001\u0000\u0000\u0000\u1688\u1689\u0001\u0000\u0000"+
		"\u0000\u1689\u0305\u0001\u0000\u0000\u0000\u168a\u168c\u0005\u0209\u0000"+
		"\u0000\u168b\u168d\u0005\u0233\u0000\u0000\u168c\u168b\u0001\u0000\u0000"+
		"\u0000\u168c\u168d\u0001\u0000\u0000\u0000\u168d\u168e\u0001\u0000\u0000"+
		"\u0000\u168e\u168f\u0005\u00c5\u0000\u0000\u168f\u0307\u0001\u0000\u0000"+
		"\u0000\u1690\u1691\u0005\u0209\u0000\u0000\u1691\u1692\u0005\u0089\u0000"+
		"\u0000\u1692\u1693\u0005 \u0000\u0000\u1693\u1694\u0005\u0010\u0000\u0000"+
		"\u1694\u1695\u0005!\u0000\u0000\u1695\u1696\u0005\u0287\u0000\u0000\u1696"+
		"\u0309\u0001\u0000\u0000\u0000\u1697\u1698\u0005\u0209\u0000\u0000\u1698"+
		"\u1699\u0005\u0089\u0000\u0000\u1699\u169a\u0005 \u0000\u0000\u169a\u169b"+
		"\u0005\u0010\u0000\u0000\u169b\u169c\u0005!\u0000\u0000\u169c\u169d\u0005"+
		"\u00c9\u0000\u0000\u169d\u030b\u0001\u0000\u0000\u0000\u169e\u169f\u0005"+
		"\u0209\u0000\u0000\u169f\u16a1\u0005\u0287\u0000\u0000\u16a0\u16a2\u0003"+
		"\u013c\u009e\u0000\u16a1\u16a0\u0001\u0000\u0000\u0000\u16a1\u16a2\u0001"+
		"\u0000\u0000\u0000\u16a2\u030d\u0001\u0000\u0000\u0000\u16a3\u16a4\u0005"+
		"\u0209\u0000\u0000\u16a4\u16a6\u0005\u00c9\u0000\u0000\u16a5\u16a7\u0003"+
		"\u013c\u009e\u0000\u16a6\u16a5\u0001\u0000\u0000\u0000\u16a6\u16a7\u0001"+
		"\u0000\u0000\u0000\u16a7\u030f\u0001\u0000\u0000\u0000\u16a8\u16a9\u0005"+
		"\u0209\u0000\u0000\u16a9\u16aa\u0005\u01bc\u0000\u0000\u16aa\u0311\u0001"+
		"\u0000\u0000\u0000\u16ab\u16ac\u0005\u0209\u0000\u0000\u16ac\u16ae\u0005"+
		"\u01bb\u0000\u0000\u16ad\u16af\u0003\u0346\u01a3\u0000\u16ae\u16ad\u0001"+
		"\u0000\u0000\u0000\u16ae\u16af\u0001\u0000\u0000\u0000\u16af\u16b3\u0001"+
		"\u0000\u0000\u0000\u16b0\u16b1\u0005\u00e8\u0000\u0000\u16b1\u16b2\u0005"+
		"\u01c0\u0000\u0000\u16b2\u16b4\u0005\u0003\u0000\u0000\u16b3\u16b0\u0001"+
		"\u0000\u0000\u0000\u16b3\u16b4\u0001\u0000\u0000\u0000\u16b4\u16b6\u0001"+
		"\u0000\u0000\u0000\u16b5\u16b7\u0003\u013c\u009e\u0000\u16b6\u16b5\u0001"+
		"\u0000\u0000\u0000\u16b6\u16b7\u0001\u0000\u0000\u0000\u16b7\u0313\u0001"+
		"\u0000\u0000\u0000\u16b8\u16ba\u0005\u0209\u0000\u0000\u16b9\u16bb\u0003"+
		"\u05c8\u02e4\u0000\u16ba\u16b9\u0001\u0000\u0000\u0000\u16ba\u16bb\u0001"+
		"\u0000\u0000\u0000\u16bb\u16bc\u0001\u0000\u0000\u0000\u16bc\u16be\u0005"+
		"\u022d\u0000\u0000\u16bd\u16bf\u0003\u0520\u0290\u0000\u16be\u16bd\u0001"+
		"\u0000\u0000\u0000\u16be\u16bf\u0001\u0000\u0000\u0000\u16bf\u0315\u0001"+
		"\u0000\u0000\u0000\u16c0\u16c2\u0005\u0209\u0000\u0000\u16c1\u16c3\u0005"+
		"\u00ec\u0000\u0000\u16c2\u16c1\u0001\u0000\u0000\u0000\u16c2\u16c3\u0001"+
		"\u0000\u0000\u0000\u16c3\u16c4\u0001\u0000\u0000\u0000\u16c4\u16c5\u0005"+
		"\u01ba\u0000\u0000\u16c5\u0317\u0001\u0000\u0000\u0000\u16c6\u16c8\u0005"+
		"\u0209\u0000\u0000\u16c7\u16c9\u0003\u05c8\u02e4\u0000\u16c8\u16c7\u0001"+
		"\u0000\u0000\u0000\u16c8\u16c9\u0001\u0000\u0000\u0000\u16c9\u16ca\u0001"+
		"\u0000\u0000\u0000\u16ca\u16cc\u0005\u027f\u0000\u0000\u16cb\u16cd\u0003"+
		"\u0520\u0290\u0000\u16cc\u16cb\u0001\u0000\u0000\u0000\u16cc\u16cd\u0001"+
		"\u0000\u0000\u0000\u16cd\u0319\u0001\u0000\u0000\u0000\u16ce\u16cf\u0005"+
		"\u0209\u0000\u0000\u16cf\u16d1\u0003\u03f0\u01f8\u0000\u16d0\u16d2\u0003"+
		"\u0520\u0290\u0000\u16d1\u16d0\u0001\u0000\u0000\u0000\u16d1\u16d2\u0001"+
		"\u0000\u0000\u0000\u16d2\u031b\u0001\u0000\u0000\u0000\u16d3\u16d4\u0005"+
		"\u0209\u0000\u0000\u16d4\u16d6\u0005q\u0000\u0000\u16d5\u16d7\u0003\u0520"+
		"\u0290\u0000\u16d6\u16d5\u0001\u0000\u0000\u0000\u16d6\u16d7\u0001\u0000"+
		"\u0000\u0000\u16d7\u031d\u0001\u0000\u0000\u0000\u16d8\u16d9\u0005\u0209"+
		"\u0000\u0000\u16d9\u16da\u0005\u01b7\u0000\u0000\u16da\u031f\u0001\u0000"+
		"\u0000\u0000\u16db\u16dc\u0005\u0209\u0000\u0000\u16dc\u16e3\u0005\u00f8"+
		"\u0000\u0000\u16dd\u16de\u0005\u00e8\u0000\u0000\u16de\u16e1\u0003\u051c"+
		"\u028e\u0000\u16df\u16e0\u0005\u0276\u0000\u0000\u16e0\u16e2\u0003\u04f8"+
		"\u027c\u0000\u16e1\u16df\u0001\u0000\u0000\u0000\u16e1\u16e2\u0001\u0000"+
		"\u0000\u0000\u16e2\u16e4\u0001\u0000\u0000\u0000\u16e3\u16dd\u0001\u0000"+
		"\u0000\u0000\u16e3\u16e4\u0001\u0000\u0000\u0000\u16e4\u0321\u0001\u0000"+
		"\u0000\u0000\u16e5\u16e6\u0005\u0209\u0000\u0000\u16e6\u16e7\u0005\u008b"+
		"\u0000\u0000\u16e7\u16e9\u0005\u0096\u0000\u0000\u16e8\u16ea\u0003\u04da"+
		"\u026d\u0000\u16e9\u16e8\u0001\u0000\u0000\u0000\u16e9\u16ea\u0001\u0000"+
		"\u0000\u0000\u16ea\u16eb\u0001\u0000\u0000\u0000\u16eb\u16ec\u0003\u053c"+
		"\u029e\u0000\u16ec\u0323\u0001\u0000\u0000\u0000\u16ed\u16ee\u0005\u0209"+
		"\u0000\u0000\u16ee\u16ef\u0005\u008b\u0000\u0000\u16ef\u16f0\u0005\u0247"+
		"\u0000\u0000\u16f0\u16f1\u0003\u0568\u02b4\u0000\u16f1\u0325\u0001\u0000"+
		"\u0000\u0000\u16f2\u16f3\u0005\u0209\u0000\u0000\u16f3\u16f4\u0005\u008b"+
		"\u0000\u0000\u16f4\u16f5\u0005\u0284\u0000\u0000\u16f5\u16f6\u0003\u054c"+
		"\u02a6\u0000\u16f6\u0327\u0001\u0000\u0000\u0000\u16f7\u16f8\u0005\u0209"+
		"\u0000\u0000\u16f8\u16f9\u0005\u0155\u0000\u0000\u16f9\u16fa\u0005\u022d"+
		"\u0000\u0000\u16fa\u0329\u0001\u0000\u0000\u0000\u16fb\u16fc\u0005\u0209"+
		"\u0000\u0000\u16fc\u16fd\u0003\u025e\u012f\u0000\u16fd\u16ff\u0005\u022d"+
		"\u0000\u0000\u16fe\u1700\u0003\u0408\u0204\u0000\u16ff\u16fe\u0001\u0000"+
		"\u0000\u0000\u16ff\u1700\u0001\u0000\u0000\u0000\u1700\u032b\u0001\u0000"+
		"\u0000\u0000\u1701\u1702\u0005\u0209\u0000\u0000\u1702\u1703\u0005\u008b"+
		"\u0000\u0000\u1703\u1704\u0005\u01b8\u0000\u0000\u1704\u1705\u0003\u0540"+
		"\u02a0\u0000\u1705\u032d\u0001\u0000\u0000\u0000\u1706\u1707\u0005\u0209"+
		"\u0000\u0000\u1707\u1708\u0005\u008b\u0000\u0000\u1708\u1709\u0005\u00ee"+
		"\u0000\u0000\u1709\u170a\u0003\u0544\u02a2\u0000\u170a\u032f\u0001\u0000"+
		"\u0000\u0000\u170b\u170c\u0005\u0209\u0000\u0000\u170c\u170d\u0005\u008b"+
		"\u0000\u0000\u170d\u170e\u0005\u025b\u0000\u0000\u170e\u170f\u0003\u0548"+
		"\u02a4\u0000\u170f\u0331\u0001\u0000\u0000\u0000\u1710\u1711\u0005\u0209"+
		"\u0000\u0000\u1711\u1712\u0005\u008b\u0000\u0000\u1712\u1713\u0005\u01b8"+
		"\u0000\u0000\u1713\u1715\u0005\u022d\u0000\u0000\u1714\u1716\u0003\u0520"+
		"\u0290\u0000\u1715\u1714\u0001\u0000\u0000\u0000\u1715\u1716\u0001\u0000"+
		"\u0000\u0000\u1716\u0333\u0001\u0000\u0000\u0000\u1717\u1718\u0005\u0209"+
		"\u0000\u0000\u1718\u1719\u0005\u008b\u0000\u0000\u1719\u171a\u0005\u00ee"+
		"\u0000\u0000\u171a\u171c\u0005\u022d\u0000\u0000\u171b\u171d\u0003\u0520"+
		"\u0290\u0000\u171c\u171b\u0001\u0000\u0000\u0000\u171c\u171d\u0001\u0000"+
		"\u0000\u0000\u171d\u0335\u0001\u0000\u0000\u0000\u171e\u171f\u0005\u0209"+
		"\u0000\u0000\u171f\u1720\u0005\u008b\u0000\u0000\u1720\u1721\u0005\u01b8"+
		"\u0000\u0000\u1721\u1722\u0005o\u0000\u0000\u1722\u1723\u0003\u0540\u02a0"+
		"\u0000\u1723\u0337\u0001\u0000\u0000\u0000\u1724\u1725\u0005\u0209\u0000"+
		"\u0000\u1725\u1726\u0005\u008b\u0000\u0000\u1726\u1727\u0005\u00ee\u0000"+
		"\u0000\u1727\u1728\u0005o\u0000\u0000\u1728\u1729\u0003\u0544\u02a2\u0000"+
		"\u1729\u0339\u0001\u0000\u0000\u0000\u172a\u172b\u0005\u0209\u0000\u0000"+
		"\u172b\u172c\u0005\u008b\u0000\u0000\u172c\u172d\u0005\u00cd\u0000\u0000"+
		"\u172d\u172e\u0003\u0558\u02ac\u0000\u172e\u033b\u0001\u0000\u0000\u0000"+
		"\u172f\u1730\u0005\u0209\u0000\u0000\u1730\u1731\u0005\u008b\u0000\u0000"+
		"\u1731\u1732\u0005\u0273\u0000\u0000\u1732\u1733\u0003\u051c\u028e\u0000"+
		"\u1733\u033d\u0001\u0000\u0000\u0000\u1734\u173a\u0005\u00ec\u0000\u0000"+
		"\u1735\u1737\u0005\u00d7\u0000\u0000\u1736\u1738\u0005\u00ec\u0000\u0000"+
		"\u1737\u1736\u0001\u0000\u0000\u0000\u1737\u1738\u0001\u0000\u0000\u0000"+
		"\u1738\u173a\u0001\u0000\u0000\u0000\u1739\u1734\u0001\u0000\u0000\u0000"+
		"\u1739\u1735\u0001\u0000\u0000\u0000\u173a\u033f\u0001\u0000\u0000\u0000"+
		"\u173b\u173e\u0003\u0560\u02b0\u0000\u173c\u173e\u00059\u0000\u0000\u173d"+
		"\u173b\u0001\u0000\u0000\u0000\u173d\u173c\u0001\u0000\u0000\u0000\u173e"+
		"\u0341\u0001\u0000\u0000\u0000\u173f\u1740\u0007^\u0000\u0000\u1740\u0343"+
		"\u0001\u0000\u0000\u0000\u1741\u1742\u0003\u0342\u01a1\u0000\u1742\u1743"+
		"\u0003\u0580\u02c0\u0000\u1743\u0345\u0001\u0000\u0000\u0000\u1744\u1749"+
		"\u0003\u0348\u01a4\u0000\u1745\u1746\u0005\u001d\u0000\u0000\u1746\u1748"+
		"\u0003\u0348\u01a4\u0000\u1747\u1745\u0001\u0000\u0000\u0000\u1748\u174b"+
		"\u0001\u0000\u0000\u0000\u1749\u1747\u0001\u0000\u0000\u0000\u1749\u174a"+
		"\u0001\u0000\u0000\u0000\u174a\u0347\u0001\u0000\u0000\u0000\u174b\u1749"+
		"\u0001\u0000\u0000\u0000\u174c\u174d\u0005T\u0000\u0000\u174d\u1754\u0005"+
		"\u011d\u0000\u0000\u174e\u174f\u0005\u0086\u0000\u0000\u174f\u1754\u0005"+
		"\u0242\u0000\u0000\u1750\u1751\u0005\u01a2\u0000\u0000\u1751\u1754\u0005"+
		"\u00dc\u0000\u0000\u1752\u1754\u0007`\u0000\u0000\u1753\u174c\u0001\u0000"+
		"\u0000\u0000\u1753\u174e\u0001\u0000\u0000\u0000\u1753\u1750\u0001\u0000"+
		"\u0000\u0000\u1753\u1752\u0001\u0000\u0000\u0000\u1754\u0349\u0001\u0000"+
		"\u0000\u0000\u1755\u1756\u0005N\u0000\u0000\u1756\u177a\u0003\u05a6\u02d3"+
		"\u0000\u1757\u1758\u0005[\u0000\u0000\u1758\u1759\u0005\u010c\u0000\u0000"+
		"\u1759\u175a\u0003\u034c\u01a6\u0000\u175a\u175d\u0005\u011a\u0000\u0000"+
		"\u175b\u175e\u0003\u0580\u02c0\u0000\u175c\u175e\u0005\u00a6\u0000\u0000"+
		"\u175d\u175b\u0001\u0000\u0000\u0000\u175d\u175c\u0001\u0000\u0000\u0000"+
		"\u175e\u177a\u0001\u0000\u0000\u0000\u175f\u1761\u0005\u00e4\u0000\u0000"+
		"\u1760\u1762\u0003\u0524\u0292\u0000\u1761\u1760\u0001\u0000\u0000\u0000"+
		"\u1761\u1762\u0001\u0000\u0000\u0000\u1762\u176c\u0001\u0000\u0000\u0000"+
		"\u1763\u176d\u0003\u035e\u01af\u0000\u1764\u1769\u0003\u035a\u01ad\u0000"+
		"\u1765\u1766\u0005\u001d\u0000\u0000\u1766\u1768\u0003\u035a\u01ad\u0000"+
		"\u1767\u1765\u0001\u0000\u0000\u0000\u1768\u176b\u0001\u0000\u0000\u0000"+
		"\u1769\u1767\u0001\u0000\u0000\u0000\u1769\u176a\u0001\u0000\u0000\u0000"+
		"\u176a\u176d\u0001\u0000\u0000\u0000\u176b\u1769\u0001\u0000\u0000\u0000"+
		"\u176c\u1763\u0001\u0000\u0000\u0000\u176c\u1764\u0001\u0000\u0000\u0000"+
		"\u176d\u177a\u0001\u0000\u0000\u0000\u176e\u1770\u0005\u0128\u0000\u0000"+
		"\u176f\u1771\u0007a\u0000\u0000\u1770\u176f\u0001\u0000\u0000\u0000\u1770"+
		"\u1771\u0001\u0000\u0000\u0000\u1771\u1772\u0001\u0000\u0000\u0000\u1772"+
		"\u177a\u0003\u0390\u01c8\u0000\u1773\u1774\u0005\u0137\u0000\u0000\u1774"+
		"\u1775\u0005\u010c\u0000\u0000\u1775\u1776\u0005\u0117\u0000\u0000\u1776"+
		"\u1777\u0005[\u0000\u0000\u1777\u177a\u0003\u0362\u01b1\u0000\u1778\u177a"+
		"\u0005\u020a\u0000\u0000\u1779\u1755\u0001\u0000\u0000\u0000\u1779\u1757"+
		"\u0001\u0000\u0000\u0000\u1779\u175f\u0001\u0000\u0000\u0000\u1779\u176e"+
		"\u0001\u0000\u0000\u0000\u1779\u1773\u0001\u0000\u0000\u0000\u1779\u1778"+
		"\u0001\u0000\u0000\u0000\u177a\u034b\u0001\u0000\u0000\u0000\u177b\u177e"+
		"\u0003\u034e\u01a7\u0000\u177c\u177e\u0003\u0352\u01a9\u0000\u177d\u177b"+
		"\u0001\u0000\u0000\u0000\u177d\u177c\u0001\u0000\u0000\u0000\u177e\u034d"+
		"\u0001\u0000\u0000\u0000\u177f\u1784\u0003\u0350\u01a8\u0000\u1780\u1781"+
		"\u0005\u001d\u0000\u0000\u1781\u1783\u0003\u0350\u01a8\u0000\u1782\u1780"+
		"\u0001\u0000\u0000\u0000\u1783\u1786\u0001\u0000\u0000\u0000\u1784\u1782"+
		"\u0001\u0000\u0000\u0000\u1784\u1785\u0001\u0000\u0000\u0000\u1785\u034f"+
		"\u0001\u0000\u0000\u0000\u1786\u1784\u0001\u0000\u0000\u0000\u1787\u1789"+
		"\u0003\u0568\u02b4\u0000\u1788\u178a\u0003\u0354\u01aa\u0000\u1789\u1788"+
		"\u0001\u0000\u0000\u0000\u1789\u178a\u0001\u0000\u0000\u0000\u178a\u0351"+
		"\u0001\u0000\u0000\u0000\u178b\u178c\u0003\u0568\u02b4\u0000\u178c\u178d"+
		"\u0005\u01a7\u0000\u0000\u178d\u178e\u0005 \u0000\u0000\u178e\u178f\u0003"+
		"8\u001c\u0000\u178f\u1791\u0005!\u0000\u0000\u1790\u1792\u0003\u0354\u01aa"+
		"\u0000\u1791\u1790\u0001\u0000\u0000\u0000\u1791\u1792\u0001\u0000\u0000"+
		"\u0000\u1792\u0353\u0001\u0000\u0000\u0000\u1793\u1794\u0003\u01ba\u00dd"+
		"\u0000\u1794\u1796\u0005 \u0000\u0000\u1795\u1797\u0003\u0358\u01ac\u0000"+
		"\u1796\u1795\u0001\u0000\u0000\u0000\u1796\u1797\u0001\u0000\u0000\u0000"+
		"\u1797\u1798\u0001\u0000\u0000\u0000\u1798\u1799\u0005!\u0000\u0000\u1799"+
		"\u0355\u0001\u0000\u0000\u0000\u179a\u179d\u0003\u0580\u02c0\u0000\u179b"+
		"\u179d\u0005\u01b6\u0000\u0000\u179c\u179a\u0001\u0000\u0000\u0000\u179c"+
		"\u179b\u0001\u0000\u0000\u0000\u179d\u0357\u0001\u0000\u0000\u0000\u179e"+
		"\u17a3\u0003\u0356\u01ab\u0000\u179f\u17a0\u0005\u001d\u0000\u0000\u17a0"+
		"\u17a2\u0003\u0356\u01ab\u0000\u17a1\u179f\u0001\u0000\u0000\u0000\u17a2"+
		"\u17a5\u0001\u0000\u0000\u0000\u17a3\u17a1\u0001\u0000\u0000\u0000\u17a3"+
		"\u17a4\u0001\u0000\u0000\u0000\u17a4\u0359\u0001\u0000\u0000\u0000\u17a5"+
		"\u17a3\u0001\u0000\u0000\u0000\u17a6\u17b2\u0007b\u0000\u0000\u17a7\u17a9"+
		"\u0003\u035c\u01ae\u0000\u17a8\u17a7\u0001\u0000\u0000\u0000\u17a8\u17a9"+
		"\u0001\u0000\u0000\u0000\u17a9\u17aa\u0001\u0000\u0000\u0000\u17aa\u17b2"+
		"\u0005\u013c\u0000\u0000\u17ab\u17ac\u0005\u01ce\u0000\u0000\u17ac\u17ae"+
		"\u0005\u013c\u0000\u0000\u17ad\u17af\u0003\u0408\u0204\u0000\u17ae\u17ad"+
		"\u0001\u0000\u0000\u0000\u17ae\u17af\u0001\u0000\u0000\u0000\u17af\u17b2"+
		"\u0001\u0000\u0000\u0000\u17b0\u17b2\u0005\u0197\u0000\u0000\u17b1\u17a6"+
		"\u0001\u0000\u0000\u0000\u17b1\u17a8\u0001\u0000\u0000\u0000\u17b1\u17ab"+
		"\u0001\u0000\u0000\u0000\u17b1\u17b0\u0001\u0000\u0000\u0000\u17b2\u035b"+
		"\u0001\u0000\u0000\u0000\u17b3\u17b4\u0007c\u0000\u0000\u17b4\u035d\u0001"+
		"\u0000\u0000\u0000\u17b5\u17bd\u0007\u0011\u0000\u0000\u17b6\u17b7\u0005"+
		"\u028d\u0000\u0000\u17b7\u17b8\u0005\u01c5\u0000\u0000\u17b8\u17be\u0005"+
		"\u013a\u0000\u0000\u17b9\u17bb\u0003\u0582\u02c1\u0000\u17ba\u17bc\u0003"+
		"\u0360\u01b0\u0000\u17bb\u17ba\u0001\u0000\u0000\u0000\u17bb\u17bc\u0001"+
		"\u0000\u0000\u0000\u17bc\u17be\u0001\u0000\u0000\u0000\u17bd\u17b6\u0001"+
		"\u0000\u0000\u0000\u17bd\u17b9\u0001\u0000\u0000\u0000\u17bd\u17be\u0001"+
		"\u0000\u0000\u0000\u17be\u035f\u0001\u0000\u0000\u0000\u17bf\u17c0\u0005"+
		"\u00e8\u0000\u0000\u17c0\u17c5\u0005\u00d6\u0000\u0000\u17c1\u17c2\u0005"+
		"\u028d\u0000\u0000\u17c2\u17c3\u0005\u01c5\u0000\u0000\u17c3\u17c5\u0005"+
		"\u013a\u0000\u0000\u17c4\u17bf\u0001\u0000\u0000\u0000\u17c4\u17c1\u0001"+
		"\u0000\u0000\u0000\u17c5\u0361\u0001\u0000\u0000\u0000\u17c6\u17c7\u0003"+
		"\u0568\u02b4\u0000\u17c7\u17c9\u0003\u0368\u01b4\u0000\u17c8\u17ca\u0003"+
		"\u0354\u01aa\u0000\u17c9\u17c8\u0001\u0000\u0000\u0000\u17c9\u17ca\u0001"+
		"\u0000\u0000\u0000\u17ca\u17cd\u0001\u0000\u0000\u0000\u17cb\u17cc\u0005"+
		"\u0108\u0000\u0000\u17cc\u17ce\u0005\u012c\u0000\u0000\u17cd\u17cb\u0001"+
		"\u0000\u0000\u0000\u17cd\u17ce\u0001\u0000\u0000\u0000\u17ce\u17d1\u0001"+
		"\u0000\u0000\u0000\u17cf\u17d1\u0003\u0364\u01b2\u0000\u17d0\u17c6\u0001"+
		"\u0000\u0000\u0000\u17d0\u17cf\u0001\u0000\u0000\u0000\u17d1\u0363\u0001"+
		"\u0000\u0000\u0000\u17d2\u17d7\u0003\u0366\u01b3\u0000\u17d3\u17d4\u0005"+
		"\u001d\u0000\u0000\u17d4\u17d6\u0003\u0366\u01b3\u0000\u17d5\u17d3\u0001"+
		"\u0000\u0000\u0000\u17d6\u17d9\u0001\u0000\u0000\u0000\u17d7\u17d5\u0001"+
		"\u0000\u0000\u0000\u17d7\u17d8\u0001\u0000\u0000\u0000\u17d8\u0365\u0001"+
		"\u0000\u0000\u0000\u17d9\u17d7\u0001\u0000\u0000\u0000\u17da\u17dc\u0003"+
		"\u0568\u02b4\u0000\u17db\u17dd\u0003\u0354\u01aa\u0000\u17dc\u17db\u0001"+
		"\u0000\u0000\u0000\u17dc\u17dd\u0001\u0000\u0000\u0000\u17dd\u17e0\u0001"+
		"\u0000\u0000\u0000\u17de\u17df\u0005\u0108\u0000\u0000\u17df\u17e1\u0005"+
		"\u012c\u0000\u0000\u17e0\u17de\u0001\u0000\u0000\u0000\u17e0\u17e1\u0001"+
		"\u0000\u0000\u0000\u17e1\u0367\u0001\u0000\u0000\u0000\u17e2\u17e3\u0005"+
		"\u01a7\u0000\u0000\u17e3\u17e4\u0005 \u0000\u0000\u17e4\u17e5\u00038\u001c"+
		"\u0000\u17e5\u17e6\u0005!\u0000\u0000\u17e6\u0369\u0001\u0000\u0000\u0000"+
		"\u17e7\u17ec\u0003\u036c\u01b6\u0000\u17e8\u17ec\u0003\u0376\u01bb\u0000"+
		"\u17e9\u17ec\u0003\u0378\u01bc\u0000\u17ea\u17ec\u0003\u037c\u01be\u0000"+
		"\u17eb\u17e7\u0001\u0000\u0000\u0000\u17eb\u17e8\u0001\u0000\u0000\u0000"+
		"\u17eb\u17e9\u0001\u0000\u0000\u0000\u17eb\u17ea\u0001\u0000\u0000\u0000"+
		"\u17ec\u036b\u0001\u0000\u0000\u0000\u17ed\u17ee\u0005\u008b\u0000\u0000"+
		"\u17ee\u17ef\u0005\u02cd\u0000\u0000\u17ef\u17f0\u0005\u00f9\u0000\u0000"+
		"\u17f0\u17f1\u0003\u0580\u02c0\u0000\u17f1\u17f3\u0005\u0260\u0000\u0000"+
		"\u17f2\u17f4\u0003\u05c6\u02e3\u0000\u17f3\u17f2\u0001\u0000\u0000\u0000"+
		"\u17f3\u17f4\u0001\u0000\u0000\u0000\u17f4\u17f5\u0001\u0000\u0000\u0000"+
		"\u17f5\u17f7\u0007d\u0000\u0000\u17f6\u17f8\u0003\u036e\u01b7\u0000\u17f7"+
		"\u17f6\u0001\u0000\u0000\u0000\u17f7\u17f8\u0001\u0000\u0000\u0000\u17f8"+
		"\u17fa\u0001\u0000\u0000\u0000\u17f9\u17fb\u0003\u0372\u01b9\u0000\u17fa"+
		"\u17f9\u0001\u0000\u0000\u0000\u17fa\u17fb\u0001\u0000\u0000\u0000\u17fb"+
		"\u17fd\u0001\u0000\u0000\u0000\u17fc\u17fe\u0003\u0374\u01ba\u0000\u17fd"+
		"\u17fc\u0001\u0000\u0000\u0000\u17fd\u17fe\u0001\u0000\u0000\u0000\u17fe"+
		"\u036d\u0001\u0000\u0000\u0000\u17ff\u1801\u0005\u02cf\u0000\u0000\u1800"+
		"\u1802\u0003\u05c6\u02e3\u0000\u1801\u1800\u0001\u0000\u0000\u0000\u1801"+
		"\u1802\u0001\u0000\u0000\u0000\u1802\u1803\u0001\u0000\u0000\u0000\u1803"+
		"\u180a\u0003\u0370\u01b8\u0000\u1804\u1806\u0005\u001d\u0000\u0000\u1805"+
		"\u1804\u0001\u0000\u0000\u0000\u1805\u1806\u0001\u0000\u0000\u0000\u1806"+
		"\u1807\u0001\u0000\u0000\u0000\u1807\u1809\u0003\u0370\u01b8\u0000\u1808"+
		"\u1805\u0001\u0000\u0000\u0000\u1809\u180c\u0001\u0000\u0000\u0000\u180a"+
		"\u1808\u0001\u0000\u0000\u0000\u180a\u180b\u0001\u0000\u0000\u0000\u180b"+
		"\u036f\u0001\u0000\u0000\u0000\u180c\u180a\u0001\u0000\u0000\u0000\u180d"+
		"\u1810\u0005\u0003\u0000\u0000\u180e\u180f\u0005\u000f\u0000\u0000\u180f"+
		"\u1811\u0005\u0003\u0000\u0000\u1810\u180e\u0001\u0000\u0000\u0000\u1810"+
		"\u1811\u0001\u0000\u0000\u0000\u1811\u0371\u0001\u0000\u0000\u0000\u1812"+
		"\u1814\u0005\u02cc\u0000\u0000\u1813\u1815\u0003\u05c6\u02e3\u0000\u1814"+
		"\u1813\u0001\u0000\u0000\u0000\u1814\u1815\u0001\u0000\u0000\u0000\u1815"+
		"\u1816\u0001\u0000\u0000\u0000\u1816\u1817\u0005\u0003\u0000\u0000\u1817"+
		"\u0373\u0001\u0000\u0000\u0000\u1818\u1819\u0007\u0007\u0000\u0000\u1819"+
		"\u0375\u0001\u0000\u0000\u0000\u181a\u181b\u0005:\u0000\u0000\u181b\u181c"+
		"\u0005\u02cd\u0000\u0000\u181c\u181d\u0005\u00f9\u0000\u0000\u181d\u181f"+
		"\u0003\u057a\u02bd\u0000\u181e\u1820\u0003\u036e\u01b7\u0000\u181f\u181e"+
		"\u0001\u0000\u0000\u0000\u181f\u1820\u0001\u0000\u0000\u0000\u1820\u1822"+
		"\u0001\u0000\u0000\u0000\u1821\u1823\u0003\u0372\u01b9\u0000\u1822\u1821"+
		"\u0001\u0000\u0000\u0000\u1822\u1823\u0001\u0000\u0000\u0000\u1823\u1825"+
		"\u0001\u0000\u0000\u0000\u1824\u1826\u0003\u0374\u01ba\u0000\u1825\u1824"+
		"\u0001\u0000\u0000\u0000\u1825\u1826\u0001\u0000\u0000\u0000\u1826\u1828"+
		"\u0001\u0000\u0000\u0000\u1827\u1829\u0005\u00e6\u0000\u0000\u1828\u1827"+
		"\u0001\u0000\u0000\u0000\u1828\u1829\u0001\u0000\u0000\u0000\u1829\u0377"+
		"\u0001\u0000\u0000\u0000\u182a\u182b\u0005\u0207\u0000\u0000\u182b\u182c"+
		"\u0005\u02cd\u0000\u0000\u182c\u182d\u0005\u00f9\u0000\u0000\u182d\u1830"+
		"\u0003\u0580\u02c0\u0000\u182e\u182f\u0005\u00e8\u0000\u0000\u182f\u1831"+
		"\u0003\u037a\u01bd\u0000\u1830\u182e\u0001\u0000\u0000\u0000\u1830\u1831"+
		"\u0001\u0000\u0000\u0000\u1831\u0379\u0001\u0000\u0000\u0000\u1832\u1839"+
		"\u0003\u058e\u02c7\u0000\u1833\u1835\u0005\u001d\u0000\u0000\u1834\u1833"+
		"\u0001\u0000\u0000\u0000\u1834\u1835\u0001\u0000\u0000\u0000\u1835\u1836"+
		"\u0001\u0000\u0000\u0000\u1836\u1838\u0003\u058e\u02c7\u0000\u1837\u1834"+
		"\u0001\u0000\u0000\u0000\u1838\u183b\u0001\u0000\u0000\u0000\u1839\u1837"+
		"\u0001\u0000\u0000\u0000\u1839\u183a\u0001\u0000\u0000\u0000\u183a\u037b"+
		"\u0001\u0000\u0000\u0000\u183b\u1839\u0001\u0000\u0000\u0000\u183c\u183d"+
		"\u0005\u00b8\u0000\u0000\u183d\u183e\u0005\u02cd\u0000\u0000\u183e\u183f"+
		"\u0005\u00f9\u0000\u0000\u183f\u1841\u0003\u057a\u02bd\u0000\u1840\u1842"+
		"\u0005\u00e6\u0000\u0000\u1841\u1840\u0001\u0000\u0000\u0000\u1841\u1842"+
		"\u0001\u0000\u0000\u0000\u1842\u037d\u0001\u0000\u0000\u0000\u1843\u184a"+
		"\u0003\u0380\u01c0\u0000\u1844\u184a\u0003\u0382\u01c1\u0000\u1845\u184a"+
		"\u0003\u038a\u01c5\u0000\u1846\u184a\u0003\u038c\u01c6\u0000\u1847\u1848"+
		"\u0004\u01bfE\u0000\u1848\u184a\u0003\u038e\u01c7\u0000\u1849\u1843\u0001"+
		"\u0000\u0000\u0000\u1849\u1844\u0001\u0000\u0000\u0000\u1849\u1845\u0001"+
		"\u0000\u0000\u0000\u1849\u1846\u0001\u0000\u0000\u0000\u1849\u1847\u0001"+
		"\u0000\u0000\u0000\u184a\u037f\u0001\u0000\u0000\u0000\u184b\u184c\u0007"+
		"e\u0000\u0000\u184c\u184f\u0003\u0568\u02b4\u0000\u184d\u1850\u0003\u05a2"+
		"\u02d1\u0000\u184e\u1850\u0003\u0530\u0298\u0000\u184f\u184d\u0001\u0000"+
		"\u0000\u0000\u184f\u184e\u0001\u0000\u0000\u0000\u184f\u1850\u0001\u0000"+
		"\u0000\u0000\u1850\u0381\u0001\u0000\u0000\u0000\u1851\u1853\u0007e\u0000"+
		"\u0000\u1852\u1854\u0003\u0384\u01c2\u0000\u1853\u1852\u0001\u0000\u0000"+
		"\u0000\u1853\u1854\u0001\u0000\u0000\u0000\u1854\u1859\u0001\u0000\u0000"+
		"\u0000\u1855\u1856\u0004\u01c1F\u0000\u1856\u1857\u0005\u00e8\u0000\u0000"+
		"\u1857\u1858\u0005\u0096\u0000\u0000\u1858\u185a\u0003\u05bc\u02de\u0000"+
		"\u1859\u1855\u0001\u0000\u0000\u0000\u1859\u185a\u0001\u0000\u0000\u0000"+
		"\u185a\u185b\u0001\u0000\u0000\u0000\u185b\u185c\u0003\u0386\u01c3\u0000"+
		"\u185c\u0383\u0001\u0000\u0000\u0000\u185d\u185e\u0005\u00e9\u0000\u0000"+
		"\u185e\u185f\u0005\u0006\u0000\u0000\u185f\u1862\u0003\u05bc\u02de\u0000"+
		"\u1860\u1861\u0004\u01c2G\u0000\u1861\u1863\u0003\u0388\u01c4\u0000\u1862"+
		"\u1860\u0001\u0000\u0000\u0000\u1862\u1863\u0001\u0000\u0000\u0000\u1863"+
		"\u186e\u0001\u0000\u0000\u0000\u1864\u1865\u0004\u01c2H\u0000\u1865\u186e"+
		"\u0005\u00d7\u0000\u0000\u1866\u1867\u0004\u01c2I\u0000\u1867\u186e\u0005"+
		"<\u0000\u0000\u1868\u1869\u0004\u01c2J\u0000\u1869\u186a\u0005<\u0000"+
		"\u0000\u186a\u186b\u0005\u00e9\u0000\u0000\u186b\u186c\u0005\u0006\u0000"+
		"\u0000\u186c\u186e\u0003\u05bc\u02de\u0000\u186d\u185d\u0001\u0000\u0000"+
		"\u0000\u186d\u1864\u0001\u0000\u0000\u0000\u186d\u1866\u0001\u0000\u0000"+
		"\u0000\u186d\u1868\u0001\u0000\u0000\u0000\u186e\u0385\u0001\u0000\u0000"+
		"\u0000\u186f\u1878\u0003\u012a\u0095\u0000\u1870\u1878\u0003\u00ecv\u0000"+
		"\u1871\u1878\u0003\u00f8|\u0000\u1872\u1878\u0003\u0128\u0094\u0000\u1873"+
		"\u1878\u0003\u01c4\u00e2\u0000\u1874\u1875\u0005\u00e8\u0000\u0000\u1875"+
		"\u1876\u0005\u007f\u0000\u0000\u1876\u1878\u0003\u058e\u02c7\u0000\u1877"+
		"\u186f\u0001\u0000\u0000\u0000\u1877\u1870\u0001\u0000\u0000\u0000\u1877"+
		"\u1871\u0001\u0000\u0000\u0000\u1877\u1872\u0001\u0000\u0000\u0000\u1877"+
		"\u1873\u0001\u0000\u0000\u0000\u1877\u1874\u0001\u0000\u0000\u0000\u1878"+
		"\u0387\u0001\u0000\u0000\u0000\u1879\u187a\u0005\u0117\u0000\u0000\u187a"+
		"\u187b\u0005\'\u0000\u0000\u187b\u187c\u0003\u05bc\u02de\u0000\u187c\u0389"+
		"\u0001\u0000\u0000\u0000\u187d\u187e\u0005\u00fe\u0000\u0000\u187e\u187f"+
		"\u0003\u05bc\u02de\u0000\u187f\u038b\u0001\u0000\u0000\u0000\u1880\u1881"+
		"\u0005\u0275\u0000\u0000\u1881\u1882\u0003\u053c\u029e\u0000\u1882\u038d"+
		"\u0001\u0000\u0000\u0000\u1883\u1884\u0005\u02d2\u0000\u0000\u1884\u038f"+
		"\u0001\u0000\u0000\u0000\u1885\u1886\u0006\u01c8\uffff\uffff\u0000\u1886"+
		"\u188c\u0003\u0392\u01c9\u0000\u1887\u1889\u0005\u011f\u0000\u0000\u1888"+
		"\u188a\u0003\u03f2\u01f9\u0000\u1889\u1888\u0001\u0000\u0000\u0000\u1889"+
		"\u188a\u0001\u0000\u0000\u0000\u188a\u188b\u0001\u0000\u0000\u0000\u188b"+
		"\u188d\u0007f\u0000\u0000\u188c\u1887\u0001\u0000\u0000\u0000\u188c\u188d"+
		"\u0001\u0000\u0000\u0000\u188d\u1891\u0001\u0000\u0000\u0000\u188e\u188f"+
		"\u0005\u0186\u0000\u0000\u188f\u1891\u0003\u0390\u01c8\u0004\u1890\u1885"+
		"\u0001\u0000\u0000\u0000\u1890\u188e\u0001\u0000\u0000\u0000\u1891\u189d"+
		"\u0001\u0000\u0000\u0000\u1892\u1893\n\u0003\u0000\u0000\u1893\u1894\u0007"+
		"g\u0000\u0000\u1894\u189c\u0003\u0390\u01c8\u0004\u1895\u1896\n\u0002"+
		"\u0000\u0000\u1896\u1897\u0005\u0296\u0000\u0000\u1897\u189c\u0003\u0390"+
		"\u01c8\u0003\u1898\u1899\n\u0001\u0000\u0000\u1899\u189a\u0007h\u0000"+
		"\u0000\u189a\u189c\u0003\u0390\u01c8\u0002\u189b\u1892\u0001\u0000\u0000"+
		"\u0000\u189b\u1895\u0001\u0000\u0000\u0000\u189b\u1898\u0001\u0000\u0000"+
		"\u0000\u189c\u189f\u0001\u0000\u0000\u0000\u189d\u189b\u0001\u0000\u0000"+
		"\u0000\u189d\u189e\u0001\u0000\u0000\u0000\u189e\u0391\u0001\u0000\u0000"+
		"\u0000\u189f\u189d\u0001\u0000\u0000\u0000\u18a0\u18a1\u0006\u01c9\uffff"+
		"\uffff\u0000\u18a1\u18a2\u0003\u0396\u01cb\u0000\u18a2\u18b4\u0001\u0000"+
		"\u0000\u0000\u18a3\u18a4\n\u0003\u0000\u0000\u18a4\u18a6\u0005\u011f\u0000"+
		"\u0000\u18a5\u18a7\u0003\u03f2\u01f9\u0000\u18a6\u18a5\u0001\u0000\u0000"+
		"\u0000\u18a6\u18a7\u0001\u0000\u0000\u0000\u18a7\u18a8\u0001\u0000\u0000"+
		"\u0000\u18a8\u18b3\u0005\u018b\u0000\u0000\u18a9\u18aa\n\u0002\u0000\u0000"+
		"\u18aa\u18ab\u0003\u0394\u01ca\u0000\u18ab\u18ac\u0003\u0396\u01cb\u0000"+
		"\u18ac\u18b3\u0001\u0000\u0000\u0000\u18ad\u18ae\n\u0001\u0000\u0000\u18ae"+
		"\u18af\u0003\u0394\u01ca\u0000\u18af\u18b0\u0007i\u0000\u0000\u18b0\u18b1"+
		"\u0003\u0138\u009c\u0000\u18b1\u18b3\u0001\u0000\u0000\u0000\u18b2\u18a3"+
		"\u0001\u0000\u0000\u0000\u18b2\u18a9\u0001\u0000\u0000\u0000\u18b2\u18ad"+
		"\u0001\u0000\u0000\u0000\u18b3\u18b6\u0001\u0000\u0000\u0000\u18b4\u18b2"+
		"\u0001\u0000\u0000\u0000\u18b4\u18b5\u0001\u0000\u0000\u0000\u18b5\u0393"+
		"\u0001\u0000\u0000\u0000\u18b6\u18b4\u0001\u0000\u0000\u0000\u18b7\u18b8"+
		"\u0007j\u0000\u0000\u18b8\u0395\u0001\u0000\u0000\u0000\u18b9\u18c7\u0003"+
		"\u039a\u01cd\u0000\u18ba\u18bc\u0003\u03f2\u01f9\u0000\u18bb\u18ba\u0001"+
		"\u0000\u0000\u0000\u18bb\u18bc\u0001\u0000\u0000\u0000\u18bc\u18bd\u0001"+
		"\u0000\u0000\u0000\u18bd\u18c8\u0003\u0398\u01cc\u0000\u18be\u18bf\u0004"+
		"\u01cbQ\u0000\u18bf\u18c1\u0005\u02e5\u0000\u0000\u18c0\u18c2\u0005\u02a4"+
		"\u0000\u0000\u18c1\u18c0\u0001\u0000\u0000\u0000\u18c1\u18c2\u0001\u0000"+
		"\u0000\u0000\u18c2\u18c3\u0001\u0000\u0000\u0000\u18c3\u18c8\u0003\u03fe"+
		"\u01ff\u0000\u18c4\u18c5\u0005\u0214\u0000\u0000\u18c5\u18c6\u0005\u0131"+
		"\u0000\u0000\u18c6\u18c8\u0003\u039a\u01cd\u0000\u18c7\u18bb\u0001\u0000"+
		"\u0000\u0000\u18c7\u18be\u0001\u0000\u0000\u0000\u18c7\u18c4\u0001\u0000"+
		"\u0000\u0000\u18c7\u18c8\u0001\u0000\u0000\u0000\u18c8\u0397\u0001\u0000"+
		"\u0000\u0000\u18c9\u18cf\u0005\u011a\u0000\u0000\u18ca\u18d0\u0003\u0138"+
		"\u009c\u0000\u18cb\u18cc\u0005 \u0000\u0000\u18cc\u18cd\u0003\u03ee\u01f7"+
		"\u0000\u18cd\u18ce\u0005!\u0000\u0000\u18ce\u18d0\u0001\u0000\u0000\u0000"+
		"\u18cf\u18ca\u0001\u0000\u0000\u0000\u18cf\u18cb\u0001\u0000\u0000\u0000"+
		"\u18d0\u18df\u0001\u0000\u0000\u0000\u18d1\u18d2\u0005K\u0000\u0000\u18d2"+
		"\u18d3\u0003\u039a\u01cd\u0000\u18d3\u18d4\u0005=\u0000\u0000\u18d4\u18d5"+
		"\u0003\u0396\u01cb\u0000\u18d5\u18df\u0001\u0000\u0000\u0000\u18d6\u18d7"+
		"\u0005\u0131\u0000\u0000\u18d7\u18da\u0003\u039c\u01ce\u0000\u18d8\u18d9"+
		"\u0005\u00cb\u0000\u0000\u18d9\u18db\u0003\u039c\u01ce\u0000\u18da\u18d8"+
		"\u0001\u0000\u0000\u0000\u18da\u18db\u0001\u0000\u0000\u0000\u18db\u18df"+
		"\u0001\u0000\u0000\u0000\u18dc\u18dd\u0005\u01cd\u0000\u0000\u18dd\u18df"+
		"\u0003\u039a\u01cd\u0000\u18de\u18c9\u0001\u0000\u0000\u0000\u18de\u18d1"+
		"\u0001\u0000\u0000\u0000\u18de\u18d6\u0001\u0000\u0000\u0000\u18de\u18dc"+
		"\u0001\u0000\u0000\u0000\u18df\u0399\u0001\u0000\u0000\u0000\u18e0\u18e1"+
		"\u0006\u01cd\uffff\uffff\u0000\u18e1\u18e2\u0003\u039c\u01ce\u0000\u18e2"+
		"\u18fd\u0001\u0000\u0000\u0000\u18e3\u18e4\n\u0007\u0000\u0000\u18e4\u18e5"+
		"\u0005\u0019\u0000\u0000\u18e5\u18fc\u0003\u039a\u01cd\b\u18e6\u18e7\n"+
		"\u0006\u0000\u0000\u18e7\u18e8\u0007k\u0000\u0000\u18e8\u18fc\u0003\u039a"+
		"\u01cd\u0007\u18e9\u18ea\n\u0005\u0000\u0000\u18ea\u18eb\u0007l\u0000"+
		"\u0000\u18eb\u18fc\u0003\u039a\u01cd\u0006\u18ec\u18ed\n\u0003\u0000\u0000"+
		"\u18ed\u18ee\u0007m\u0000\u0000\u18ee\u18fc\u0003\u039a\u01cd\u0004\u18ef"+
		"\u18f0\n\u0002\u0000\u0000\u18f0\u18f1\u0005\u0018\u0000\u0000\u18f1\u18fc"+
		"\u0003\u039a\u01cd\u0003\u18f2\u18f3\n\u0001\u0000\u0000\u18f3\u18f4\u0005"+
		"\u001b\u0000\u0000\u18f4\u18fc\u0003\u039a\u01cd\u0002\u18f5\u18f6\n\u0004"+
		"\u0000\u0000\u18f6\u18f7\u0007l\u0000\u0000\u18f7\u18f8\u0005\u0116\u0000"+
		"\u0000\u18f8\u18f9\u0003\u0390\u01c8\u0000\u18f9\u18fa\u0003\u03f6\u01fb"+
		"\u0000\u18fa\u18fc\u0001\u0000\u0000\u0000\u18fb\u18e3\u0001\u0000\u0000"+
		"\u0000\u18fb\u18e6\u0001\u0000\u0000\u0000\u18fb\u18e9\u0001\u0000\u0000"+
		"\u0000\u18fb\u18ec\u0001\u0000\u0000\u0000\u18fb\u18ef\u0001\u0000\u0000"+
		"\u0000\u18fb\u18f2\u0001\u0000\u0000\u0000\u18fb\u18f5\u0001\u0000\u0000"+
		"\u0000\u18fc\u18ff\u0001\u0000\u0000\u0000\u18fd\u18fb\u0001\u0000\u0000"+
		"\u0000\u18fd\u18fe\u0001\u0000\u0000\u0000\u18fe\u039b\u0001\u0000\u0000"+
		"\u0000\u18ff\u18fd\u0001\u0000\u0000\u0000\u1900\u1901\u0006\u01ce\uffff"+
		"\uffff\u0000\u1901\u1903\u0003\u0530\u0298\u0000\u1902\u1904\u0003\u03a0"+
		"\u01d0\u0000\u1903\u1902\u0001\u0000\u0000\u0000\u1903\u1904\u0001\u0000"+
		"\u0000\u0000\u1904\u197b\u0001\u0000\u0000\u0000\u1905\u197b\u0003\u03c2"+
		"\u01e1\u0000\u1906\u197b\u0003\u03d6\u01eb\u0000\u1907\u197b\u0003\u059a"+
		"\u02cd\u0000\u1908\u197b\u0005+\u0000\u0000\u1909\u197b\u0003\u03e0\u01f0"+
		"\u0000\u190a\u197b\u0003\u03de\u01ef\u0000\u190b\u197b\u0003\u03a2\u01d1"+
		"\u0000\u190c\u197b\u0003\u03a4\u01d2\u0000\u190d\u197b\u0003\u03a6\u01d3"+
		"\u0000\u190e\u190f\u0007n\u0000\u0000\u190f\u197b\u0003\u039c\u01ce\u000f"+
		"\u1910\u1911\u0003\u03f4\u01fa\u0000\u1911\u1912\u0003\u039c\u01ce\u000e"+
		"\u1912\u197b\u0001\u0000\u0000\u0000\u1913\u1915\u0005\u01f7\u0000\u0000"+
		"\u1914\u1913\u0001\u0000\u0000\u0000\u1914\u1915\u0001\u0000\u0000\u0000"+
		"\u1915\u1916\u0001\u0000\u0000\u0000\u1916\u1917\u0005 \u0000\u0000\u1917"+
		"\u1918\u0003\u03ee\u01f7\u0000\u1918\u1919\u0005!\u0000\u0000\u1919\u197b"+
		"\u0001\u0000\u0000\u0000\u191a\u191c\u0005\u00d1\u0000\u0000\u191b\u191a"+
		"\u0001\u0000\u0000\u0000\u191b\u191c\u0001\u0000\u0000\u0000\u191c\u191d"+
		"\u0001\u0000\u0000\u0000\u191d\u197b\u0003\u0138\u009c\u0000\u191e\u191f"+
		"\u0005\"\u0000\u0000\u191f\u1920\u0003\u0580\u02c0\u0000\u1920\u1921\u0003"+
		"\u0390\u01c8\u0000\u1921\u1922\u0005#\u0000\u0000\u1922\u197b\u0001\u0000"+
		"\u0000\u0000\u1923\u1924\u0005\u0159\u0000\u0000\u1924\u1925\u0003\u03bc"+
		"\u01de\u0000\u1925\u1926\u00056\u0000\u0000\u1926\u1927\u0005 \u0000\u0000"+
		"\u1927\u1929\u0003\u039a\u01cd\u0000\u1928\u192a\u0003\u03c0\u01e0\u0000"+
		"\u1929\u1928\u0001\u0000\u0000\u0000\u1929\u192a\u0001\u0000\u0000\u0000"+
		"\u192a\u192b\u0001\u0000\u0000\u0000\u192b\u192c\u0005!\u0000\u0000\u192c"+
		"\u197b\u0001\u0000\u0000\u0000\u192d\u192e\u0005M\u0000\u0000\u192e\u197b"+
		"\u0003\u039c\u01ce\t\u192f\u1930\u0005`\u0000\u0000\u1930\u1931\u0005"+
		" \u0000\u0000\u1931\u1934\u0003\u0390\u01c8\u0000\u1932\u1933\u0005C\u0000"+
		"\u0000\u1933\u1935\u0005\u0138\u0000\u0000\u1934\u1932\u0001\u0000\u0000"+
		"\u0000\u1934\u1935\u0001\u0000\u0000\u0000\u1935\u1936\u0001\u0000\u0000"+
		"\u0000\u1936\u1937\u0005?\u0000\u0000\u1937\u1939\u0003\u03ec\u01f6\u0000"+
		"\u1938\u193a\u0003\u039e\u01cf\u0000\u1939\u1938\u0001\u0000\u0000\u0000"+
		"\u1939\u193a\u0001\u0000\u0000\u0000\u193a\u193b\u0001\u0000\u0000\u0000"+
		"\u193b\u193c\u0005!\u0000\u0000\u193c\u197b\u0001\u0000\u0000\u0000\u193d"+
		"\u193e\u0005`\u0000\u0000\u193e\u193f\u0005 \u0000\u0000\u193f\u1940\u0003"+
		"\u0390\u01c8\u0000\u1940\u1941\u0005C\u0000\u0000\u1941\u1942\u0005\u0253"+
		"\u0000\u0000\u1942\u1944\u0005\u02f8\u0000\u0000\u1943\u1945\u0005\u0116"+
		"\u0000\u0000\u1944\u1943\u0001\u0000\u0000\u0000\u1944\u1945\u0001\u0000"+
		"\u0000\u0000\u1945\u1946\u0001\u0000\u0000\u0000\u1946\u1947\u0003\u05a0"+
		"\u02d0\u0000\u1947\u1948\u0005?\u0000\u0000\u1948\u1949\u0005\u009a\u0000"+
		"\u0000\u1949\u194a\u0003\u04a2\u0251\u0000\u194a\u194b\u0005!\u0000\u0000"+
		"\u194b\u197b\u0001\u0000\u0000\u0000\u194c\u194e\u0005_\u0000\u0000\u194d"+
		"\u194f\u0003\u0390\u01c8\u0000\u194e\u194d\u0001\u0000\u0000\u0000\u194e"+
		"\u194f\u0001\u0000\u0000\u0000\u194f\u1953\u0001\u0000\u0000\u0000\u1950"+
		"\u1951\u0003\u03e6\u01f3\u0000\u1951\u1952\u0003\u03e8\u01f4\u0000\u1952"+
		"\u1954\u0001\u0000\u0000\u0000\u1953\u1950\u0001\u0000\u0000\u0000\u1954"+
		"\u1955\u0001\u0000\u0000\u0000\u1955\u1953\u0001\u0000\u0000\u0000\u1955"+
		"\u1956\u0001\u0000\u0000\u0000\u1956\u1958\u0001\u0000\u0000\u0000\u1957"+
		"\u1959\u0003\u03ea\u01f5\u0000\u1958\u1957\u0001\u0000\u0000\u0000\u1958"+
		"\u1959\u0001\u0000\u0000\u0000\u1959\u195a\u0001\u0000\u0000\u0000\u195a"+
		"\u195b\u0005\u00c3\u0000\u0000\u195b\u197b\u0001\u0000\u0000\u0000\u195c"+
		"\u195d\u0005\u0088\u0000\u0000\u195d\u195e\u0005 \u0000\u0000\u195e\u195f"+
		"\u0003\u0390\u01c8\u0000\u195f\u1960\u0005\u001d\u0000\u0000\u1960\u1961"+
		"\u0003\u03ec\u01f6\u0000\u1961\u1962\u0005!\u0000\u0000\u1962\u197b\u0001"+
		"\u0000\u0000\u0000\u1963\u1964\u0005\u0088\u0000\u0000\u1964\u1965\u0005"+
		" \u0000\u0000\u1965\u1966\u0003\u0390\u01c8\u0000\u1966\u1967\u0005\u0276"+
		"\u0000\u0000\u1967\u1968\u0003\u04a6\u0253\u0000\u1968\u1969\u0005!\u0000"+
		"\u0000\u1969\u197b\u0001\u0000\u0000\u0000\u196a\u196b\u0005\u00a6\u0000"+
		"\u0000\u196b\u196c\u0005 \u0000\u0000\u196c\u196d\u0003\u0588\u02c4\u0000"+
		"\u196d\u196e\u0005!\u0000\u0000\u196e\u197b\u0001\u0000\u0000\u0000\u196f"+
		"\u1970\u0005\u027b\u0000\u0000\u1970\u1971\u0005 \u0000\u0000\u1971\u1972"+
		"\u0003\u0588\u02c4\u0000\u1972\u1973\u0005!\u0000\u0000\u1973\u197b\u0001"+
		"\u0000\u0000\u0000\u1974\u1975\u0005\u0116\u0000\u0000\u1975\u1976\u0003"+
		"\u0390\u01c8\u0000\u1976\u1977\u0003\u03f6\u01fb\u0000\u1977\u1978\u0005"+
		"\u000e\u0000\u0000\u1978\u1979\u0003\u0390\u01c8\u0000\u1979\u197b\u0001"+
		"\u0000\u0000\u0000\u197a\u1900\u0001\u0000\u0000\u0000\u197a\u1905\u0001"+
		"\u0000\u0000\u0000\u197a\u1906\u0001\u0000\u0000\u0000\u197a\u1907\u0001"+
		"\u0000\u0000\u0000\u197a\u1908\u0001\u0000\u0000\u0000\u197a\u1909\u0001"+
		"\u0000\u0000\u0000\u197a\u190a\u0001\u0000\u0000\u0000\u197a\u190b\u0001"+
		"\u0000\u0000\u0000\u197a\u190c\u0001\u0000\u0000\u0000\u197a\u190d\u0001"+
		"\u0000\u0000\u0000\u197a\u190e\u0001\u0000\u0000\u0000\u197a\u1910\u0001"+
		"\u0000\u0000\u0000\u197a\u1914\u0001\u0000\u0000\u0000\u197a\u191b\u0001"+
		"\u0000\u0000\u0000\u197a\u191e\u0001\u0000\u0000\u0000\u197a\u1923\u0001"+
		"\u0000\u0000\u0000\u197a\u192d\u0001\u0000\u0000\u0000\u197a\u192f\u0001"+
		"\u0000\u0000\u0000\u197a\u193d\u0001\u0000\u0000\u0000\u197a\u194c\u0001"+
		"\u0000\u0000\u0000\u197a\u195c\u0001\u0000\u0000\u0000\u197a\u1963\u0001"+
		"\u0000\u0000\u0000\u197a\u196a\u0001\u0000\u0000\u0000\u197a\u196f\u0001"+
		"\u0000\u0000\u0000\u197a\u1974\u0001\u0000\u0000\u0000\u197b\u1984\u0001"+
		"\u0000\u0000\u0000\u197c\u197d\n\u0010\u0000\u0000\u197d\u197e\u0005\u0002"+
		"\u0000\u0000\u197e\u1983\u0003\u039c\u01ce\u0011\u197f\u1980\n\u0018\u0000"+
		"\u0000\u1980\u1981\u0005p\u0000\u0000\u1981\u1983\u0003\u05bc\u02de\u0000"+
		"\u1982\u197c\u0001\u0000\u0000\u0000\u1982\u197f\u0001\u0000\u0000\u0000"+
		"\u1983\u1986\u0001\u0000\u0000\u0000\u1984\u1982\u0001\u0000\u0000\u0000"+
		"\u1984\u1985\u0001\u0000\u0000\u0000\u1985\u039d\u0001\u0000\u0000\u0000"+
		"\u1986\u1984\u0001\u0000\u0000\u0000\u1987\u1988\u0004\u01cf[\u0000\u1988"+
		"\u1989\u0005\u02e3\u0000\u0000\u1989\u039f\u0001\u0000\u0000\u0000\u198a"+
		"\u198b\u0005%\u0000\u0000\u198b\u198f\u0003\u05a0\u02d0\u0000\u198c\u198d"+
		"\u0005&\u0000\u0000\u198d\u198f\u0003\u05a0\u02d0\u0000\u198e\u198a\u0001"+
		"\u0000\u0000\u0000\u198e\u198c\u0001\u0000\u0000\u0000\u198f\u03a1\u0001"+
		"\u0000\u0000\u0000\u1990\u1991\u0005G\u0000\u0000\u1991\u1993\u0005 \u0000"+
		"\u0000\u1992\u1994\u0005\u00b4\u0000\u0000\u1993\u1992\u0001\u0000\u0000"+
		"\u0000\u1993\u1994\u0001\u0000\u0000\u0000\u1994\u1995\u0001\u0000\u0000"+
		"\u0000\u1995\u1996\u0003\u03ba\u01dd\u0000\u1996\u1998\u0005!\u0000\u0000"+
		"\u1997\u1999\u0003\u03ae\u01d7\u0000\u1998\u1997\u0001\u0000\u0000\u0000"+
		"\u1998\u1999\u0001\u0000\u0000\u0000\u1999\u19e6\u0001\u0000\u0000\u0000"+
		"\u199a\u199b\u0007o\u0000\u0000\u199b\u199c\u0005 \u0000\u0000\u199c\u199d"+
		"\u0003\u03ba\u01dd\u0000\u199d\u199f\u0005!\u0000\u0000\u199e\u19a0\u0003"+
		"\u03ae\u01d7\u0000\u199f\u199e\u0001\u0000\u0000\u0000\u199f\u19a0\u0001"+
		"\u0000\u0000\u0000\u19a0\u19e6\u0001\u0000\u0000\u0000\u19a1\u19e6\u0003"+
		"\u03b8\u01dc\u0000\u19a2\u19a3\u0005\u0318\u0000\u0000\u19a3\u19a5\u0005"+
		" \u0000\u0000\u19a4\u19a6\u0005\u00b4\u0000\u0000\u19a5\u19a4\u0001\u0000"+
		"\u0000\u0000\u19a5\u19a6\u0001\u0000\u0000\u0000\u19a6\u19a7\u0001\u0000"+
		"\u0000\u0000\u19a7\u19a8\u0003\u03ba\u01dd\u0000\u19a8\u19aa\u0005!\u0000"+
		"\u0000\u19a9\u19ab\u0003\u03ae\u01d7\u0000\u19aa\u19a9\u0001\u0000\u0000"+
		"\u0000\u19aa\u19ab\u0001\u0000\u0000\u0000\u19ab\u19e6\u0001\u0000\u0000"+
		"\u0000\u19ac\u19ad\u0005\u0089\u0000\u0000\u19ad\u19b5\u0005 \u0000\u0000"+
		"\u19ae\u19b0\u00059\u0000\u0000\u19af\u19ae\u0001\u0000\u0000\u0000\u19af"+
		"\u19b0\u0001\u0000\u0000\u0000\u19b0\u19b1\u0001\u0000\u0000\u0000\u19b1"+
		"\u19b6\u0005\u0010\u0000\u0000\u19b2\u19b6\u0003\u03ba\u01dd\u0000\u19b3"+
		"\u19b4\u0005\u00b4\u0000\u0000\u19b4\u19b6\u0003\u03ee\u01f7\u0000\u19b5"+
		"\u19af\u0001\u0000\u0000\u0000\u19b5\u19b2\u0001\u0000\u0000\u0000\u19b5"+
		"\u19b3\u0001\u0000\u0000\u0000\u19b6\u19b7\u0001\u0000\u0000\u0000\u19b7"+
		"\u19b9\u0005!\u0000\u0000\u19b8\u19ba\u0003\u03ae\u01d7\u0000\u19b9\u19b8"+
		"\u0001\u0000\u0000\u0000\u19b9\u19ba\u0001\u0000\u0000\u0000\u19ba\u19e6"+
		"\u0001\u0000\u0000\u0000\u19bb\u19bc\u0007p\u0000\u0000\u19bc\u19be\u0005"+
		" \u0000\u0000\u19bd\u19bf\u0005\u00b4\u0000\u0000\u19be\u19bd\u0001\u0000"+
		"\u0000\u0000\u19be\u19bf\u0001\u0000\u0000\u0000\u19bf\u19c0\u0001\u0000"+
		"\u0000\u0000\u19c0\u19c1\u0003\u03ba\u01dd\u0000\u19c1\u19c3\u0005!\u0000"+
		"\u0000\u19c2\u19c4\u0003\u03ae\u01d7\u0000\u19c3\u19c2\u0001\u0000\u0000"+
		"\u0000\u19c3\u19c4\u0001\u0000\u0000\u0000\u19c4\u19e6\u0001\u0000\u0000"+
		"\u0000\u19c5\u19c6\u0007q\u0000\u0000\u19c6\u19c7\u0005 \u0000\u0000\u19c7"+
		"\u19c8\u0003\u03ba\u01dd\u0000\u19c8\u19ca\u0005!\u0000\u0000\u19c9\u19cb"+
		"\u0003\u03ae\u01d7\u0000\u19ca\u19c9\u0001\u0000\u0000\u0000\u19ca\u19cb"+
		"\u0001\u0000\u0000\u0000\u19cb\u19e6\u0001\u0000\u0000\u0000\u19cc\u19cd"+
		"\u0005\u023e\u0000\u0000\u19cd\u19ce\u0005 \u0000\u0000\u19ce\u19cf\u0005"+
		"\u00b4\u0000\u0000\u19cf\u19d0\u0003\u03ba\u01dd\u0000\u19d0\u19d2\u0005"+
		"!\u0000\u0000\u19d1\u19d3\u0003\u03ae\u01d7\u0000\u19d2\u19d1\u0001\u0000"+
		"\u0000\u0000\u19d2\u19d3\u0001\u0000\u0000\u0000\u19d3\u19e6\u0001\u0000"+
		"\u0000\u0000\u19d4\u19d5\u0005\u00fa\u0000\u0000\u19d5\u19d7\u0005 \u0000"+
		"\u0000\u19d6\u19d8\u0005\u00b4\u0000\u0000\u19d7\u19d6\u0001\u0000\u0000"+
		"\u0000\u19d7\u19d8\u0001\u0000\u0000\u0000\u19d8\u19d9\u0001\u0000\u0000"+
		"\u0000\u19d9\u19db\u0003\u03ee\u01f7\u0000\u19da\u19dc\u0003\u016a\u00b5"+
		"\u0000\u19db\u19da\u0001\u0000\u0000\u0000\u19db\u19dc\u0001\u0000\u0000"+
		"\u0000\u19dc\u19df\u0001\u0000\u0000\u0000\u19dd\u19de\u0005\u0201\u0000"+
		"\u0000\u19de\u19e0\u0003\u05a2\u02d1\u0000\u19df\u19dd\u0001\u0000\u0000"+
		"\u0000\u19df\u19e0\u0001\u0000\u0000\u0000\u19e0\u19e1\u0001\u0000\u0000"+
		"\u0000\u19e1\u19e3\u0005!\u0000\u0000\u19e2\u19e4\u0003\u03ae\u01d7\u0000"+
		"\u19e3\u19e2\u0001\u0000\u0000\u0000\u19e3\u19e4\u0001\u0000\u0000\u0000"+
		"\u19e4\u19e6\u0001\u0000\u0000\u0000\u19e5\u1990\u0001\u0000\u0000\u0000"+
		"\u19e5\u199a\u0001\u0000\u0000\u0000\u19e5\u19a1\u0001\u0000\u0000\u0000"+
		"\u19e5\u19a2\u0001\u0000\u0000\u0000\u19e5\u19ac\u0001\u0000\u0000\u0000"+
		"\u19e5\u19bb\u0001\u0000\u0000\u0000\u19e5\u19c5\u0001\u0000\u0000\u0000"+
		"\u19e5\u19cc\u0001\u0000\u0000\u0000\u19e5\u19d4\u0001\u0000\u0000\u0000"+
		"\u19e6\u03a3\u0001\u0000\u0000\u0000\u19e7\u19e8\u0005\u02a8\u0000\u0000"+
		"\u19e8\u19e9\u0005 \u0000\u0000\u19e9\u19ea\u0003\u03ee\u01f7\u0000\u19ea"+
		"\u19eb\u0005!\u0000\u0000\u19eb\u03a5\u0001\u0000\u0000\u0000\u19ec\u19ed"+
		"\u0007r\u0000\u0000\u19ed\u19ee\u0003\u05c4\u02e2\u0000\u19ee\u19ef\u0003"+
		"\u03ae\u01d7\u0000\u19ef\u1a1e\u0001\u0000\u0000\u0000\u19f0\u19f7\u0005"+
		"\u02b8\u0000\u0000\u19f1\u19f2\u0005 \u0000\u0000\u19f2\u19f3\u0003\u03b2"+
		"\u01d9\u0000\u19f3\u19f4\u0005!\u0000\u0000\u19f4\u19f8\u0001\u0000\u0000"+
		"\u0000\u19f5\u19f6\u0004\u01d3\\\u0000\u19f6\u19f8\u0003\u03fe\u01ff\u0000"+
		"\u19f7\u19f1\u0001\u0000\u0000\u0000\u19f7\u19f5\u0001\u0000\u0000\u0000"+
		"\u19f8\u19f9\u0001\u0000\u0000\u0000\u19f9\u19fa\u0003\u03ae\u01d7\u0000"+
		"\u19fa\u1a1e\u0001\u0000\u0000\u0000\u19fb\u19fc\u0007s\u0000\u0000\u19fc"+
		"\u19fd\u0005 \u0000\u0000\u19fd\u19ff\u0003\u0390\u01c8\u0000\u19fe\u1a00"+
		"\u0003\u03b0\u01d8\u0000\u19ff\u19fe\u0001\u0000\u0000\u0000\u19ff\u1a00"+
		"\u0001\u0000\u0000\u0000\u1a00\u1a01\u0001\u0000\u0000\u0000\u1a01\u1a03"+
		"\u0005!\u0000\u0000\u1a02\u1a04\u0003\u03b6\u01db\u0000\u1a03\u1a02\u0001"+
		"\u0000\u0000\u0000\u1a03\u1a04\u0001\u0000\u0000\u0000\u1a04\u1a05\u0001"+
		"\u0000\u0000\u0000\u1a05\u1a06\u0003\u03ae\u01d7\u0000\u1a06\u1a1e\u0001"+
		"\u0000\u0000\u0000\u1a07\u1a08\u0007t\u0000\u0000\u1a08\u1a0a\u0003\u03fc"+
		"\u01fe\u0000\u1a09\u1a0b\u0003\u03b6\u01db\u0000\u1a0a\u1a09\u0001\u0000"+
		"\u0000\u0000\u1a0a\u1a0b\u0001\u0000\u0000\u0000\u1a0b\u1a0c\u0001\u0000"+
		"\u0000\u0000\u1a0c\u1a0d\u0003\u03ae\u01d7\u0000\u1a0d\u1a1e\u0001\u0000"+
		"\u0000\u0000\u1a0e\u1a0f\u0005\u02b7\u0000\u0000\u1a0f\u1a10\u0005 \u0000"+
		"\u0000\u1a10\u1a11\u0003\u0390\u01c8\u0000\u1a11\u1a12\u0005\u001d\u0000"+
		"\u0000\u1a12\u1a13\u0003\u039c\u01ce\u0000\u1a13\u1a16\u0005!\u0000\u0000"+
		"\u1a14\u1a15\u0005\u00eb\u0000\u0000\u1a15\u1a17\u0007u\u0000\u0000\u1a16"+
		"\u1a14\u0001\u0000\u0000\u0000\u1a16\u1a17\u0001\u0000\u0000\u0000\u1a17"+
		"\u1a19\u0001\u0000\u0000\u0000\u1a18\u1a1a\u0003\u03b6\u01db\u0000\u1a19"+
		"\u1a18\u0001\u0000\u0000\u0000\u1a19\u1a1a\u0001\u0000\u0000\u0000\u1a1a"+
		"\u1a1b\u0001\u0000\u0000\u0000\u1a1b\u1a1c\u0003\u03ae\u01d7\u0000\u1a1c"+
		"\u1a1e\u0001\u0000\u0000\u0000\u1a1d\u19ec\u0001\u0000\u0000\u0000\u1a1d"+
		"\u19f0\u0001\u0000\u0000\u0000\u1a1d\u19fb\u0001\u0000\u0000\u0000\u1a1d"+
		"\u1a07\u0001\u0000\u0000\u0000\u1a1d\u1a0e\u0001\u0000\u0000\u0000\u1a1e"+
		"\u03a7\u0001\u0000\u0000\u0000\u1a1f\u1a20\u0007v\u0000\u0000\u1a20\u03a9"+
		"\u0001\u0000\u0000\u0000\u1a21\u1a26\u0003\u0590\u02c8\u0000\u1a22\u1a23"+
		"\u0005\'\u0000\u0000\u1a23\u1a26\u0003\u05bc\u02de\u0000\u1a24\u1a26\u0005"+
		"+\u0000\u0000\u1a25\u1a21\u0001\u0000\u0000\u0000\u1a25\u1a22\u0001\u0000"+
		"\u0000\u0000\u1a25\u1a24\u0001\u0000\u0000\u0000\u1a26\u03ab\u0001\u0000"+
		"\u0000\u0000\u1a27\u1a28\u0004";
	private static final String _serializedATNSegment3 =
		"\u01d6]\u0000\u1a28\u1a29\u0005\u0330\u0000\u0000\u1a29\u1a2a\u0003\u03a8"+
		"\u01d4\u0000\u1a2a\u1a2b\u0005 \u0000\u0000\u1a2b\u1a2c\u0003\u03aa\u01d5"+
		"\u0000\u1a2c\u1a2d\u0005!\u0000\u0000\u1a2d\u03ad\u0001\u0000\u0000\u0000"+
		"\u1a2e\u1a31\u0005\u02bb\u0000\u0000\u1a2f\u1a32\u0003\u057c\u02be\u0000"+
		"\u1a30\u1a32\u0003\u0150\u00a8\u0000\u1a31\u1a2f\u0001\u0000\u0000\u0000"+
		"\u1a31\u1a30\u0001\u0000\u0000\u0000\u1a32\u03af\u0001\u0000\u0000\u0000"+
		"\u1a33\u1a38\u0005\u001d\u0000\u0000\u1a34\u1a39\u0003\u0590\u02c8\u0000"+
		"\u1a35\u1a39\u0005+\u0000\u0000\u1a36\u1a37\u0004\u01d8^\u0000\u1a37\u1a39"+
		"\u0003\u03b2\u01d9\u0000\u1a38\u1a34\u0001\u0000\u0000\u0000\u1a38\u1a35"+
		"\u0001\u0000\u0000\u0000\u1a38\u1a36\u0001\u0000\u0000\u0000\u1a39\u1a3c"+
		"\u0001\u0000\u0000\u0000\u1a3a\u1a3b\u0005\u001d\u0000\u0000\u1a3b\u1a3d"+
		"\u0003\u0390\u01c8\u0000\u1a3c\u1a3a\u0001\u0000\u0000\u0000\u1a3c\u1a3d"+
		"\u0001\u0000\u0000\u0000\u1a3d\u03b1\u0001\u0000\u0000\u0000\u1a3e\u1a41"+
		"\u0003\u05b2\u02d9\u0000\u1a3f\u1a41\u0003\u03b4\u01da\u0000\u1a40\u1a3e"+
		"\u0001\u0000\u0000\u0000\u1a40\u1a3f\u0001\u0000\u0000\u0000\u1a41\u03b3"+
		"\u0001\u0000\u0000\u0000\u1a42\u1a47\u0005+\u0000\u0000\u1a43\u1a47\u0003"+
		"\u0580\u02c0\u0000\u1a44\u1a45\u0005\'\u0000\u0000\u1a45\u1a47\u0003\u05bc"+
		"\u02de\u0000\u1a46\u1a42\u0001\u0000\u0000\u0000\u1a46\u1a43\u0001\u0000"+
		"\u0000\u0000\u1a46\u1a44\u0001\u0000\u0000\u0000\u1a47\u03b5\u0001\u0000"+
		"\u0000\u0000\u1a48\u1a49\u0007w\u0000\u0000\u1a49\u1a4a\u0005\u02b9\u0000"+
		"\u0000\u1a4a\u03b7\u0001\u0000\u0000\u0000\u1a4b\u1a4c\u0005\u02a3\u0000"+
		"\u0000\u1a4c\u1a4d\u0005 \u0000\u0000\u1a4d\u1a4e\u0003\u03ba\u01dd\u0000"+
		"\u1a4e\u1a50\u0005!\u0000\u0000\u1a4f\u1a51\u0003\u03ae\u01d7\u0000\u1a50"+
		"\u1a4f\u0001\u0000\u0000\u0000\u1a50\u1a51\u0001\u0000\u0000\u0000\u1a51"+
		"\u1a5c\u0001\u0000\u0000\u0000\u1a52\u1a53\u0005\u02a2\u0000\u0000\u1a53"+
		"\u1a54\u0005 \u0000\u0000\u1a54\u1a55\u0003\u03ba\u01dd\u0000\u1a55\u1a56"+
		"\u0005\u001d\u0000\u0000\u1a56\u1a57\u0003\u03ba\u01dd\u0000\u1a57\u1a59"+
		"\u0005!\u0000\u0000\u1a58\u1a5a\u0003\u03ae\u01d7\u0000\u1a59\u1a58\u0001"+
		"\u0000\u0000\u0000\u1a59\u1a5a\u0001\u0000\u0000\u0000\u1a5a\u1a5c\u0001"+
		"\u0000\u0000\u0000\u1a5b\u1a4b\u0001\u0000\u0000\u0000\u1a5b\u1a52\u0001"+
		"\u0000\u0000\u0000\u1a5c\u03b9\u0001\u0000\u0000\u0000\u1a5d\u1a5f\u0005"+
		"9\u0000\u0000\u1a5e\u1a5d\u0001\u0000\u0000\u0000\u1a5e\u1a5f\u0001\u0000"+
		"\u0000\u0000\u1a5f\u1a60\u0001\u0000\u0000\u0000\u1a60\u1a61\u0003\u0390"+
		"\u01c8\u0000\u1a61\u03bb\u0001\u0000\u0000\u0000\u1a62\u1a68\u0003\u03be"+
		"\u01df\u0000\u1a63\u1a64\u0005 \u0000\u0000\u1a64\u1a65\u0003\u03be\u01df"+
		"\u0000\u1a65\u1a66\u0005!\u0000\u0000\u1a66\u1a68\u0001\u0000\u0000\u0000"+
		"\u1a67\u1a62\u0001\u0000\u0000\u0000\u1a67\u1a63\u0001\u0000\u0000\u0000"+
		"\u1a68\u03bd\u0001\u0000\u0000\u0000\u1a69\u1a6e\u0003\u0588\u02c4\u0000"+
		"\u1a6a\u1a6b\u0005\u001d\u0000\u0000\u1a6b\u1a6d\u0003\u0588\u02c4\u0000"+
		"\u1a6c\u1a6a\u0001\u0000\u0000\u0000\u1a6d\u1a70\u0001\u0000\u0000\u0000"+
		"\u1a6e\u1a6c\u0001\u0000\u0000\u0000\u1a6e\u1a6f\u0001\u0000\u0000\u0000"+
		"\u1a6f\u03bf\u0001\u0000\u0000\u0000\u1a70\u1a6e\u0001\u0000\u0000\u0000"+
		"\u1a71\u1a72\u0005\u011a\u0000\u0000\u1a72\u1a73\u0005U\u0000\u0000\u1a73"+
		"\u1a81\u0005\u0171\u0000\u0000\u1a74\u1a75\u0005\u011a\u0000\u0000\u1a75"+
		"\u1a76\u0005\u017e\u0000\u0000\u1a76\u1a77\u0005\u0129\u0000\u0000\u1a77"+
		"\u1a7b\u0005\u0171\u0000\u0000\u1a78\u1a79\u0005\u028d\u0000\u0000\u1a79"+
		"\u1a7a\u0005\u01c0\u0000\u0000\u1a7a\u1a7c\u0005\u00d3\u0000\u0000\u1a7b"+
		"\u1a78\u0001\u0000\u0000\u0000\u1a7b\u1a7c\u0001\u0000\u0000\u0000\u1a7c"+
		"\u1a81\u0001\u0000\u0000\u0000\u1a7d\u1a7e\u0005\u028d\u0000\u0000\u1a7e"+
		"\u1a7f\u0005\u01c0\u0000\u0000\u1a7f\u1a81\u0005\u00d3\u0000\u0000\u1a80"+
		"\u1a71\u0001\u0000\u0000\u0000\u1a80\u1a74\u0001\u0000\u0000\u0000\u1a80"+
		"\u1a7d\u0001\u0000\u0000\u0000\u1a81\u03c1\u0001\u0000\u0000\u0000\u1a82"+
		"\u1a83\u0005g\u0000\u0000\u1a83\u1a84\u0005 \u0000\u0000\u1a84\u1a87\u0003"+
		"\u03ee\u01f7\u0000\u1a85\u1a86\u0005\u0276\u0000\u0000\u1a86\u1a88\u0003"+
		"\u04a6\u0253\u0000\u1a87\u1a85\u0001\u0000\u0000\u0000\u1a87\u1a88\u0001"+
		"\u0000\u0000\u0000\u1a88\u1a89\u0001\u0000\u0000\u0000\u1a89\u1a8a\u0005"+
		"!\u0000\u0000\u1a8a\u1b9e\u0001\u0000\u0000\u0000\u1a8b\u1a8d\u0005\u0092"+
		"\u0000\u0000\u1a8c\u1a8e\u0003\u05c4\u02e2\u0000\u1a8d\u1a8c\u0001\u0000"+
		"\u0000\u0000\u1a8d\u1a8e\u0001\u0000\u0000\u0000\u1a8e\u1b9e\u0001\u0000"+
		"\u0000\u0000\u1a8f\u1a90\u0005\u009d\u0000\u0000\u1a90\u1b9e\u0003\u03fc"+
		"\u01fe\u0000\u1a91\u1a92\u0005\u00a2\u0000\u0000\u1a92\u1b9e\u0003\u03fc"+
		"\u01fe\u0000\u1a93\u1a94\u0005\u0105\u0000\u0000\u1a94\u1b9e\u0003\u03fc"+
		"\u01fe\u0000\u1a95\u1a96\u0005\u0112\u0000\u0000\u1a96\u1a97\u0005 \u0000"+
		"\u0000\u1a97\u1a98\u0003\u0390\u01c8\u0000\u1a98\u1a99\u0005\u001d\u0000"+
		"\u0000\u1a99\u1a9a\u0003\u0390\u01c8\u0000\u1a9a\u1a9b\u0005\u001d\u0000"+
		"\u0000\u1a9b\u1a9c\u0003\u0390\u01c8\u0000\u1a9c\u1a9d\u0005\u001d\u0000"+
		"\u0000\u1a9d\u1a9e\u0003\u0390\u01c8\u0000\u1a9e\u1a9f\u0005!\u0000\u0000"+
		"\u1a9f\u1b9e\u0001\u0000\u0000\u0000\u1aa0\u1aa1\u0005\u0116\u0000\u0000"+
		"\u1aa1\u1aa2\u0005 \u0000\u0000\u1aa2\u1aa5\u0003\u0390\u01c8\u0000\u1aa3"+
		"\u1aa4\u0005\u001d\u0000\u0000\u1aa4\u1aa6\u0003\u0390\u01c8\u0000\u1aa5"+
		"\u1aa3\u0001\u0000\u0000\u0000\u1aa6\u1aa7\u0001\u0000\u0000\u0000\u1aa7"+
		"\u1aa5\u0001\u0000\u0000\u0000\u1aa7\u1aa8\u0001\u0000\u0000\u0000\u1aa8"+
		"\u1aa9\u0001\u0000\u0000\u0000\u1aa9\u1aaa\u0005!\u0000\u0000\u1aaa\u1b9e"+
		"\u0001\u0000\u0000\u0000\u1aab\u1aac\u0005\u02f2\u0000\u0000\u1aac\u1aad"+
		"\u0005 \u0000\u0000\u1aad\u1aae\u0003\u039c\u01ce\u0000\u1aae\u1aaf\u0005"+
		"\u001d\u0000\u0000\u1aaf\u1ab1\u0003\u05a6\u02d3\u0000\u1ab0\u1ab2\u0003"+
		"\u03c4\u01e2\u0000\u1ab1\u1ab0\u0001\u0000\u0000\u0000\u1ab1\u1ab2\u0001"+
		"\u0000\u0000\u0000\u1ab2\u1ab3\u0001\u0000\u0000\u0000\u1ab3\u1ab4\u0003"+
		"\u01a6\u00d3\u0000\u1ab4\u1ab5\u0005!\u0000\u0000\u1ab5\u1b9e\u0001\u0000"+
		"\u0000\u0000\u1ab6\u1ab7\u0005\u012e\u0000\u0000\u1ab7\u1ab8\u0005 \u0000"+
		"\u0000\u1ab8\u1ab9\u0003\u0390\u01c8\u0000\u1ab9\u1aba\u0005\u001d\u0000"+
		"\u0000\u1aba\u1abb\u0003\u0390\u01c8\u0000\u1abb\u1abc\u0005!\u0000\u0000"+
		"\u1abc\u1b9e\u0001\u0000\u0000\u0000\u1abd\u1abe\u0005\u016e\u0000\u0000"+
		"\u1abe\u1b9e\u0003\u03fc\u01fe\u0000\u1abf\u1ac0\u0005\u0175\u0000\u0000"+
		"\u1ac0\u1b9e\u0003\u03fc\u01fe\u0000\u1ac1\u1ac2\u0005\u01ef\u0000\u0000"+
		"\u1ac2\u1ac3\u0005 \u0000\u0000\u1ac3\u1ac4\u0003\u0390\u01c8\u0000\u1ac4"+
		"\u1ac5\u0005\u001d\u0000\u0000\u1ac5\u1ac6\u0003\u0390\u01c8\u0000\u1ac6"+
		"\u1ac7\u0005!\u0000\u0000\u1ac7\u1b9e\u0001\u0000\u0000\u0000\u1ac8\u1ac9"+
		"\u0005\u01fd\u0000\u0000\u1ac9\u1b9e\u0003\u03fc\u01fe\u0000\u1aca\u1acb"+
		"\u0005\u0253\u0000\u0000\u1acb\u1b9e\u0003\u03fc\u01fe\u0000\u1acc\u1acd"+
		"\u0005\u0250\u0000\u0000\u1acd\u1ace\u0005 \u0000\u0000\u1ace\u1ad1\u0003"+
		"\u0390\u01c8\u0000\u1acf\u1ad0\u0005\u001d\u0000\u0000\u1ad0\u1ad2\u0003"+
		"\u0390\u01c8\u0000\u1ad1\u1acf\u0001\u0000\u0000\u0000\u1ad1\u1ad2\u0001"+
		"\u0000\u0000\u0000\u1ad2\u1ad3\u0001\u0000\u0000\u0000\u1ad3\u1ad4\u0005"+
		"!\u0000\u0000\u1ad4\u1b9e\u0001\u0000\u0000\u0000\u1ad5\u1b9e\u0003\u03d2"+
		"\u01e9\u0000\u1ad6\u1b9e\u0003\u0276\u013b\u0000\u1ad7\u1ad8\u0005\u027b"+
		"\u0000\u0000\u1ad8\u1b9e\u0003\u03fc\u01fe\u0000\u1ad9\u1ada\u0005\u0298"+
		"\u0000\u0000\u1ada\u1b9e\u0003\u03fc\u01fe\u0000\u1adb\u1adc\u0007x\u0000"+
		"\u0000\u1adc\u1add\u0005 \u0000\u0000\u1add\u1ade\u0003\u0390\u01c8\u0000"+
		"\u1ade\u1ae4\u0005\u001d\u0000\u0000\u1adf\u1ae5\u0003\u0390\u01c8\u0000"+
		"\u1ae0\u1ae1\u0005\u0116\u0000\u0000\u1ae1\u1ae2\u0003\u0390\u01c8\u0000"+
		"\u1ae2\u1ae3\u0003\u03f6\u01fb\u0000\u1ae3\u1ae5\u0001\u0000\u0000\u0000"+
		"\u1ae4\u1adf\u0001\u0000\u0000\u0000\u1ae4\u1ae0\u0001\u0000\u0000\u0000"+
		"\u1ae5\u1ae6\u0001\u0000\u0000\u0000\u1ae6\u1ae7\u0005!\u0000\u0000\u1ae7"+
		"\u1b9e\u0001\u0000\u0000\u0000\u1ae8\u1aea\u0005\u008e\u0000\u0000\u1ae9"+
		"\u1aeb\u0003\u05c4\u02e2\u0000\u1aea\u1ae9\u0001\u0000\u0000\u0000\u1aea"+
		"\u1aeb\u0001\u0000\u0000\u0000\u1aeb\u1b9e\u0001\u0000\u0000\u0000\u1aec"+
		"\u1aee\u0005\u0095\u0000\u0000\u1aed\u1aef\u0003\u03c8\u01e4\u0000\u1aee"+
		"\u1aed\u0001\u0000\u0000\u0000\u1aee\u1aef\u0001\u0000\u0000\u0000\u1aef"+
		"\u1b9e\u0001\u0000\u0000\u0000\u1af0\u1af1\u0007y\u0000\u0000\u1af1\u1af2"+
		"\u0005 \u0000\u0000\u1af2\u1af3\u0003\u0390\u01c8\u0000\u1af3\u1af4\u0005"+
		"\u001d\u0000\u0000\u1af4\u1af5\u0005\u0116\u0000\u0000\u1af5\u1af6\u0003"+
		"\u0390\u01c8\u0000\u1af6\u1af7\u0003\u03f6\u01fb\u0000\u1af7\u1af8\u0005"+
		"!\u0000\u0000\u1af8\u1b9e\u0001\u0000\u0000\u0000\u1af9\u1afa\u0005\u00d9"+
		"\u0000\u0000\u1afa\u1afb\u0005 \u0000\u0000\u1afb\u1afc\u0003\u03f6\u01fb"+
		"\u0000\u1afc\u1afd\u0005\u00eb\u0000\u0000\u1afd\u1afe\u0003\u0390\u01c8"+
		"\u0000\u1afe\u1aff\u0005!\u0000\u0000\u1aff\u1b9e\u0001\u0000\u0000\u0000"+
		"\u1b00\u1b01\u0005\u00f5\u0000\u0000\u1b01\u1b02\u0005 \u0000\u0000\u1b02"+
		"\u1b03\u0003\u03d0\u01e8\u0000\u1b03\u1b04\u0005\u001d\u0000\u0000\u1b04"+
		"\u1b05\u0003\u0390\u01c8\u0000\u1b05\u1b06\u0005!\u0000\u0000\u1b06\u1b9e"+
		"\u0001\u0000\u0000\u0000\u1b07\u1b08\u0004\u01e1_\u0000\u1b08\u1b09\u0005"+
		"\u0328\u0000\u0000\u1b09\u1b0a\u0005 \u0000\u0000\u1b0a\u1b0d\u0003\u0390"+
		"\u01c8\u0000\u1b0b\u1b0c\u0005\u001d\u0000\u0000\u1b0c\u1b0e\u0003\u0390"+
		"\u01c8\u0000\u1b0d\u1b0b\u0001\u0000\u0000\u0000\u1b0d\u1b0e\u0001\u0000"+
		"\u0000\u0000\u1b0e\u1b0f\u0001\u0000\u0000\u0000\u1b0f\u1b10\u0005!\u0000"+
		"\u0000\u1b10\u1b9e\u0001\u0000\u0000\u0000\u1b11\u1b13\u0005\u0187\u0000"+
		"\u0000\u1b12\u1b14\u0003\u03c8\u01e4\u0000\u1b13\u1b12\u0001\u0000\u0000"+
		"\u0000\u1b13\u1b14\u0001\u0000\u0000\u0000\u1b14\u1b9e\u0001\u0000\u0000"+
		"\u0000\u1b15\u1b16\u0005\u01b0\u0000\u0000\u1b16\u1b17\u0005 \u0000\u0000"+
		"\u1b17\u1b18\u0003\u039a\u01cd\u0000\u1b18\u1b19\u0005\u011a\u0000\u0000"+
		"\u1b19\u1b1a\u0003\u0390\u01c8\u0000\u1b1a\u1b1b\u0005!\u0000\u0000\u1b1b"+
		"\u1b9e\u0001\u0000\u0000\u0000\u1b1c\u1b9e\u0003\u03d4\u01ea\u0000\u1b1d"+
		"\u1b1f\u0005\u0243\u0000\u0000\u1b1e\u1b20\u0003\u03c8\u01e4\u0000\u1b1f"+
		"\u1b1e\u0001\u0000\u0000\u0000\u1b1f\u1b20\u0001\u0000\u0000\u0000\u1b20"+
		"\u1b9e\u0001\u0000\u0000\u0000\u1b21\u1b22\u0007z\u0000\u0000\u1b22\u1b23"+
		"\u0005 \u0000\u0000\u1b23\u1b24\u0003\u03f8\u01fc\u0000\u1b24\u1b25\u0005"+
		"\u001d\u0000\u0000\u1b25\u1b26\u0003\u0390\u01c8\u0000\u1b26\u1b27\u0005"+
		"\u001d\u0000\u0000\u1b27\u1b28\u0003\u0390\u01c8\u0000\u1b28\u1b29\u0005"+
		"!\u0000\u0000\u1b29\u1b9e\u0001\u0000\u0000\u0000\u1b2a\u1b2c\u0005\u0277"+
		"\u0000\u0000\u1b2b\u1b2d\u0003\u05c4\u02e2\u0000\u1b2c\u1b2b\u0001\u0000"+
		"\u0000\u0000\u1b2c\u1b2d\u0001\u0000\u0000\u0000\u1b2d\u1b9e\u0001\u0000"+
		"\u0000\u0000\u1b2e\u1b30\u0005\u0279\u0000\u0000\u1b2f\u1b31\u0003\u03c8"+
		"\u01e4\u0000\u1b30\u1b2f\u0001\u0000\u0000\u0000\u1b30\u1b31\u0001\u0000"+
		"\u0000\u0000\u1b31\u1b9e\u0001\u0000\u0000\u0000\u1b32\u1b34\u0005\u0278"+
		"\u0000\u0000\u1b33\u1b35\u0003\u03c8\u01e4\u0000\u1b34\u1b33\u0001\u0000"+
		"\u0000\u0000\u1b34\u1b35\u0001\u0000\u0000\u0000\u1b35\u1b9e\u0001\u0000"+
		"\u0000\u0000\u1b36\u1b37\u0005A\u0000\u0000\u1b37\u1b9e\u0003\u03fc\u01fe"+
		"\u0000\u1b38\u1b39\u0005f\u0000\u0000\u1b39\u1b9e\u0003\u03fc\u01fe\u0000"+
		"\u1b3a\u1b3b\u0005n\u0000\u0000\u1b3b\u1b9e\u0003\u03fa\u01fd\u0000\u1b3c"+
		"\u1b3d\u0005q\u0000\u0000\u1b3d\u1b9e\u0003\u03fc\u01fe\u0000\u1b3e\u1b3f"+
		"\u0005\u0096\u0000\u0000\u1b3f\u1b9e\u0003\u05c4\u02e2\u0000\u1b40\u1b41"+
		"\u0005\u0107\u0000\u0000\u1b41\u1b42\u0005 \u0000\u0000\u1b42\u1b43\u0003"+
		"\u0390\u01c8\u0000\u1b43\u1b44\u0005\u001d\u0000\u0000\u1b44\u1b45\u0003"+
		"\u0390\u01c8\u0000\u1b45\u1b46\u0005\u001d\u0000\u0000\u1b46\u1b47\u0003"+
		"\u0390\u01c8\u0000\u1b47\u1b48\u0005!\u0000\u0000\u1b48\u1b9e\u0001\u0000"+
		"\u0000\u0000\u1b49\u1b4a\u0005\u00e9\u0000\u0000\u1b4a\u1b4b\u0005 \u0000"+
		"\u0000\u1b4b\u1b4c\u0003\u0390\u01c8\u0000\u1b4c\u1b4d\u0005\u001d\u0000"+
		"\u0000\u1b4d\u1b50\u0003\u0390\u01c8\u0000\u1b4e\u1b4f\u0005\u001d\u0000"+
		"\u0000\u1b4f\u1b51\u0003\u0390\u01c8\u0000\u1b50\u1b4e\u0001\u0000\u0000"+
		"\u0000\u1b50\u1b51\u0001\u0000\u0000\u0000\u1b51\u1b52\u0001\u0000\u0000"+
		"\u0000\u1b52\u1b53\u0005!\u0000\u0000\u1b53\u1b9e\u0001\u0000\u0000\u0000"+
		"\u1b54\u1b55\u0005\u0169\u0000\u0000\u1b55\u1b9e\u0003\u03fc\u01fe\u0000"+
		"\u1b56\u1b57\u0005\u0174\u0000\u0000\u1b57\u1b58\u0005 \u0000\u0000\u1b58"+
		"\u1b59\u0003\u0390\u01c8\u0000\u1b59\u1b5a\u0005\u001d\u0000\u0000\u1b5a"+
		"\u1b5b\u0003\u0390\u01c8\u0000\u1b5b\u1b5c\u0005!\u0000\u0000\u1b5c\u1b9e"+
		"\u0001\u0000\u0000\u0000\u1b5d\u1b5e\u0004\u01e1`\u0000\u1b5e\u1b5f\u0005"+
		"\u01a8\u0000\u0000\u1b5f\u1b9e\u0003\u03fc\u01fe\u0000\u1b60\u1b61\u0005"+
		"\u01bf\u0000\u0000\u1b61\u1b9e\u0003\u03fc\u01fe\u0000\u1b62\u1b63\u0005"+
		"\u01da\u0000\u0000\u1b63\u1b64\u0005 \u0000\u0000\u1b64\u1b65\u0003\u0390"+
		"\u01c8\u0000\u1b65\u1b66\u0005\u001d\u0000\u0000\u1b66\u1b67\u0003\u0390"+
		"\u01c8\u0000\u1b67\u1b68\u0005!\u0000\u0000\u1b68\u1b9e\u0001\u0000\u0000"+
		"\u0000\u1b69\u1b6a\u0005\u01db\u0000\u0000\u1b6a\u1b6b\u0005 \u0000\u0000"+
		"\u1b6b\u1b6c\u0003\u0390\u01c8\u0000\u1b6c\u1b6d\u0005\u001d\u0000\u0000"+
		"\u1b6d\u1b6e\u0003\u0390\u01c8\u0000\u1b6e\u1b6f\u0005\u001d\u0000\u0000"+
		"\u1b6f\u1b70\u0003\u0390\u01c8\u0000\u1b70\u1b71\u0005!\u0000\u0000\u1b71"+
		"\u1b9e\u0001\u0000\u0000\u0000\u1b72\u1b73\u0005\u01ed\u0000\u0000\u1b73"+
		"\u1b9e\u0003\u03fc\u01fe\u0000\u1b74\u1b75\u0005\u01f5\u0000\u0000\u1b75"+
		"\u1b9e\u0003\u05c4\u02e2\u0000\u1b76\u1b77\u0005\u025e\u0000\u0000\u1b77"+
		"\u1b78\u0005 \u0000\u0000\u1b78\u1b79\u0003\u0390\u01c8\u0000\u1b79\u1b7a"+
		"\u0005\u001d\u0000\u0000\u1b7a\u1b7b\u0003\u0390\u01c8\u0000\u1b7b\u1b7c"+
		"\u0005!\u0000\u0000\u1b7c\u1b9e\u0001\u0000\u0000\u0000\u1b7d\u1b7e\u0005"+
		"\u0288\u0000\u0000\u1b7e\u1b7f\u0005 \u0000\u0000\u1b7f\u1b82\u0003\u0390"+
		"\u01c8\u0000\u1b80\u1b81\u0005\u001d\u0000\u0000\u1b81\u1b83\u0003\u0390"+
		"\u01c8\u0000\u1b82\u1b80\u0001\u0000\u0000\u0000\u1b82\u1b83\u0001\u0000"+
		"\u0000\u0000\u1b83\u1b84\u0001\u0000\u0000\u0000\u1b84\u1b85\u0005!\u0000"+
		"\u0000\u1b85\u1b9e\u0001\u0000\u0000\u0000\u1b86\u1b87\u0005\u0289\u0000"+
		"\u0000\u1b87\u1b88\u0005 \u0000\u0000\u1b88\u1b98\u0003\u0390\u01c8\u0000"+
		"\u1b89\u1b8a\u0005?\u0000\u0000\u1b8a\u1b8b\u0005g\u0000\u0000\u1b8b\u1b8d"+
		"\u0003\u04a0\u0250\u0000\u1b8c\u1b89\u0001\u0000\u0000\u0000\u1b8c\u1b8d"+
		"\u0001\u0000\u0000\u0000\u1b8d\u1b99\u0001\u0000\u0000\u0000\u1b8e\u1b8f"+
		"\u0005?\u0000\u0000\u1b8f\u1b90\u0005M\u0000\u0000\u1b90\u1b99\u0003\u04a0"+
		"\u0250\u0000\u1b91\u1b92\u0005\u001d\u0000\u0000\u1b92\u1b93\u0003\u058c"+
		"\u02c6\u0000\u1b93\u1b94\u0005\u001d\u0000\u0000\u1b94\u1b95\u0003\u058c"+
		"\u02c6\u0000\u1b95\u1b96\u0005\u001d\u0000\u0000\u1b96\u1b97\u0003\u058c"+
		"\u02c6\u0000\u1b97\u1b99\u0001\u0000\u0000\u0000\u1b98\u1b8c\u0001\u0000"+
		"\u0000\u0000\u1b98\u1b8e\u0001\u0000\u0000\u0000\u1b98\u1b91\u0001\u0000"+
		"\u0000\u0000\u1b99\u1b9a\u0001\u0000\u0000\u0000\u1b9a\u1b9b\u0005!\u0000"+
		"\u0000\u1b9b\u1b9e\u0001\u0000\u0000\u0000\u1b9c\u1b9e\u0003\u03c6\u01e3"+
		"\u0000\u1b9d\u1a82\u0001\u0000\u0000\u0000\u1b9d\u1a8b\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1a8f\u0001\u0000\u0000\u0000\u1b9d\u1a91\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1a93\u0001\u0000\u0000\u0000\u1b9d\u1a95\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1aa0\u0001\u0000\u0000\u0000\u1b9d\u1aab\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1ab6\u0001\u0000\u0000\u0000\u1b9d\u1abd\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1abf\u0001\u0000\u0000\u0000\u1b9d\u1ac1\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1ac8\u0001\u0000\u0000\u0000\u1b9d\u1aca\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1acc\u0001\u0000\u0000\u0000\u1b9d\u1ad5\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1ad6\u0001\u0000\u0000\u0000\u1b9d\u1ad7\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1ad9\u0001\u0000\u0000\u0000\u1b9d\u1adb\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1ae8\u0001\u0000\u0000\u0000\u1b9d\u1aec\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1af0\u0001\u0000\u0000\u0000\u1b9d\u1af9\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b00\u0001\u0000\u0000\u0000\u1b9d\u1b07\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b11\u0001\u0000\u0000\u0000\u1b9d\u1b15\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b1c\u0001\u0000\u0000\u0000\u1b9d\u1b1d\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b21\u0001\u0000\u0000\u0000\u1b9d\u1b2a\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b2e\u0001\u0000\u0000\u0000\u1b9d\u1b32\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b36\u0001\u0000\u0000\u0000\u1b9d\u1b38\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b3a\u0001\u0000\u0000\u0000\u1b9d\u1b3c\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b3e\u0001\u0000\u0000\u0000\u1b9d\u1b40\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b49\u0001\u0000\u0000\u0000\u1b9d\u1b54\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b56\u0001\u0000\u0000\u0000\u1b9d\u1b5d\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b60\u0001\u0000\u0000\u0000\u1b9d\u1b62\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b69\u0001\u0000\u0000\u0000\u1b9d\u1b72\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b74\u0001\u0000\u0000\u0000\u1b9d\u1b76\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b7d\u0001\u0000\u0000\u0000\u1b9d\u1b86\u0001\u0000\u0000"+
		"\u0000\u1b9d\u1b9c\u0001\u0000\u0000\u0000\u1b9e\u03c3\u0001\u0000\u0000"+
		"\u0000\u1b9f\u1ba0\u0005\u02f1\u0000\u0000\u1ba0\u1ba1\u0003\u03ec\u01f6"+
		"\u0000\u1ba1\u03c5\u0001\u0000\u0000\u0000\u1ba2\u1ba3\u0005\u00f3\u0000"+
		"\u0000\u1ba3\u1ba5\u0005 \u0000\u0000\u1ba4\u1ba6\u0003\u03ee\u01f7\u0000"+
		"\u1ba5\u1ba4\u0001\u0000\u0000\u0000\u1ba5\u1ba6\u0001\u0000\u0000\u0000"+
		"\u1ba6\u1ba7\u0001\u0000\u0000\u0000\u1ba7\u1bba\u0005!\u0000\u0000\u1ba8"+
		"\u1ba9\u0005\u0135\u0000\u0000\u1ba9\u1bba\u0003\u03fa\u01fd\u0000\u1baa"+
		"\u1bab\u0005\u0176\u0000\u0000\u1bab\u1bba\u0003\u03fa\u01fd\u0000\u1bac"+
		"\u1bad\u0005\u0177\u0000\u0000\u1bad\u1bba\u0003\u03fa\u01fd\u0000\u1bae"+
		"\u1baf\u0005\u0178\u0000\u0000\u1baf\u1bba\u0003\u03fa\u01fd\u0000\u1bb0"+
		"\u1bb1\u0005\u01ad\u0000\u0000\u1bb1\u1bb2\u0005 \u0000\u0000\u1bb2\u1bb3"+
		"\u0003\u0390\u01c8\u0000\u1bb3\u1bb4\u0005\u001d\u0000\u0000\u1bb4\u1bb5"+
		"\u0003\u0390\u01c8\u0000\u1bb5\u1bb6\u0005!\u0000\u0000\u1bb6\u1bba\u0001"+
		"\u0000\u0000\u0000\u1bb7\u1bb8\u0005\u01ae\u0000\u0000\u1bb8\u1bba\u0003"+
		"\u03fa\u01fd\u0000\u1bb9\u1ba2\u0001\u0000\u0000\u0000\u1bb9\u1ba8\u0001"+
		"\u0000\u0000\u0000\u1bb9\u1baa\u0001\u0000\u0000\u0000\u1bb9\u1bac\u0001"+
		"\u0000\u0000\u0000\u1bb9\u1bae\u0001\u0000\u0000\u0000\u1bb9\u1bb0\u0001"+
		"\u0000\u0000\u0000\u1bb9\u1bb7\u0001\u0000\u0000\u0000\u1bba\u03c7\u0001"+
		"\u0000\u0000\u0000\u1bbb\u1bbd\u0005 \u0000\u0000\u1bbc\u1bbe\u0003\u03ca"+
		"\u01e5\u0000\u1bbd\u1bbc\u0001\u0000\u0000\u0000\u1bbd\u1bbe\u0001\u0000"+
		"\u0000\u0000\u1bbe\u1bbf\u0001\u0000\u0000\u0000\u1bbf\u1bc0\u0005!\u0000"+
		"\u0000\u1bc0\u03c9\u0001\u0000\u0000\u0000\u1bc1\u1bc2\u0005\u0003\u0000"+
		"\u0000\u1bc2\u03cb\u0001\u0000\u0000\u0000\u1bc3\u1bd0\u0005\u0130\u0000"+
		"\u0000\u1bc4\u1bc5\u0003\u058e\u02c7\u0000\u1bc5\u1bc6\u0005\u000f\u0000"+
		"\u0000\u1bc6\u1bc7\u0003\u058e\u02c7\u0000\u1bc7\u1bd1\u0001\u0000\u0000"+
		"\u0000\u1bc8\u1bcd\u0003\u03ce\u01e7\u0000\u1bc9\u1bca\u0005\u001d\u0000"+
		"\u0000\u1bca\u1bcc\u0003\u03ce\u01e7\u0000\u1bcb\u1bc9\u0001\u0000\u0000"+
		"\u0000\u1bcc\u1bcf\u0001\u0000\u0000\u0000\u1bcd\u1bcb\u0001\u0000\u0000"+
		"\u0000\u1bcd\u1bce\u0001\u0000\u0000\u0000\u1bce\u1bd1\u0001\u0000\u0000"+
		"\u0000\u1bcf\u1bcd\u0001\u0000\u0000\u0000\u1bd0\u1bc4\u0001\u0000\u0000"+
		"\u0000\u1bd0\u1bc8\u0001\u0000\u0000\u0000\u1bd1\u03cd\u0001\u0000\u0000"+
		"\u0000\u1bd2\u1bd8\u0003\u058e\u02c7\u0000\u1bd3\u1bd5\u0007#\u0000\u0000"+
		"\u1bd4\u1bd6\u0005\u01ed\u0000\u0000\u1bd5\u1bd4\u0001\u0000\u0000\u0000"+
		"\u1bd5\u1bd6\u0001\u0000\u0000\u0000\u1bd6\u1bd9\u0001\u0000\u0000\u0000"+
		"\u1bd7\u1bd9\u0005\u01ed\u0000\u0000\u1bd8\u1bd3\u0001\u0000\u0000\u0000"+
		"\u1bd8\u1bd7\u0001\u0000\u0000\u0000\u1bd8\u1bd9\u0001\u0000\u0000\u0000"+
		"\u1bd9\u03cf\u0001\u0000\u0000\u0000\u1bda\u1bdb\u0007{\u0000\u0000\u1bdb"+
		"\u03d1\u0001\u0000\u0000\u0000\u1bdc\u1bdd\u0005\u025c\u0000\u0000\u1bdd"+
		"\u1bf5\u0005 \u0000\u0000\u1bde\u1be1\u0003\u0390\u01c8\u0000\u1bdf\u1be0"+
		"\u0005\u00eb\u0000\u0000\u1be0\u1be2\u0003\u0390\u01c8\u0000\u1be1\u1bdf"+
		"\u0001\u0000\u0000\u0000\u1be1\u1be2\u0001\u0000\u0000\u0000\u1be2\u1bf6"+
		"\u0001\u0000\u0000\u0000\u1be3\u1be5\u0005\u012b\u0000\u0000\u1be4\u1be6"+
		"\u0003\u0390\u01c8\u0000\u1be5\u1be4\u0001\u0000\u0000\u0000\u1be5\u1be6"+
		"\u0001\u0000\u0000\u0000\u1be6\u1be7\u0001\u0000\u0000\u0000\u1be7\u1be8"+
		"\u0005\u00eb\u0000\u0000\u1be8\u1bf6\u0003\u0390\u01c8\u0000\u1be9\u1beb"+
		"\u0005\u0258\u0000\u0000\u1bea\u1bec\u0003\u0390\u01c8\u0000\u1beb\u1bea"+
		"\u0001\u0000\u0000\u0000\u1beb\u1bec\u0001\u0000\u0000\u0000\u1bec\u1bed"+
		"\u0001\u0000\u0000\u0000\u1bed\u1bee\u0005\u00eb\u0000\u0000\u1bee\u1bf6"+
		"\u0003\u0390\u01c8\u0000\u1bef\u1bf1\u0005W\u0000\u0000\u1bf0\u1bf2\u0003"+
		"\u0390\u01c8\u0000\u1bf1\u1bf0\u0001\u0000\u0000\u0000\u1bf1\u1bf2\u0001"+
		"\u0000\u0000\u0000\u1bf2\u1bf3\u0001\u0000\u0000\u0000\u1bf3\u1bf4\u0005"+
		"\u00eb\u0000\u0000\u1bf4\u1bf6\u0003\u0390\u01c8\u0000\u1bf5\u1bde\u0001"+
		"\u0000\u0000\u0000\u1bf5\u1be3\u0001\u0000\u0000\u0000\u1bf5\u1be9\u0001"+
		"\u0000\u0000\u0000\u1bf5\u1bef\u0001\u0000\u0000\u0000\u1bf6\u1bf7\u0001"+
		"\u0000\u0000\u0000\u1bf7\u1bf8\u0005!\u0000\u0000\u1bf8\u03d3\u0001\u0000"+
		"\u0000\u0000\u1bf9\u1bfa\u0005\u023d\u0000\u0000\u1bfa\u1bfb\u0005 \u0000"+
		"\u0000\u1bfb\u1c08\u0003\u0390\u01c8\u0000\u1bfc\u1bfd\u0005\u001d\u0000"+
		"\u0000\u1bfd\u1c00\u0003\u0390\u01c8\u0000\u1bfe\u1bff\u0005\u001d\u0000"+
		"\u0000\u1bff\u1c01\u0003\u0390\u01c8\u0000\u1c00\u1bfe\u0001\u0000\u0000"+
		"\u0000\u1c00\u1c01\u0001\u0000\u0000\u0000\u1c01\u1c09\u0001\u0000\u0000"+
		"\u0000\u1c02\u1c03\u0005\u00eb\u0000\u0000\u1c03\u1c06\u0003\u0390\u01c8"+
		"\u0000\u1c04\u1c05\u0005\u00e8\u0000\u0000\u1c05\u1c07\u0003\u0390\u01c8"+
		"\u0000\u1c06\u1c04\u0001\u0000\u0000\u0000\u1c06\u1c07\u0001\u0000\u0000"+
		"\u0000\u1c07\u1c09\u0001\u0000\u0000\u0000\u1c08\u1bfc\u0001\u0000\u0000"+
		"\u0000\u1c08\u1c02\u0001\u0000\u0000\u0000\u1c09\u1c0a\u0001\u0000\u0000"+
		"\u0000\u1c0a\u1c0b\u0005!\u0000\u0000\u1c0b\u03d5\u0001\u0000\u0000\u0000"+
		"\u1c0c\u1c0d\u0003\u057e\u02bf\u0000\u1c0d\u1c0f\u0005 \u0000\u0000\u1c0e"+
		"\u1c10\u0003\u03d8\u01ec\u0000\u1c0f\u1c0e\u0001\u0000\u0000\u0000\u1c0f"+
		"\u1c10\u0001\u0000\u0000\u0000\u1c10\u1c11\u0001\u0000\u0000\u0000\u1c11"+
		"\u1c12\u0005!\u0000\u0000\u1c12\u1c1b\u0001\u0000\u0000\u0000\u1c13\u1c14"+
		"\u0003\u0586\u02c3\u0000\u1c14\u1c16\u0005 \u0000\u0000\u1c15\u1c17\u0003"+
		"\u03ee\u01f7\u0000\u1c16\u1c15\u0001\u0000\u0000\u0000\u1c16\u1c17\u0001"+
		"\u0000\u0000\u0000\u1c17\u1c18\u0001\u0000\u0000\u0000\u1c18\u1c19\u0005"+
		"!\u0000\u0000\u1c19\u1c1b\u0001\u0000\u0000\u0000\u1c1a\u1c0c\u0001\u0000"+
		"\u0000\u0000\u1c1a\u1c13\u0001\u0000\u0000\u0000\u1c1b\u03d7\u0001\u0000"+
		"\u0000\u0000\u1c1c\u1c21\u0003\u03da\u01ed\u0000\u1c1d\u1c1e\u0005\u001d"+
		"\u0000\u0000\u1c1e\u1c20\u0003\u03da\u01ed\u0000\u1c1f\u1c1d\u0001\u0000"+
		"\u0000\u0000\u1c20\u1c23\u0001\u0000\u0000\u0000\u1c21\u1c1f\u0001\u0000"+
		"\u0000\u0000\u1c21\u1c22\u0001\u0000\u0000\u0000\u1c22\u03d9\u0001\u0000"+
		"\u0000\u0000\u1c23\u1c21\u0001\u0000\u0000\u0000\u1c24\u1c26\u0003\u0390"+
		"\u01c8\u0000\u1c25\u1c27\u0003\u0186\u00c3\u0000\u1c26\u1c25\u0001\u0000"+
		"\u0000\u0000\u1c26\u1c27\u0001\u0000\u0000\u0000\u1c27\u03db\u0001\u0000"+
		"\u0000\u0000\u1c28\u1c29\u0005\'\u0000\u0000\u1c29\u1c2c\u0003\u05bc\u02de"+
		"\u0000\u1c2a\u1c2c\u0005(\u0000\u0000\u1c2b\u1c28\u0001\u0000\u0000\u0000"+
		"\u1c2b\u1c2a\u0001\u0000\u0000\u0000\u1c2c\u03dd\u0001\u0000\u0000\u0000"+
		"\u1c2d\u1c2e\u0003\u03dc\u01ee\u0000\u1c2e\u1c2f\u0005\u0007\u0000\u0000"+
		"\u1c2f\u1c30\u0003\u0390\u01c8\u0000\u1c30\u03df\u0001\u0000\u0000\u0000"+
		"\u1c31\u1c38\u0003\u03dc\u01ee\u0000\u1c32\u1c34\u0005)\u0000\u0000\u1c33"+
		"\u1c35\u0003\u05ca\u02e5\u0000\u1c34\u1c33\u0001\u0000\u0000\u0000\u1c34"+
		"\u1c35\u0001\u0000\u0000\u0000\u1c35\u1c36\u0001\u0000\u0000\u0000\u1c36"+
		"\u1c38\u0003\u03e4\u01f2\u0000\u1c37\u1c31\u0001\u0000\u0000\u0000\u1c37"+
		"\u1c32\u0001\u0000\u0000\u0000\u1c38\u03e1\u0001\u0000\u0000\u0000\u1c39"+
		"\u1c3b\u0003\u0580\u02c0\u0000\u1c3a\u1c3c\u0003\u058a\u02c5\u0000\u1c3b"+
		"\u1c3a\u0001\u0000\u0000\u0000\u1c3b\u1c3c\u0001\u0000\u0000\u0000\u1c3c"+
		"\u1c43\u0001\u0000\u0000\u0000\u1c3d\u1c3e\u0004\u01f1a\u0000\u1c3e\u1c40"+
		"\u0003\u05be\u02df\u0000\u1c3f\u1c41\u0003\u058a\u02c5\u0000\u1c40\u1c3f"+
		"\u0001\u0000\u0000\u0000\u1c40\u1c41\u0001\u0000\u0000\u0000\u1c41\u1c43"+
		"\u0001\u0000\u0000\u0000\u1c42\u1c39\u0001\u0000\u0000\u0000\u1c42\u1c3d"+
		"\u0001\u0000\u0000\u0000\u1c43\u1c47\u0001\u0000\u0000\u0000\u1c44\u1c45"+
		"\u0005\u00a6\u0000\u0000\u1c45\u1c47\u0003\u058a\u02c5\u0000\u1c46\u1c42"+
		"\u0001\u0000\u0000\u0000\u1c46\u1c44\u0001\u0000\u0000\u0000\u1c47\u03e3"+
		"\u0001\u0000\u0000\u0000\u1c48\u1c4a\u0003\u05bc\u02de\u0000\u1c49\u1c4b"+
		"\u0003\u058a\u02c5\u0000\u1c4a\u1c49\u0001\u0000\u0000\u0000\u1c4a\u1c4b"+
		"\u0001\u0000\u0000\u0000\u1c4b\u03e5\u0001\u0000\u0000\u0000\u1c4c\u1c4d"+
		"\u0005\u028a\u0000\u0000\u1c4d\u1c4e\u0003\u0390\u01c8\u0000\u1c4e\u03e7"+
		"\u0001\u0000\u0000\u0000\u1c4f\u1c50\u0005\u024f\u0000\u0000\u1c50\u1c51"+
		"\u0003\u0390\u01c8\u0000\u1c51\u03e9\u0001\u0000\u0000\u0000\u1c52\u1c53"+
		"\u0005\u00be\u0000\u0000\u1c53\u1c54\u0003\u0390\u01c8\u0000\u1c54\u03eb"+
		"\u0001\u0000\u0000\u0000\u1c55\u1c57\u0005M\u0000\u0000\u1c56\u1c58\u0003"+
		"\u0496\u024b\u0000\u1c57\u1c56\u0001\u0000\u0000\u0000\u1c57\u1c58\u0001"+
		"\u0000\u0000\u0000\u1c58\u1c86\u0001\u0000\u0000\u0000\u1c59\u1c5b\u0005"+
		"g\u0000\u0000\u1c5a\u1c5c\u0003\u0496\u024b\u0000\u1c5b\u1c5a\u0001\u0000"+
		"\u0000\u0000\u1c5b\u1c5c\u0001\u0000\u0000\u0000\u1c5c\u1c5e\u0001\u0000"+
		"\u0000\u0000\u1c5d\u1c5f\u0003\u049a\u024d\u0000\u1c5e\u1c5d\u0001\u0000"+
		"\u0000\u0000\u1c5e\u1c5f\u0001\u0000\u0000\u0000\u1c5f\u1c86\u0001\u0000"+
		"\u0000\u0000\u1c60\u1c62\u0003\u0492\u0249\u0000\u1c61\u1c63\u0003\u0496"+
		"\u024b\u0000\u1c62\u1c61\u0001\u0000\u0000\u0000\u1c62\u1c63\u0001\u0000"+
		"\u0000\u0000\u1c63\u1c86\u0001\u0000\u0000\u0000\u1c64\u1c66\u0005\u020c"+
		"\u0000\u0000\u1c65\u1c67\u0005\u0118\u0000\u0000\u1c66\u1c65\u0001\u0000"+
		"\u0000\u0000\u1c66\u1c67\u0001\u0000\u0000\u0000\u1c67\u1c86\u0001\u0000"+
		"\u0000\u0000\u1c68\u1c6a\u0005\u026d\u0000\u0000\u1c69\u1c6b\u0005\u0118"+
		"\u0000\u0000\u1c6a\u1c69\u0001\u0000\u0000\u0000\u1c6a\u1c6b\u0001\u0000"+
		"\u0000\u0000\u1c6b\u1c86\u0001\u0000\u0000\u0000\u1c6c\u1c86\u0005\u009d"+
		"\u0000\u0000\u1c6d\u1c6e\u0004\u01f6b\u0000\u1c6e\u1c86\u0005\u0298\u0000"+
		"\u0000\u1c6f\u1c71\u0005\u0253\u0000\u0000\u1c70\u1c72\u0003\u04a2\u0251"+
		"\u0000\u1c71\u1c70\u0001\u0000\u0000\u0000\u1c71\u1c72\u0001\u0000\u0000"+
		"\u0000\u1c72\u1c86\u0001\u0000\u0000\u0000\u1c73\u1c75\u0005\u009a\u0000"+
		"\u0000\u1c74\u1c76\u0003\u04a2\u0251\u0000\u1c75\u1c74\u0001\u0000\u0000"+
		"\u0000\u1c75\u1c76\u0001\u0000\u0000\u0000\u1c76\u1c86\u0001\u0000\u0000"+
		"\u0000\u1c77\u1c79\u0005\u00a4\u0000\u0000\u1c78\u1c7a\u0003\u05b6\u02db"+
		"\u0000\u1c79\u1c78\u0001\u0000\u0000\u0000\u1c79\u1c7a\u0001\u0000\u0000"+
		"\u0000\u1c7a\u1c86\u0001\u0000\u0000\u0000\u1c7b\u1c86\u0005\u0124\u0000"+
		"\u0000\u1c7c\u1c7d\u0004\u01f6c\u0000\u1c7d\u1c86\u0003\u0494\u024a\u0000"+
		"\u1c7e\u1c7f\u0004\u01f6d\u0000\u1c7f\u1c81\u0005\u00e3\u0000\u0000\u1c80"+
		"\u1c82\u0003\u05b8\u02dc\u0000\u1c81\u1c80\u0001\u0000\u0000\u0000\u1c81"+
		"\u1c82\u0001\u0000\u0000\u0000\u1c82\u1c86\u0001\u0000\u0000\u0000\u1c83"+
		"\u1c84\u0004\u01f6e\u0000\u1c84\u1c86\u0007|\u0000\u0000\u1c85\u1c55\u0001"+
		"\u0000\u0000\u0000\u1c85\u1c59\u0001\u0000\u0000\u0000\u1c85\u1c60\u0001"+
		"\u0000\u0000\u0000\u1c85\u1c64\u0001\u0000\u0000\u0000\u1c85\u1c68\u0001"+
		"\u0000\u0000\u0000\u1c85\u1c6c\u0001\u0000\u0000\u0000\u1c85\u1c6d\u0001"+
		"\u0000\u0000\u0000\u1c85\u1c6f\u0001\u0000\u0000\u0000\u1c85\u1c73\u0001"+
		"\u0000\u0000\u0000\u1c85\u1c77\u0001\u0000\u0000\u0000\u1c85\u1c7b\u0001"+
		"\u0000\u0000\u0000\u1c85\u1c7c\u0001\u0000\u0000\u0000\u1c85\u1c7e\u0001"+
		"\u0000\u0000\u0000\u1c85\u1c83\u0001\u0000\u0000\u0000\u1c86\u03ed\u0001"+
		"\u0000\u0000\u0000\u1c87\u1c8c\u0003\u0390\u01c8\u0000\u1c88\u1c89\u0005"+
		"\u001d\u0000\u0000\u1c89\u1c8b\u0003\u0390\u01c8\u0000\u1c8a\u1c88\u0001"+
		"\u0000\u0000\u0000\u1c8b\u1c8e\u0001\u0000\u0000\u0000\u1c8c\u1c8a\u0001"+
		"\u0000\u0000\u0000\u1c8c\u1c8d\u0001\u0000\u0000\u0000\u1c8d\u03ef\u0001"+
		"\u0000\u0000\u0000\u1c8e\u1c8c\u0001\u0000\u0000\u0000\u1c8f\u1c90\u0005"+
		"g\u0000\u0000\u1c90\u1c93\u0005\u0207\u0000\u0000\u1c91\u1c93\u0005f\u0000"+
		"\u0000\u1c92\u1c8f\u0001\u0000\u0000\u0000\u1c92\u1c91\u0001\u0000\u0000"+
		"\u0000\u1c93\u03f1\u0001\u0000\u0000\u0000\u1c94\u1c95\u0007}\u0000\u0000"+
		"\u1c95\u03f3\u0001\u0000\u0000\u0000\u1c96\u1c97\u0007~\u0000\u0000\u1c97"+
		"\u03f5\u0001\u0000\u0000\u0000\u1c98\u1c9b\u0003\u03f8\u01fc\u0000\u1c99"+
		"\u1c9b\u0007\u007f\u0000\u0000\u1c9a\u1c98\u0001\u0000\u0000\u0000\u1c9a"+
		"\u1c99\u0001\u0000\u0000\u0000\u1c9b\u03f7\u0001\u0000\u0000\u0000\u1c9c"+
		"\u1c9d\u0007\u0080\u0000\u0000\u1c9d\u03f9\u0001\u0000\u0000\u0000\u1c9e"+
		"\u1c9f\u0005 \u0000\u0000\u1c9f\u1ca0\u0003\u03ee\u01f7\u0000\u1ca0\u1ca1"+
		"\u0005!\u0000\u0000\u1ca1\u03fb\u0001\u0000\u0000\u0000\u1ca2\u1ca3\u0005"+
		" \u0000\u0000\u1ca3\u1ca4\u0003\u0390\u01c8\u0000\u1ca4\u1ca5\u0005!\u0000"+
		"\u0000\u1ca5\u03fd\u0001\u0000\u0000\u0000\u1ca6\u1ca7\u0005 \u0000\u0000"+
		"\u1ca7\u1ca8\u0003\u039c\u01ce\u0000\u1ca8\u1ca9\u0005!\u0000\u0000\u1ca9"+
		"\u03ff\u0001\u0000\u0000\u0000\u1caa\u1caf\u0003\u0402\u0201\u0000\u1cab"+
		"\u1cac\u0005\u001d\u0000\u0000\u1cac\u1cae\u0003\u0402\u0201\u0000\u1cad"+
		"\u1cab\u0001\u0000\u0000\u0000\u1cae\u1cb1\u0001\u0000\u0000\u0000\u1caf"+
		"\u1cad\u0001\u0000\u0000\u0000\u1caf\u1cb0\u0001\u0000\u0000\u0000\u1cb0"+
		"\u0401\u0001\u0000\u0000\u0000\u1cb1\u1caf\u0001\u0000\u0000\u0000\u1cb2"+
		"\u1cb4\u0003\u0390\u01c8\u0000\u1cb3\u1cb5\u0003\u016c\u00b6\u0000\u1cb4"+
		"\u1cb3\u0001\u0000\u0000\u0000\u1cb4\u1cb5\u0001\u0000\u0000\u0000\u1cb5"+
		"\u0403\u0001\u0000\u0000\u0000\u1cb6\u1cbb\u0003\u0406\u0203\u0000\u1cb7"+
		"\u1cb8\u0005\u001d\u0000\u0000\u1cb8\u1cba\u0003\u0406\u0203\u0000\u1cb9"+
		"\u1cb7\u0001\u0000\u0000\u0000\u1cba\u1cbd\u0001\u0000\u0000\u0000\u1cbb"+
		"\u1cb9\u0001\u0000\u0000\u0000\u1cbb\u1cbc\u0001\u0000\u0000\u0000\u1cbc"+
		"\u0405\u0001\u0000\u0000\u0000\u1cbd\u1cbb\u0001\u0000\u0000\u0000\u1cbe"+
		"\u1cbf\u0003\u0390\u01c8\u0000\u1cbf\u0407\u0001\u0000\u0000\u0000\u1cc0"+
		"\u1cc1\u0005\u00e8\u0000\u0000\u1cc1\u1cc2\u0005e\u0000\u0000\u1cc2\u1cc3"+
		"\u0003\u05a8\u02d4\u0000\u1cc3\u0409\u0001\u0000\u0000\u0000\u1cc4\u1cd2"+
		"\u0003\u0004\u0002\u0000\u1cc5\u1cd2\u0003\u040c\u0206\u0000\u1cc6\u1cd2"+
		"\u0003\u040e\u0207\u0000\u1cc7\u1cd2\u0003\u0416\u020b\u0000\u1cc8\u1cd2"+
		"\u0003\u041a\u020d\u0000\u1cc9\u1cd2\u0003\u041c\u020e\u0000\u1cca\u1cd2"+
		"\u0003\u0422\u0211\u0000\u1ccb\u1cd2\u0003\u0424\u0212\u0000\u1ccc\u1cd2"+
		"\u0003\u0440\u0220\u0000\u1ccd\u1cd2\u0003\u043e\u021f\u0000\u1cce\u1cd2"+
		"\u0003\u0452\u0229\u0000\u1ccf\u1cd2\u0003\u0456\u022b\u0000\u1cd0\u1cd2"+
		"\u0003\u0454\u022a\u0000\u1cd1\u1cc4\u0001\u0000\u0000\u0000\u1cd1\u1cc5"+
		"\u0001\u0000\u0000\u0000\u1cd1\u1cc6\u0001\u0000\u0000\u0000\u1cd1\u1cc7"+
		"\u0001\u0000\u0000\u0000\u1cd1\u1cc8\u0001\u0000\u0000\u0000\u1cd1\u1cc9"+
		"\u0001\u0000\u0000\u0000\u1cd1\u1cca\u0001\u0000\u0000\u0000\u1cd1\u1ccb"+
		"\u0001\u0000\u0000\u0000\u1cd1\u1ccc\u0001\u0000\u0000\u0000\u1cd1\u1ccd"+
		"\u0001\u0000\u0000\u0000\u1cd1\u1cce\u0001\u0000\u0000\u0000\u1cd1\u1ccf"+
		"\u0001\u0000\u0000\u0000\u1cd1\u1cd0\u0001\u0000\u0000\u0000\u1cd2\u040b"+
		"\u0001\u0000\u0000\u0000\u1cd3\u1cd4\u0005\u01ec\u0000\u0000\u1cd4\u1cd5"+
		"\u0003\u0390\u01c8\u0000\u1cd5\u040d\u0001\u0000\u0000\u0000\u1cd6\u1cd7"+
		"\u0005\u0107\u0000\u0000\u1cd7\u1cd8\u0003\u0410\u0208\u0000\u1cd8\u1cd9"+
		"\u0005\u00c3\u0000\u0000\u1cd9\u1cda\u0005\u0107\u0000\u0000\u1cda\u040f"+
		"\u0001\u0000\u0000\u0000\u1cdb\u1cdc\u0003\u0390\u01c8\u0000\u1cdc\u1ce1"+
		"\u0003\u0412\u0209\u0000\u1cdd\u1cde\u0005\u00bf\u0000\u0000\u1cde\u1ce2"+
		"\u0003\u0410\u0208\u0000\u1cdf\u1ce0\u0005\u00be\u0000\u0000\u1ce0\u1ce2"+
		"\u0003\u0414\u020a\u0000\u1ce1\u1cdd\u0001\u0000\u0000\u0000\u1ce1\u1cdf"+
		"\u0001\u0000\u0000\u0000\u1ce1\u1ce2\u0001\u0000\u0000\u0000\u1ce2\u0411"+
		"\u0001\u0000\u0000\u0000\u1ce3\u1ce4\u0005\u024f\u0000\u0000\u1ce4\u1ce5"+
		"\u0003\u0414\u020a\u0000\u1ce5\u0413\u0001\u0000\u0000\u0000\u1ce6\u1ce7"+
		"\u0003\u040a\u0205\u0000\u1ce7\u1ce8\u0005\u001e\u0000\u0000\u1ce8\u1cea"+
		"\u0001\u0000\u0000\u0000\u1ce9\u1ce6\u0001\u0000\u0000\u0000\u1cea\u1ceb"+
		"\u0001\u0000\u0000\u0000\u1ceb\u1ce9\u0001\u0000\u0000\u0000\u1ceb\u1cec"+
		"\u0001\u0000\u0000\u0000\u1cec\u0415\u0001\u0000\u0000\u0000\u1ced\u1cef"+
		"\u0005_\u0000\u0000\u1cee\u1cf0\u0003\u0390\u01c8\u0000\u1cef\u1cee\u0001"+
		"\u0000\u0000\u0000\u1cef\u1cf0\u0001\u0000\u0000\u0000\u1cf0\u1cf4\u0001"+
		"\u0000\u0000\u0000\u1cf1\u1cf2\u0003\u03e6\u01f3\u0000\u1cf2\u1cf3\u0003"+
		"\u0412\u0209\u0000\u1cf3\u1cf5\u0001\u0000\u0000\u0000\u1cf4\u1cf1\u0001"+
		"\u0000\u0000\u0000\u1cf5\u1cf6\u0001\u0000\u0000\u0000\u1cf6\u1cf4\u0001"+
		"\u0000\u0000\u0000\u1cf6\u1cf7\u0001\u0000\u0000\u0000\u1cf7\u1cf9\u0001"+
		"\u0000\u0000\u0000\u1cf8\u1cfa\u0003\u0418\u020c\u0000\u1cf9\u1cf8\u0001"+
		"\u0000\u0000\u0000\u1cf9\u1cfa\u0001\u0000\u0000\u0000\u1cfa\u1cfb\u0001"+
		"\u0000\u0000\u0000\u1cfb\u1cfc\u0005\u00c3\u0000\u0000\u1cfc\u1cfd\u0005"+
		"_\u0000\u0000\u1cfd\u0417\u0001\u0000\u0000\u0000\u1cfe\u1cff\u0005\u00be"+
		"\u0000\u0000\u1cff\u1d00\u0003\u0414\u020a\u0000\u1d00\u0419\u0001\u0000"+
		"\u0000\u0000\u1d01\u1d02\u0003\u041e\u020f\u0000\u1d02\u1d04\u0003\u0420"+
		"\u0210\u0000\u1d03\u1d05\u0003\u0572\u02b9\u0000\u1d04\u1d03\u0001\u0000"+
		"\u0000\u0000\u1d04\u1d05\u0001\u0000\u0000\u0000\u1d05\u041b\u0001\u0000"+
		"\u0000\u0000\u1d06\u1d07\u0003\u0420\u0210\u0000\u1d07\u041d\u0001\u0000"+
		"\u0000\u0000\u1d08\u1d09\u0003\u0570\u02b8\u0000\u1d09\u1d0a\u0005\u001f"+
		"\u0000\u0000\u1d0a\u041f\u0001\u0000\u0000\u0000\u1d0b\u1d0d\u0005J\u0000"+
		"\u0000\u1d0c\u1d0e\u0003\u042c\u0216\u0000\u1d0d\u1d0c\u0001\u0000\u0000"+
		"\u0000\u1d0d\u1d0e\u0001\u0000\u0000\u0000\u1d0e\u1d10\u0001\u0000\u0000"+
		"\u0000\u1d0f\u1d11\u0003\u0414\u020a\u0000\u1d10\u1d0f\u0001\u0000\u0000"+
		"\u0000\u1d10\u1d11\u0001\u0000\u0000\u0000\u1d11\u1d12\u0001\u0000\u0000"+
		"\u0000\u1d12\u1d13\u0005\u00c3\u0000\u0000\u1d13\u0421\u0001\u0000\u0000"+
		"\u0000\u1d14\u1d15\u0003\u041e\u020f\u0000\u1d15\u1d17\u0003\u0424\u0212"+
		"\u0000\u1d16\u1d18\u0003\u0572\u02b9\u0000\u1d17\u1d16\u0001\u0000\u0000"+
		"\u0000\u1d17\u1d18\u0001\u0000\u0000\u0000\u1d18\u0423\u0001\u0000\u0000"+
		"\u0000\u1d19\u1d1d\u0003\u0426\u0213\u0000\u1d1a\u1d1d\u0003\u0428\u0214"+
		"\u0000\u1d1b\u1d1d\u0003\u042a\u0215\u0000\u1d1c\u1d19\u0001\u0000\u0000"+
		"\u0000\u1d1c\u1d1a\u0001\u0000\u0000\u0000\u1d1c\u1d1b\u0001\u0000\u0000"+
		"\u0000\u1d1d\u0425\u0001\u0000\u0000\u0000\u1d1e\u1d1f\u0005\u0140\u0000"+
		"\u0000\u1d1f\u1d20\u0003\u0414\u020a\u0000\u1d20\u1d21\u0005\u00c3\u0000"+
		"\u0000\u1d21\u1d22\u0005\u0140\u0000\u0000\u1d22\u0427\u0001\u0000\u0000"+
		"\u0000\u1d23\u1d24\u0005\u028c\u0000\u0000\u1d24\u1d25\u0003\u0390\u01c8"+
		"\u0000\u1d25\u1d26\u0005\u00b7\u0000\u0000\u1d26\u1d27\u0003\u0414\u020a"+
		"\u0000\u1d27\u1d28\u0005\u00c3\u0000\u0000\u1d28\u1d29\u0005\u028c\u0000"+
		"\u0000\u1d29\u0429\u0001\u0000\u0000\u0000\u1d2a\u1d2b\u0005\u01da\u0000"+
		"\u0000\u1d2b\u1d2c\u0003\u0414\u020a\u0000\u1d2c\u1d2d\u0005\u026e\u0000"+
		"\u0000\u1d2d\u1d2e\u0003\u0390\u01c8\u0000\u1d2e\u1d2f\u0005\u00c3\u0000"+
		"\u0000\u1d2f\u1d30\u0005\u01da\u0000\u0000\u1d30\u042b\u0001\u0000\u0000"+
		"\u0000\u1d31\u1d32\u0003\u042e\u0217\u0000\u1d32\u1d33\u0005\u001e\u0000"+
		"\u0000\u1d33\u1d35\u0001\u0000\u0000\u0000\u1d34\u1d31\u0001\u0000\u0000"+
		"\u0000\u1d35\u1d36\u0001\u0000\u0000\u0000\u1d36\u1d34\u0001\u0000\u0000"+
		"\u0000\u1d36\u1d37\u0001\u0000\u0000\u0000\u1d37\u042d\u0001\u0000\u0000"+
		"\u0000\u1d38\u1d3d\u0003\u0430\u0218\u0000\u1d39\u1d3d\u0003\u0432\u0219"+
		"\u0000\u1d3a\u1d3d\u0003\u0438\u021c\u0000\u1d3b\u1d3d\u0003\u043c\u021e"+
		"\u0000\u1d3c\u1d38\u0001\u0000\u0000\u0000\u1d3c\u1d39\u0001\u0000\u0000"+
		"\u0000\u1d3c\u1d3a\u0001\u0000\u0000\u0000\u1d3c\u1d3b\u0001\u0000\u0000"+
		"\u0000\u1d3d\u042f\u0001\u0000\u0000\u0000\u1d3e\u1d3f\u0005\u00a5\u0000"+
		"\u0000\u1d3f\u1d40\u0003\u0582\u02c1\u0000\u1d40\u1d42\u0003\u0490\u0248"+
		"\u0000\u1d41\u1d43\u0003\u04e2\u0271\u0000\u1d42\u1d41\u0001\u0000\u0000"+
		"\u0000\u1d42\u1d43\u0001\u0000\u0000\u0000\u1d43\u1d46\u0001\u0000\u0000"+
		"\u0000\u1d44\u1d45\u0005\u00a6\u0000\u0000\u1d45\u1d47\u0003\u0390\u01c8"+
		"\u0000\u1d46\u1d44\u0001\u0000\u0000\u0000\u1d46\u1d47\u0001\u0000\u0000"+
		"\u0000\u1d47\u0431\u0001\u0000\u0000\u0000\u1d48\u1d49\u0005\u00a5\u0000"+
		"\u0000\u1d49\u1d4a\u0003\u0580\u02c0\u0000\u1d4a\u1d4b\u0005~\u0000\u0000"+
		"\u1d4b\u1d4c\u0005\u00e8\u0000\u0000\u1d4c\u1d4d\u0003\u0434\u021a\u0000"+
		"\u1d4d\u0433\u0001\u0000\u0000\u0000\u1d4e\u1d51\u0003\u058c\u02c6\u0000"+
		"\u1d4f\u1d51\u0003\u0436\u021b\u0000\u1d50\u1d4e\u0001\u0000\u0000\u0000"+
		"\u1d50\u1d4f\u0001\u0000\u0000\u0000\u1d51\u0435\u0001\u0000\u0000\u0000"+
		"\u1d52\u1d54\u0005\u0219\u0000\u0000\u1d53\u1d55\u0005\u027c\u0000\u0000"+
		"\u1d54\u1d53\u0001\u0000\u0000\u0000\u1d54\u1d55\u0001\u0000\u0000\u0000"+
		"\u1d55\u1d56\u0001\u0000\u0000\u0000\u1d56\u1d57\u0003\u05a6\u02d3\u0000"+
		"\u1d57\u0437\u0001\u0000\u0000\u0000\u1d58\u1d59\u0005\u00a5\u0000\u0000"+
		"\u1d59\u1d5a\u0007\u0081\u0000\u0000\u1d5a\u1d5b\u0005\u00fb\u0000\u0000"+
		"\u1d5b\u1d5c\u0005\u00e8\u0000\u0000\u1d5c\u1d61\u0003\u043a\u021d\u0000"+
		"\u1d5d\u1d5e\u0005\u001d\u0000\u0000\u1d5e\u1d60\u0003\u043a\u021d\u0000"+
		"\u1d5f\u1d5d\u0001\u0000\u0000\u0000\u1d60\u1d63\u0001\u0000\u0000\u0000"+
		"\u1d61\u1d5f\u0001\u0000\u0000\u0000\u1d61\u1d62\u0001\u0000\u0000\u0000"+
		"\u1d62\u1d64\u0001\u0000\u0000\u0000\u1d63\u1d61\u0001\u0000\u0000\u0000"+
		"\u1d64\u1d65\u0003\u040a\u0205\u0000\u1d65\u0439\u0001\u0000\u0000\u0000"+
		"\u1d66\u1d6e\u0003\u0434\u021a\u0000\u1d67\u1d6e\u0003\u0580\u02c0\u0000"+
		"\u1d68\u1d6e\u0005\u021a\u0000\u0000\u1d69\u1d6a\u0003\u03f2\u01f9\u0000"+
		"\u1d6a\u1d6b\u0005\u00ea\u0000\u0000\u1d6b\u1d6e\u0001\u0000\u0000\u0000"+
		"\u1d6c\u1d6e\u0005\u0218\u0000\u0000\u1d6d\u1d66\u0001\u0000\u0000\u0000"+
		"\u1d6d\u1d67\u0001\u0000\u0000\u0000\u1d6d\u1d68\u0001\u0000\u0000\u0000"+
		"\u1d6d\u1d69\u0001\u0000\u0000\u0000\u1d6d\u1d6c\u0001\u0000\u0000\u0000"+
		"\u1d6e\u043b\u0001\u0000\u0000\u0000\u1d6f\u1d70\u0005\u00a5\u0000\u0000"+
		"\u1d70\u1d71\u0003\u0580\u02c0\u0000\u1d71\u1d72\u0005\u0093\u0000\u0000"+
		"\u1d72\u1d73\u0005\u00e8\u0000\u0000\u1d73\u1d74\u0003\u012a\u0095\u0000"+
		"\u1d74\u043d\u0001\u0000\u0000\u0000\u1d75\u1d76\u0005\u0122\u0000\u0000"+
		"\u1d76\u1d77\u0003\u0572\u02b9\u0000\u1d77\u043f\u0001\u0000\u0000\u0000"+
		"\u1d78\u1d79\u0005\u012d\u0000\u0000\u1d79\u1d7a\u0003\u0572\u02b9\u0000"+
		"\u1d7a\u0441\u0001\u0000\u0000\u0000\u1d7b\u1d7d\u0005\u00ef\u0000\u0000"+
		"\u1d7c\u1d7e\u0007\u0082\u0000\u0000\u1d7d\u1d7c\u0001\u0000\u0000\u0000"+
		"\u1d7d\u1d7e\u0001\u0000\u0000\u0000\u1d7e\u1d7f\u0001\u0000\u0000\u0000"+
		"\u1d7f\u1d92\u0005\u00af\u0000\u0000\u1d80\u1d85\u0003\u0446\u0223\u0000"+
		"\u1d81\u1d82\u0005\u001d\u0000\u0000\u1d82\u1d84\u0003\u0446\u0223\u0000"+
		"\u1d83\u1d81\u0001\u0000\u0000\u0000\u1d84\u1d87\u0001\u0000\u0000\u0000"+
		"\u1d85\u1d83\u0001\u0000\u0000\u0000\u1d85\u1d86\u0001\u0000\u0000\u0000"+
		"\u1d86\u1d93\u0001\u0000\u0000\u0000\u1d87\u1d85\u0001\u0000\u0000\u0000"+
		"\u1d88\u1d89\u0005~\u0000\u0000\u1d89\u1d8a\u0003\u0444\u0222\u0000\u1d8a"+
		"\u1d8f\u0003\u0448\u0224\u0000\u1d8b\u1d8c\u0005\u001d\u0000\u0000\u1d8c"+
		"\u1d8e\u0003\u0448\u0224\u0000\u1d8d\u1d8b\u0001\u0000\u0000\u0000\u1d8e"+
		"\u1d91\u0001\u0000\u0000\u0000\u1d8f\u1d8d\u0001\u0000\u0000\u0000\u1d8f"+
		"\u1d90\u0001\u0000\u0000\u0000\u1d90\u1d93\u0001\u0000\u0000\u0000\u1d91"+
		"\u1d8f\u0001\u0000\u0000\u0000\u1d92\u1d80\u0001\u0000\u0000\u0000\u1d92"+
		"\u1d88\u0001\u0000\u0000\u0000\u1d93\u0443\u0001\u0000\u0000\u0000\u1d94"+
		"\u1d98\u0003\u0598\u02cc\u0000\u1d95\u1d98\u0003\u03e0\u01f0\u0000\u1d96"+
		"\u1d98\u0003\u0586\u02c3\u0000\u1d97\u1d94\u0001\u0000\u0000\u0000\u1d97"+
		"\u1d95\u0001\u0000\u0000\u0000\u1d97\u1d96\u0001\u0000\u0000\u0000\u1d98"+
		"\u0445\u0001\u0000\u0000\u0000\u1d99\u1d9c\u0003\u03dc\u01ee\u0000\u1d9a"+
		"\u1d9c\u0003\u0580\u02c0\u0000\u1d9b\u1d99\u0001\u0000\u0000\u0000\u1d9b"+
		"\u1d9a\u0001\u0000\u0000\u0000\u1d9c\u1d9d\u0001\u0000\u0000\u0000\u1d9d"+
		"\u1d9e\u0005\u0006\u0000\u0000\u1d9e\u1d9f\u0007\u0083\u0000\u0000\u1d9f"+
		"\u0447\u0001\u0000\u0000\u0000\u1da0\u1da3\u0003\u03dc\u01ee\u0000\u1da1"+
		"\u1da3\u0003\u0580\u02c0\u0000\u1da2\u1da0\u0001\u0000\u0000\u0000\u1da2"+
		"\u1da1\u0001\u0000\u0000\u0000\u1da3\u1da4\u0001\u0000\u0000\u0000\u1da4"+
		"\u1da7\u0005\u0006\u0000\u0000\u1da5\u1da8\u0003\u044a\u0225\u0000\u1da6"+
		"\u1da8\u0005\u01ea\u0000\u0000\u1da7\u1da5\u0001\u0000\u0000\u0000\u1da7"+
		"\u1da6\u0001\u0000\u0000\u0000\u1da8\u0449\u0001\u0000\u0000\u0000\u1da9"+
		"\u1daa\u0007\u0084\u0000\u0000\u1daa\u044b\u0001\u0000\u0000\u0000\u1dab"+
		"\u1dae\u0005\u020b\u0000\u0000\u1dac\u1daf\u0003\u0580\u02c0\u0000\u1dad"+
		"\u1daf\u0003\u0436\u021b\u0000\u1dae\u1dac\u0001\u0000\u0000\u0000\u1dae"+
		"\u1dad\u0001\u0000\u0000\u0000\u1daf\u1db9\u0001\u0000\u0000\u0000\u1db0"+
		"\u1db1\u0005\u0207\u0000\u0000\u1db1\u1db6\u0003\u0450\u0228\u0000\u1db2"+
		"\u1db3\u0005\u001d\u0000\u0000\u1db3\u1db5\u0003\u0450\u0228\u0000\u1db4"+
		"\u1db2\u0001\u0000\u0000\u0000\u1db5\u1db8\u0001\u0000\u0000\u0000\u1db6"+
		"\u1db4\u0001\u0000\u0000\u0000\u1db6\u1db7\u0001\u0000\u0000\u0000\u1db7"+
		"\u1dba\u0001\u0000\u0000\u0000\u1db8\u1db6\u0001\u0000\u0000\u0000\u1db9"+
		"\u1db0\u0001\u0000\u0000\u0000\u1db9\u1dba\u0001\u0000\u0000\u0000\u1dba"+
		"\u044d\u0001\u0000\u0000\u0000\u1dbb\u1dbe\u0005\u01e6\u0000\u0000\u1dbc"+
		"\u1dbf\u0003\u0580\u02c0\u0000\u1dbd\u1dbf\u0003\u0436\u021b\u0000\u1dbe"+
		"\u1dbc\u0001\u0000\u0000\u0000\u1dbe\u1dbd\u0001\u0000\u0000\u0000\u1dbe"+
		"\u1dbf\u0001\u0000\u0000\u0000\u1dbf\u1dc9\u0001\u0000\u0000\u0000\u1dc0"+
		"\u1dc1\u0005\u0207\u0000\u0000\u1dc1\u1dc6\u0003\u0450\u0228\u0000\u1dc2"+
		"\u1dc3\u0005\u001d\u0000\u0000\u1dc3\u1dc5\u0003\u0450\u0228\u0000\u1dc4"+
		"\u1dc2\u0001\u0000\u0000\u0000\u1dc5\u1dc8\u0001\u0000\u0000\u0000\u1dc6"+
		"\u1dc4\u0001\u0000\u0000\u0000\u1dc6\u1dc7\u0001\u0000\u0000\u0000\u1dc7"+
		"\u1dca\u0001\u0000\u0000\u0000\u1dc8\u1dc6\u0001\u0000\u0000\u0000\u1dc9"+
		"\u1dc0\u0001\u0000\u0000\u0000\u1dc9\u1dca\u0001\u0000\u0000\u0000\u1dca"+
		"\u044f\u0001\u0000\u0000\u0000\u1dcb\u1dcc\u0003\u044a\u0225\u0000\u1dcc"+
		"\u1dcd\u0005\u0006\u0000\u0000\u1dcd\u1dce\u0003\u0444\u0222\u0000\u1dce"+
		"\u0451\u0001\u0000\u0000\u0000\u1dcf\u1dd0\u0005\u0195\u0000\u0000\u1dd0"+
		"\u1dd1\u0003\u0580\u02c0\u0000\u1dd1\u0453\u0001\u0000\u0000\u0000\u1dd2"+
		"\u1dd3\u0005m\u0000\u0000\u1dd3\u1dd4\u0003\u0580\u02c0\u0000\u1dd4\u0455"+
		"\u0001\u0000\u0000\u0000\u1dd5\u1dda\u0005\u00dd\u0000\u0000\u1dd6\u1dd8"+
		"\u0005\u0183\u0000\u0000\u1dd7\u1dd6\u0001\u0000\u0000\u0000\u1dd7\u1dd8"+
		"\u0001\u0000\u0000\u0000\u1dd8\u1dd9\u0001\u0000\u0000\u0000\u1dd9\u1ddb"+
		"\u0005\u00eb\u0000\u0000\u1dda\u1dd7\u0001\u0000\u0000\u0000\u1dda\u1ddb"+
		"\u0001\u0000\u0000\u0000\u1ddb\u1ddc\u0001\u0000\u0000\u0000\u1ddc\u1ddd"+
		"\u0003\u0580\u02c0\u0000\u1ddd\u1dde\u0005\u0117\u0000\u0000\u1dde\u1ddf"+
		"\u0003\u0582\u02c1\u0000\u1ddf\u0457\u0001\u0000\u0000\u0000\u1de0\u1de1"+
		"\u0005C\u0000\u0000\u1de1\u1dee\u0003\u0390\u01c8\u0000\u1de2\u1de3\u0005"+
		"\u00ce\u0000\u0000\u1de3\u1de4\u0003\u0390\u01c8\u0000\u1de4\u1de7\u0003"+
		"\u03f6\u01fb\u0000\u1de5\u1de6\u0005\u0228\u0000\u0000\u1de6\u1de8\u0003"+
		"\u0390\u01c8\u0000\u1de7\u1de5\u0001\u0000\u0000\u0000\u1de7\u1de8\u0001"+
		"\u0000\u0000\u0000\u1de8\u1deb\u0001\u0000\u0000\u0000\u1de9\u1dea\u0005"+
		"\u00c4\u0000\u0000\u1dea\u1dec\u0003\u0390\u01c8\u0000\u1deb\u1de9\u0001"+
		"\u0000\u0000\u0000\u1deb\u1dec\u0001\u0000\u0000\u0000\u1dec\u1dee\u0001"+
		"\u0000\u0000\u0000\u1ded\u1de0\u0001\u0000\u0000\u0000\u1ded\u1de2\u0001"+
		"\u0000\u0000\u0000\u1dee\u0459\u0001\u0000\u0000\u0000\u1def\u1df0\u0003"+
		"\u052a\u0295\u0000\u1df0\u1df2\u0003\u0466\u0233\u0000\u1df1\u1df3\u0003"+
		"\u045c\u022e\u0000\u1df2\u1df1\u0001\u0000\u0000\u0000\u1df2\u1df3\u0001"+
		"\u0000\u0000\u0000\u1df3\u045b\u0001\u0000\u0000\u0000\u1df4\u1df5\u0004"+
		"\u022ef\u0000\u1df5\u1df8\u0003\u045e\u022f\u0000\u1df6\u1df8\u0003\u0474"+
		"\u023a\u0000\u1df7\u1df4\u0001\u0000\u0000\u0000\u1df7\u1df6\u0001\u0000"+
		"\u0000\u0000\u1df8\u045d\u0001\u0000\u0000\u0000\u1df9\u1dfa\u0005i\u0000"+
		"\u0000\u1dfa\u1dfb\u0003\u03fc\u01fe\u0000\u1dfb\u045f\u0001\u0000\u0000"+
		"\u0000\u1dfc\u1dfe\u0004\u0230g\u0000\u1dfd\u1dff\u0005\u0186\u0000\u0000"+
		"\u1dfe\u1dfd\u0001\u0000\u0000\u0000\u1dfe\u1dff\u0001\u0000\u0000\u0000"+
		"\u1dff\u1e00\u0001\u0000\u0000\u0000\u1e00\u1e01\u0005\u02e2\u0000\u0000"+
		"\u1e01\u0461\u0001\u0000\u0000\u0000\u1e02\u1e04\u0007)\u0000\u0000\u1e03"+
		"\u1e05\u0003z=\u0000\u1e04\u1e03\u0001\u0000\u0000\u0000\u1e04\u1e05\u0001"+
		"\u0000\u0000\u0000\u1e05\u1e06\u0001\u0000\u0000\u0000\u1e06\u1e0a\u0003"+
		"\u047c\u023e\u0000\u1e07\u1e09\u0003\u0482\u0241\u0000\u1e08\u1e07\u0001"+
		"\u0000\u0000\u0000\u1e09\u1e0c\u0001\u0000\u0000\u0000\u1e0a\u1e08\u0001"+
		"\u0000\u0000\u0000\u1e0a\u1e0b\u0001\u0000\u0000\u0000\u1e0b\u1e4d\u0001"+
		"\u0000\u0000\u0000\u1e0c\u1e0a\u0001\u0000\u0000\u0000\u1e0d\u1e0f\u0005"+
		"\u00ed\u0000\u0000\u1e0e\u1e10\u0003\u01ba\u00dd\u0000\u1e0f\u1e0e\u0001"+
		"\u0000\u0000\u0000\u1e0f\u1e10\u0001\u0000\u0000\u0000\u1e10\u1e12\u0001"+
		"\u0000\u0000\u0000\u1e11\u1e13\u0003\u0534\u029a\u0000\u1e12\u1e11\u0001"+
		"\u0000\u0000\u0000\u1e12\u1e13\u0001\u0000\u0000\u0000\u1e13\u1e14\u0001"+
		"\u0000\u0000\u0000\u1e14\u1e18\u0003\u047c\u023e\u0000\u1e15\u1e17\u0003"+
		"\u048a\u0245\u0000\u1e16\u1e15\u0001\u0000\u0000\u0000\u1e17\u1e1a\u0001"+
		"\u0000\u0000\u0000\u1e18\u1e16\u0001\u0000\u0000\u0000\u1e18\u1e19\u0001"+
		"\u0000\u0000\u0000\u1e19\u1e4d\u0001\u0000\u0000\u0000\u1e1a\u1e18\u0001"+
		"\u0000\u0000\u0000\u1e1b\u1e1d\u0005\u0216\u0000\u0000\u1e1c\u1e1e\u0003"+
		"\u01ba\u00dd\u0000\u1e1d\u1e1c\u0001\u0000\u0000\u0000\u1e1d\u1e1e\u0001"+
		"\u0000\u0000\u0000\u1e1e\u1e20\u0001\u0000\u0000\u0000\u1e1f\u1e21\u0003"+
		"\u0534\u029a\u0000\u1e20\u1e1f\u0001\u0000\u0000\u0000\u1e20\u1e21\u0001"+
		"\u0000\u0000\u0000\u1e21\u1e22\u0001\u0000\u0000\u0000\u1e22\u1e26\u0003"+
		"\u047c\u023e\u0000\u1e23\u1e25\u0003\u048c\u0246\u0000\u1e24\u1e23\u0001"+
		"\u0000\u0000\u0000\u1e25\u1e28\u0001\u0000\u0000\u0000\u1e26\u1e24\u0001"+
		"\u0000\u0000\u0000\u1e26\u1e27\u0001\u0000\u0000\u0000\u1e27\u1e4d\u0001"+
		"\u0000\u0000\u0000\u1e28\u1e26\u0001\u0000\u0000\u0000\u1e29\u1e2b\u0003"+
		"\u0464\u0232\u0000\u1e2a\u1e29\u0001\u0000\u0000\u0000\u1e2a\u1e2b\u0001"+
		"\u0000\u0000\u0000\u1e2b\u1e4a\u0001\u0000\u0000\u0000\u1e2c\u1e2d\u0005"+
		"\u01b6\u0000\u0000\u1e2d\u1e33\u0005\u0127\u0000\u0000\u1e2e\u1e30\u0005"+
		"\u026a\u0000\u0000\u1e2f\u1e31\u0003\u01ba\u00dd\u0000\u1e30\u1e2f\u0001"+
		"\u0000\u0000\u0000\u1e30\u1e31\u0001\u0000\u0000\u0000\u1e31\u1e33\u0001"+
		"\u0000\u0000\u0000\u1e32\u1e2c\u0001\u0000\u0000\u0000\u1e32\u1e2e\u0001"+
		"\u0000\u0000\u0000\u1e33\u1e35\u0001\u0000\u0000\u0000\u1e34\u1e36\u0003"+
		"z=\u0000\u1e35\u1e34\u0001\u0000\u0000\u0000\u1e35\u1e36\u0001\u0000\u0000"+
		"\u0000\u1e36\u1e37\u0001\u0000\u0000\u0000\u1e37\u1e3b\u0003\u047c\u023e"+
		"\u0000\u1e38\u1e3a\u0003\u0482\u0241\u0000\u1e39\u1e38\u0001\u0000\u0000"+
		"\u0000\u1e3a\u1e3d\u0001\u0000\u0000\u0000\u1e3b\u1e39\u0001\u0000\u0000"+
		"\u0000\u1e3b\u1e3c\u0001\u0000\u0000\u0000\u1e3c\u1e4b\u0001\u0000\u0000"+
		"\u0000\u1e3d\u1e3b\u0001\u0000\u0000\u0000\u1e3e\u1e3f\u0005\u00e7\u0000"+
		"\u0000\u1e3f\u1e41\u0005\u0127\u0000\u0000\u1e40\u1e42\u0003\u0534\u029a"+
		"\u0000\u1e41\u1e40\u0001\u0000\u0000\u0000\u1e41\u1e42\u0001\u0000\u0000"+
		"\u0000\u1e42\u1e43\u0001\u0000\u0000\u0000\u1e43\u1e44\u0003\u0478\u023c"+
		"\u0000\u1e44\u1e45\u0003\u0474\u023a\u0000\u1e45\u1e4b\u0001\u0000\u0000"+
		"\u0000\u1e46\u1e48\u0003\u045e\u022f\u0000\u1e47\u1e49\u0003\u0460\u0230"+
		"\u0000\u1e48\u1e47\u0001\u0000\u0000\u0000\u1e48\u1e49\u0001\u0000\u0000"+
		"\u0000\u1e49\u1e4b\u0001\u0000\u0000\u0000\u1e4a\u1e32\u0001\u0000\u0000"+
		"\u0000\u1e4a\u1e3e\u0001\u0000\u0000\u0000\u1e4a\u1e46\u0001\u0000\u0000"+
		"\u0000\u1e4b\u1e4d\u0001\u0000\u0000\u0000\u1e4c\u1e02\u0001\u0000\u0000"+
		"\u0000\u1e4c\u1e0d\u0001\u0000\u0000\u0000\u1e4c\u1e1b\u0001\u0000\u0000"+
		"\u0000\u1e4c\u1e2a\u0001\u0000\u0000\u0000\u1e4d\u0463\u0001\u0000\u0000"+
		"\u0000\u1e4e\u1e50\u0005\u0081\u0000\u0000\u1e4f\u1e51\u0003\u0580\u02c0"+
		"\u0000\u1e50\u1e4f\u0001\u0000\u0000\u0000\u1e50\u1e51\u0001\u0000\u0000"+
		"\u0000\u1e51\u0465\u0001\u0000\u0000\u0000\u1e52\u1e6b\u0003\u0490\u0248"+
		"\u0000\u1e53\u1e55\u0003\u0468\u0234\u0000\u1e54\u1e53\u0001\u0000\u0000"+
		"\u0000\u1e55\u1e58\u0001\u0000\u0000\u0000\u1e56\u1e54\u0001\u0000\u0000"+
		"\u0000\u1e56\u1e57\u0001\u0000\u0000\u0000\u1e57\u1e6c\u0001\u0000\u0000"+
		"\u0000\u1e58\u1e56\u0001\u0000\u0000\u0000\u1e59\u1e5b\u0003\u04e2\u0271"+
		"\u0000\u1e5a\u1e59\u0001\u0000\u0000\u0000\u1e5a\u1e5b\u0001\u0000\u0000"+
		"\u0000\u1e5b\u1e5e\u0001\u0000\u0000\u0000\u1e5c\u1e5d\u0005\u00f1\u0000"+
		"\u0000\u1e5d\u1e5f\u0005;\u0000\u0000\u1e5e\u1e5c\u0001\u0000\u0000\u0000"+
		"\u1e5e\u1e5f\u0001\u0000\u0000\u0000\u1e5f\u1e60\u0001\u0000\u0000\u0000"+
		"\u1e60\u1e61\u0005?\u0000\u0000\u1e61\u1e63\u0003\u03fc\u01fe\u0000\u1e62"+
		"\u1e64\u0007\u0085\u0000\u0000\u1e63\u1e62\u0001\u0000\u0000\u0000\u1e63"+
		"\u1e64\u0001\u0000\u0000\u0000\u1e64\u1e68\u0001\u0000\u0000\u0000\u1e65"+
		"\u1e67\u0003\u0468\u0234\u0000\u1e66\u1e65\u0001\u0000\u0000\u0000\u1e67"+
		"\u1e6a\u0001\u0000\u0000\u0000\u1e68\u1e66\u0001\u0000\u0000\u0000\u1e68"+
		"\u1e69\u0001\u0000\u0000\u0000\u1e69\u1e6c\u0001\u0000\u0000\u0000\u1e6a"+
		"\u1e68\u0001\u0000\u0000\u0000\u1e6b\u1e56\u0001\u0000\u0000\u0000\u1e6b"+
		"\u1e5a\u0001\u0000\u0000\u0000\u1e6c\u0467\u0001\u0000\u0000\u0000\u1e6d"+
		"\u1e6f\u0005\u0186\u0000\u0000\u1e6e\u1e6d\u0001\u0000\u0000\u0000\u1e6e"+
		"\u1e6f\u0001\u0000\u0000\u0000\u1e6f\u1e70\u0001\u0000\u0000\u0000\u1e70"+
		"\u1eab\u0003\u05b0\u02d8\u0000\u1e71\u1e72\u0004\u0234h\u0000\u1e72\u1e73"+
		"\u0005\u0186\u0000\u0000\u1e73\u1eab\u0005\u02d8\u0000\u0000\u1e74\u1e78"+
		"\u0005\u00a6\u0000\u0000\u1e75\u1e79\u0003\u0470\u0238\u0000\u1e76\u1e77"+
		"\u0004\u0234i\u0000\u1e77\u1e79\u0003\u03fc\u01fe\u0000\u1e78\u1e75\u0001"+
		"\u0000\u0000\u0000\u1e78\u1e76\u0001\u0000\u0000\u0000\u1e79\u1eab\u0001"+
		"\u0000\u0000\u0000\u1e7a\u1e7b\u0005\u0191\u0000\u0000\u1e7b\u1e7c\u0005"+
		"\u026f\u0000\u0000\u1e7c\u1e7e\u0005\u0187\u0000\u0000\u1e7d\u1e7f\u0003"+
		"\u03c8\u01e4\u0000\u1e7e\u1e7d\u0001\u0000\u0000\u0000\u1e7e\u1e7f\u0001"+
		"\u0000\u0000\u0000\u1e7f\u1eab\u0001\u0000\u0000\u0000\u1e80\u1eab\u0005"+
		"E\u0000\u0000\u1e81\u1e82\u0005\u0203\u0000\u0000\u1e82\u1e83\u0005\u00a6"+
		"\u0000\u0000\u1e83\u1eab\u0005\u027c\u0000\u0000\u1e84\u1e86\u0005\u01b6"+
		"\u0000\u0000\u1e85\u1e84\u0001\u0000\u0000\u0000\u1e85\u1e86\u0001\u0000"+
		"\u0000\u0000\u1e86\u1e87\u0001\u0000\u0000\u0000\u1e87\u1eab\u0005\u0127"+
		"\u0000\u0000\u1e88\u1e8a\u0005\u026a\u0000\u0000\u1e89\u1e8b\u0005\u0127"+
		"\u0000\u0000\u1e8a\u1e89\u0001\u0000\u0000\u0000\u1e8a\u1e8b\u0001\u0000"+
		"\u0000\u0000\u1e8b\u1eab\u0001\u0000\u0000\u0000\u1e8c\u1e8d\u0005v\u0000"+
		"\u0000\u1e8d\u1eab\u0003\u05a6\u02d3\u0000\u1e8e\u1eab\u0003\u04e2\u0271"+
		"\u0000\u1e8f\u1e90\u0005u\u0000\u0000\u1e90\u1eab\u0003\u046a\u0235\u0000"+
		"\u1e91\u1e92\u0005\u0233\u0000\u0000\u1e92\u1eab\u0003\u046c\u0236\u0000"+
		"\u1e93\u1e94\u0005\u02cb\u0000\u0000\u1e94\u1eab\u0003\u0592\u02c9\u0000"+
		"\u1e95\u1e97\u0004\u0234j\u0000\u1e96\u1e98\u0003\u0464\u0232\u0000\u1e97"+
		"\u1e96\u0001\u0000\u0000\u0000\u1e97\u1e98\u0001\u0000\u0000\u0000\u1e98"+
		"\u1e99\u0001\u0000\u0000\u0000\u1e99\u1eab\u0003\u045e\u022f\u0000\u1e9a"+
		"\u1e9b\u0004\u0234k\u0000\u1e9b\u1eab\u0003\u0460\u0230\u0000\u1e9c\u1e9d"+
		"\u0004\u0234l\u0000\u1e9d\u1e9f\u0005\u02f5\u0000\u0000\u1e9e\u1ea0\u0005"+
		"\u0006\u0000\u0000\u1e9f\u1e9e\u0001\u0000\u0000\u0000\u1e9f\u1ea0\u0001"+
		"\u0000\u0000\u0000\u1ea0\u1ea1\u0001\u0000\u0000\u0000\u1ea1\u1eab\u0003"+
		"\u05ce\u02e7\u0000\u1ea2\u1ea3\u0004\u0234m\u0000\u1ea3\u1ea5\u0005\u02f6"+
		"\u0000\u0000\u1ea4\u1ea6\u0005\u0006\u0000\u0000\u1ea5\u1ea4\u0001\u0000"+
		"\u0000\u0000\u1ea5\u1ea6\u0001\u0000\u0000\u0000\u1ea6\u1ea7\u0001\u0000"+
		"\u0000\u0000\u1ea7\u1eab\u0003\u05ce\u02e7\u0000\u1ea8\u1ea9\u0004\u0234"+
		"n\u0000\u1ea9\u1eab\u0003\u0486\u0243\u0000\u1eaa\u1e6e\u0001\u0000\u0000"+
		"\u0000\u1eaa\u1e71\u0001\u0000\u0000\u0000\u1eaa\u1e74\u0001\u0000\u0000"+
		"\u0000\u1eaa\u1e7a\u0001\u0000\u0000\u0000\u1eaa\u1e80\u0001\u0000\u0000"+
		"\u0000\u1eaa\u1e81\u0001\u0000\u0000\u0000\u1eaa\u1e85\u0001\u0000\u0000"+
		"\u0000\u1eaa\u1e88\u0001\u0000\u0000\u0000\u1eaa\u1e8c\u0001\u0000\u0000"+
		"\u0000\u1eaa\u1e8e\u0001\u0000\u0000\u0000\u1eaa\u1e8f\u0001\u0000\u0000"+
		"\u0000\u1eaa\u1e91\u0001\u0000\u0000\u0000\u1eaa\u1e93\u0001\u0000\u0000"+
		"\u0000\u1eaa\u1e95\u0001\u0000\u0000\u0000\u1eaa\u1e9a\u0001\u0000\u0000"+
		"\u0000\u1eaa\u1e9c\u0001\u0000\u0000\u0000\u1eaa\u1ea2\u0001\u0000\u0000"+
		"\u0000\u1eaa\u1ea8\u0001\u0000\u0000\u0000\u1eab\u0469\u0001\u0000\u0000"+
		"\u0000\u1eac\u1ead\u0007\u0086\u0000\u0000\u1ead\u046b\u0001\u0000\u0000"+
		"\u0000\u1eae\u1eaf\u0007\u0087\u0000\u0000\u1eaf\u046d\u0001\u0000\u0000"+
		"\u0000\u1eb0\u1eb1\u0005\u0187\u0000\u0000\u1eb1\u1eb2\u0003\u04a4\u0252"+
		"\u0000\u1eb2\u046f\u0001\u0000\u0000\u0000\u1eb3\u1eb6\u0003\u046e\u0237"+
		"\u0000\u1eb4\u1eb6\u0003\u0596\u02cb\u0000\u1eb5\u1eb3\u0001\u0000\u0000"+
		"\u0000\u1eb5\u1eb4\u0001\u0000\u0000\u0000\u1eb6\u0471\u0001\u0000\u0000"+
		"\u0000\u1eb7\u1eb9\u0005\u026a\u0000\u0000\u1eb8\u1eba\u0005\u0127\u0000"+
		"\u0000\u1eb9\u1eb8\u0001\u0000\u0000\u0000\u1eb9\u1eba\u0001\u0000\u0000"+
		"\u0000\u1eba\u1ec6\u0001\u0000\u0000\u0000\u1ebb\u1ebc\u0005v\u0000\u0000"+
		"\u1ebc\u1ec6\u0003\u05a2\u02d1\u0000\u1ebd\u1ebf\u0003\u03f2\u01f9\u0000"+
		"\u1ebe\u1ebd\u0001\u0000\u0000\u0000\u1ebe\u1ebf\u0001\u0000\u0000\u0000"+
		"\u1ebf\u1ec0\u0001\u0000\u0000\u0000\u1ec0\u1ec6\u0005\u018b\u0000\u0000"+
		"\u1ec1\u1ec3\u0005\u01b6\u0000\u0000\u1ec2\u1ec1\u0001\u0000\u0000\u0000"+
		"\u1ec2\u1ec3\u0001\u0000\u0000\u0000\u1ec3\u1ec4\u0001\u0000\u0000\u0000"+
		"\u1ec4\u1ec6\u0005\u0127\u0000\u0000\u1ec5\u1eb7\u0001\u0000\u0000\u0000"+
		"\u1ec5\u1ebb\u0001\u0000\u0000\u0000\u1ec5\u1ebe\u0001\u0000\u0000\u0000"+
		"\u1ec5\u1ec2\u0001\u0000\u0000\u0000\u1ec6\u0473\u0001\u0000\u0000\u0000"+
		"\u1ec7\u1ec8\u0005\u01cc\u0000\u0000\u1ec8\u1eca\u0003\u0568\u02b4\u0000"+
		"\u1ec9\u1ecb\u0003\u0584\u02c2\u0000\u1eca\u1ec9\u0001\u0000\u0000\u0000"+
		"\u1eca\u1ecb\u0001\u0000\u0000\u0000\u1ecb\u1ece\u0001\u0000\u0000\u0000"+
		"\u1ecc\u1ecd\u0005\u0159\u0000\u0000\u1ecd\u1ecf\u0007\u0088\u0000\u0000"+
		"\u1ece\u1ecc\u0001\u0000\u0000\u0000\u1ece\u1ecf\u0001\u0000\u0000\u0000"+
		"\u1ecf\u1ee0\u0001\u0000\u0000\u0000\u1ed0\u1ed1\u0005\u0191\u0000\u0000"+
		"\u1ed1\u1ed2\u0005\u026f\u0000\u0000\u1ed2\u1ed6\u0003\u0476\u023b\u0000"+
		"\u1ed3\u1ed4\u0005\u0191\u0000\u0000\u1ed4\u1ed5\u0005\u00ab\u0000\u0000"+
		"\u1ed5\u1ed7\u0003\u0476\u023b\u0000\u1ed6\u1ed3\u0001\u0000\u0000\u0000"+
		"\u1ed6\u1ed7\u0001\u0000\u0000\u0000\u1ed7\u1ee1\u0001\u0000\u0000\u0000"+
		"\u1ed8\u1ed9\u0005\u0191\u0000\u0000\u1ed9\u1eda\u0005\u00ab\u0000\u0000"+
		"\u1eda\u1ede\u0003\u0476\u023b\u0000\u1edb\u1edc\u0005\u0191\u0000\u0000"+
		"\u1edc\u1edd\u0005\u026f\u0000\u0000\u1edd\u1edf\u0003\u0476\u023b\u0000"+
		"\u1ede\u1edb\u0001\u0000\u0000\u0000\u1ede\u1edf\u0001\u0000\u0000\u0000"+
		"\u1edf\u1ee1\u0001\u0000\u0000\u0000\u1ee0\u1ed0\u0001\u0000\u0000\u0000"+
		"\u1ee0\u1ed8\u0001\u0000\u0000\u0000\u1ee0\u1ee1\u0001\u0000\u0000\u0000"+
		"\u1ee1\u0475\u0001\u0000\u0000\u0000\u1ee2\u1eea\u0007\u0002\u0000\u0000"+
		"\u1ee3\u1ee4\u0005\u0207\u0000\u0000\u1ee4\u1eea\u0003\u05b0\u02d8\u0000"+
		"\u1ee5\u1ee6\u0005\u0207\u0000\u0000\u1ee6\u1eea\u0005\u00a6\u0000\u0000"+
		"\u1ee7\u1ee8\u0005\u0188\u0000\u0000\u1ee8\u1eea\u00052\u0000\u0000\u1ee9"+
		"\u1ee2\u0001\u0000\u0000\u0000\u1ee9\u1ee3\u0001\u0000\u0000\u0000\u1ee9"+
		"\u1ee5\u0001\u0000\u0000\u0000\u1ee9\u1ee7\u0001\u0000\u0000\u0000\u1eea"+
		"\u0477\u0001\u0000\u0000\u0000\u1eeb\u1eec\u0005 \u0000\u0000\u1eec\u1ef1"+
		"\u0003\u047a\u023d\u0000\u1eed\u1eee\u0005\u001d\u0000\u0000\u1eee\u1ef0"+
		"\u0003\u047a\u023d\u0000\u1eef\u1eed\u0001\u0000\u0000\u0000\u1ef0\u1ef3"+
		"\u0001\u0000\u0000\u0000\u1ef1\u1eef\u0001\u0000\u0000\u0000\u1ef1\u1ef2"+
		"\u0001\u0000\u0000\u0000\u1ef2\u1ef4\u0001\u0000\u0000\u0000\u1ef3\u1ef1"+
		"\u0001\u0000\u0000\u0000\u1ef4\u1ef5\u0005!\u0000\u0000\u1ef5\u0479\u0001"+
		"\u0000\u0000\u0000\u1ef6\u1ef8\u0003\u0580\u02c0\u0000\u1ef7\u1ef9\u0003"+
		"\u0496\u024b\u0000\u1ef8\u1ef7\u0001\u0000\u0000\u0000\u1ef8\u1ef9\u0001"+
		"\u0000\u0000\u0000\u1ef9\u1efb\u0001\u0000\u0000\u0000\u1efa\u1efc\u0003"+
		"\u016c\u00b6\u0000\u1efb\u1efa\u0001\u0000\u0000\u0000\u1efb\u1efc\u0001"+
		"\u0000\u0000\u0000\u1efc\u047b\u0001\u0000\u0000\u0000\u1efd\u1efe\u0005"+
		" \u0000\u0000\u1efe\u1f03\u0003\u047e\u023f\u0000\u1eff\u1f00\u0005\u001d"+
		"\u0000\u0000\u1f00\u1f02\u0003\u047e\u023f\u0000\u1f01\u1eff\u0001\u0000"+
		"\u0000\u0000\u1f02\u1f05\u0001\u0000\u0000\u0000\u1f03\u1f01\u0001\u0000"+
		"\u0000\u0000\u1f03\u1f04\u0001\u0000\u0000\u0000\u1f04\u1f06\u0001\u0000"+
		"\u0000\u0000\u1f05\u1f03\u0001\u0000\u0000\u0000\u1f06\u1f07\u0005!\u0000"+
		"\u0000\u1f07\u047d\u0001\u0000\u0000\u0000\u1f08\u1f0f\u0003\u047a\u023d"+
		"\u0000\u1f09\u1f0a\u0004\u023fo\u0000\u1f0a\u1f0c\u0003\u03fc\u01fe\u0000"+
		"\u1f0b\u1f0d\u0003\u016c\u00b6\u0000\u1f0c\u1f0b\u0001\u0000\u0000\u0000"+
		"\u1f0c\u1f0d\u0001\u0000\u0000\u0000\u1f0d\u1f0f\u0001\u0000\u0000\u0000"+
		"\u1f0e\u1f08\u0001\u0000\u0000\u0000\u1f0e\u1f09\u0001\u0000\u0000\u0000"+
		"\u1f0f\u047f\u0001\u0000\u0000\u0000\u1f10\u1f11\u0007\u0089\u0000\u0000"+
		"\u1f11\u0481\u0001\u0000\u0000\u0000\u1f12\u1f15\u0003\u0484\u0242\u0000"+
		"\u1f13\u1f15\u0003\u0488\u0244\u0000\u1f14\u1f12\u0001\u0000\u0000\u0000"+
		"\u1f14\u1f13\u0001\u0000\u0000\u0000\u1f15\u0483\u0001\u0000\u0000\u0000"+
		"\u1f16\u1f18\u0005\u0126\u0000\u0000\u1f17\u1f19\u0005\u0006\u0000\u0000"+
		"\u1f18\u1f17\u0001\u0000\u0000\u0000\u1f18\u1f19\u0001\u0000\u0000\u0000"+
		"\u1f19\u1f1a\u0001\u0000\u0000\u0000\u1f1a\u1f2b\u0003\u058c\u02c6\u0000"+
		"\u1f1b\u1f1c\u0005v\u0000\u0000\u1f1c\u1f2b\u0003\u05a6\u02d3\u0000\u1f1d"+
		"\u1f2b\u0003\u0486\u0243\u0000\u1f1e\u1f1f\u0004\u0242p\u0000\u1f1f\u1f21"+
		"\u0005\u02f5\u0000\u0000\u1f20\u1f22\u0005\u0006\u0000\u0000\u1f21\u1f20"+
		"\u0001\u0000\u0000\u0000\u1f21\u1f22\u0001\u0000\u0000\u0000\u1f22\u1f23"+
		"\u0001\u0000\u0000\u0000\u1f23\u1f2b\u0003\u05ce\u02e7\u0000\u1f24\u1f25"+
		"\u0004\u0242q\u0000\u1f25\u1f27\u0005\u02f6\u0000\u0000\u1f26\u1f28\u0005"+
		"\u0006\u0000\u0000\u1f27\u1f26\u0001\u0000\u0000\u0000\u1f27\u1f28\u0001"+
		"\u0000\u0000\u0000\u1f28\u1f29\u0001\u0000\u0000\u0000\u1f29\u1f2b\u0003"+
		"\u05ce\u02e7\u0000\u1f2a\u1f16\u0001\u0000\u0000\u0000\u1f2a\u1f1b\u0001"+
		"\u0000\u0000\u0000\u1f2a\u1f1d\u0001\u0000\u0000\u0000\u1f2a\u1f1e\u0001"+
		"\u0000\u0000\u0000\u1f2a\u1f24\u0001\u0000\u0000\u0000\u1f2b\u0485\u0001"+
		"\u0000\u0000\u0000\u1f2c\u1f2d\u0007\u008a\u0000\u0000\u1f2d\u0487\u0001"+
		"\u0000\u0000\u0000\u1f2e\u1f2f\u0007\u008b\u0000\u0000\u1f2f\u1f30\u0003"+
		"\u0480\u0240\u0000\u1f30\u0489\u0001\u0000\u0000\u0000\u1f31\u1f36\u0003"+
		"\u0484\u0242\u0000\u1f32\u1f33\u0005\u028d\u0000\u0000\u1f33\u1f34\u0005"+
		"\u01a3\u0000\u0000\u1f34\u1f36\u0003\u0580\u02c0\u0000\u1f35\u1f31\u0001"+
		"\u0000\u0000\u0000\u1f35\u1f32\u0001\u0000\u0000\u0000\u1f36\u048b\u0001"+
		"\u0000\u0000\u0000\u1f37\u1f38\u0003\u0484\u0242\u0000\u1f38\u048d\u0001"+
		"\u0000\u0000\u0000\u1f39\u1f3a\u0003\u0490\u0248\u0000\u1f3a\u1f3b\u0005"+
		"\u0000\u0000\u0001\u1f3b\u048f\u0001\u0000\u0000\u0000\u1f3c\u1f3e\u0007"+
		"\u008c\u0000\u0000\u1f3d\u1f3f\u0003\u0496\u024b\u0000\u1f3e\u1f3d\u0001"+
		"\u0000\u0000\u0000\u1f3e\u1f3f\u0001\u0000\u0000\u0000\u1f3f\u1f41\u0001"+
		"\u0000\u0000\u0000\u1f40\u1f42\u0003\u0498\u024c\u0000\u1f41\u1f40\u0001"+
		"\u0000\u0000\u0000\u1f41\u1f42\u0001\u0000\u0000\u0000\u1f42\u1fcf\u0001"+
		"\u0000\u0000\u0000\u1f43\u1f49\u0005\u01c7\u0000\u0000\u1f44\u1f46\u0005"+
		"\u00b6\u0000\u0000\u1f45\u1f47\u0005\u01b2\u0000\u0000\u1f46\u1f45\u0001"+
		"\u0000\u0000\u0000\u1f46\u1f47\u0001\u0000\u0000\u0000\u1f47\u1f49\u0001"+
		"\u0000\u0000\u0000\u1f48\u1f43\u0001\u0000\u0000\u0000\u1f48\u1f44\u0001"+
		"\u0000\u0000\u0000\u1f49\u1f4b\u0001\u0000\u0000\u0000\u1f4a\u1f4c\u0003"+
		"\u05ba\u02dd\u0000\u1f4b\u1f4a\u0001\u0000\u0000\u0000\u1f4b\u1f4c\u0001"+
		"\u0000\u0000\u0000\u1f4c\u1f4e\u0001\u0000\u0000\u0000\u1f4d\u1f4f\u0003"+
		"\u0498\u024c\u0000\u1f4e\u1f4d\u0001\u0000\u0000\u0000\u1f4e\u1f4f\u0001"+
		"\u0000\u0000\u0000\u1f4f\u1fcf\u0001\u0000\u0000\u0000\u1f50\u1f52\u0007"+
		"\u008d\u0000\u0000\u1f51\u1f53\u0003\u05b6\u02db\u0000\u1f52\u1f51\u0001"+
		"\u0000\u0000\u0000\u1f52\u1f53\u0001\u0000\u0000\u0000\u1f53\u1f55\u0001"+
		"\u0000\u0000\u0000\u1f54\u1f56\u0003\u0498\u024c\u0000\u1f55\u1f54\u0001"+
		"\u0000\u0000\u0000\u1f55\u1f56\u0001\u0000\u0000\u0000\u1f56\u1fcf\u0001"+
		"\u0000\u0000\u0000\u1f57\u1f59\u0005Q\u0000\u0000\u1f58\u1f5a\u0003\u0496"+
		"\u024b\u0000\u1f59\u1f58\u0001\u0000\u0000\u0000\u1f59\u1f5a\u0001\u0000"+
		"\u0000\u0000\u1f5a\u1fcf\u0001\u0000\u0000\u0000\u1f5b\u1fcf\u0007\u008e"+
		"\u0000\u0000\u1f5c\u1f5e\u0005g\u0000\u0000\u1f5d\u1f5f\u0003\u0496\u024b"+
		"\u0000\u1f5e\u1f5d\u0001\u0000\u0000\u0000\u1f5e\u1f5f\u0001\u0000\u0000"+
		"\u0000\u1f5f\u1f61\u0001\u0000\u0000\u0000\u1f60\u1f62\u0003\u049a\u024d"+
		"\u0000\u1f61\u1f60\u0001\u0000\u0000\u0000\u1f61\u1f62\u0001\u0000\u0000"+
		"\u0000\u1f62\u1fcf\u0001\u0000\u0000\u0000\u1f63\u1f65\u0003\u0492\u0249"+
		"\u0000\u1f64\u1f66\u0003\u0496\u024b\u0000\u1f65\u1f64\u0001\u0000\u0000"+
		"\u0000\u1f65\u1f66\u0001\u0000\u0000\u0000\u1f66\u1f68\u0001\u0000\u0000"+
		"\u0000\u1f67\u1f69\u0005M\u0000\u0000\u1f68\u1f67\u0001\u0000\u0000\u0000"+
		"\u1f68\u1f69\u0001\u0000\u0000\u0000\u1f69\u1fcf\u0001\u0000\u0000\u0000"+
		"\u1f6a\u1f6c\u0005M\u0000\u0000\u1f6b\u1f6d\u0003\u0496\u024b\u0000\u1f6c"+
		"\u1f6b\u0001\u0000\u0000\u0000\u1f6c\u1f6d\u0001\u0000\u0000\u0000\u1f6d"+
		"\u1fcf\u0001\u0000\u0000\u0000\u1f6e\u1f6f\u0005g\u0000\u0000\u1f6f\u1f72"+
		"\u0005\u0281\u0000\u0000\u1f70\u1f72\u0005\u027e\u0000\u0000\u1f71\u1f6e"+
		"\u0001\u0000\u0000\u0000\u1f71\u1f70\u0001\u0000\u0000\u0000\u1f72\u1f73"+
		"\u0001\u0000\u0000\u0000\u1f73\u1f75\u0003\u0496\u024b\u0000\u1f74\u1f76"+
		"\u0003\u049a\u024d\u0000\u1f75\u1f74\u0001\u0000\u0000\u0000\u1f75\u1f76"+
		"\u0001\u0000\u0000\u0000\u1f76\u1fcf\u0001\u0000\u0000\u0000\u1f77\u1f78"+
		"\u0005\u017d\u0000\u0000\u1f78\u1f82\u0005\u027e\u0000\u0000\u1f79\u1f82"+
		"\u0005\u018e\u0000\u0000\u1f7a\u1f7b\u0005\u017f\u0000\u0000\u1f7b\u1f82"+
		"\u0005\u027e\u0000\u0000\u1f7c\u1f7d\u0005\u017d\u0000\u0000\u1f7d\u1f7e"+
		"\u0005g\u0000\u0000\u1f7e\u1f82\u0005\u0281\u0000\u0000\u1f7f\u1f80\u0005"+
		"\u017f\u0000\u0000\u1f80\u1f82\u0005\u0281\u0000\u0000\u1f81\u1f77\u0001"+
		"\u0000\u0000\u0000\u1f81\u1f79\u0001\u0000\u0000\u0000\u1f81\u1f7a\u0001"+
		"\u0000\u0000\u0000\u1f81\u1f7c\u0001\u0000\u0000\u0000\u1f81\u1f7f\u0001"+
		"\u0000\u0000\u0000\u1f82\u1f83\u0001\u0000\u0000\u0000\u1f83\u1f85\u0003"+
		"\u0496\u024b\u0000\u1f84\u1f86\u0005M\u0000\u0000\u1f85\u1f84\u0001\u0000"+
		"\u0000\u0000\u1f85\u1f86\u0001\u0000\u0000\u0000\u1f86\u1fcf\u0001\u0000"+
		"\u0000\u0000\u1f87\u1f88\u0005\u027d\u0000\u0000\u1f88\u1fcf\u0003\u0496"+
		"\u024b\u0000\u1f89\u1f8b\u0005\u0298\u0000\u0000\u1f8a\u1f8c\u0003\u0496"+
		"\u024b\u0000\u1f8b\u1f8a\u0001\u0000\u0000\u0000\u1f8b\u1f8c\u0001\u0000"+
		"\u0000\u0000\u1f8c\u1f8e\u0001\u0000\u0000\u0000\u1f8d\u1f8f\u0003\u0498"+
		"\u024c\u0000\u1f8e\u1f8d\u0001\u0000\u0000\u0000\u1f8e\u1f8f\u0001\u0000"+
		"\u0000\u0000\u1f8f\u1fcf\u0001\u0000\u0000\u0000\u1f90\u1fcf\u0005\u009d"+
		"\u0000\u0000\u1f91\u1f93\u0005\u0253\u0000\u0000\u1f92\u1f94\u0003\u04a2"+
		"\u0251\u0000\u1f93\u1f92\u0001\u0000\u0000\u0000\u1f93\u1f94\u0001\u0000"+
		"\u0000\u0000\u1f94\u1fcf\u0001\u0000\u0000\u0000\u1f95\u1f97\u0005\u0250"+
		"\u0000\u0000\u1f96\u1f98\u0003\u04a2\u0251\u0000\u1f97\u1f96\u0001\u0000"+
		"\u0000\u0000\u1f97\u1f98\u0001\u0000\u0000\u0000\u1f98\u1fcf\u0001\u0000"+
		"\u0000\u0000\u1f99\u1f9b\u0005\u009a\u0000\u0000\u1f9a\u1f9c\u0003\u04a2"+
		"\u0251\u0000\u1f9b\u1f9a\u0001\u0000\u0000\u0000\u1f9b\u1f9c\u0001\u0000"+
		"\u0000\u0000\u1f9c\u1fcf\u0001\u0000\u0000\u0000\u1f9d\u1fcf\u0005\u0254"+
		"\u0000\u0000\u1f9e\u1fa0\u0005S\u0000\u0000\u1f9f\u1fa1\u0003\u0496\u024b"+
		"\u0000\u1fa0\u1f9f\u0001\u0000\u0000\u0000\u1fa0\u1fa1\u0001\u0000\u0000"+
		"\u0000\u1fa1\u1fcf\u0001\u0000\u0000\u0000\u1fa2\u1fcf\u0007\u008f\u0000"+
		"\u0000\u1fa3\u1fa4\u0005\u013f\u0000\u0000\u1fa4\u1fcf\u0005\u027d\u0000"+
		"\u0000\u1fa5\u1fa9\u0005\u013f\u0000\u0000\u1fa6\u1fa7\u0005g\u0000\u0000"+
		"\u1fa7\u1faa\u0005\u0281\u0000\u0000\u1fa8\u1faa\u0005\u027e\u0000\u0000"+
		"\u1fa9\u1fa6\u0001\u0000\u0000\u0000\u1fa9\u1fa8\u0001\u0000\u0000\u0000"+
		"\u1fa9\u1faa\u0001\u0000\u0000\u0000\u1faa\u1fac\u0001\u0000\u0000\u0000"+
		"\u1fab\u1fad\u0003\u049a\u024d\u0000\u1fac\u1fab\u0001\u0000\u0000\u0000"+
		"\u1fac\u1fad\u0001\u0000\u0000\u0000\u1fad\u1fcf\u0001\u0000\u0000\u0000"+
		"\u1fae\u1fb0\u0005\u0256\u0000\u0000\u1faf\u1fb1\u0003\u049a\u024d\u0000"+
		"\u1fb0\u1faf\u0001\u0000\u0000\u0000\u1fb0\u1fb1\u0001\u0000\u0000\u0000"+
		"\u1fb1\u1fcf\u0001\u0000\u0000\u0000\u1fb2\u1fb4\u0005\u024d\u0000\u0000"+
		"\u1fb3\u1fb5\u0003\u0496\u024b\u0000\u1fb4\u1fb3\u0001\u0000\u0000\u0000"+
		"\u1fb4\u1fb5\u0001\u0000\u0000\u0000\u1fb5\u1fb7\u0001\u0000\u0000\u0000"+
		"\u1fb6\u1fb8\u0003\u049a\u024d\u0000\u1fb7\u1fb6\u0001\u0000\u0000\u0000"+
		"\u1fb7\u1fb8\u0001\u0000\u0000\u0000\u1fb8\u1fcf\u0001\u0000\u0000\u0000"+
		"\u1fb9\u1fbb\u0005\u0164\u0000\u0000\u1fba\u1fbc\u0003\u049a\u024d\u0000"+
		"\u1fbb\u1fba\u0001\u0000\u0000\u0000\u1fbb\u1fbc\u0001\u0000\u0000\u0000"+
		"\u1fbc\u1fcf\u0001\u0000\u0000\u0000\u1fbd\u1fbf\u0005\u013e\u0000\u0000"+
		"\u1fbe\u1fc0\u0003\u049a\u024d\u0000\u1fbf\u1fbe\u0001\u0000\u0000\u0000"+
		"\u1fbf\u1fc0\u0001\u0000\u0000\u0000\u1fc0\u1fcf\u0001\u0000\u0000\u0000"+
		"\u1fc1\u1fc2\u0005\u00c7\u0000\u0000\u1fc2\u1fc4\u0003\u059e\u02cf\u0000"+
		"\u1fc3\u1fc5\u0003\u049a\u024d\u0000\u1fc4\u1fc3\u0001\u0000\u0000\u0000"+
		"\u1fc4\u1fc5\u0001\u0000\u0000\u0000\u1fc5\u1fcf\u0001\u0000\u0000\u0000"+
		"\u1fc6\u1fc7\u0005\u0207\u0000\u0000\u1fc7\u1fc9\u0003\u059e\u02cf\u0000"+
		"\u1fc8\u1fca\u0003\u049a\u024d\u0000\u1fc9\u1fc8\u0001\u0000\u0000\u0000"+
		"\u1fc9\u1fca\u0001\u0000\u0000\u0000\u1fca\u1fcf\u0001\u0000\u0000\u0000"+
		"\u1fcb\u1fcf\u0005\u0203\u0000\u0000\u1fcc\u1fcf\u0005\u0124\u0000\u0000"+
		"\u1fcd\u1fcf\u0007\u0090\u0000\u0000\u1fce\u1f3c\u0001\u0000\u0000\u0000"+
		"\u1fce\u1f48\u0001\u0000\u0000\u0000\u1fce\u1f50\u0001\u0000\u0000\u0000"+
		"\u1fce\u1f57\u0001\u0000\u0000\u0000\u1fce\u1f5b\u0001\u0000\u0000\u0000"+
		"\u1fce\u1f5c\u0001\u0000\u0000\u0000\u1fce\u1f63\u0001\u0000\u0000\u0000"+
		"\u1fce\u1f6a\u0001\u0000\u0000\u0000\u1fce\u1f71\u0001\u0000\u0000\u0000"+
		"\u1fce\u1f81\u0001\u0000\u0000\u0000\u1fce\u1f87\u0001\u0000\u0000\u0000"+
		"\u1fce\u1f89\u0001\u0000\u0000\u0000\u1fce\u1f90\u0001\u0000\u0000\u0000"+
		"\u1fce\u1f91\u0001\u0000\u0000\u0000\u1fce\u1f95\u0001\u0000\u0000\u0000"+
		"\u1fce\u1f99\u0001\u0000\u0000\u0000\u1fce\u1f9d\u0001\u0000\u0000\u0000"+
		"\u1fce\u1f9e\u0001\u0000\u0000\u0000\u1fce\u1fa2\u0001\u0000\u0000\u0000"+
		"\u1fce\u1fa3\u0001\u0000\u0000\u0000\u1fce\u1fa5\u0001\u0000\u0000\u0000"+
		"\u1fce\u1fae\u0001\u0000\u0000\u0000\u1fce\u1fb2\u0001\u0000\u0000\u0000"+
		"\u1fce\u1fb9\u0001\u0000\u0000\u0000\u1fce\u1fbd\u0001\u0000\u0000\u0000"+
		"\u1fce\u1fc1\u0001\u0000\u0000\u0000\u1fce\u1fc6\u0001\u0000\u0000\u0000"+
		"\u1fce\u1fcb\u0001\u0000\u0000\u0000\u1fce\u1fcc\u0001\u0000\u0000\u0000"+
		"\u1fce\u1fcd\u0001\u0000\u0000\u0000\u1fcf\u0491\u0001\u0000\u0000\u0000"+
		"\u1fd0\u1fd4\u0005\u017f\u0000\u0000\u1fd1\u1fd2\u0005\u017d\u0000\u0000"+
		"\u1fd2\u1fd4\u0005g\u0000\u0000\u1fd3\u1fd0\u0001\u0000\u0000\u0000\u1fd3"+
		"\u1fd1\u0001\u0000\u0000\u0000\u1fd4\u0493\u0001\u0000\u0000\u0000\u1fd5"+
		"\u1fdb\u0005\u01c7\u0000\u0000\u1fd6\u1fd8\u0005\u00b6\u0000\u0000\u1fd7"+
		"\u1fd9\u0005\u01b2\u0000\u0000\u1fd8\u1fd7\u0001\u0000\u0000\u0000\u1fd8"+
		"\u1fd9\u0001\u0000\u0000\u0000\u1fd9\u1fdb\u0001\u0000\u0000\u0000\u1fda"+
		"\u1fd5\u0001\u0000\u0000\u0000\u1fda\u1fd6\u0001\u0000\u0000\u0000\u1fdb"+
		"\u0495\u0001\u0000\u0000\u0000\u1fdc\u1fdf\u0005 \u0000\u0000\u1fdd\u1fe0"+
		"\u0003\u0592\u02c9\u0000\u1fde\u1fe0\u0005.\u0000\u0000\u1fdf\u1fdd\u0001"+
		"\u0000\u0000\u0000\u1fdf\u1fde\u0001\u0000\u0000\u0000\u1fe0\u1fe1\u0001"+
		"\u0000\u0000\u0000\u1fe1\u1fe2\u0005!\u0000\u0000\u1fe2\u0497\u0001\u0000"+
		"\u0000\u0000\u1fe3\u1fe5\u0007\u0091\u0000\u0000\u1fe4\u1fe3\u0001\u0000"+
		"\u0000\u0000\u1fe5\u1fe6\u0001\u0000\u0000\u0000\u1fe6\u1fe4\u0001\u0000"+
		"\u0000\u0000\u1fe6\u1fe7\u0001\u0000\u0000\u0000\u1fe7\u0499\u0001\u0000"+
		"\u0000\u0000\u1fe8\u1ff7\u0003\u049c\u024e\u0000\u1fe9\u1ff7\u0003\u049e"+
		"\u024f\u0000\u1fea\u1ff7\u0005Z\u0000\u0000\u1feb\u1fec\u0003\u03f0\u01f8"+
		"\u0000\u1fec\u1fee\u0003\u04a6\u0253\u0000\u1fed\u1fef\u0005M\u0000\u0000"+
		"\u1fee\u1fed\u0001\u0000\u0000\u0000\u1fee\u1fef\u0001\u0000\u0000\u0000"+
		"\u1fef\u1ff7\u0001\u0000\u0000\u0000\u1ff0\u1ff4\u0005M\u0000\u0000\u1ff1"+
		"\u1ff2\u0003\u03f0\u01f8\u0000\u1ff2\u1ff3\u0003\u04a6\u0253\u0000\u1ff3"+
		"\u1ff5\u0001\u0000\u0000\u0000\u1ff4\u1ff1\u0001\u0000\u0000\u0000\u1ff4"+
		"\u1ff5\u0001\u0000\u0000\u0000\u1ff5\u1ff7\u0001\u0000\u0000\u0000\u1ff6"+
		"\u1fe8\u0001\u0000\u0000\u0000\u1ff6\u1fe9\u0001\u0000\u0000\u0000\u1ff6"+
		"\u1fea\u0001\u0000\u0000\u0000\u1ff6\u1feb\u0001\u0000\u0000\u0000\u1ff6"+
		"\u1ff0\u0001\u0000\u0000\u0000\u1ff7\u049b\u0001\u0000\u0000\u0000\u1ff8"+
		"\u1ffa\u0005A\u0000\u0000\u1ff9\u1ffb\u0005M\u0000\u0000\u1ffa\u1ff9\u0001"+
		"\u0000\u0000\u0000\u1ffa\u1ffb\u0001\u0000\u0000\u0000\u1ffb\u1fff\u0001"+
		"\u0000\u0000\u0000\u1ffc\u1ffd\u0005M\u0000\u0000\u1ffd\u1fff\u0005A\u0000"+
		"\u0000\u1ffe\u1ff8\u0001\u0000\u0000\u0000\u1ffe\u1ffc\u0001\u0000\u0000"+
		"\u0000\u1fff\u049d\u0001\u0000\u0000\u0000\u2000\u2002\u0005\u0267\u0000"+
		"\u0000\u2001\u2003\u0005M\u0000\u0000\u2002\u2001\u0001\u0000\u0000\u0000"+
		"\u2002\u2003\u0001\u0000\u0000\u0000\u2003\u2007\u0001\u0000\u0000\u0000"+
		"\u2004\u2005\u0005M\u0000\u0000\u2005\u2007\u0005\u0267\u0000\u0000\u2006"+
		"\u2000\u0001\u0000\u0000\u0000\u2006\u2004\u0001\u0000\u0000\u0000\u2007"+
		"\u049f\u0001\u0000\u0000\u0000\u2008\u2009\u0005 \u0000\u0000\u2009\u200a"+
		"\u0003\u058e\u02c7\u0000\u200a\u200b\u0005!\u0000\u0000\u200b\u04a1\u0001"+
		"\u0000\u0000\u0000\u200c\u200d\u0005 \u0000\u0000\u200d\u200e\u0005\u0003"+
		"\u0000\u0000\u200e\u200f\u0005!\u0000\u0000\u200f\u04a3\u0001\u0000\u0000"+
		"\u0000\u2010\u2016\u0001\u0000\u0000\u0000\u2011\u2016\u0003\u05c4\u02e2"+
		"\u0000\u2012\u2013\u0005 \u0000\u0000\u2013\u2014\u0005\u0003\u0000\u0000"+
		"\u2014\u2016\u0005!\u0000\u0000\u2015\u2010\u0001\u0000\u0000\u0000\u2015"+
		"\u2011\u0001\u0000\u0000\u0000\u2015\u2012\u0001\u0000\u0000\u0000\u2016"+
		"\u04a5\u0001\u0000\u0000\u0000\u2017\u201c\u0003\u05bc\u02de\u0000\u2018"+
		"\u201c\u0005M\u0000\u0000\u2019\u201a\u0004\u0253r\u0000\u201a\u201c\u0005"+
		"\u00a6\u0000\u0000\u201b\u2017\u0001\u0000\u0000\u0000\u201b\u2018\u0001"+
		"\u0000\u0000\u0000\u201b\u2019\u0001\u0000\u0000\u0000\u201c\u04a7\u0001"+
		"\u0000\u0000\u0000\u201d\u2023\u0003\u05bc\u02de\u0000\u201e\u201f\u0004"+
		"\u0254s\u0000\u201f\u2023\u0005\u00a6\u0000\u0000\u2020\u2021\u0004\u0254"+
		"t\u0000\u2021\u2023\u0005M\u0000\u0000\u2022\u201d\u0001\u0000\u0000\u0000"+
		"\u2022\u201e\u0001\u0000\u0000\u0000\u2022\u2020\u0001\u0000\u0000\u0000"+
		"\u2023\u04a9\u0001\u0000\u0000\u0000\u2024\u202b\u0003\u04b2\u0259\u0000"+
		"\u2025\u2027\u0005\u001d\u0000\u0000\u2026\u2025\u0001\u0000\u0000\u0000"+
		"\u2026\u2027\u0001\u0000\u0000\u0000\u2027\u2028\u0001\u0000\u0000\u0000"+
		"\u2028\u202a\u0003\u04b2\u0259\u0000\u2029\u2026\u0001\u0000\u0000\u0000"+
		"\u202a\u202d\u0001\u0000\u0000\u0000\u202b\u2029\u0001\u0000\u0000\u0000"+
		"\u202b\u202c\u0001\u0000\u0000\u0000\u202c\u04ab\u0001\u0000\u0000\u0000"+
		"\u202d\u202b\u0001\u0000\u0000\u0000\u202e\u2030\u0003\u04aa\u0255\u0000"+
		"\u202f\u2031\u0003\u04ae\u0257\u0000\u2030\u202f\u0001\u0000\u0000\u0000"+
		"\u2030\u2031\u0001\u0000\u0000\u0000\u2031\u2034\u0001\u0000\u0000\u0000"+
		"\u2032\u2034\u0003\u04ae\u0257\u0000\u2033\u202e\u0001\u0000\u0000\u0000"+
		"\u2033\u2032\u0001\u0000\u0000\u0000\u2034\u04ad\u0001\u0000\u0000\u0000"+
		"\u2035\u2037\u0003\u04bc\u025e\u0000\u2036\u2038\u0003^/\u0000\u2037\u2036"+
		"\u0001\u0000\u0000\u0000\u2037\u2038\u0001\u0000\u0000\u0000\u2038\u203b"+
		"\u0001\u0000\u0000\u0000\u2039\u203b\u0003^/\u0000\u203a\u2035\u0001\u0000"+
		"\u0000\u0000\u203a\u2039\u0001\u0000\u0000\u0000\u203b\u04af\u0001\u0000"+
		"\u0000\u0000\u203c\u203e\u0003\u04b2\u0259\u0000\u203d\u203c\u0001\u0000"+
		"\u0000\u0000\u203e\u203f\u0001\u0000\u0000\u0000\u203f\u203d\u0001\u0000"+
		"\u0000\u0000\u203f\u2040\u0001\u0000\u0000\u0000\u2040\u04b1\u0001\u0000"+
		"\u0000\u0000\u2041\u2043\u0005\u00c6\u0000\u0000\u2042\u2044\u0005\u0006"+
		"\u0000\u0000\u2043\u2042\u0001\u0000\u0000\u0000\u2043\u2044\u0001\u0000"+
		"\u0000\u0000\u2044\u2045\u0001\u0000\u0000\u0000\u2045\u20ce\u0003\u0560"+
		"\u02b0\u0000\u2046\u2047\u0004\u0259u\u0000\u2047\u2049\u0005\u02d9\u0000"+
		"\u0000\u2048\u204a\u0003\u05c6\u02e3\u0000\u2049\u2048\u0001\u0000\u0000"+
		"\u0000\u2049\u204a\u0001\u0000\u0000\u0000\u204a\u204d\u0001\u0000\u0000"+
		"\u0000\u204b\u204e\u0005\u018b\u0000\u0000\u204c\u204e\u0003\u05bc\u02de"+
		"\u0000\u204d\u204b\u0001\u0000\u0000\u0000\u204d\u204c\u0001\u0000\u0000"+
		"\u0000\u204e\u20ce\u0001\u0000\u0000\u0000\u204f\u2051\u0005\u015c\u0000"+
		"\u0000\u2050\u2052\u0005\u0006\u0000\u0000\u2051\u2050\u0001\u0000\u0000"+
		"\u0000\u2051\u2052\u0001\u0000\u0000\u0000\u2052\u2053\u0001\u0000\u0000"+
		"\u0000\u2053\u20ce\u0003\u0590\u02c8\u0000\u2054\u2056\u0005\u016f\u0000"+
		"\u0000\u2055\u2057\u0005\u0006\u0000\u0000\u2056\u2055\u0001\u0000\u0000"+
		"\u0000\u2056\u2057\u0001\u0000\u0000\u0000\u2057\u2058\u0001\u0000\u0000"+
		"\u0000\u2058\u20ce\u0003\u0590\u02c8\u0000\u2059\u205b\u0005F\u0000\u0000"+
		"\u205a\u205c\u0005\u0006\u0000\u0000\u205b\u205a\u0001\u0000\u0000\u0000"+
		"\u205b\u205c\u0001\u0000\u0000\u0000\u205c\u205d\u0001\u0000\u0000\u0000"+
		"\u205d\u20ce\u0003\u0590\u02c8\u0000\u205e\u2060\u0005\u01a8\u0000\u0000"+
		"\u205f\u2061\u0005\u0006\u0000\u0000\u2060\u205f\u0001\u0000\u0000\u0000"+
		"\u2060\u2061\u0001\u0000\u0000\u0000\u2061\u2062\u0001\u0000\u0000\u0000"+
		"\u2062\u20ce\u0003\u05a0\u02d0\u0000\u2063\u2065\u0005v\u0000\u0000\u2064"+
		"\u2066\u0005\u0006\u0000\u0000\u2065\u2064\u0001\u0000\u0000\u0000\u2065"+
		"\u2066\u0001\u0000\u0000\u0000\u2066\u2067\u0001\u0000\u0000\u0000\u2067"+
		"\u20ce\u0003\u05a0\u02d0\u0000\u2068\u206a\u0005|\u0000\u0000\u2069\u206b"+
		"\u0005\u0006\u0000\u0000\u206a\u2069\u0001\u0000\u0000\u0000\u206a\u206b"+
		"\u0001\u0000\u0000\u0000\u206b\u206c\u0001\u0000\u0000\u0000\u206c\u20ce"+
		"\u0003\u05a2\u02d1\u0000\u206d\u206f\u0005\u00c2\u0000\u0000\u206e\u2070"+
		"\u0005\u0006\u0000\u0000\u206f\u206e\u0001\u0000\u0000\u0000\u206f\u2070"+
		"\u0001\u0000\u0000\u0000\u2070\u2071\u0001\u0000\u0000\u0000\u2071\u20ce"+
		"\u0003\u05a2\u02d1\u0000\u2072\u2074\u0005E\u0000\u0000\u2073\u2075\u0005"+
		"\u0006\u0000\u0000\u2074\u2073\u0001\u0000\u0000\u0000\u2074\u2075\u0001"+
		"\u0000\u0000\u0000\u2075\u2076\u0001\u0000\u0000\u0000\u2076\u20ce\u0003"+
		"\u0590\u02c8\u0000\u2077\u2079\u0005\u01a1\u0000\u0000\u2078\u207a\u0005"+
		"\u0006\u0000\u0000\u2079\u2078\u0001\u0000\u0000\u0000\u2079\u207a\u0001"+
		"\u0000\u0000\u0000\u207a\u207b\u0001\u0000\u0000\u0000\u207b\u20ce\u0003"+
		"\u04b4\u025a\u0000\u207c\u207e\u0007\u0092\u0000\u0000\u207d\u207f\u0005"+
		"\u0006\u0000\u0000\u207e\u207d\u0001\u0000\u0000\u0000\u207e\u207f\u0001"+
		"\u0000\u0000\u0000\u207f\u2080\u0001\u0000\u0000\u0000\u2080\u20ce\u0003"+
		"\u04b4\u025a\u0000\u2081\u2083\u0007\u0093\u0000\u0000\u2082\u2084\u0005"+
		"\u0006\u0000\u0000\u2083\u2082\u0001\u0000\u0000\u0000\u2083\u2084\u0001"+
		"\u0000\u0000\u0000\u2084\u2085\u0001\u0000\u0000\u0000\u2085\u20ce\u0003"+
		"\u058c\u02c6\u0000\u2086\u2088\u0005\u00aa\u0000\u0000\u2087\u2089\u0005"+
		"\u0006\u0000\u0000\u2088\u2087\u0001\u0000\u0000\u0000\u2088\u2089\u0001"+
		"\u0000\u0000\u0000\u2089\u208a\u0001\u0000\u0000\u0000\u208a\u20ce\u0003"+
		"\u058c\u02c6\u0000\u208b\u208d\u0005\u01f6\u0000\u0000\u208c\u208e\u0005"+
		"\u0006\u0000\u0000\u208d\u208c\u0001\u0000\u0000\u0000\u208d\u208e\u0001"+
		"\u0000\u0000\u0000\u208e\u208f\u0001\u0000\u0000\u0000\u208f\u20ce\u0007"+
		"\u0094\u0000\u0000\u2090\u2092\u0005\u0269\u0000\u0000\u2091\u2093\u0005"+
		"\u0006\u0000\u0000\u2092\u2091\u0001\u0000\u0000\u0000\u2092\u2093\u0001"+
		"\u0000\u0000\u0000\u2093\u2094\u0001\u0000\u0000\u0000\u2094\u2095\u0005"+
		" \u0000\u0000\u2095\u2096\u0003\u056a\u02b5\u0000\u2096\u2097\u0005!\u0000"+
		"\u0000\u2097\u20ce\u0001\u0000\u0000\u0000\u2098\u20ce\u0003\u04ba\u025d"+
		"\u0000\u2099\u20ce\u0003\u04b6\u025b\u0000\u209a\u209c\u0005\u0113\u0000"+
		"\u0000\u209b\u209d\u0005\u0006\u0000\u0000\u209c\u209b\u0001\u0000\u0000"+
		"\u0000\u209c\u209d\u0001\u0000\u0000\u0000\u209d\u209e\u0001\u0000\u0000"+
		"\u0000\u209e\u20ce\u0007\u0095\u0000\u0000\u209f\u20a0\u0005\u0099\u0000"+
		"\u0000\u20a0\u20a2\u0005\u00b0\u0000\u0000\u20a1\u20a3\u0005\u0006\u0000"+
		"\u0000\u20a2\u20a1\u0001\u0000\u0000\u0000\u20a2\u20a3\u0001\u0000\u0000"+
		"\u0000\u20a3\u20a4\u0001\u0000\u0000\u0000\u20a4\u20ce\u0003\u05a2\u02d1"+
		"\u0000\u20a5\u20a6\u0005\u010c\u0000\u0000\u20a6\u20a8\u0005\u00b0\u0000"+
		"\u0000\u20a7\u20a9\u0005\u0006\u0000\u0000\u20a8\u20a7\u0001\u0000\u0000"+
		"\u0000\u20a8\u20a9\u0001\u0000\u0000\u0000\u20a9\u20aa\u0001\u0000\u0000"+
		"\u0000\u20aa\u20ce\u0003\u05a2\u02d1\u0000\u20ab\u20ad\u0005\u0246\u0000"+
		"\u0000\u20ac\u20ae\u0005\u0006\u0000\u0000\u20ad\u20ac\u0001\u0000\u0000"+
		"\u0000\u20ad\u20ae\u0001\u0000\u0000\u0000\u20ae\u20af\u0001\u0000\u0000"+
		"\u0000\u20af\u20ce\u0003\u0580\u02c0\u0000\u20b0\u20b1\u0005\u0233\u0000"+
		"\u0000\u20b1\u20ce\u0007\u0096\u0000\u0000\u20b2\u20b4\u0005\u007f\u0000"+
		"\u0000\u20b3\u20b5\u0005\u0006\u0000\u0000\u20b4\u20b3\u0001\u0000\u0000"+
		"\u0000\u20b4\u20b5\u0001\u0000\u0000\u0000\u20b5\u20b6\u0001\u0000\u0000"+
		"\u0000\u20b6\u20ce\u0003\u05a2\u02d1\u0000\u20b7\u20b9\u0005\u0126\u0000"+
		"\u0000\u20b8\u20ba\u0005\u0006\u0000\u0000\u20b9\u20b8\u0001\u0000\u0000"+
		"\u0000\u20b9\u20ba\u0001\u0000\u0000\u0000\u20ba\u20bb\u0001\u0000\u0000"+
		"\u0000\u20bb\u20ce\u0003\u0590\u02c8\u0000\u20bc\u20bd\u0004\u0259v\u0000"+
		"\u20bd\u20be\u0005\u0229\u0000\u0000\u20be\u20ce\u0005\u0259\u0000\u0000"+
		"\u20bf\u20c0\u0004\u0259w\u0000\u20c0\u20c2\u0005\u02f5\u0000\u0000\u20c1"+
		"\u20c3\u0005\u0006\u0000\u0000\u20c2\u20c1\u0001\u0000\u0000\u0000\u20c2"+
		"\u20c3\u0001\u0000\u0000\u0000\u20c3\u20c4\u0001\u0000\u0000\u0000\u20c4"+
		"\u20ce\u0003\u05ce\u02e7\u0000\u20c5\u20c6\u0004\u0259x\u0000\u20c6\u20c8"+
		"\u0005\u02f6\u0000\u0000\u20c7\u20c9\u0005\u0006\u0000\u0000\u20c8\u20c7"+
		"\u0001\u0000\u0000\u0000\u20c8\u20c9\u0001\u0000\u0000\u0000\u20c9\u20ca"+
		"\u0001\u0000\u0000\u0000\u20ca\u20ce\u0003\u05ce\u02e7\u0000\u20cb\u20cc"+
		"\u0004\u0259y\u0000\u20cc\u20ce\u0003\u009aM\u0000\u20cd\u2041\u0001\u0000"+
		"\u0000\u0000\u20cd\u2046\u0001\u0000\u0000\u0000\u20cd\u204f\u0001\u0000"+
		"\u0000\u0000\u20cd\u2054\u0001\u0000\u0000\u0000\u20cd\u2059\u0001\u0000"+
		"\u0000\u0000\u20cd\u205e\u0001\u0000\u0000\u0000\u20cd\u2063\u0001\u0000"+
		"\u0000\u0000\u20cd\u2068\u0001\u0000\u0000\u0000\u20cd\u206d\u0001\u0000"+
		"\u0000\u0000\u20cd\u2072\u0001\u0000\u0000\u0000\u20cd\u2077\u0001\u0000"+
		"\u0000\u0000\u20cd\u207c\u0001\u0000\u0000\u0000\u20cd\u2081\u0001\u0000"+
		"\u0000\u0000\u20cd\u2086\u0001\u0000\u0000\u0000\u20cd\u208b\u0001\u0000"+
		"\u0000\u0000\u20cd\u2090\u0001\u0000\u0000\u0000\u20cd\u2098\u0001\u0000"+
		"\u0000\u0000\u20cd\u2099\u0001\u0000\u0000\u0000\u20cd\u209a\u0001\u0000"+
		"\u0000\u0000\u20cd\u209f\u0001\u0000\u0000\u0000\u20cd\u20a5\u0001\u0000"+
		"\u0000\u0000\u20cd\u20ab\u0001\u0000\u0000\u0000\u20cd\u20b0\u0001\u0000"+
		"\u0000\u0000\u20cd\u20b2\u0001\u0000\u0000\u0000\u20cd\u20b7\u0001\u0000"+
		"\u0000\u0000\u20cd\u20bc\u0001\u0000\u0000\u0000\u20cd\u20bf\u0001\u0000"+
		"\u0000\u0000\u20cd\u20c5\u0001\u0000\u0000\u0000\u20cd\u20cb\u0001\u0000"+
		"\u0000\u0000\u20ce\u04b3\u0001\u0000\u0000\u0000\u20cf\u20d2\u0003\u058c"+
		"\u02c6\u0000\u20d0\u20d2\u0005\u00a6\u0000\u0000\u20d1\u20cf\u0001\u0000"+
		"\u0000\u0000\u20d1\u20d0\u0001\u0000\u0000\u0000\u20d2\u04b5\u0001\u0000"+
		"\u0000\u0000\u20d3\u20d5\u0005\u00a6\u0000\u0000\u20d4\u20d3\u0001\u0000"+
		"\u0000\u0000\u20d4\u20d5\u0001\u0000\u0000\u0000\u20d5\u20d6\u0001\u0000"+
		"\u0000\u0000\u20d6\u20d8\u0005p\u0000\u0000\u20d7\u20d9\u0005\u0006\u0000"+
		"\u0000\u20d8\u20d7\u0001\u0000\u0000\u0000\u20d8\u20d9\u0001\u0000\u0000"+
		"\u0000\u20d9\u20da\u0001\u0000\u0000\u0000\u20da\u20db\u0003\u04a8\u0254"+
		"\u0000\u20db\u04b7\u0001\u0000\u0000\u0000\u20dc\u20de\u0005\u00a6\u0000"+
		"\u0000\u20dd\u20dc\u0001\u0000\u0000\u0000\u20dd\u20de\u0001\u0000\u0000"+
		"\u0000\u20de\u20df\u0001\u0000\u0000\u0000\u20df\u20e1\u0005\u00c2\u0000"+
		"\u0000\u20e0\u20e2\u0005\u0006\u0000\u0000\u20e1\u20e0\u0001\u0000\u0000"+
		"\u0000\u20e1\u20e2\u0001\u0000\u0000\u0000\u20e2\u20e3\u0001\u0000\u0000"+
		"\u0000\u20e3\u20e4\u0003\u05a0\u02d0\u0000\u20e4\u04b9\u0001\u0000\u0000"+
		"\u0000\u20e5\u20e7\u0005\u00a6\u0000\u0000\u20e6\u20e5\u0001\u0000\u0000"+
		"\u0000\u20e6\u20e7\u0001\u0000\u0000\u0000\u20e7\u20e8\u0001\u0000\u0000"+
		"\u0000\u20e8\u20ea\u0003\u03f0\u01f8\u0000\u20e9\u20eb\u0005\u0006\u0000"+
		"\u0000\u20ea\u20e9\u0001\u0000\u0000\u0000\u20ea\u20eb\u0001\u0000\u0000"+
		"\u0000\u20eb\u20ec\u0001\u0000\u0000\u0000\u20ec\u20ed\u0003\u04a6\u0253"+
		"\u0000\u20ed\u04bb\u0001\u0000\u0000\u0000\u20ee\u20ef\u0005\u01a7\u0000"+
		"\u0000\u20ef\u20f0\u0005Y\u0000\u0000\u20f0\u20f3\u0003\u04be\u025f\u0000"+
		"\u20f1\u20f2\u0005\u01a6\u0000\u0000\u20f2\u20f4\u0003\u058e\u02c7\u0000"+
		"\u20f3\u20f1\u0001\u0000\u0000\u0000\u20f3\u20f4\u0001\u0000\u0000\u0000"+
		"\u20f4\u20f6\u0001\u0000\u0000\u0000\u20f5\u20f7\u0003\u04c0\u0260\u0000"+
		"\u20f6\u20f5\u0001\u0000\u0000\u0000\u20f6\u20f7\u0001\u0000\u0000\u0000"+
		"\u20f7\u20f9\u0001\u0000\u0000\u0000\u20f8\u20fa\u0003\u04c4\u0262\u0000"+
		"\u20f9\u20f8\u0001\u0000\u0000\u0000\u20f9\u20fa\u0001\u0000\u0000\u0000"+
		"\u20fa\u04bd\u0001\u0000\u0000\u0000\u20fb\u20fd\u0005\u0133\u0000\u0000"+
		"\u20fc\u20fb\u0001\u0000\u0000\u0000\u20fc\u20fd\u0001\u0000\u0000\u0000"+
		"\u20fd\u20fe\u0001\u0000\u0000\u0000\u20fe\u2100\u0005\u0127\u0000\u0000"+
		"\u20ff\u2101\u0003\u04c2\u0261\u0000\u2100\u20ff\u0001\u0000\u0000\u0000"+
		"\u2100\u2101\u0001\u0000\u0000\u0000\u2101\u2102\u0001\u0000\u0000\u0000"+
		"\u2102\u2104\u0005 \u0000\u0000\u2103\u2105\u0003\u0582\u02c1\u0000\u2104"+
		"\u2103\u0001\u0000\u0000\u0000\u2104\u2105\u0001\u0000\u0000\u0000\u2105"+
		"\u2106\u0001\u0000\u0000\u0000\u2106\u211d\u0005!\u0000\u0000\u2107\u2109"+
		"\u0005\u0133\u0000\u0000\u2108\u2107\u0001\u0000\u0000\u0000\u2108\u2109"+
		"\u0001\u0000\u0000\u0000\u2109\u210a\u0001\u0000\u0000\u0000\u210a\u210b"+
		"\u0005\u00fc\u0000\u0000\u210b\u210c\u0005 \u0000\u0000\u210c\u210d\u0003"+
		"\u039a\u01cd\u0000\u210d\u210e\u0005!\u0000\u0000\u210e\u211d\u0001\u0000"+
		"\u0000\u0000\u210f\u211a\u0007\u0097\u0000\u0000\u2110\u2111\u0005 \u0000"+
		"\u0000\u2111\u2112\u0003\u039a\u01cd\u0000\u2112\u2113\u0005!\u0000\u0000"+
		"\u2113\u211b\u0001\u0000\u0000\u0000\u2114\u2115\u0005r\u0000\u0000\u2115"+
		"\u2117\u0005 \u0000\u0000\u2116\u2118\u0003\u0582\u02c1\u0000\u2117\u2116"+
		"\u0001\u0000\u0000\u0000\u2117\u2118\u0001\u0000\u0000\u0000\u2118\u2119"+
		"\u0001\u0000\u0000\u0000\u2119\u211b\u0005!\u0000\u0000\u211a\u2110\u0001"+
		"\u0000\u0000\u0000\u211a\u2114\u0001\u0000\u0000\u0000\u211b\u211d\u0001"+
		"\u0000\u0000\u0000\u211c\u20fc\u0001\u0000\u0000\u0000\u211c\u2108\u0001"+
		"\u0000\u0000\u0000\u211c\u210f\u0001\u0000\u0000\u0000\u211d\u04bf\u0001"+
		"\u0000\u0000\u0000\u211e\u211f\u0005\u023b\u0000\u0000\u211f\u2121\u0005"+
		"Y\u0000\u0000\u2120\u2122\u0005\u0133\u0000\u0000\u2121\u2120\u0001\u0000"+
		"\u0000\u0000\u2121\u2122\u0001\u0000\u0000\u0000\u2122\u212d\u0001\u0000"+
		"\u0000\u0000\u2123\u2124\u0005\u00fc\u0000\u0000\u2124\u2125\u0005 \u0000"+
		"\u0000\u2125\u2126\u0003\u039a\u01cd\u0000\u2126\u2127\u0005!\u0000\u0000"+
		"\u2127\u212e\u0001\u0000\u0000\u0000\u2128\u212a\u0005\u0127\u0000\u0000"+
		"\u2129\u212b\u0003\u04c2\u0261\u0000\u212a\u2129\u0001\u0000\u0000\u0000"+
		"\u212a\u212b\u0001\u0000\u0000\u0000\u212b\u212c\u0001\u0000\u0000\u0000"+
		"\u212c\u212e\u0003\u0584\u02c2\u0000\u212d\u2123\u0001\u0000\u0000\u0000"+
		"\u212d\u2128\u0001\u0000\u0000\u0000\u212e\u2131\u0001\u0000\u0000\u0000"+
		"\u212f\u2130\u0005\u023a\u0000\u0000\u2130\u2132\u0003\u058e\u02c7\u0000"+
		"\u2131\u212f\u0001\u0000\u0000\u0000\u2131\u2132\u0001\u0000\u0000\u0000"+
		"\u2132\u04c1\u0001\u0000\u0000\u0000\u2133\u2134\u00058\u0000\u0000\u2134"+
		"\u2135\u0005\u0006\u0000\u0000\u2135\u2136\u0003\u058e\u02c7\u0000\u2136"+
		"\u04c3\u0001\u0000\u0000\u0000\u2137\u2138\u0005 \u0000\u0000\u2138\u213d"+
		"\u0003\u04c6\u0263\u0000\u2139\u213a\u0005\u001d\u0000\u0000\u213a\u213c"+
		"\u0003\u04c6\u0263\u0000\u213b\u2139\u0001\u0000\u0000\u0000\u213c\u213f"+
		"\u0001\u0000\u0000\u0000\u213d\u213b\u0001\u0000\u0000\u0000\u213d\u213e"+
		"\u0001\u0000\u0000\u0000\u213e\u2140\u0001\u0000\u0000\u0000\u213f\u213d"+
		"\u0001\u0000\u0000\u0000\u2140\u2141\u0005!\u0000\u0000\u2141\u04c5\u0001"+
		"\u0000\u0000\u0000\u2142\u2143\u0005\u01a7\u0000\u0000\u2143\u214e\u0003"+
		"\u0580\u02c0\u0000\u2144\u2145\u0005\u027b\u0000\u0000\u2145\u2146\u0005"+
		"\u012f\u0000\u0000\u2146\u2149\u0005\u024e\u0000\u0000\u2147\u214a\u0003"+
		"\u04ce\u0267\u0000\u2148\u214a\u0005\u0161\u0000\u0000\u2149\u2147\u0001"+
		"\u0000\u0000\u0000\u2149\u2148\u0001\u0000\u0000\u0000\u214a\u214f\u0001"+
		"\u0000\u0000\u0000\u214b\u214c\u0005\u027b\u0000\u0000\u214c\u214d\u0005"+
		"\u011a\u0000\u0000\u214d\u214f\u0003\u04c8\u0264\u0000\u214e\u2144\u0001"+
		"\u0000\u0000\u0000\u214e\u214b\u0001\u0000\u0000\u0000\u214e\u214f\u0001"+
		"\u0000\u0000\u0000\u214f\u2153\u0001\u0000\u0000\u0000\u2150\u2152\u0003"+
		"\u04ca\u0265\u0000\u2151\u2150\u0001\u0000\u0000\u0000\u2152\u2155\u0001"+
		"\u0000\u0000\u0000\u2153\u2151\u0001\u0000\u0000\u0000\u2153\u2154\u0001"+
		"\u0000\u0000\u0000\u2154\u2161\u0001\u0000\u0000\u0000\u2155\u2153\u0001"+
		"\u0000\u0000\u0000\u2156\u2157\u0005 \u0000\u0000\u2157\u215c\u0003\u04cc"+
		"\u0266\u0000\u2158\u2159\u0005\u001d\u0000\u0000\u2159\u215b\u0003\u04cc"+
		"\u0266\u0000\u215a\u2158\u0001\u0000\u0000\u0000\u215b\u215e\u0001\u0000"+
		"\u0000\u0000\u215c\u215a\u0001\u0000\u0000\u0000\u215c\u215d\u0001\u0000"+
		"\u0000\u0000\u215d\u215f\u0001\u0000\u0000\u0000\u215e\u215c\u0001\u0000"+
		"\u0000\u0000\u215f\u2160\u0005!\u0000\u0000\u2160\u2162\u0001\u0000\u0000"+
		"\u0000\u2161\u2156\u0001\u0000\u0000\u0000\u2161\u2162\u0001\u0000\u0000"+
		"\u0000\u2162\u04c7\u0001\u0000\u0000\u0000\u2163\u2170\u0003\u04ce\u0267"+
		"\u0000\u2164\u2165\u0005 \u0000\u0000\u2165\u216a\u0003\u04ce\u0267\u0000"+
		"\u2166\u2167\u0005\u001d\u0000\u0000\u2167\u2169\u0003\u04ce\u0267\u0000"+
		"\u2168\u2166\u0001\u0000\u0000\u0000\u2169\u216c\u0001\u0000\u0000\u0000"+
		"\u216a\u2168\u0001\u0000\u0000\u0000\u216a\u216b\u0001\u0000\u0000\u0000"+
		"\u216b\u216d\u0001\u0000\u0000\u0000\u216c\u216a\u0001\u0000\u0000\u0000"+
		"\u216d\u216e\u0005!\u0000\u0000\u216e\u2170\u0001\u0000\u0000\u0000\u216f"+
		"\u2163\u0001\u0000\u0000\u0000\u216f\u2164\u0001\u0000\u0000\u0000\u2170"+
		"\u04c9\u0001\u0000\u0000\u0000\u2171\u2173\u0005\u0246\u0000\u0000\u2172"+
		"\u2174\u0005\u0006\u0000\u0000\u2173\u2172\u0001\u0000\u0000\u0000\u2173"+
		"\u2174\u0001\u0000\u0000\u0000\u2174\u2175\u0001\u0000\u0000\u0000\u2175"+
		"\u2194\u0003\u0580\u02c0\u0000\u2176\u2178\u0005\u0233\u0000\u0000\u2177"+
		"\u2176\u0001\u0000\u0000\u0000\u2177\u2178\u0001\u0000\u0000\u0000\u2178"+
		"\u2179\u0001\u0000\u0000\u0000\u2179\u217b\u0005\u00c6\u0000\u0000\u217a"+
		"\u217c\u0005\u0006\u0000\u0000\u217b\u217a\u0001\u0000\u0000\u0000\u217b"+
		"\u217c\u0001\u0000\u0000\u0000\u217c\u217d\u0001\u0000\u0000\u0000\u217d"+
		"\u2194\u0003\u0560\u02b0\u0000\u217e\u2180\u0005\u0184\u0000\u0000\u217f"+
		"\u2181\u0005\u0006\u0000\u0000\u2180\u217f\u0001\u0000\u0000\u0000\u2180"+
		"\u2181\u0001\u0000\u0000\u0000\u2181\u2182\u0001\u0000\u0000\u0000\u2182"+
		"\u2194\u0003\u058e\u02c7\u0000\u2183\u2185\u0007\u0098\u0000\u0000\u2184"+
		"\u2186\u0005\u0006\u0000\u0000\u2185\u2184\u0001\u0000\u0000\u0000\u2185"+
		"\u2186\u0001\u0000\u0000\u0000\u2186\u2187\u0001\u0000\u0000\u0000\u2187"+
		"\u2194\u0003\u058e\u02c7\u0000\u2188\u2189\u0007\u0099\u0000\u0000\u2189"+
		"\u218b\u0005\u00b0\u0000\u0000\u218a\u218c\u0005\u0006\u0000\u0000\u218b"+
		"\u218a\u0001\u0000\u0000\u0000\u218b\u218c\u0001\u0000\u0000\u0000\u218c"+
		"\u218d\u0001\u0000\u0000\u0000\u218d\u2194\u0003\u05a6\u02d3\u0000\u218e"+
		"\u2190\u0005v\u0000\u0000\u218f\u2191\u0005\u0006\u0000\u0000\u2190\u218f"+
		"\u0001\u0000\u0000\u0000\u2190\u2191\u0001\u0000\u0000\u0000\u2191\u2192"+
		"\u0001\u0000\u0000\u0000\u2192\u2194\u0003\u05a6\u02d3\u0000\u2193\u2171"+
		"\u0001\u0000\u0000\u0000\u2193\u2177\u0001\u0000\u0000\u0000\u2193\u217e"+
		"\u0001\u0000\u0000\u0000\u2193\u2183\u0001\u0000\u0000\u0000\u2193\u2188"+
		"\u0001\u0000\u0000\u0000\u2193\u218e\u0001\u0000\u0000\u0000\u2194\u04cb"+
		"\u0001\u0000\u0000\u0000\u2195\u2196\u0005\u023b\u0000\u0000\u2196\u219a"+
		"\u0003\u05bc\u02de\u0000\u2197\u2199\u0003\u04ca\u0265\u0000\u2198\u2197"+
		"\u0001\u0000\u0000\u0000\u2199\u219c\u0001\u0000\u0000\u0000\u219a\u2198"+
		"\u0001\u0000\u0000\u0000\u219a\u219b\u0001\u0000\u0000\u0000\u219b\u04cd"+
		"\u0001\u0000\u0000\u0000\u219c\u219a\u0001\u0000\u0000\u0000\u219d\u219e"+
		"\u0005 \u0000\u0000\u219e\u21a3\u0003\u04d0\u0268\u0000\u219f\u21a0\u0005"+
		"\u001d\u0000\u0000\u21a0\u21a2\u0003\u04d0\u0268\u0000\u21a1\u219f\u0001"+
		"\u0000\u0000\u0000\u21a2\u21a5\u0001\u0000\u0000\u0000\u21a3\u21a1\u0001"+
		"\u0000\u0000\u0000\u21a3\u21a4\u0001\u0000\u0000\u0000\u21a4\u21a6\u0001"+
		"\u0000\u0000\u0000\u21a5\u21a3\u0001\u0000\u0000\u0000\u21a6\u21a7\u0005"+
		"!\u0000\u0000\u21a7\u04cf\u0001\u0000\u0000\u0000\u21a8\u21ab\u0003\u039a"+
		"\u01cd\u0000\u21a9\u21ab\u0005\u0161\u0000\u0000\u21aa\u21a8\u0001\u0000"+
		"\u0000\u0000\u21aa\u21a9\u0001\u0000\u0000\u0000\u21ab\u04d1\u0001\u0000"+
		"\u0000\u0000\u21ac\u21ad\u0005\u00a8\u0000\u0000\u21ad\u21ae\u0005\u0006"+
		"\u0000\u0000\u21ae\u21af\u0003\u051c\u028e\u0000\u21af\u04d3\u0001\u0000"+
		"\u0000\u0000\u21b0\u21b1\u0005\u0107\u0000\u0000\u21b1\u21b2\u0005\u00d1"+
		"\u0000\u0000\u21b2\u04d5\u0001\u0000\u0000\u0000\u21b3\u21b4\u0003\u04d4"+
		"\u026a\u0000\u21b4\u21b5\u0003\u04d8\u026c\u0000\u21b5\u04d7\u0001\u0000"+
		"\u0000\u0000\u21b6\u21be\u0003\u0580\u02c0\u0000\u21b7\u21bb\u0004\u026c"+
		"z\u0000\u21b8\u21bc\u0003\u0586\u02c3\u0000\u21b9\u21ba\u0005\u00a6\u0000"+
		"\u0000\u21ba\u21bc\u0003\u058a\u02c5\u0000\u21bb\u21b8\u0001\u0000\u0000"+
		"\u0000\u21bb\u21b9\u0001\u0000\u0000\u0000\u21bc\u21be\u0001\u0000\u0000"+
		"\u0000\u21bd\u21b6\u0001\u0000\u0000\u0000\u21bd\u21b7\u0001\u0000\u0000"+
		"\u0000\u21be\u04d9\u0001\u0000\u0000\u0000\u21bf\u21c0\u0005\u0107\u0000"+
		"\u0000\u21c0\u21c1\u0003\u03f2\u01f9\u0000\u21c1\u21c2\u0005\u00d1\u0000"+
		"\u0000\u21c2\u04db\u0001\u0000\u0000\u0000\u21c3\u21c4\u0005\u0108\u0000"+
		"\u0000\u21c4\u21c5\u0005\u026b\u0000\u0000\u21c5\u21c6\u0005\u0273\u0000"+
		"\u0000\u21c6\u04dd\u0001\u0000\u0000\u0000\u21c7\u21c9\u0007\u009a\u0000"+
		"\u0000\u21c8\u21c7\u0001\u0000\u0000\u0000\u21c8\u21c9\u0001\u0000\u0000"+
		"\u0000\u21c9\u21ca\u0001\u0000\u0000\u0000\u21ca\u21cb\u0003\u04e0\u0270"+
		"\u0000\u21cb\u04df\u0001\u0000\u0000\u0000\u21cc\u21cd\u0003\u056e\u02b7"+
		"\u0000\u21cd\u21ce\u0003\u04e4\u0272\u0000\u21ce\u04e1\u0001\u0000\u0000"+
		"\u0000\u21cf\u21d0\u0005p\u0000\u0000\u21d0\u21d1\u0003\u04a8\u0254\u0000"+
		"\u21d1\u04e3\u0001\u0000\u0000\u0000\u21d2\u21d4\u0003\u0490\u0248\u0000"+
		"\u21d3\u21d5\u0003\u04e2\u0271\u0000\u21d4\u21d3\u0001\u0000\u0000\u0000"+
		"\u21d4\u21d5\u0001\u0000\u0000\u0000\u21d5\u04e5\u0001\u0000\u0000\u0000"+
		"\u21d6\u21d7\u0005 \u0000\u0000\u21d7\u21d8\u0003\u053c\u029e\u0000\u21d8"+
		"\u21d9\u0005\u001d\u0000\u0000\u21d9\u21da\u0003\u053c\u029e\u0000\u21da"+
		"\u21db\u0005!\u0000\u0000\u21db\u04e7\u0001\u0000\u0000\u0000\u21dc\u21e1"+
		"\u0003\u054c\u02a6\u0000\u21dd\u21de\u0005\u001d\u0000\u0000\u21de\u21e0"+
		"\u0003\u054c\u02a6\u0000\u21df\u21dd\u0001\u0000\u0000\u0000\u21e0\u21e3"+
		"\u0001\u0000\u0000\u0000\u21e1\u21df\u0001\u0000\u0000\u0000\u21e1\u21e2"+
		"\u0001\u0000\u0000\u0000\u21e2\u04e9\u0001\u0000\u0000\u0000\u21e3\u21e1"+
		"\u0001\u0000\u0000\u0000\u21e4\u21e9\u0003\u04ec\u0276\u0000\u21e5\u21e6"+
		"\u0005\u001d\u0000\u0000\u21e6\u21e8\u0003\u04ec\u0276\u0000\u21e7\u21e5"+
		"\u0001\u0000\u0000\u0000\u21e8\u21eb\u0001\u0000\u0000\u0000\u21e9\u21e7"+
		"\u0001\u0000\u0000\u0000\u21e9\u21ea\u0001\u0000\u0000\u0000\u21ea\u04eb"+
		"\u0001\u0000\u0000\u0000\u21eb\u21e9\u0001\u0000\u0000\u0000\u21ec\u21ed"+
		"\u0003\u0530\u0298\u0000\u21ed\u21f0\u0005\u0006\u0000\u0000\u21ee\u21f1"+
		"\u0003\u0390\u01c8\u0000\u21ef\u21f1\u0005\u00a6\u0000\u0000\u21f0\u21ee"+
		"\u0001\u0000\u0000\u0000\u21f0\u21ef\u0001\u0000\u0000\u0000\u21f1\u04ed"+
		"\u0001\u0000\u0000\u0000\u21f2\u21f3\u0003\u03f0\u01f8\u0000\u21f3\u21f4"+
		"\u0003\u04a6\u0253\u0000\u21f4\u04ef\u0001\u0000\u0000\u0000\u21f5\u21f7"+
		"\u0005r\u0000\u0000\u21f6\u21f8\u0003\u04f2\u0279\u0000\u21f7\u21f6\u0001"+
		"\u0000\u0000\u0000\u21f8\u21f9\u0001\u0000\u0000\u0000\u21f9\u21f7\u0001"+
		"\u0000\u0000\u0000\u21f9\u21fa\u0001\u0000\u0000\u0000\u21fa\u04f1\u0001"+
		"\u0000\u0000\u0000\u21fb\u21fc\u0005\u024c\u0000\u0000\u21fc\u21fd\u0005"+
		"Y\u0000\u0000\u21fd\u2208\u0003\u05a2\u02d1\u0000\u21fe\u2200\u0005\u019a"+
		"\u0000\u0000\u21ff\u21fe\u0001\u0000\u0000\u0000\u21ff\u2200\u0001\u0000"+
		"\u0000\u0000\u2200\u2201\u0001\u0000\u0000\u0000\u2201\u2202\u0005\u00c1"+
		"\u0000\u0000\u2202\u2203\u0005Y\u0000\u0000\u2203\u2208\u0003\u05a2\u02d1"+
		"\u0000\u2204\u2205\u0005\u00ca\u0000\u0000\u2205\u2206\u0005Y\u0000\u0000"+
		"\u2206\u2208\u0003\u05a2\u02d1\u0000\u2207\u21fb\u0001\u0000\u0000\u0000"+
		"\u2207\u21ff\u0001\u0000\u0000\u0000\u2207\u2204\u0001\u0000\u0000\u0000"+
		"\u2208\u04f3\u0001\u0000\u0000\u0000\u2209\u220b\u0005\u0134\u0000\u0000"+
		"\u220a\u220c\u0003\u04f6\u027b\u0000\u220b\u220a\u0001\u0000\u0000\u0000"+
		"\u220c\u220d\u0001\u0000\u0000\u0000\u220d\u220b\u0001\u0000\u0000\u0000"+
		"\u220d\u220e\u0001\u0000\u0000\u0000\u220e\u04f5\u0001\u0000\u0000\u0000"+
		"\u220f\u2210\u0007\u009b\u0000\u0000\u2210\u2211\u0005Y\u0000\u0000\u2211"+
		"\u2212\u0003\u05a2\u02d1\u0000\u2212\u04f7\u0001\u0000\u0000\u0000\u2213"+
		"\u2218\u0003\u051c\u028e\u0000\u2214\u2215\u0005\u001d\u0000\u0000\u2215"+
		"\u2217\u0003\u051c\u028e\u0000\u2216\u2214\u0001\u0000\u0000\u0000\u2217"+
		"\u221a\u0001\u0000\u0000\u0000\u2218\u2216\u0001\u0000\u0000\u0000\u2218"+
		"\u2219\u0001\u0000\u0000\u0000\u2219\u04f9\u0001\u0000\u0000\u0000\u221a"+
		"\u2218\u0001\u0000\u0000\u0000\u221b\u2220\u0003\u04fc\u027e\u0000\u221c"+
		"\u221d\u0005\u001d\u0000\u0000\u221d\u221f\u0003\u04fc\u027e\u0000\u221e"+
		"\u221c\u0001\u0000\u0000\u0000\u221f\u2222\u0001\u0000\u0000\u0000\u2220"+
		"\u221e\u0001\u0000\u0000\u0000\u2220\u2221\u0001\u0000\u0000\u0000\u2221"+
		"\u04fb\u0001\u0000\u0000\u0000\u2222\u2220\u0001\u0000\u0000\u0000\u2223"+
		"\u222d\u0003\u051c\u028e\u0000\u2224\u2226\u0003\u0500\u0280\u0000\u2225"+
		"\u2227\u0003\u04fe\u027f\u0000\u2226\u2225\u0001\u0000\u0000\u0000\u2226"+
		"\u2227\u0001\u0000\u0000\u0000\u2227\u222e\u0001\u0000\u0000\u0000\u2228"+
		"\u222a\u0003\u0506\u0283\u0000\u2229\u222b\u0003\u050e\u0287\u0000\u222a"+
		"\u2229\u0001\u0000\u0000\u0000\u222a\u222b\u0001\u0000\u0000\u0000\u222b"+
		"\u222e\u0001\u0000\u0000\u0000\u222c\u222e\u0003\u04fe\u027f\u0000\u222d"+
		"\u2224\u0001\u0000\u0000\u0000\u222d\u2228\u0001\u0000\u0000\u0000\u222d"+
		"\u222c\u0001\u0000\u0000\u0000\u222d\u222e\u0001\u0000\u0000\u0000\u222e"+
		"\u04fd\u0001\u0000\u0000\u0000\u222f\u2230\u0005=\u0000\u0000\u2230\u2233"+
		"\u0003\u0500\u0280\u0000\u2231\u2232\u0005=\u0000\u0000\u2232\u2234\u0003"+
		"\u0500\u0280\u0000\u2233\u2231\u0001\u0000\u0000\u0000\u2233\u2234\u0001"+
		"\u0000\u0000\u0000\u2234\u04ff\u0001\u0000\u0000\u0000\u2235\u223c\u0003"+
		"\u0502\u0281\u0000\u2236\u223c\u0003\u0504\u0282\u0000\u2237\u223c\u0003"+
		"\u0506\u0283\u0000\u2238\u223c\u0003\u0508\u0284\u0000\u2239\u223c\u0003"+
		"\u050a\u0285\u0000\u223a\u223c\u0003\u050c\u0286\u0000\u223b\u2235\u0001"+
		"\u0000\u0000\u0000\u223b\u2236\u0001\u0000\u0000\u0000\u223b\u2237\u0001"+
		"\u0000\u0000\u0000\u223b\u2238\u0001\u0000\u0000\u0000\u223b\u2239\u0001"+
		"\u0000\u0000\u0000\u223b\u223a\u0001\u0000\u0000\u0000\u223c\u0501\u0001"+
		"\u0000\u0000\u0000\u223d\u223e\u0005\u0106\u0000\u0000\u223e\u223f\u0005"+
		"Y\u0000\u0000\u223f\u2240\u0003\u05a0\u02d0\u0000\u2240\u0503\u0001\u0000"+
		"\u0000\u0000\u2241\u2242\u0005\u0106\u0000\u0000\u2242\u2243\u0005Y\u0000"+
		"\u0000\u2243\u2244\u0005\u02e6\u0000\u0000\u2244\u2245\u0005\u01a8\u0000"+
		"\u0000\u2245\u0505\u0001\u0000\u0000\u0000\u2246\u2247\u0005\u0106\u0000"+
		"\u0000\u2247\u2248\u0005\u028d\u0000\u0000\u2248\u2249\u0003\u05bc\u02de"+
		"\u0000\u2249\u0507\u0001\u0000\u0000\u0000\u224a\u224b\u0005\u0106\u0000"+
		"\u0000\u224b\u224c\u0005\u028d\u0000\u0000\u224c\u224d\u0003\u05bc\u02de"+
		"\u0000\u224d\u224e\u0005?\u0000\u0000\u224e\u224f\u0003\u05a4\u02d2\u0000"+
		"\u224f\u0509\u0001\u0000\u0000\u0000\u2250\u2251\u0005\u0106\u0000\u0000"+
		"\u2251\u2252\u0005\u028d\u0000\u0000\u2252\u2253\u0003\u05bc\u02de\u0000"+
		"\u2253\u2254\u0005Y\u0000\u0000\u2254\u2255\u0003\u05a0\u02d0\u0000\u2255"+
		"\u050b\u0001\u0000\u0000\u0000\u2256\u2257\u0005\u0106\u0000\u0000\u2257"+
		"\u2258\u0005\u028d\u0000\u0000\u2258\u2259\u0003\u05bc\u02de\u0000\u2259"+
		"\u225a\u0005Y\u0000\u0000\u225a\u225b\u0005\u02e6\u0000\u0000\u225b\u225c"+
		"\u0005\u01a8\u0000\u0000\u225c\u050d\u0001\u0000\u0000\u0000\u225d\u225e"+
		"\u0005\u0320\u0000\u0000\u225e\u2262\u0005\u031a\u0000\u0000\u225f\u2263"+
		"\u0003\u0504\u0282\u0000\u2260\u2263\u0003\u0508\u0284\u0000\u2261\u2263"+
		"\u0003\u0502\u0281\u0000\u2262\u225f\u0001\u0000\u0000\u0000\u2262\u2260"+
		"\u0001\u0000\u0000\u0000\u2262\u2261\u0001\u0000\u0000\u0000\u2263\u050f"+
		"\u0001\u0000\u0000\u0000\u2264\u2265\u0005\u02df\u0000\u0000\u2265\u2266"+
		"\u0005\u008f\u0000\u0000\u2266\u2267\u0005\u01a8\u0000\u0000\u2267\u0511"+
		"\u0001\u0000\u0000\u0000\u2268\u2269\u0005\u00b2\u0000\u0000\u2269\u226a"+
		"\u0005\u02e0\u0000\u0000\u226a\u226b\u0005\u01a8\u0000\u0000\u226b\u0513"+
		"\u0001\u0000\u0000\u0000\u226c\u226d\u0003\u0516\u028b\u0000\u226d\u226e"+
		"\u0005\u031d\u0000\u0000\u226e\u226f\u0005\u031e\u0000\u0000\u226f\u227c"+
		"\u0001\u0000\u0000\u0000\u2270\u2271\u0003\u0516\u028b\u0000\u2271\u2272"+
		"\u0005\u031f\u0000\u0000\u2272\u227c\u0001\u0000\u0000\u0000\u2273\u2274"+
		"\u0003\u0516\u028b\u0000\u2274\u2275\u0005\u031c\u0000\u0000\u2275\u2276"+
		"\u0005\u031e\u0000\u0000\u2276\u2277\u0005\u0207\u0000\u0000\u2277\u2278"+
		"\u0005\u0321\u0000\u0000\u2278\u2279\u0005?\u0000\u0000\u2279\u227a\u0003"+
		"\u05a4\u02d2\u0000\u227a\u227c\u0001\u0000\u0000\u0000\u227b\u226c\u0001"+
		"\u0000\u0000\u0000\u227b\u2270\u0001\u0000\u0000\u0000\u227b\u2273\u0001"+
		"\u0000\u0000\u0000\u227c\u0515\u0001\u0000\u0000\u0000\u227d\u227e\u0003"+
		"\u05ac\u02d6\u0000\u227e\u227f\u0005\u031b\u0000\u0000\u227f\u0517\u0001"+
		"\u0000\u0000\u0000\u2280\u2281\u0005\u01db\u0000\u0000\u2281\u2282\u0003"+
		"\u05a2\u02d1\u0000\u2282\u0519\u0001\u0000\u0000\u0000\u2283\u2285\u0003"+
		"\u05bc\u02de\u0000\u2284\u2286\u0003\u03dc\u01ee\u0000\u2285\u2284\u0001"+
		"\u0000\u0000\u0000\u2285\u2286\u0001\u0000\u0000\u0000\u2286\u051b\u0001"+
		"\u0000\u0000\u0000\u2287\u228d\u0003\u051a\u028d\u0000\u2288\u228a\u0005"+
		"\u0092\u0000\u0000\u2289\u228b\u0003\u05c4\u02e2\u0000\u228a\u2289\u0001"+
		"\u0000\u0000\u0000\u228a\u228b\u0001\u0000\u0000\u0000\u228b\u228d\u0001"+
		"\u0000\u0000\u0000\u228c\u2287\u0001\u0000\u0000\u0000\u228c\u2288\u0001"+
		"\u0000\u0000\u0000\u228d\u051d\u0001\u0000\u0000\u0000\u228e\u228f\u0005"+
		"\u0131\u0000\u0000\u228f\u2290\u0003\u05a0\u02d0\u0000\u2290\u051f\u0001"+
		"\u0000\u0000\u0000\u2291\u2294\u0003\u051e\u028f\u0000\u2292\u2294\u0003"+
		"\u0188\u00c4\u0000\u2293\u2291\u0001\u0000\u0000\u0000\u2293\u2292\u0001"+
		"\u0000\u0000\u0000\u2294\u0521\u0001\u0000\u0000\u0000\u2295\u2296\u0007"+
		"\u009c\u0000\u0000\u2296\u0523\u0001\u0000\u0000\u0000\u2297\u2298\u0007"+
		"\u009d\u0000\u0000\u2298\u0525\u0001\u0000\u0000\u0000\u2299\u229a\u0005"+
		"\u01a7\u0000\u0000\u229a\u229b\u0003\u0584\u02c2\u0000\u229b\u0527\u0001"+
		"\u0000\u0000\u0000\u229c\u22a2\u0003\u058a\u02c5\u0000\u229d\u229f\u0003"+
		"\u0586\u02c3\u0000\u229e\u22a0\u0003\u058a\u02c5\u0000\u229f\u229e\u0001"+
		"\u0000\u0000\u0000\u229f\u22a0\u0001\u0000\u0000\u0000\u22a0\u22a2\u0001"+
		"\u0000\u0000\u0000\u22a1\u229c\u0001\u0000\u0000\u0000\u22a1\u229d\u0001"+
		"\u0000\u0000\u0000\u22a2\u0529\u0001\u0000\u0000\u0000\u22a3\u22a4\u0003"+
		"\u0580\u02c0\u0000\u22a4\u052b\u0001\u0000\u0000\u0000\u22a5\u22a6\u0003"+
		"\u0580\u02c0\u0000\u22a6\u052d\u0001\u0000\u0000\u0000\u22a7\u22a8\u0005"+
		" \u0000\u0000\u22a8\u22ad\u0003\u052c\u0296\u0000\u22a9\u22aa\u0005\u001d"+
		"\u0000\u0000\u22aa\u22ac\u0003\u052c\u0296\u0000\u22ab\u22a9\u0001\u0000"+
		"\u0000\u0000\u22ac\u22af\u0001\u0000\u0000\u0000\u22ad\u22ab\u0001\u0000"+
		"\u0000\u0000\u22ad\u22ae\u0001\u0000\u0000\u0000\u22ae\u22b0\u0001\u0000"+
		"\u0000\u0000\u22af\u22ad\u0001\u0000\u0000\u0000\u22b0\u22b1\u0005!\u0000"+
		"\u0000\u22b1\u052f\u0001\u0000\u0000\u0000\u22b2\u22b3\u0003\u0528\u0294"+
		"\u0000\u22b3\u0531\u0001\u0000\u0000\u0000\u22b4\u22b7\u0003\u0530\u0298"+
		"\u0000\u22b5\u22b7\u0003\u0538\u029c\u0000\u22b6\u22b4\u0001\u0000\u0000"+
		"\u0000\u22b6\u22b5\u0001\u0000\u0000\u0000\u22b7\u0533\u0001\u0000\u0000"+
		"\u0000\u22b8\u22b9\u0003\u0580\u02c0\u0000\u22b9\u0535\u0001\u0000\u0000"+
		"\u0000\u22ba\u22bb\u0003\u0528\u0294\u0000\u22bb\u0537\u0001\u0000\u0000"+
		"\u0000\u22bc\u22bd\u0003\u0580\u02c0\u0000\u22bd\u22c1\u0005\u001c\u0000"+
		"\u0000\u22be\u22bf\u0003\u0580\u02c0\u0000\u22bf\u22c0\u0005\u001c\u0000"+
		"\u0000\u22c0\u22c2\u0001\u0000\u0000\u0000\u22c1\u22be\u0001\u0000\u0000"+
		"\u0000\u22c1\u22c2\u0001\u0000\u0000\u0000\u22c2\u22c3\u0001\u0000\u0000"+
		"\u0000\u22c3\u22c4\u0005\u0010\u0000\u0000\u22c4\u0539\u0001\u0000\u0000"+
		"\u0000\u22c5\u22c6\u0003\u0580\u02c0\u0000\u22c6\u053b\u0001\u0000\u0000"+
		"\u0000\u22c7\u22c8\u0003\u0580\u02c0\u0000\u22c8\u053d\u0001\u0000\u0000"+
		"\u0000\u22c9\u22ca\u0003\u0586\u02c3\u0000\u22ca\u053f\u0001\u0000\u0000"+
		"\u0000\u22cb\u22cc\u0003\u0586\u02c3\u0000\u22cc\u0541\u0001\u0000\u0000"+
		"\u0000\u22cd\u22ce\u0003\u0586\u02c3\u0000\u22ce\u0543\u0001\u0000\u0000"+
		"\u0000\u22cf\u22d0\u0003\u0586\u02c3\u0000\u22d0\u0545\u0001\u0000\u0000"+
		"\u0000\u22d1\u22d2\u0003\u0586\u02c3\u0000\u22d2\u0547\u0001\u0000\u0000"+
		"\u0000\u22d3\u22d4\u0003\u0586\u02c3\u0000\u22d4\u0549\u0001\u0000\u0000"+
		"\u0000\u22d5\u22d8\u0003\u0586\u02c3\u0000\u22d6\u22d8\u0003\u058a\u02c5"+
		"\u0000\u22d7\u22d5\u0001\u0000\u0000\u0000\u22d7\u22d6\u0001\u0000\u0000"+
		"\u0000\u22d8\u054b\u0001\u0000\u0000\u0000\u22d9\u22dc\u0003\u0586\u02c3"+
		"\u0000\u22da\u22dc\u0003\u058a\u02c5\u0000\u22db\u22d9\u0001\u0000\u0000"+
		"\u0000\u22db\u22da\u0001\u0000\u0000\u0000\u22dc\u054d\u0001\u0000\u0000"+
		"\u0000\u22dd\u22de\u0003\u0580\u02c0\u0000\u22de\u054f\u0001\u0000\u0000"+
		"\u0000\u22df\u22e0\u0003\u0580\u02c0\u0000\u22e0\u0551\u0001\u0000\u0000"+
		"\u0000\u22e1\u22e2\u0003\u0580\u02c0\u0000\u22e2\u0553\u0001\u0000\u0000"+
		"\u0000\u22e3\u22e4\u0003\u0580\u02c0\u0000\u22e4\u0555\u0001\u0000\u0000"+
		"\u0000\u22e5\u22e6\u0003\u0586\u02c3\u0000\u22e6\u0557\u0001\u0000\u0000"+
		"\u0000\u22e7\u22e8\u0003\u0586\u02c3\u0000\u22e8\u0559\u0001\u0000\u0000"+
		"\u0000\u22e9\u22ea\u0003\u0580\u02c0\u0000\u22ea\u055b\u0001\u0000\u0000"+
		"\u0000\u22eb\u22ec\u0003\u05bc\u02de\u0000\u22ec\u055d\u0001\u0000\u0000"+
		"\u0000\u22ed\u22ee\u0003\u05bc\u02de\u0000\u22ee\u055f\u0001\u0000\u0000"+
		"\u0000\u22ef\u22f0\u0003\u05bc\u02de\u0000\u22f0\u0561\u0001\u0000\u0000"+
		"\u0000\u22f1\u22f4\u0003\u0586\u02c3\u0000\u22f2\u22f4\u0003\u058a\u02c5"+
		"\u0000\u22f3\u22f1\u0001\u0000\u0000\u0000\u22f3\u22f2\u0001\u0000\u0000"+
		"\u0000\u22f4\u0563\u0001\u0000\u0000\u0000\u22f5\u22f6\u0003\u053c\u029e"+
		"\u0000\u22f6\u22f7\u0003\u058a\u02c5\u0000\u22f7\u0565\u0001\u0000\u0000"+
		"\u0000\u22f8\u2300\u0003\u0580\u02c0\u0000\u22f9\u22fa\u0005\u001c\u0000"+
		"\u0000\u22fa\u2301\u0005\u0010\u0000\u0000\u22fb\u22fe\u0003\u058a\u02c5"+
		"\u0000\u22fc\u22fd\u0005\u001c\u0000\u0000\u22fd\u22ff\u0005\u0010\u0000"+
		"\u0000\u22fe\u22fc\u0001\u0000\u0000\u0000\u22fe\u22ff\u0001\u0000\u0000"+
		"\u0000\u22ff\u2301\u0001\u0000\u0000\u0000\u2300\u22f9\u0001\u0000\u0000"+
		"\u0000\u2300\u22fb\u0001\u0000\u0000\u0000\u2300\u2301\u0001\u0000\u0000"+
		"\u0000\u2301\u0567\u0001\u0000\u0000\u0000\u2302\u2305\u0003\u0586\u02c3"+
		"\u0000\u2303\u2305\u0003\u058a\u02c5\u0000\u2304\u2302\u0001\u0000\u0000"+
		"\u0000\u2304\u2303\u0001\u0000\u0000\u0000\u2305\u0569\u0001\u0000\u0000"+
		"\u0000\u2306\u230b\u0003\u0568\u02b4\u0000\u2307\u2308\u0005\u001d\u0000"+
		"\u0000\u2308\u230a\u0003\u0568\u02b4\u0000\u2309\u2307\u0001\u0000\u0000"+
		"\u0000\u230a\u230d\u0001\u0000\u0000\u0000\u230b\u2309\u0001\u0000\u0000"+
		"\u0000\u230b\u230c\u0001\u0000\u0000\u0000\u230c\u056b\u0001\u0000\u0000"+
		"\u0000\u230d\u230b\u0001\u0000\u0000\u0000\u230e\u2313\u0003\u0566\u02b3"+
		"\u0000\u230f\u2310\u0005\u001d\u0000\u0000\u2310\u2312\u0003\u0566\u02b3"+
		"\u0000\u2311\u230f\u0001\u0000\u0000\u0000\u2312\u2315\u0001\u0000\u0000"+
		"\u0000\u2313\u2311\u0001\u0000\u0000\u0000\u2313\u2314\u0001\u0000\u0000"+
		"\u0000\u2314\u056d\u0001\u0000\u0000\u0000\u2315\u2313\u0001\u0000\u0000"+
		"\u0000\u2316\u2317\u0003\u0580\u02c0\u0000\u2317\u056f\u0001\u0000\u0000"+
		"\u0000\u2318\u231b\u0003\u057e\u02bf\u0000\u2319\u231b\u0003\u05d6\u02eb"+
		"\u0000\u231a\u2318\u0001\u0000\u0000\u0000\u231a\u2319\u0001\u0000\u0000"+
		"\u0000\u231b\u0571\u0001\u0000\u0000\u0000\u231c\u231d\u0003\u0570\u02b8"+
		"\u0000\u231d\u0573\u0001\u0000\u0000\u0000\u231e\u2321\u0003\u057e\u02bf"+
		"\u0000\u231f\u2321\u0003\u05dc\u02ee\u0000\u2320\u231e\u0001\u0000\u0000"+
		"\u0000\u2320\u231f\u0001\u0000\u0000\u0000\u2321\u0575\u0001\u0000\u0000"+
		"\u0000\u2322\u2323\u0003\u0580\u02c0\u0000\u2323\u0577\u0001\u0000\u0000"+
		"\u0000\u2324\u2325\u0003\u05a0\u02d0\u0000\u2325\u0579\u0001\u0000\u0000"+
		"\u0000\u2326\u2327\u0003\u0580\u02c0\u0000\u2327\u057b\u0001\u0000\u0000"+
		"\u0000\u2328\u2329\u0003\u0580\u02c0\u0000\u2329\u057d\u0001\u0000\u0000"+
		"\u0000\u232a\u232e\u0007\u009e\u0000\u0000\u232b\u232c\u0004\u02bf{\u0000"+
		"\u232c\u232e\u0005\u0337\u0000\u0000\u232d\u232a\u0001\u0000\u0000\u0000"+
		"\u232d\u232b\u0001\u0000\u0000\u0000\u232e\u057f\u0001\u0000\u0000\u0000"+
		"\u232f\u2332\u0003\u057e\u02bf\u0000\u2330\u2332\u0003\u05d0\u02e8\u0000"+
		"\u2331\u232f\u0001\u0000\u0000\u0000\u2331\u2330\u0001\u0000\u0000\u0000"+
		"\u2332\u0581\u0001\u0000\u0000\u0000\u2333\u2338\u0003\u0580\u02c0\u0000"+
		"\u2334\u2335\u0005\u001d\u0000\u0000\u2335\u2337\u0003\u0580\u02c0\u0000"+
		"\u2336\u2334\u0001\u0000\u0000\u0000\u2337\u233a\u0001\u0000\u0000\u0000"+
		"\u2338\u2336\u0001\u0000\u0000\u0000\u2338\u2339\u0001\u0000\u0000\u0000"+
		"\u2339\u0583\u0001\u0000\u0000\u0000\u233a\u2338\u0001\u0000\u0000\u0000"+
		"\u233b\u233c\u0005 \u0000\u0000\u233c\u233d\u0003\u0582\u02c1\u0000\u233d"+
		"\u233e\u0005!\u0000\u0000\u233e\u0585\u0001\u0000\u0000\u0000\u233f\u2341"+
		"\u0003\u0580\u02c0\u0000\u2340\u2342\u0003\u058a\u02c5\u0000\u2341\u2340"+
		"\u0001\u0000\u0000\u0000\u2341\u2342\u0001\u0000\u0000\u0000\u2342\u0587"+
		"\u0001\u0000\u0000\u0000\u2343\u2348\u0003\u0580\u02c0\u0000\u2344\u2346"+
		"\u0003\u058a\u02c5\u0000\u2345\u2347\u0003\u058a\u02c5\u0000\u2346\u2345"+
		"\u0001\u0000\u0000\u0000\u2346\u2347\u0001\u0000\u0000\u0000\u2347\u2349"+
		"\u0001\u0000\u0000\u0000\u2348\u2344\u0001\u0000\u0000\u0000\u2348\u2349"+
		"\u0001\u0000\u0000\u0000\u2349\u0589\u0001\u0000\u0000\u0000\u234a\u234b"+
		"\u0005\u001c\u0000\u0000\u234b\u234c\u0003\u0580\u02c0\u0000\u234c\u058b"+
		"\u0001\u0000\u0000\u0000\u234d\u234e\u0007\u009f\u0000\u0000\u234e\u058d"+
		"\u0001\u0000\u0000\u0000\u234f\u2350\u0007\u00a0\u0000\u0000\u2350\u058f"+
		"\u0001\u0000\u0000\u0000\u2351\u2352\u0007\u00a1\u0000\u0000\u2352\u0591"+
		"\u0001\u0000\u0000\u0000\u2353\u2359\u0005\u0003\u0000\u0000\u2354\u2355"+
		"\u0004\u02c9|\u0000\u2355\u2359\u0005,\u0000\u0000\u2356\u2359\u0005\u0005"+
		"\u0000\u0000\u2357\u2359\u0005\u0004\u0000\u0000\u2358\u2353\u0001\u0000"+
		"\u0000\u0000\u2358\u2354\u0001\u0000\u0000\u0000\u2358\u2356\u0001\u0000"+
		"\u0000\u0000\u2358\u2357\u0001\u0000\u0000\u0000\u2359\u0593\u0001\u0000"+
		"\u0000\u0000\u235a\u2360\u0003\u0598\u02cc\u0000\u235b\u235c\u0005\u000e"+
		"\u0000\u0000\u235c\u2360\u0003\u058c\u02c6\u0000\u235d\u235e\u0005\u000f"+
		"\u0000\u0000\u235e\u2360\u0003\u058c\u02c6\u0000\u235f\u235a\u0001\u0000"+
		"\u0000\u0000\u235f\u235b\u0001\u0000\u0000\u0000\u235f\u235d\u0001\u0000"+
		"\u0000\u0000\u2360\u0595\u0001\u0000\u0000\u0000\u2361\u2365\u0003\u0594"+
		"\u02ca\u0000\u2362\u2363\u0004\u02cb}\u0000\u2363\u2365\u0003\u059c\u02ce"+
		"\u0000\u2364\u2361\u0001\u0000\u0000\u0000\u2364\u2362\u0001\u0000\u0000"+
		"\u0000\u2365\u0597\u0001\u0000\u0000\u0000\u2366\u2370\u0003\u05a6\u02d3"+
		"\u0000\u2367\u2370\u0003\u05ac\u02d6\u0000\u2368\u2370\u0003\u05b4\u02da"+
		"\u0000\u2369\u2370\u0003\u05b0\u02d8\u0000\u236a\u2370\u0003\u05ae\u02d7"+
		"\u0000\u236b\u236d\u0005\u0333\u0000\u0000\u236c\u236b\u0001\u0000\u0000"+
		"\u0000\u236c\u236d\u0001\u0000\u0000\u0000\u236d\u236e\u0001\u0000\u0000"+
		"\u0000\u236e\u2370\u0007\u00a2\u0000\u0000\u236f\u2366\u0001\u0000\u0000"+
		"\u0000\u236f\u2367\u0001\u0000\u0000\u0000\u236f\u2368\u0001\u0000\u0000"+
		"\u0000\u236f\u2369\u0001\u0000\u0000\u0000\u236f\u236a\u0001\u0000\u0000"+
		"\u0000\u236f\u236c\u0001\u0000\u0000\u0000\u2370\u0599\u0001\u0000\u0000"+
		"\u0000\u2371\u2375\u0003\u0598\u02cc\u0000\u2372\u2373\u0004\u02cd~\u0000"+
		"\u2373\u2375\u0003\u059c\u02ce\u0000\u2374\u2371\u0001\u0000\u0000\u0000"+
		"\u2374\u2372\u0001\u0000\u0000\u0000\u2375\u059b\u0001\u0000\u0000\u0000"+
		"\u2376\u2377\u0005\u018b\u0000\u0000\u2377\u059d\u0001\u0000\u0000\u0000"+
		"\u2378\u2379\u0005 \u0000\u0000\u2379\u237e\u0003\u05a2\u02d1\u0000\u237a"+
		"\u237b\u0005\u001d\u0000\u0000\u237b\u237d\u0003\u05a2\u02d1\u0000\u237c"+
		"\u237a\u0001\u0000\u0000\u0000\u237d\u2380\u0001\u0000\u0000\u0000\u237e"+
		"\u237c\u0001\u0000\u0000\u0000\u237e\u237f\u0001\u0000\u0000\u0000\u237f"+
		"\u2381\u0001\u0000\u0000\u0000\u2380\u237e\u0001\u0000\u0000\u0000\u2381"+
		"\u2382\u0005!\u0000\u0000\u2382\u059f\u0001\u0000\u0000\u0000\u2383\u2387"+
		"\u0005\u0338\u0000\u0000\u2384\u2385\u0004\u02d0\u007f\u0000\u2385\u2387"+
		"\u0005\u0337\u0000\u0000\u2386\u2383\u0001\u0000\u0000\u0000\u2386\u2384"+
		"\u0001\u0000\u0000\u0000\u2387\u05a1\u0001\u0000\u0000\u0000\u2388\u238c"+
		"\u0003\u05a0\u02d0\u0000\u2389\u238c\u0005,\u0000\u0000\u238a\u238c\u0005"+
		"-\u0000\u0000\u238b\u2388\u0001\u0000\u0000\u0000\u238b\u2389\u0001\u0000"+
		"\u0000\u0000\u238b\u238a\u0001\u0000\u0000\u0000\u238c\u05a3\u0001\u0000"+
		"\u0000\u0000\u238d\u2391\u0003\u05a0\u02d0\u0000\u238e\u238f\u0004\u02d2"+
		"\u0080\u0000\u238f\u2391\u0005,\u0000\u0000\u2390\u238d\u0001\u0000\u0000"+
		"\u0000\u2390\u238e\u0001\u0000\u0000\u0000\u2391\u05a5\u0001\u0000\u0000"+
		"\u0000\u2392\u2394\u0005\u0333\u0000\u0000\u2393\u2392\u0001\u0000\u0000"+
		"\u0000\u2393\u2394\u0001\u0000\u0000\u0000\u2394\u2395\u0001\u0000\u0000"+
		"\u0000\u2395\u2398\u0003\u05a0\u02d0\u0000\u2396\u2398\u0005\u0335\u0000"+
		"\u0000\u2397\u2393\u0001\u0000\u0000\u0000\u2397\u2396\u0001\u0000\u0000"+
		"\u0000\u2398\u239c\u0001\u0000\u0000\u0000\u2399\u239b\u0003\u05a0\u02d0"+
		"\u0000\u239a\u2399\u0001\u0000\u0000\u0000\u239b\u239e\u0001\u0000\u0000"+
		"\u0000\u239c\u239a\u0001\u0000\u0000\u0000\u239c\u239d\u0001\u0000\u0000"+
		"\u0000\u239d\u05a7\u0001\u0000\u0000\u0000\u239e\u239c\u0001\u0000\u0000"+
		"\u0000\u239f\u23a0\u0003\u05a0\u02d0\u0000\u23a0\u05a9\u0001\u0000\u0000"+
		"\u0000\u23a1\u23a6\u0003\u05a0\u02d0\u0000\u23a2\u23a3\u0005\u001d\u0000"+
		"\u0000\u23a3\u23a5\u0003\u05a0\u02d0\u0000\u23a4\u23a2\u0001\u0000\u0000"+
		"\u0000\u23a5\u23a8\u0001\u0000\u0000\u0000\u23a6\u23a4\u0001\u0000\u0000"+
		"\u0000\u23a6\u23a7\u0001\u0000\u0000\u0000\u23a7\u05ab\u0001\u0000\u0000"+
		"\u0000\u23a8\u23a6\u0001\u0000\u0000\u0000\u23a9\u23ad\u0003\u05b2\u02d9"+
		"\u0000\u23aa\u23ad\u0005.\u0000\u0000\u23ab\u23ad\u0005/\u0000\u0000\u23ac"+
		"\u23a9\u0001\u0000\u0000\u0000\u23ac\u23aa\u0001\u0000\u0000\u0000\u23ac"+
		"\u23ab\u0001\u0000\u0000\u0000\u23ad\u05ad\u0001\u0000\u0000\u0000\u23ae"+
		"\u23af\u0007\u00a3\u0000\u0000\u23af\u05af\u0001\u0000\u0000\u0000\u23b0"+
		"\u23b1\u0007\u00a4\u0000\u0000\u23b1\u05b1\u0001\u0000\u0000\u0000\u23b2"+
		"\u23b3\u0007\u00a5\u0000\u0000\u23b3\u05b3\u0001\u0000\u0000\u0000\u23b4"+
		"\u23b5\u0005\u009d\u0000\u0000\u23b5\u23bb\u0005\u0338\u0000\u0000\u23b6"+
		"\u23b7\u0005\u0253\u0000\u0000\u23b7\u23bb\u0005\u0338\u0000\u0000\u23b8"+
		"\u23b9\u0005\u0250\u0000\u0000\u23b9\u23bb\u0005\u0338\u0000\u0000\u23ba"+
		"\u23b4\u0001\u0000\u0000\u0000\u23ba\u23b6\u0001\u0000\u0000\u0000\u23ba"+
		"\u23b8\u0001\u0000\u0000\u0000\u23bb\u05b5\u0001\u0000\u0000\u0000\u23bc"+
		"\u23bf\u0003\u0496\u024b\u0000\u23bd\u23bf\u0003\u05ba\u02dd\u0000\u23be"+
		"\u23bc\u0001\u0000\u0000\u0000\u23be\u23bd\u0001\u0000\u0000\u0000\u23bf"+
		"\u05b7\u0001\u0000\u0000\u0000\u23c0\u23c1\u0003\u05ba\u02dd\u0000\u23c1"+
		"\u05b9\u0001\u0000\u0000\u0000\u23c2\u23c3\u0005 \u0000\u0000\u23c3\u23c4"+
		"\u0005\u0003\u0000\u0000\u23c4\u23c5\u0005\u001d\u0000\u0000\u23c5\u23c6"+
		"\u0005\u0003\u0000\u0000\u23c6\u23c7\u0005!\u0000\u0000\u23c7\u05bb\u0001"+
		"\u0000\u0000\u0000\u23c8\u23cb\u0003\u0580\u02c0\u0000\u23c9\u23cb\u0003"+
		"\u05a0\u02d0\u0000\u23ca\u23c8\u0001\u0000\u0000\u0000\u23ca\u23c9\u0001"+
		"\u0000\u0000\u0000\u23cb\u05bd\u0001\u0000\u0000\u0000\u23cc\u23cf\u0003"+
		"\u057e\u02bf\u0000\u23cd\u23cf\u0003\u05de\u02ef\u0000\u23ce\u23cc\u0001"+
		"\u0000\u0000\u0000\u23ce\u23cd\u0001\u0000\u0000\u0000\u23cf\u05bf\u0001"+
		"\u0000\u0000\u0000\u23d0\u23d3\u0003\u0574\u02ba\u0000\u23d1\u23d3\u0003"+
		"\u05a0\u02d0\u0000\u23d2\u23d0\u0001\u0000\u0000\u0000\u23d2\u23d1\u0001"+
		"\u0000\u0000\u0000\u23d3\u05c1\u0001\u0000\u0000\u0000\u23d4\u23d7\u0003"+
		"\u0592\u02c9\u0000\u23d5\u23d7\u0003\u057e\u02bf\u0000\u23d6\u23d4\u0001"+
		"\u0000\u0000\u0000\u23d6\u23d5\u0001\u0000\u0000\u0000\u23d7\u05c3\u0001"+
		"\u0000\u0000\u0000\u23d8\u23d9\u0005 \u0000\u0000\u23d9\u23da\u0005!\u0000"+
		"\u0000\u23da\u05c5\u0001\u0000\u0000\u0000\u23db\u23dc\u0007\u00a6\u0000"+
		"\u0000\u23dc\u05c7\u0001\u0000\u0000\u0000\u23dd\u23de\u0007\u00a7\u0000"+
		"\u0000\u23de\u05c9\u0001\u0000\u0000\u0000\u23df\u23e0\u0005\u00f6\u0000"+
		"\u0000\u23e0\u23e6\u0005\u001c\u0000\u0000\u23e1\u23e2\u0005\u0138\u0000"+
		"\u0000\u23e2\u23e6\u0005\u001c\u0000\u0000\u23e3\u23e4\u0005\u0204\u0000"+
		"\u0000\u23e4\u23e6\u0005\u001c\u0000\u0000\u23e5\u23df\u0001\u0000\u0000"+
		"\u0000\u23e5\u23e1\u0001\u0000\u0000\u0000\u23e5\u23e3\u0001\u0000\u0000"+
		"\u0000\u23e6\u05cb\u0001\u0000\u0000\u0000\u23e7\u23e8\u0007\u00a7\u0000"+
		"\u0000\u23e8\u23e9\u0005\u001c\u0000\u0000\u23e9\u05cd\u0001\u0000\u0000"+
		"\u0000\u23ea\u23eb\u0003\u05a0\u02d0\u0000\u23eb\u05cf\u0001\u0000\u0000"+
		"\u0000\u23ec\u23f3\u0004\u02e8\u0081\u0000\u23ed\u23f4\u0003\u05d6\u02eb"+
		"\u0000\u23ee\u23f4\u0003\u05e2\u02f1\u0000\u23ef\u23f4\u0005\u00d0\u0000"+
		"\u0000\u23f0\u23f4\u0005\u020a\u0000\u0000\u23f1\u23f2\u0004\u02e8\u0082"+
		"\u0000\u23f2\u23f4\u0005\u02d2\u0000\u0000\u23f3\u23ed\u0001\u0000\u0000"+
		"\u0000\u23f3\u23ee\u0001\u0000\u0000\u0000\u23f3\u23ef\u0001\u0000\u0000"+
		"\u0000\u23f3\u23f0\u0001\u0000\u0000\u0000\u23f3\u23f1\u0001\u0000\u0000"+
		"\u0000\u23f4\u23fd\u0001\u0000\u0000\u0000\u23f5\u23fb\u0003\u05da\u02ed"+
		"\u0000\u23f6\u23fb\u0003\u05d2\u02e9\u0000\u23f7\u23fb\u0003\u05d4\u02ea"+
		"\u0000\u23f8\u23fb\u0003\u05d8\u02ec\u0000\u23f9\u23fb\u0003\u05e0\u02f0"+
		"\u0000\u23fa\u23f5\u0001\u0000\u0000\u0000\u23fa\u23f6\u0001\u0000\u0000"+
		"\u0000\u23fa\u23f7\u0001\u0000\u0000\u0000\u23fa\u23f8\u0001\u0000\u0000"+
		"\u0000\u23fa\u23f9\u0001\u0000\u0000\u0000\u23fb\u23fd\u0001\u0000\u0000"+
		"\u0000\u23fc\u23ec\u0001\u0000\u0000\u0000\u23fc\u23fa\u0001\u0000\u0000"+
		"\u0000\u23fd\u05d1\u0001\u0000\u0000\u0000\u23fe\u23ff\u0007\u00a8\u0000"+
		"\u0000\u23ff\u05d3\u0001\u0000\u0000\u0000\u2400\u2401\u0007\u00a9\u0000"+
		"\u0000\u2401\u05d5\u0001\u0000\u0000\u0000\u2402\u240d\u0004\u02eb\u0083"+
		"\u0000\u2403\u240e\u0003\u05e4\u02f2\u0000\u2404\u240e\u0005\u00cd\u0000"+
		"\u0000\u2405\u240e\u0005\u00de\u0000\u0000\u2406\u240e\u0005\u0185\u0000"+
		"\u0000\u2407\u240e\u0005\u01b9\u0000\u0000\u2408\u240e\u0005\u01bd\u0000"+
		"\u0000\u2409\u240e\u0005\u01d4\u0000\u0000\u240a\u240e\u0005\u01dc\u0000"+
		"\u0000\u240b\u240e\u0005\u02cd\u0000\u0000\u240c\u240e\u0005\u023f\u0000"+
		"\u0000\u240d\u2403\u0001\u0000\u0000\u0000\u240d\u2404\u0001\u0000\u0000"+
		"\u0000\u240d\u2405\u0001\u0000\u0000\u0000\u240d\u2406\u0001\u0000\u0000"+
		"\u0000\u240d\u2407\u0001\u0000\u0000\u0000\u240d\u2408\u0001\u0000\u0000"+
		"\u0000\u240d\u2409\u0001\u0000\u0000\u0000\u240d\u240a\u0001\u0000\u0000"+
		"\u0000\u240d\u240b\u0001\u0000\u0000\u0000\u240d\u240c\u0001\u0000\u0000"+
		"\u0000\u240e\u2415\u0001\u0000\u0000\u0000\u240f\u2413\u0003\u05da\u02ed"+
		"\u0000\u2410\u2413\u0003\u05d8\u02ec\u0000\u2411\u2413\u0003\u05e0\u02f0"+
		"\u0000\u2412\u240f\u0001\u0000\u0000\u0000\u2412\u2410\u0001\u0000\u0000"+
		"\u0000\u2412\u2411\u0001\u0000\u0000\u0000\u2413\u2415\u0001\u0000\u0000"+
		"\u0000\u2414\u2402\u0001\u0000\u0000\u0000\u2414\u2412\u0001\u0000\u0000"+
		"\u0000\u2415\u05d7\u0001\u0000\u0000\u0000\u2416\u2417\u0007\u00aa\u0000"+
		"\u0000\u2417\u05d9\u0001\u0000\u0000\u0000\u2418\u241e\u0007\u00ab\u0000"+
		"\u0000\u2419\u241a\u0004\u02ed\u0084\u0000\u241a\u241e\u0007\u00ac\u0000"+
		"\u0000\u241b\u241c\u0004\u02ed\u0085\u0000\u241c\u241e\u0007\u00ad\u0000"+
		"\u0000\u241d\u2418\u0001\u0000\u0000\u0000\u241d\u2419\u0001\u0000\u0000"+
		"\u0000\u241d\u241b\u0001\u0000\u0000\u0000\u241e\u05db\u0001\u0000\u0000"+
		"\u0000\u241f\u2422\u0004\u02ee\u0086\u0000\u2420\u2423\u0003\u05e4\u02f2"+
		"\u0000\u2421\u2423\u0003\u05e2\u02f1\u0000\u2422\u2420\u0001\u0000\u0000"+
		"\u0000\u2422\u2421\u0001\u0000\u0000\u0000\u2423\u242a\u0001\u0000\u0000"+
		"\u0000\u2424\u2428\u0003\u05da\u02ed\u0000\u2425\u2428\u0003\u05d4\u02ea"+
		"\u0000\u2426\u2428\u0003\u05e0\u02f0\u0000\u2427\u2424\u0001\u0000\u0000"+
		"\u0000\u2427\u2425\u0001\u0000\u0000\u0000\u2427\u2426\u0001\u0000\u0000"+
		"\u0000\u2428\u242a\u0001\u0000\u0000\u0000\u2429\u241f\u0001\u0000\u0000"+
		"\u0000\u2429\u2427\u0001\u0000\u0000\u0000\u242a\u05dd\u0001\u0000\u0000"+
		"\u0000\u242b\u2430\u0003\u05da\u02ed\u0000\u242c\u2430\u0003\u05d2\u02e9"+
		"\u0000\u242d\u2430\u0003\u05d4\u02ea\u0000\u242e\u2430\u0003\u05d8\u02ec"+
		"\u0000\u242f\u242b\u0001\u0000\u0000\u0000\u242f\u242c\u0001\u0000\u0000"+
		"\u0000\u242f\u242d\u0001\u0000\u0000\u0000\u242f\u242e\u0001\u0000\u0000"+
		"\u0000\u2430\u05df\u0001\u0000\u0000\u0000\u2431\u2432\u0007\u00a7\u0000"+
		"\u0000\u2432\u05e1\u0001\u0000\u0000\u0000\u2433\u2434\u0007\u00ae\u0000"+
		"\u0000\u2434\u05e3\u0001\u0000\u0000\u0000\u2435\u2439\u0007\u00af\u0000"+
		"\u0000\u2436\u2437\u0004\u02f2\u0087\u0000\u2437\u2439\u0005\u029c\u0000"+
		"\u0000\u2438\u2435\u0001\u0000\u0000\u0000\u2438\u2436\u0001\u0000\u0000"+
		"\u0000\u2439\u05e5\u0001\u0000\u0000\u0000\u0498\u05e9\u05f0\u0640\u0648"+
		"\u064d\u0657\u065e\u0664\u0667\u066a\u0671\u0676\u0679\u067e\u0684\u0686"+
		"\u068a\u068e\u0697\u069b\u06a0\u06a6\u06ad\u06b2\u06b7\u06be\u06c1\u06c7"+
		"\u06ca\u06d1\u06db\u06e0\u06e5\u06ed\u06f3\u06f7\u06fc\u0705\u070b\u0711"+
		"\u0717\u0720\u0726\u072f\u073b\u073f\u0745\u0749\u074f\u0753\u0758\u075b"+
		"\u0761\u0767\u076d\u0771\u0776\u077a\u077e\u078e\u0796\u079e\u07a5\u07c0"+
		"\u07cf\u07d2\u07d8\u07dd\u07e3\u07e8\u07ec\u07f1\u07f5\u07f9\u07fd\u0801"+
		"\u0805\u0807\u0811\u0819\u0820\u0828\u082c\u0831\u0838\u083d\u0842\u084c"+
		"\u0850\u0855\u0858\u085b\u085e\u0865\u086c\u0870\u0889\u088b\u0893\u0895"+
		"\u08a9\u08ad\u08b3\u08ba\u08bd\u08c1\u08c8\u08cb\u08d4\u08db\u08e0\u08e3"+
		"\u08e8\u08ee\u08f1\u08f5\u08fb\u08fe\u0903\u0907\u0910\u0913\u0919\u0920"+
		"\u0926\u0929\u092d\u0936\u0939\u0941\u0947\u094b\u0955\u0958\u095d\u0965"+
		"\u0974\u0977\u097a\u097f\u0985\u098f\u0999\u099c\u099f\u09a3\u09ab\u09b8"+
		"\u09bc\u09c1\u09ca\u09db\u09ee\u09f7\u09fa\u0a02\u0a09\u0a0b\u0a12\u0a17"+
		"\u0a25\u0a29\u0a2f\u0a35\u0a3b\u0a41\u0a47\u0a4c\u0a50\u0a58\u0a5e\u0a64"+
		"\u0a6a\u0a6f\u0a72\u0a75\u0a7e\u0a81\u0a8c\u0a90\u0a9b\u0aa3\u0aa7\u0ab0"+
		"\u0ab3\u0ab9\u0abb\u0abf\u0ac6\u0ad3\u0ada\u0ae0\u0ae3\u0af4\u0b07\u0b0b"+
		"\u0b11\u0b17\u0b1d\u0b22\u0b29\u0b30\u0b35\u0b38\u0b3c\u0b40\u0b45\u0b49"+
		"\u0b4d\u0b53\u0b58\u0b5b\u0b5f\u0b65\u0b69\u0b6d\u0b75\u0b7d\u0b86\u0b8f"+
		"\u0b9c\u0b9f\u0ba2\u0ba8\u0bb0\u0bb5\u0bb8\u0bbb\u0bbe\u0bc1\u0bc3\u0bc9"+
		"\u0bcb\u0bdb\u0be2\u0be5\u0be7\u0be9\u0bf3\u0bf5\u0bf9\u0bfc\u0bff\u0c03"+
		"\u0c07\u0c0c\u0c0f\u0c12\u0c18\u0c1b\u0c24\u0c2e\u0c31\u0c34\u0c38\u0c3e"+
		"\u0c43\u0c48\u0c4d\u0c51\u0c58\u0c63\u0c66\u0c69\u0c6c\u0c70\u0c73\u0c76"+
		"\u0c7c\u0c7f\u0c82\u0c85\u0c88\u0c8c\u0c8f\u0c92\u0c9e\u0ca6\u0cb6\u0cb9"+
		"\u0cbd\u0cc1\u0cc9\u0cd1\u0cd5\u0ce9\u0cec\u0cf0\u0cf6\u0cfa\u0cfd\u0d06"+
		"\u0d10\u0d13\u0d17\u0d1a\u0d1e\u0d23\u0d26\u0d2b\u0d31\u0d3a\u0d40\u0d45"+
		"\u0d48\u0d4b\u0d4e\u0d51\u0d54\u0d57\u0d66\u0d6a\u0d70\u0d73\u0d76\u0d7c"+
		"\u0d81\u0d85\u0d88\u0d8f\u0d91\u0da2\u0dae\u0db3\u0db6\u0db9\u0dbe\u0dc4"+
		"\u0dd4\u0de8\u0df1\u0df5\u0dfc\u0e01\u0e0a\u0e14\u0e22\u0e29\u0e32\u0e3b"+
		"\u0e41\u0e47\u0e4d\u0e50\u0e56\u0e5d\u0e61\u0e67\u0e6d\u0e6f\u0e72\u0e76"+
		"\u0e80\u0e85\u0e8a\u0e91\u0e9a\u0ea2\u0ea7\u0eab\u0eb1\u0eb4\u0eb7\u0ebb"+
		"\u0ebf\u0ec9\u0ecd\u0ed0\u0ed3\u0ed6\u0edb\u0ee1\u0ee4\u0eea\u0eed\u0eef"+
		"\u0ef4\u0f00\u0f09\u0f16\u0f19\u0f1e\u0f25\u0f29\u0f2c\u0f32\u0f40\u0f47"+
		"\u0f50\u0f56\u0f5f\u0f63\u0f67\u0f71\u0f73\u0f7b\u0f82\u0f87\u0f8a\u0f8e"+
		"\u0f91\u0f97\u0f9a\u0f9d\u0fa3\u0faa\u0faf\u0fb3\u0fb6\u0fb9\u0fbc\u0fbe"+
		"\u0fc2\u0fc9\u0fcf\u0fd3\u0fd8\u0fdb\u0fde\u0fe1\u0fe3\u0fe8\u0ff1\u0ffa"+
		"\u0ffe\u1004\u1007\u100a\u1010\u1017\u1019\u1021\u1027\u1029\u1033\u1035"+
		"\u1040\u1046\u104d\u1055\u1059\u105d\u1060\u1062\u106a\u1073\u107c\u1083"+
		"\u108a\u110d\u1143\u114a\u114e\u115e\u116a\u116d\u1179\u117d\u1183\u118a"+
		"\u1191\u1198\u119f\u11a6\u11ad\u11b0\u11b7\u11bf\u11c7\u11d1\u11d7\u11db"+
		"\u11de\u11e1\u11e4\u11e7\u11ea\u11ef\u11f2\u11f9\u11ff\u1217\u121e\u1221"+
		"\u122a\u1230\u1245\u124b\u1251\u1258\u1260\u1266\u1272\u1274\u127a\u127e"+
		"\u1280\u1284\u128f\u1294\u129a\u12a1\u12a4\u12a7\u12ad\u12af\u12b7\u12ba"+
		"\u12bc\u12be\u12c5\u12d0\u12d3\u12d5\u12d9\u12de\u12e0\u12e5\u12eb\u12ee"+
		"\u12f0\u12f4\u12f7\u1300\u1309\u130f\u1311\u1313\u131c\u1320\u1326\u1329"+
		"\u132b\u1336\u133b\u1340\u1346\u1348\u134c\u134e\u1356\u135a\u135f\u1362"+
		"\u1367\u136c\u1372\u137b\u1386\u1388\u1394\u1399\u13a1\u13a7\u13a9\u13b0"+
		"\u13b2\u13b9\u13be\u13c9\u13ce\u13d0\u13d4\u13da\u13dd\u13e0\u13ea\u13ec"+
		"\u13f2\u13ff\u1403\u1408\u1419\u141f\u1428\u1430\u1434\u143a\u1444\u1448"+
		"\u1451\u1456\u145c\u145e\u1462\u146d\u1474\u147a\u147e\u1483\u1488\u1490"+
		"\u1494\u1499\u14a2\u14af\u14b1\u14bf\u14c8\u14ca\u14d1\u14d6\u14da\u14df"+
		"\u14e7\u14ee\u14f2\u14f8\u14ff\u1502\u1509\u150c\u1512\u1523\u1528\u1535"+
		"\u1538\u1543\u1545\u154b\u1559\u156a\u156f\u1572\u1576\u1579\u1581\u1587"+
		"\u158c\u158f\u1591\u1595\u159a\u159c\u15a8\u15ae\u15bc\u15c8\u15cc\u15ce"+
		"\u15d6\u15da\u15e3\u15f0\u15f5\u15f9\u15fd\u1600\u1604\u1608\u160b\u1610"+
		"\u1613\u1619\u161c\u1622\u1625\u1640\u1646\u1649\u1659\u1660\u1664\u1667"+
		"\u166a\u1671\u1675\u1678\u167b\u167f\u1685\u1688\u168c\u16a1\u16a6\u16ae"+
		"\u16b3\u16b6\u16ba\u16be\u16c2\u16c8\u16cc\u16d1\u16d6\u16e1\u16e3\u16e9"+
		"\u16ff\u1715\u171c\u1737\u1739\u173d\u1749\u1753\u175d\u1761\u1769\u176c"+
		"\u1770\u1779\u177d\u1784\u1789\u1791\u1796\u179c\u17a3\u17a8\u17ae\u17b1"+
		"\u17bb\u17bd\u17c4\u17c9\u17cd\u17d0\u17d7\u17dc\u17e0\u17eb\u17f3\u17f7"+
		"\u17fa\u17fd\u1801\u1805\u180a\u1810\u1814\u181f\u1822\u1825\u1828\u1830"+
		"\u1834\u1839\u1841\u1849\u184f\u1853\u1859\u1862\u186d\u1877\u1889\u188c"+
		"\u1890\u189b\u189d\u18a6\u18b2\u18b4\u18bb\u18c1\u18c7\u18cf\u18da\u18de"+
		"\u18fb\u18fd\u1903\u1914\u191b\u1929\u1934\u1939\u1944\u194e\u1955\u1958"+
		"\u197a\u1982\u1984\u198e\u1993\u1998\u199f\u19a5\u19aa\u19af\u19b5\u19b9"+
		"\u19be\u19c3\u19ca\u19d2\u19d7\u19db\u19df\u19e3\u19e5\u19f7\u19ff\u1a03"+
		"\u1a0a\u1a16\u1a19\u1a1d\u1a25\u1a31\u1a38\u1a3c\u1a40\u1a46\u1a50\u1a59"+
		"\u1a5b\u1a5e\u1a67\u1a6e\u1a7b\u1a80\u1a87\u1a8d\u1aa7\u1ab1\u1ad1\u1ae4"+
		"\u1aea\u1aee\u1b0d\u1b13\u1b1f\u1b2c\u1b30\u1b34\u1b50\u1b82\u1b8c\u1b98"+
		"\u1b9d\u1ba5\u1bb9\u1bbd\u1bcd\u1bd0\u1bd5\u1bd8\u1be1\u1be5\u1beb\u1bf1"+
		"\u1bf5\u1c00\u1c06\u1c08\u1c0f\u1c16\u1c1a\u1c21\u1c26\u1c2b\u1c34\u1c37"+
		"\u1c3b\u1c40\u1c42\u1c46\u1c4a\u1c57\u1c5b\u1c5e\u1c62\u1c66\u1c6a\u1c71"+
		"\u1c75\u1c79\u1c81\u1c85\u1c8c\u1c92\u1c9a\u1caf\u1cb4\u1cbb\u1cd1\u1ce1"+
		"\u1ceb\u1cef\u1cf6\u1cf9\u1d04\u1d0d\u1d10\u1d17\u1d1c\u1d36\u1d3c\u1d42"+
		"\u1d46\u1d50\u1d54\u1d61\u1d6d\u1d7d\u1d85\u1d8f\u1d92\u1d97\u1d9b\u1da2"+
		"\u1da7\u1dae\u1db6\u1db9\u1dbe\u1dc6\u1dc9\u1dd7\u1dda\u1de7\u1deb\u1ded"+
		"\u1df2\u1df7\u1dfe\u1e04\u1e0a\u1e0f\u1e12\u1e18\u1e1d\u1e20\u1e26\u1e2a"+
		"\u1e30\u1e32\u1e35\u1e3b\u1e41\u1e48\u1e4a\u1e4c\u1e50\u1e56\u1e5a\u1e5e"+
		"\u1e63\u1e68\u1e6b\u1e6e\u1e78\u1e7e\u1e85\u1e8a\u1e97\u1e9f\u1ea5\u1eaa"+
		"\u1eb5\u1eb9\u1ebe\u1ec2\u1ec5\u1eca\u1ece\u1ed6\u1ede\u1ee0\u1ee9\u1ef1"+
		"\u1ef8\u1efb\u1f03\u1f0c\u1f0e\u1f14\u1f18\u1f21\u1f27\u1f2a\u1f35\u1f3e"+
		"\u1f41\u1f46\u1f48\u1f4b\u1f4e\u1f52\u1f55\u1f59\u1f5e\u1f61\u1f65\u1f68"+
		"\u1f6c\u1f71\u1f75\u1f81\u1f85\u1f8b\u1f8e\u1f93\u1f97\u1f9b\u1fa0\u1fa9"+
		"\u1fac\u1fb0\u1fb4\u1fb7\u1fbb\u1fbf\u1fc4\u1fc9\u1fce\u1fd3\u1fd8\u1fda"+
		"\u1fdf\u1fe6\u1fee\u1ff4\u1ff6\u1ffa\u1ffe\u2002\u2006\u2015\u201b\u2022"+
		"\u2026\u202b\u2030\u2033\u2037\u203a\u203f\u2043\u2049\u204d\u2051\u2056"+
		"\u205b\u2060\u2065\u206a\u206f\u2074\u2079\u207e\u2083\u2088\u208d\u2092"+
		"\u209c\u20a2\u20a8\u20ad\u20b4\u20b9\u20c2\u20c8\u20cd\u20d1\u20d4\u20d8"+
		"\u20dd\u20e1\u20e6\u20ea\u20f3\u20f6\u20f9\u20fc\u2100\u2104\u2108\u2117"+
		"\u211a\u211c\u2121\u212a\u212d\u2131\u213d\u2149\u214e\u2153\u215c\u2161"+
		"\u216a\u216f\u2173\u2177\u217b\u2180\u2185\u218b\u2190\u2193\u219a\u21a3"+
		"\u21aa\u21bb\u21bd\u21c8\u21d4\u21e1\u21e9\u21f0\u21f9\u21ff\u2207\u220d"+
		"\u2218\u2220\u2226\u222a\u222d\u2233\u223b\u2262\u227b\u2285\u228a\u228c"+
		"\u2293\u229f\u22a1\u22ad\u22b6\u22c1\u22d7\u22db\u22f3\u22fe\u2300\u2304"+
		"\u230b\u2313\u231a\u2320\u232d\u2331\u2338\u2341\u2346\u2348\u2358\u235f"+
		"\u2364\u236c\u236f\u2374\u237e\u2386\u238b\u2390\u2393\u2397\u239c\u23a6"+
		"\u23ac\u23ba\u23be\u23ca\u23ce\u23d2\u23d6\u23e5\u23f3\u23fa\u23fc\u240d"+
		"\u2412\u2414\u241d\u2422\u2427\u2429\u242f\u2438";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}